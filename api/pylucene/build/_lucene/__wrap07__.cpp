#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *StatePair::class$ = NULL;
          jmethodID *StatePair::mids$ = NULL;
          bool StatePair::live$ = false;

          jclass StatePair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/StatePair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StatePair::StatePair(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          jboolean StatePair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint StatePair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String StatePair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args);
          static PyObject *t_StatePair_toString(t_StatePair *self, PyObject *args);

          static PyMethodDef t_StatePair__methods_[] = {
            DECLARE_METHOD(t_StatePair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StatePair, equals, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_StatePair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StatePair)[] = {
            { Py_tp_methods, t_StatePair__methods_ },
            { Py_tp_init, (void *) t_StatePair_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StatePair)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StatePair, t_StatePair, StatePair);

          void t_StatePair::install(PyObject *module)
          {
            installType(&PY_TYPE(StatePair), &PY_TYPE_DEF(StatePair), module, "StatePair", 0);
          }

          void t_StatePair::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StatePair), "class_", make_descriptor(StatePair::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StatePair), "wrapfn_", make_descriptor(t_StatePair::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StatePair), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StatePair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StatePair::initializeClass, 1)))
              return NULL;
            return t_StatePair::wrap_Object(StatePair(((t_StatePair *) arg)->object.this$));
          }
          static PyObject *t_StatePair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StatePair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StatePair_init_(t_StatePair *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            StatePair object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = StatePair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StatePair_equals(t_StatePair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(StatePair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_StatePair_hashCode(t_StatePair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(StatePair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_StatePair_toString(t_StatePair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(StatePair), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$StringSorter.h"
#include "org/apache/lucene/index/IndexSorter$SortedDocValuesProvider.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$StringSorter::class$ = NULL;
        jmethodID *IndexSorter$StringSorter::mids$ = NULL;
        bool IndexSorter$StringSorter::live$ = false;

        jclass IndexSorter$StringSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$StringSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_97205342a0e374e3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Object;ZLorg/apache/lucene/index/IndexSorter$SortedDocValuesProvider;)V");
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSorter$StringSorter::IndexSorter$StringSorter(const ::java::lang::String & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::index::IndexSorter$SortedDocValuesProvider & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97205342a0e374e3, a0.this$, a1.this$, a2, a3.this$)) {}

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter$StringSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter$StringSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter$StringSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$StringSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$StringSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSorter$StringSorter_init_(t_IndexSorter$StringSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSorter$StringSorter_getComparableProviders(t_IndexSorter$StringSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter$StringSorter_getDocComparator(t_IndexSorter$StringSorter *self, PyObject *args);
        static PyObject *t_IndexSorter$StringSorter_getProviderName(t_IndexSorter$StringSorter *self);
        static PyObject *t_IndexSorter$StringSorter_get__providerName(t_IndexSorter$StringSorter *self, void *data);
        static PyGetSetDef t_IndexSorter$StringSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter$StringSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter$StringSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$StringSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$StringSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$StringSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter$StringSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter$StringSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$StringSorter)[] = {
          { Py_tp_methods, t_IndexSorter$StringSorter__methods_ },
          { Py_tp_init, (void *) t_IndexSorter$StringSorter_init_ },
          { Py_tp_getset, t_IndexSorter$StringSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$StringSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$StringSorter, t_IndexSorter$StringSorter, IndexSorter$StringSorter);

        void t_IndexSorter$StringSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$StringSorter), &PY_TYPE_DEF(IndexSorter$StringSorter), module, "IndexSorter$StringSorter", 0);
        }

        void t_IndexSorter$StringSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$StringSorter), "class_", make_descriptor(IndexSorter$StringSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$StringSorter), "wrapfn_", make_descriptor(t_IndexSorter$StringSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$StringSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$StringSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$StringSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$StringSorter::wrap_Object(IndexSorter$StringSorter(((t_IndexSorter$StringSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$StringSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$StringSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSorter$StringSorter_init_(t_IndexSorter$StringSorter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::IndexSorter$SortedDocValuesProvider a3((jobject) NULL);
          IndexSorter$StringSorter object((jobject) NULL);

          if (!parseArgs(args, "soZk", ::org::apache::lucene::index::IndexSorter$SortedDocValuesProvider::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSorter$StringSorter(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSorter$StringSorter_getComparableProviders(t_IndexSorter$StringSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter$StringSorter_getDocComparator(t_IndexSorter$StringSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter$StringSorter_getProviderName(t_IndexSorter$StringSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter$StringSorter_get__providerName(t_IndexSorter$StringSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedThreadFactory.h"
#include "java/lang/Class.h"
#include "java/lang/Runnable.h"
#include "java/lang/String.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedThreadFactory::class$ = NULL;
        jmethodID *NamedThreadFactory::mids$ = NULL;
        bool NamedThreadFactory::live$ = false;

        jclass NamedThreadFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedThreadFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_newThread_2808e07b368f4be8] = env->getMethodID(cls, "newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedThreadFactory::NamedThreadFactory(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::java::lang::Thread NamedThreadFactory::newThread(const ::java::lang::Runnable & a0) const
        {
          return ::java::lang::Thread(env->callObjectMethod(this$, mids$[mid_newThread_2808e07b368f4be8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg);

        static PyMethodDef t_NamedThreadFactory__methods_[] = {
          DECLARE_METHOD(t_NamedThreadFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, newThread, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NamedThreadFactory)[] = {
          { Py_tp_methods, t_NamedThreadFactory__methods_ },
          { Py_tp_init, (void *) t_NamedThreadFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NamedThreadFactory)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NamedThreadFactory, t_NamedThreadFactory, NamedThreadFactory);

        void t_NamedThreadFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedThreadFactory), &PY_TYPE_DEF(NamedThreadFactory), module, "NamedThreadFactory", 0);
        }

        void t_NamedThreadFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedThreadFactory), "class_", make_descriptor(NamedThreadFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedThreadFactory), "wrapfn_", make_descriptor(t_NamedThreadFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedThreadFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedThreadFactory::initializeClass, 1)))
            return NULL;
          return t_NamedThreadFactory::wrap_Object(NamedThreadFactory(((t_NamedThreadFactory *) arg)->object.this$));
        }
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedThreadFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NamedThreadFactory object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NamedThreadFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg)
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::Thread result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newThread(a0));
            return ::java::lang::t_Thread::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newThread", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/NoSuchElementException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *NoSuchElementException::class$ = NULL;
    jmethodID *NoSuchElementException::mids$ = NULL;
    bool NoSuchElementException::live$ = false;

    jclass NoSuchElementException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/NoSuchElementException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    NoSuchElementException::NoSuchElementException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    NoSuchElementException::NoSuchElementException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_NoSuchElementException__methods_[] = {
      DECLARE_METHOD(t_NoSuchElementException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NoSuchElementException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(NoSuchElementException)[] = {
      { Py_tp_methods, t_NoSuchElementException__methods_ },
      { Py_tp_init, (void *) t_NoSuchElementException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(NoSuchElementException)[] = {
      &PY_TYPE_DEF(::java::lang::RuntimeException),
      NULL
    };

    DEFINE_TYPE(NoSuchElementException, t_NoSuchElementException, NoSuchElementException);

    void t_NoSuchElementException::install(PyObject *module)
    {
      installType(&PY_TYPE(NoSuchElementException), &PY_TYPE_DEF(NoSuchElementException), module, "NoSuchElementException", 0);
    }

    void t_NoSuchElementException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(NoSuchElementException), "class_", make_descriptor(NoSuchElementException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(NoSuchElementException), "wrapfn_", make_descriptor(t_NoSuchElementException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(NoSuchElementException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NoSuchElementException::initializeClass, 1)))
        return NULL;
      return t_NoSuchElementException::wrap_Object(NoSuchElementException(((t_NoSuchElementException *) arg)->object.this$));
    }
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NoSuchElementException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NoSuchElementException object((jobject) NULL);

          INT_CALL(object = NoSuchElementException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchElementException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchElementException(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BoolFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BoolFunction::class$ = NULL;
            jmethodID *BoolFunction::mids$ = NULL;
            bool BoolFunction::live$ = false;

            jclass BoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolFunction::BoolFunction() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoolFunction__methods_[] = {
              DECLARE_METHOD(t_BoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BoolFunction)[] = {
              { Py_tp_methods, t_BoolFunction__methods_ },
              { Py_tp_init, (void *) t_BoolFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BoolFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(BoolFunction, t_BoolFunction, BoolFunction);

            void t_BoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolFunction), &PY_TYPE_DEF(BoolFunction), module, "BoolFunction", 0);
            }

            void t_BoolFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolFunction), "class_", make_descriptor(BoolFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolFunction), "wrapfn_", make_descriptor(t_BoolFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolFunction::initializeClass, 1)))
                return NULL;
              return t_BoolFunction::wrap_Object(BoolFunction(((t_BoolFunction *) arg)->object.this$));
            }
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds)
            {
              BoolFunction object((jobject) NULL);

              INT_CALL(object = BoolFunction());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *BlockGroupingCollector::class$ = NULL;
          jmethodID *BlockGroupingCollector::mids$ = NULL;
          bool BlockGroupingCollector::live$ = false;

          jclass BlockGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/BlockGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_195ccc6c3cca6472] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZLorg/apache/lucene/search/Weight;)V");
              mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_a7b25127482cce8d] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/Sort;III)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockGroupingCollector::BlockGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::Weight & a3) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_195ccc6c3cca6472, a0.this$, a1, a2, a3.this$)) {}

          void BlockGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups BlockGroupingCollector::getTopGroups(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_a7b25127482cce8d], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::search::ScoreMode BlockGroupingCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void BlockGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_scoreMode(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args);
          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_BlockGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_BlockGroupingCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_BlockGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockGroupingCollector)[] = {
            { Py_tp_methods, t_BlockGroupingCollector__methods_ },
            { Py_tp_init, (void *) t_BlockGroupingCollector_init_ },
            { Py_tp_getset, t_BlockGroupingCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockGroupingCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(BlockGroupingCollector, t_BlockGroupingCollector, BlockGroupingCollector);

          void t_BlockGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockGroupingCollector), &PY_TYPE_DEF(BlockGroupingCollector), module, "BlockGroupingCollector", 0);
          }

          void t_BlockGroupingCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockGroupingCollector), "class_", make_descriptor(BlockGroupingCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockGroupingCollector), "wrapfn_", make_descriptor(t_BlockGroupingCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockGroupingCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_BlockGroupingCollector::wrap_Object(BlockGroupingCollector(((t_BlockGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::Weight a3((jobject) NULL);
            BlockGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZk", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockGroupingCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kIII", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_BlockGroupingCollector_scoreMode(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockGroupingCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace graph {

          ::java::lang::Class *GraphTokenStreamFiniteStrings::class$ = NULL;
          jmethodID *GraphTokenStreamFiniteStrings::mids$ = NULL;
          bool GraphTokenStreamFiniteStrings::live$ = false;

          jclass GraphTokenStreamFiniteStrings::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/graph/GraphTokenStreamFiniteStrings");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_articulationPoints_d2c45ef07a322466] = env->getMethodID(cls, "articulationPoints", "()[I");
              mids$[mid_getFiniteStrings_233a192dadb0917d] = env->getMethodID(cls, "getFiniteStrings", "()Ljava/util/Iterator;");
              mids$[mid_getFiniteStrings_90f1f3261af36bb3] = env->getMethodID(cls, "getFiniteStrings", "(II)Ljava/util/Iterator;");
              mids$[mid_getTerms_d82aee015ceb4d93] = env->getMethodID(cls, "getTerms", "(I)Ljava/util/List;");
              mids$[mid_getTerms_1cc54f827c6ca728] = env->getMethodID(cls, "getTerms", "(Ljava/lang/String;I)[Lorg/apache/lucene/index/Term;");
              mids$[mid_hasSidePath_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasSidePath", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GraphTokenStreamFiniteStrings::GraphTokenStreamFiniteStrings(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          JArray< jint > GraphTokenStreamFiniteStrings::articulationPoints() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_articulationPoints_d2c45ef07a322466]));
          }

          ::java::util::Iterator GraphTokenStreamFiniteStrings::getFiniteStrings() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getFiniteStrings_233a192dadb0917d]));
          }

          ::java::util::Iterator GraphTokenStreamFiniteStrings::getFiniteStrings(jint a0, jint a1) const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getFiniteStrings_90f1f3261af36bb3], a0, a1));
          }

          ::java::util::List GraphTokenStreamFiniteStrings::getTerms(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTerms_d82aee015ceb4d93], a0));
          }

          JArray< ::org::apache::lucene::index::Term > GraphTokenStreamFiniteStrings::getTerms(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_1cc54f827c6ca728], a0.this$, a1));
          }

          jboolean GraphTokenStreamFiniteStrings::hasSidePath(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasSidePath_a1d30e1ee40c89a2], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace graph {
          static PyObject *t_GraphTokenStreamFiniteStrings_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GraphTokenStreamFiniteStrings_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GraphTokenStreamFiniteStrings_init_(t_GraphTokenStreamFiniteStrings *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GraphTokenStreamFiniteStrings_articulationPoints(t_GraphTokenStreamFiniteStrings *self);
          static PyObject *t_GraphTokenStreamFiniteStrings_getFiniteStrings(t_GraphTokenStreamFiniteStrings *self, PyObject *args);
          static PyObject *t_GraphTokenStreamFiniteStrings_getTerms(t_GraphTokenStreamFiniteStrings *self, PyObject *args);
          static PyObject *t_GraphTokenStreamFiniteStrings_hasSidePath(t_GraphTokenStreamFiniteStrings *self, PyObject *arg);
          static PyObject *t_GraphTokenStreamFiniteStrings_get__finiteStrings(t_GraphTokenStreamFiniteStrings *self, void *data);
          static PyGetSetDef t_GraphTokenStreamFiniteStrings__fields_[] = {
            DECLARE_GET_FIELD(t_GraphTokenStreamFiniteStrings, finiteStrings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GraphTokenStreamFiniteStrings__methods_[] = {
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, articulationPoints, METH_NOARGS),
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, getFiniteStrings, METH_VARARGS),
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, getTerms, METH_VARARGS),
            DECLARE_METHOD(t_GraphTokenStreamFiniteStrings, hasSidePath, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GraphTokenStreamFiniteStrings)[] = {
            { Py_tp_methods, t_GraphTokenStreamFiniteStrings__methods_ },
            { Py_tp_init, (void *) t_GraphTokenStreamFiniteStrings_init_ },
            { Py_tp_getset, t_GraphTokenStreamFiniteStrings__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GraphTokenStreamFiniteStrings)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GraphTokenStreamFiniteStrings, t_GraphTokenStreamFiniteStrings, GraphTokenStreamFiniteStrings);

          void t_GraphTokenStreamFiniteStrings::install(PyObject *module)
          {
            installType(&PY_TYPE(GraphTokenStreamFiniteStrings), &PY_TYPE_DEF(GraphTokenStreamFiniteStrings), module, "GraphTokenStreamFiniteStrings", 0);
          }

          void t_GraphTokenStreamFiniteStrings::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenStreamFiniteStrings), "class_", make_descriptor(GraphTokenStreamFiniteStrings::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenStreamFiniteStrings), "wrapfn_", make_descriptor(t_GraphTokenStreamFiniteStrings::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenStreamFiniteStrings), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GraphTokenStreamFiniteStrings::initializeClass, 1)))
              return NULL;
            return t_GraphTokenStreamFiniteStrings::wrap_Object(GraphTokenStreamFiniteStrings(((t_GraphTokenStreamFiniteStrings *) arg)->object.this$));
          }
          static PyObject *t_GraphTokenStreamFiniteStrings_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GraphTokenStreamFiniteStrings::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GraphTokenStreamFiniteStrings_init_(t_GraphTokenStreamFiniteStrings *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GraphTokenStreamFiniteStrings object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GraphTokenStreamFiniteStrings(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_articulationPoints(t_GraphTokenStreamFiniteStrings *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.articulationPoints());
            return result.wrap();
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_getFiniteStrings(t_GraphTokenStreamFiniteStrings *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.getFiniteStrings());
                return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::analysis::PY_TYPE(TokenStream));
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                ::java::util::Iterator result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFiniteStrings(a0, a1));
                  return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::analysis::PY_TYPE(TokenStream));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFiniteStrings", args);
            return NULL;
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_getTerms(t_GraphTokenStreamFiniteStrings *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getTerms(a0));
                  return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(AttributeSource));
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getTerms", args);
            return NULL;
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_hasSidePath(t_GraphTokenStreamFiniteStrings *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.hasSidePath(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "hasSidePath", arg);
            return NULL;
          }

          static PyObject *t_GraphTokenStreamFiniteStrings_get__finiteStrings(t_GraphTokenStreamFiniteStrings *self, void *data)
          {
            ::java::util::Iterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getFiniteStrings());
            return ::java::util::t_Iterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InMemorySorter::class$ = NULL;
          jmethodID *InMemorySorter::mids$ = NULL;
          bool InMemorySorter::live$ = false;

          jclass InMemorySorter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InMemorySorter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4703504c5d45d50f] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
              mids$[mid_add_0bdfd2603b7490a8] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_iterator_5416289139cf0b84] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InMemorySorter::InMemorySorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4703504c5d45d50f, a0.this$)) {}

          void InMemorySorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0bdfd2603b7490a8], a0.this$);
          }

          ::java::util::Comparator InMemorySorter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
          }

          ::org::apache::lucene::util::BytesRefIterator InMemorySorter::iterator() const
          {
            return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_5416289139cf0b84]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg);
          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data);
          static PyGetSetDef t_InMemorySorter__fields_[] = {
            DECLARE_GET_FIELD(t_InMemorySorter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InMemorySorter__methods_[] = {
            DECLARE_METHOD(t_InMemorySorter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, add, METH_O),
            DECLARE_METHOD(t_InMemorySorter, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InMemorySorter, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(InMemorySorter)[] = {
            { Py_tp_methods, t_InMemorySorter__methods_ },
            { Py_tp_init, (void *) t_InMemorySorter_init_ },
            { Py_tp_getset, t_InMemorySorter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(InMemorySorter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(InMemorySorter, t_InMemorySorter, InMemorySorter);

          void t_InMemorySorter::install(PyObject *module)
          {
            installType(&PY_TYPE(InMemorySorter), &PY_TYPE_DEF(InMemorySorter), module, "InMemorySorter", 0);
          }

          void t_InMemorySorter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(InMemorySorter), "class_", make_descriptor(InMemorySorter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InMemorySorter), "wrapfn_", make_descriptor(t_InMemorySorter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InMemorySorter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InMemorySorter::initializeClass, 1)))
              return NULL;
            return t_InMemorySorter::wrap_Object(InMemorySorter(((t_InMemorySorter *) arg)->object.this$));
          }
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InMemorySorter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;
            InMemorySorter object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = InMemorySorter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self)
          {
            ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
          }

          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PostingsEnum::class$ = NULL;
        jmethodID *PostingsEnum::mids$ = NULL;
        bool PostingsEnum::live$ = false;
        jshort PostingsEnum::ALL = (jshort) 0;
        jshort PostingsEnum::FREQS = (jshort) 0;
        jshort PostingsEnum::NONE = (jshort) 0;
        jshort PostingsEnum::OFFSETS = (jshort) 0;
        jshort PostingsEnum::PAYLOADS = (jshort) 0;
        jshort PostingsEnum::POSITIONS = (jshort) 0;

        jclass PostingsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PostingsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_featureRequested_dcd74565058a1be4] = env->getStaticMethodID(cls, "featureRequested", "(IS)Z");
            mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            ALL = env->getStaticShortField(cls, "ALL");
            FREQS = env->getStaticShortField(cls, "FREQS");
            NONE = env->getStaticShortField(cls, "NONE");
            OFFSETS = env->getStaticShortField(cls, "OFFSETS");
            PAYLOADS = env->getStaticShortField(cls, "PAYLOADS");
            POSITIONS = env->getStaticShortField(cls, "POSITIONS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint PostingsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jboolean PostingsEnum::featureRequested(jint a0, jshort a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_featureRequested_dcd74565058a1be4], a0, a1);
        }

        jint PostingsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef PostingsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
        }

        jint PostingsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_9972fcc56b44e79d]);
        }

        jint PostingsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PostingsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsEnum_endOffset(t_PostingsEnum *self);
        static PyObject *t_PostingsEnum_featureRequested(PyTypeObject *type, PyObject *args);
        static PyObject *t_PostingsEnum_freq(t_PostingsEnum *self);
        static PyObject *t_PostingsEnum_getPayload(t_PostingsEnum *self);
        static PyObject *t_PostingsEnum_nextPosition(t_PostingsEnum *self);
        static PyObject *t_PostingsEnum_startOffset(t_PostingsEnum *self);
        static PyObject *t_PostingsEnum_get__payload(t_PostingsEnum *self, void *data);
        static PyGetSetDef t_PostingsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsEnum__methods_[] = {
          DECLARE_METHOD(t_PostingsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsEnum, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_PostingsEnum, featureRequested, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsEnum, freq, METH_NOARGS),
          DECLARE_METHOD(t_PostingsEnum, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_PostingsEnum, nextPosition, METH_NOARGS),
          DECLARE_METHOD(t_PostingsEnum, startOffset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PostingsEnum)[] = {
          { Py_tp_methods, t_PostingsEnum__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PostingsEnum__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PostingsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(PostingsEnum, t_PostingsEnum, PostingsEnum);

        void t_PostingsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsEnum), &PY_TYPE_DEF(PostingsEnum), module, "PostingsEnum", 0);
        }

        void t_PostingsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "class_", make_descriptor(PostingsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "wrapfn_", make_descriptor(t_PostingsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsEnum::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "ALL", make_descriptor(PostingsEnum::ALL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "FREQS", make_descriptor(PostingsEnum::FREQS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "NONE", make_descriptor(PostingsEnum::NONE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "OFFSETS", make_descriptor(PostingsEnum::OFFSETS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "PAYLOADS", make_descriptor(PostingsEnum::PAYLOADS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsEnum), "POSITIONS", make_descriptor(PostingsEnum::POSITIONS));
        }

        static PyObject *t_PostingsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsEnum::initializeClass, 1)))
            return NULL;
          return t_PostingsEnum::wrap_Object(PostingsEnum(((t_PostingsEnum *) arg)->object.this$));
        }
        static PyObject *t_PostingsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsEnum_endOffset(t_PostingsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PostingsEnum_featureRequested(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jshort a1;
          jboolean result;

          if (!parseArgs(args, "IS", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PostingsEnum::featureRequested(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "featureRequested", args);
          return NULL;
        }

        static PyObject *t_PostingsEnum_freq(t_PostingsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.freq());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PostingsEnum_getPayload(t_PostingsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_PostingsEnum_nextPosition(t_PostingsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PostingsEnum_startOffset(t_PostingsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PostingsEnum_get__payload(t_PostingsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$BytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$BytesStartArray::mids$ = NULL;
        bool BytesRefHash$BytesStartArray::live$ = false;

        jclass BytesRefHash$BytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$BytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bytesUsed_9a5efba60e88cd95] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_d2c45ef07a322466] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_d2c45ef07a322466] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_d2c45ef07a322466] = env->getMethodID(cls, "init", "()[I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$BytesStartArray::BytesRefHash$BytesStartArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$BytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_9a5efba60e88cd95]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_d2c45ef07a322466]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_d2c45ef07a322466]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_d2c45ef07a322466]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self);

        static PyMethodDef t_BytesRefHash$BytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, grow, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, init, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefHash$BytesStartArray)[] = {
          { Py_tp_methods, t_BytesRefHash$BytesStartArray__methods_ },
          { Py_tp_init, (void *) t_BytesRefHash$BytesStartArray_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefHash$BytesStartArray)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray, BytesRefHash$BytesStartArray);

        void t_BytesRefHash$BytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$BytesStartArray), &PY_TYPE_DEF(BytesRefHash$BytesStartArray), module, "BytesRefHash$BytesStartArray", 0);
        }

        void t_BytesRefHash$BytesStartArray::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$BytesStartArray), "class_", make_descriptor(BytesRefHash$BytesStartArray::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$BytesStartArray), "wrapfn_", make_descriptor(t_BytesRefHash$BytesStartArray::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$BytesStartArray), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$BytesStartArray::wrap_Object(BytesRefHash$BytesStartArray(((t_BytesRefHash$BytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          BytesRefHash$BytesStartArray object((jobject) NULL);

          INT_CALL(object = BytesRefHash$BytesStartArray());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = self->object.bytesUsed());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.clear());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.grow());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.init());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilterFactory::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilterFactory::mids$ = NULL;
          bool ScandinavianNormalizationFilterFactory::live$ = false;
          ::java::lang::String *ScandinavianNormalizationFilterFactory::NAME = NULL;

          jclass ScandinavianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ae635f5a19900f45] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilterFactory::ScandinavianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter ScandinavianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_ae635f5a19900f45], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream ScandinavianNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ScandinavianNormalizationFilterFactory_normalize(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScandinavianNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_ScandinavianNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ScandinavianNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScandinavianNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory, ScandinavianNormalizationFilterFactory);

          void t_ScandinavianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilterFactory), &PY_TYPE_DEF(ScandinavianNormalizationFilterFactory), module, "ScandinavianNormalizationFilterFactory", 0);
          }

          void t_ScandinavianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilterFactory), "class_", make_descriptor(ScandinavianNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilterFactory), "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ScandinavianNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilterFactory), "NAME", make_descriptor(j2p(*ScandinavianNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilterFactory::wrap_Object(ScandinavianNormalizationFilterFactory(((t_ScandinavianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_normalize(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "java/lang/Class.h"
#include "java/util/Iterator.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/SPIClassIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SPIClassIterator::class$ = NULL;
        jmethodID *SPIClassIterator::mids$ = NULL;
        bool SPIClassIterator::live$ = false;

        jclass SPIClassIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SPIClassIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_4ff5e6adf6738825] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_get_cad4e178fb1d5c43] = env->getStaticMethodID(cls, "get", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Lorg/apache/lucene/util/SPIClassIterator;");
            mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_isParentClassLoader_77c23c4ebc88f55a] = env->getStaticMethodID(cls, "isParentClassLoader", "(Ljava/lang/ClassLoader;Ljava/lang/ClassLoader;)Z");
            mids$[mid_next_9df2cc6ebce035fe] = env->getMethodID(cls, "next", "()Ljava/lang/Class;");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_4ff5e6adf6738825], a0.this$));
        }

        SPIClassIterator SPIClassIterator::get(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SPIClassIterator(env->callStaticObjectMethod(cls, mids$[mid_get_cad4e178fb1d5c43], a0.this$, a1.this$));
        }

        jboolean SPIClassIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
        }

        jboolean SPIClassIterator::isParentClassLoader(const ::java::lang::ClassLoader & a0, const ::java::lang::ClassLoader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isParentClassLoader_77c23c4ebc88f55a], a0.this$, a1.this$);
        }

        ::java::lang::Class SPIClassIterator::next() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_next_9df2cc6ebce035fe]));
        }

        void SPIClassIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args);
        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args);
        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self);
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data);
        static PyGetSetDef t_SPIClassIterator__fields_[] = {
          DECLARE_GET_FIELD(t_SPIClassIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SPIClassIterator__methods_[] = {
          DECLARE_METHOD(t_SPIClassIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SPIClassIterator, get, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, isParentClassLoader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SPIClassIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_SPIClassIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SPIClassIterator)[] = {
          { Py_tp_methods, t_SPIClassIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SPIClassIterator__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Class >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SPIClassIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SPIClassIterator, t_SPIClassIterator, SPIClassIterator);
        PyObject *t_SPIClassIterator::wrap_Object(const SPIClassIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SPIClassIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SPIClassIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SPIClassIterator *self = (t_SPIClassIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SPIClassIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(SPIClassIterator), &PY_TYPE_DEF(SPIClassIterator), module, "SPIClassIterator", 0);
        }

        void t_SPIClassIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SPIClassIterator), "class_", make_descriptor(SPIClassIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SPIClassIterator), "wrapfn_", make_descriptor(t_SPIClassIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SPIClassIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SPIClassIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SPIClassIterator::initializeClass, 1)))
            return NULL;
          return t_SPIClassIterator::wrap_Object(SPIClassIterator(((t_SPIClassIterator *) arg)->object.this$));
        }
        static PyObject *t_SPIClassIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SPIClassIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SPIClassIterator_of_(t_SPIClassIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SPIClassIterator_get(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              SPIClassIterator result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::get(a0, a1));
                return t_SPIClassIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "get", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_hasNext(t_SPIClassIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SPIClassIterator_isParentClassLoader(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);
          ::java::lang::ClassLoader a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::java::lang::ClassLoader::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SPIClassIterator::isParentClassLoader(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isParentClassLoader", args);
          return NULL;
        }

        static PyObject *t_SPIClassIterator_next(t_SPIClassIterator *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_SPIClassIterator_remove(t_SPIClassIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_SPIClassIterator_get__parameters_(t_SPIClassIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FuzzyConfig::class$ = NULL;
              jmethodID *FuzzyConfig::mids$ = NULL;
              bool FuzzyConfig::live$ = false;

              jclass FuzzyConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getMinSimilarity_58aec2b64dff50c8] = env->getMethodID(cls, "getMinSimilarity", "()F");
                  mids$[mid_getPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_setMinSimilarity_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinSimilarity", "(F)V");
                  mids$[mid_setPrefixLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPrefixLength", "(I)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyConfig::FuzzyConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              jfloat FuzzyConfig::getMinSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_58aec2b64dff50c8]);
              }

              jint FuzzyConfig::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_9972fcc56b44e79d]);
              }

              void FuzzyConfig::setMinSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setMinSimilarity_8e1d952dd65cdc3a], a0);
              }

              void FuzzyConfig::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_040c4cd0390c5aff], a0);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyConfig, minSimilarity),
                DECLARE_GETSET_FIELD(t_FuzzyConfig, prefixLength),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyConfig__methods_[] = {
                DECLARE_METHOD(t_FuzzyConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, getMinSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, setMinSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyConfig, setPrefixLength, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FuzzyConfig)[] = {
                { Py_tp_methods, t_FuzzyConfig__methods_ },
                { Py_tp_init, (void *) t_FuzzyConfig_init_ },
                { Py_tp_getset, t_FuzzyConfig__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FuzzyConfig)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FuzzyConfig, t_FuzzyConfig, FuzzyConfig);

              void t_FuzzyConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyConfig), &PY_TYPE_DEF(FuzzyConfig), module, "FuzzyConfig", 0);
              }

              void t_FuzzyConfig::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyConfig), "class_", make_descriptor(FuzzyConfig::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyConfig), "wrapfn_", make_descriptor(t_FuzzyConfig::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyConfig), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyConfig::initializeClass, 1)))
                  return NULL;
                return t_FuzzyConfig::wrap_Object(FuzzyConfig(((t_FuzzyConfig *) arg)->object.this$));
              }
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds)
              {
                FuzzyConfig object((jobject) NULL);

                INT_CALL(object = FuzzyConfig());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setMinSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setMinSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setMinSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "minSimilarity", arg);
                return -1;
              }

              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyLong_FromLong((long) value);
              }
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryRangeDocValuesField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryRangeDocValuesField::class$ = NULL;
        jmethodID *BinaryRangeDocValuesField::mids$ = NULL;
        bool BinaryRangeDocValuesField::live$ = false;

        jclass BinaryRangeDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryRangeDocValuesField");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BinaryRangeDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryRangeDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryRangeDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BinaryRangeDocValuesField)[] = {
          { Py_tp_methods, t_BinaryRangeDocValuesField__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BinaryRangeDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::BinaryDocValuesField),
          NULL
        };

        DEFINE_TYPE(BinaryRangeDocValuesField, t_BinaryRangeDocValuesField, BinaryRangeDocValuesField);

        void t_BinaryRangeDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryRangeDocValuesField), &PY_TYPE_DEF(BinaryRangeDocValuesField), module, "BinaryRangeDocValuesField", 0);
        }

        void t_BinaryRangeDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryRangeDocValuesField), "class_", make_descriptor(BinaryRangeDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryRangeDocValuesField), "wrapfn_", make_descriptor(t_BinaryRangeDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryRangeDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryRangeDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryRangeDocValuesField::wrap_Object(BinaryRangeDocValuesField(((t_BinaryRangeDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryRangeDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *VersionBlockTreeTermsWriter::class$ = NULL;
          jmethodID *VersionBlockTreeTermsWriter::mids$ = NULL;
          bool VersionBlockTreeTermsWriter::live$ = false;
          jint VersionBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint VersionBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint VersionBlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint VersionBlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass VersionBlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6610f1188867ac3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VersionBlockTreeTermsWriter::VersionBlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_6610f1188867ac3d, a0.this$, a1.this$, a2, a3)) {}

          void VersionBlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void VersionBlockTreeTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_VersionBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VersionBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VersionBlockTreeTermsWriter_init_(t_VersionBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VersionBlockTreeTermsWriter_close(t_VersionBlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsWriter_write(t_VersionBlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_VersionBlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VersionBlockTreeTermsWriter)[] = {
            { Py_tp_methods, t_VersionBlockTreeTermsWriter__methods_ },
            { Py_tp_init, (void *) t_VersionBlockTreeTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VersionBlockTreeTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(VersionBlockTreeTermsWriter, t_VersionBlockTreeTermsWriter, VersionBlockTreeTermsWriter);

          void t_VersionBlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(VersionBlockTreeTermsWriter), &PY_TYPE_DEF(VersionBlockTreeTermsWriter), module, "VersionBlockTreeTermsWriter", 0);
          }

          void t_VersionBlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "class_", make_descriptor(VersionBlockTreeTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "wrapfn_", make_descriptor(t_VersionBlockTreeTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(VersionBlockTreeTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(VersionBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(VersionBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "VERSION_CURRENT", make_descriptor(VersionBlockTreeTermsWriter::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsWriter), "VERSION_START", make_descriptor(VersionBlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_VersionBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VersionBlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_VersionBlockTreeTermsWriter::wrap_Object(VersionBlockTreeTermsWriter(((t_VersionBlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_VersionBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VersionBlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VersionBlockTreeTermsWriter_init_(t_VersionBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            VersionBlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = VersionBlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VersionBlockTreeTermsWriter_close(t_VersionBlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsWriter_write(t_VersionBlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDConfig::class$ = NULL;
          jmethodID *BKDConfig::mids$ = NULL;
          jfieldID *BKDConfig::fids$ = NULL;
          bool BKDConfig::live$ = false;
          jint BKDConfig::DEFAULT_MAX_POINTS_IN_LEAF_NODE = (jint) 0;
          jint BKDConfig::MAX_DIMS = (jint) 0;
          jint BKDConfig::MAX_INDEX_DIMS = (jint) 0;

          jclass BKDConfig::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDConfig");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_34ab80131650555f] = env->getMethodID(cls, "<init>", "(IIII)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bytesPerDim] = env->getFieldID(cls, "bytesPerDim", "I");
              fids$[fid_bytesPerDoc] = env->getFieldID(cls, "bytesPerDoc", "I");
              fids$[fid_maxPointsInLeafNode] = env->getFieldID(cls, "maxPointsInLeafNode", "I");
              fids$[fid_numDims] = env->getFieldID(cls, "numDims", "I");
              fids$[fid_numIndexDims] = env->getFieldID(cls, "numIndexDims", "I");
              fids$[fid_packedBytesLength] = env->getFieldID(cls, "packedBytesLength", "I");
              fids$[fid_packedIndexBytesLength] = env->getFieldID(cls, "packedIndexBytesLength", "I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_POINTS_IN_LEAF_NODE = env->getStaticIntField(cls, "DEFAULT_MAX_POINTS_IN_LEAF_NODE");
              MAX_DIMS = env->getStaticIntField(cls, "MAX_DIMS");
              MAX_INDEX_DIMS = env->getStaticIntField(cls, "MAX_INDEX_DIMS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDConfig::BKDConfig(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34ab80131650555f, a0, a1, a2, a3)) {}

          jint BKDConfig::_get_bytesPerDim() const
          {
            return env->getIntField(this$, fids$[fid_bytesPerDim]);
          }

          jint BKDConfig::_get_bytesPerDoc() const
          {
            return env->getIntField(this$, fids$[fid_bytesPerDoc]);
          }

          jint BKDConfig::_get_maxPointsInLeafNode() const
          {
            return env->getIntField(this$, fids$[fid_maxPointsInLeafNode]);
          }

          jint BKDConfig::_get_numDims() const
          {
            return env->getIntField(this$, fids$[fid_numDims]);
          }

          jint BKDConfig::_get_numIndexDims() const
          {
            return env->getIntField(this$, fids$[fid_numIndexDims]);
          }

          jint BKDConfig::_get_packedBytesLength() const
          {
            return env->getIntField(this$, fids$[fid_packedBytesLength]);
          }

          jint BKDConfig::_get_packedIndexBytesLength() const
          {
            return env->getIntField(this$, fids$[fid_packedIndexBytesLength]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDConfig_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDConfig_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDConfig_init_(t_BKDConfig *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDConfig_get__bytesPerDim(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__bytesPerDoc(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__maxPointsInLeafNode(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__numDims(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__numIndexDims(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__packedBytesLength(t_BKDConfig *self, void *data);
          static PyObject *t_BKDConfig_get__packedIndexBytesLength(t_BKDConfig *self, void *data);

          static PyGetSetDef t_BKDConfig__fields_[] = {
            DECLARE_GET_FIELD(t_BKDConfig, bytesPerDim),
            DECLARE_GET_FIELD(t_BKDConfig, bytesPerDoc),
            DECLARE_GET_FIELD(t_BKDConfig, maxPointsInLeafNode),
            DECLARE_GET_FIELD(t_BKDConfig, numDims),
            DECLARE_GET_FIELD(t_BKDConfig, numIndexDims),
            DECLARE_GET_FIELD(t_BKDConfig, packedBytesLength),
            DECLARE_GET_FIELD(t_BKDConfig, packedIndexBytesLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BKDConfig__methods_[] = {
            DECLARE_METHOD(t_BKDConfig, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDConfig, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDConfig)[] = {
            { Py_tp_methods, t_BKDConfig__methods_ },
            { Py_tp_init, (void *) t_BKDConfig_init_ },
            { Py_tp_getset, t_BKDConfig__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDConfig)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDConfig, t_BKDConfig, BKDConfig);

          void t_BKDConfig::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDConfig), &PY_TYPE_DEF(BKDConfig), module, "BKDConfig", 0);
          }

          void t_BKDConfig::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "class_", make_descriptor(BKDConfig::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "wrapfn_", make_descriptor(t_BKDConfig::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "boxfn_", make_descriptor(boxObject));
            env->getClass(BKDConfig::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "DEFAULT_MAX_POINTS_IN_LEAF_NODE", make_descriptor(BKDConfig::DEFAULT_MAX_POINTS_IN_LEAF_NODE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "MAX_DIMS", make_descriptor(BKDConfig::MAX_DIMS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDConfig), "MAX_INDEX_DIMS", make_descriptor(BKDConfig::MAX_INDEX_DIMS));
          }

          static PyObject *t_BKDConfig_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDConfig::initializeClass, 1)))
              return NULL;
            return t_BKDConfig::wrap_Object(BKDConfig(((t_BKDConfig *) arg)->object.this$));
          }
          static PyObject *t_BKDConfig_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDConfig::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDConfig_init_(t_BKDConfig *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            BKDConfig object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BKDConfig(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDConfig_get__bytesPerDim(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bytesPerDim());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__bytesPerDoc(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bytesPerDoc());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__maxPointsInLeafNode(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxPointsInLeafNode());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__numDims(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numDims());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__numIndexDims(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numIndexDims());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__packedBytesLength(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_packedBytesLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDConfig_get__packedIndexBytesLength(t_BKDConfig *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_packedIndexBytesLength());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LatLonPointPrototypeQueries.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LatLonPointPrototypeQueries::class$ = NULL;
        jmethodID *LatLonPointPrototypeQueries::mids$ = NULL;
        bool LatLonPointPrototypeQueries::live$ = false;

        jclass LatLonPointPrototypeQueries::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LatLonPointPrototypeQueries");

            mids$ = new jmethodID[max_mid];
            mids$[mid_nearest_681e9dcd3e807c4e] = env->getStaticMethodID(cls, "nearest", "(Lorg/apache/lucene/search/IndexSearcher;Ljava/lang/String;DDI)Lorg/apache/lucene/search/TopFieldDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::TopFieldDocs LatLonPointPrototypeQueries::nearest(const ::org::apache::lucene::search::IndexSearcher & a0, const ::java::lang::String & a1, jdouble a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_nearest_681e9dcd3e807c4e], a0.this$, a1.this$, a2, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LatLonPointPrototypeQueries_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonPointPrototypeQueries_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonPointPrototypeQueries_nearest(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_LatLonPointPrototypeQueries__methods_[] = {
          DECLARE_METHOD(t_LatLonPointPrototypeQueries, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonPointPrototypeQueries, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonPointPrototypeQueries, nearest, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonPointPrototypeQueries)[] = {
          { Py_tp_methods, t_LatLonPointPrototypeQueries__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonPointPrototypeQueries)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LatLonPointPrototypeQueries, t_LatLonPointPrototypeQueries, LatLonPointPrototypeQueries);

        void t_LatLonPointPrototypeQueries::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonPointPrototypeQueries), &PY_TYPE_DEF(LatLonPointPrototypeQueries), module, "LatLonPointPrototypeQueries", 0);
        }

        void t_LatLonPointPrototypeQueries::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPointPrototypeQueries), "class_", make_descriptor(LatLonPointPrototypeQueries::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPointPrototypeQueries), "wrapfn_", make_descriptor(t_LatLonPointPrototypeQueries::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPointPrototypeQueries), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LatLonPointPrototypeQueries_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonPointPrototypeQueries::initializeClass, 1)))
            return NULL;
          return t_LatLonPointPrototypeQueries::wrap_Object(LatLonPointPrototypeQueries(((t_LatLonPointPrototypeQueries *) arg)->object.this$));
        }
        static PyObject *t_LatLonPointPrototypeQueries_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonPointPrototypeQueries::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LatLonPointPrototypeQueries_nearest(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jdouble a2;
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

          if (!parseArgs(args, "ksDDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::LatLonPointPrototypeQueries::nearest(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "nearest", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilterFactory::mids$ = NULL;
          bool DelimitedPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::ENCODER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::NAME = NULL;

          jclass DelimitedPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_491e3dc1f27342a5] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              ENCODER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODER_ATTR", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilterFactory::DelimitedPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter DelimitedPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_491e3dc1f27342a5], a0.this$));
          }

          void DelimitedPayloadTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DelimitedPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedPayloadTokenFilterFactory)[] = {
            { Py_tp_methods, t_DelimitedPayloadTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DelimitedPayloadTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedPayloadTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory, DelimitedPayloadTokenFilterFactory);

          void t_DelimitedPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilterFactory), &PY_TYPE_DEF(DelimitedPayloadTokenFilterFactory), module, "DelimitedPayloadTokenFilterFactory", 0);
          }

          void t_DelimitedPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "class_", make_descriptor(DelimitedPayloadTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "ENCODER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::ENCODER_ATTR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilterFactory), "NAME", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::NAME)));
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilterFactory::wrap_Object(DelimitedPayloadTokenFilterFactory(((t_DelimitedPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_DelimitedPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DelimitedPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *POS$Tag::class$ = NULL;
          jmethodID *POS$Tag::mids$ = NULL;
          bool POS$Tag::live$ = false;
          POS$Tag *POS$Tag::E = NULL;
          POS$Tag *POS$Tag::IC = NULL;
          POS$Tag *POS$Tag::J = NULL;
          POS$Tag *POS$Tag::MAG = NULL;
          POS$Tag *POS$Tag::MAJ = NULL;
          POS$Tag *POS$Tag::MM = NULL;
          POS$Tag *POS$Tag::NA = NULL;
          POS$Tag *POS$Tag::NNB = NULL;
          POS$Tag *POS$Tag::NNBC = NULL;
          POS$Tag *POS$Tag::NNG = NULL;
          POS$Tag *POS$Tag::NNP = NULL;
          POS$Tag *POS$Tag::NP = NULL;
          POS$Tag *POS$Tag::NR = NULL;
          POS$Tag *POS$Tag::SC = NULL;
          POS$Tag *POS$Tag::SE = NULL;
          POS$Tag *POS$Tag::SF = NULL;
          POS$Tag *POS$Tag::SH = NULL;
          POS$Tag *POS$Tag::SL = NULL;
          POS$Tag *POS$Tag::SN = NULL;
          POS$Tag *POS$Tag::SP = NULL;
          POS$Tag *POS$Tag::SSC = NULL;
          POS$Tag *POS$Tag::SSO = NULL;
          POS$Tag *POS$Tag::SY = NULL;
          POS$Tag *POS$Tag::UNA = NULL;
          POS$Tag *POS$Tag::UNKNOWN = NULL;
          POS$Tag *POS$Tag::VA = NULL;
          POS$Tag *POS$Tag::VCN = NULL;
          POS$Tag *POS$Tag::VCP = NULL;
          POS$Tag *POS$Tag::VSV = NULL;
          POS$Tag *POS$Tag::VV = NULL;
          POS$Tag *POS$Tag::VX = NULL;
          POS$Tag *POS$Tag::XPN = NULL;
          POS$Tag *POS$Tag::XR = NULL;
          POS$Tag *POS$Tag::XSA = NULL;
          POS$Tag *POS$Tag::XSN = NULL;
          POS$Tag *POS$Tag::XSV = NULL;

          jclass POS$Tag::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/POS$Tag");

              mids$ = new jmethodID[max_mid];
              mids$[mid_code_9972fcc56b44e79d] = env->getMethodID(cls, "code", "()I");
              mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_valueOf_e52ac50b8a1444da] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_values_9743dd1134808a9f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ko/POS$Tag;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              E = new POS$Tag(env->getStaticObjectField(cls, "E", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              IC = new POS$Tag(env->getStaticObjectField(cls, "IC", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              J = new POS$Tag(env->getStaticObjectField(cls, "J", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              MAG = new POS$Tag(env->getStaticObjectField(cls, "MAG", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              MAJ = new POS$Tag(env->getStaticObjectField(cls, "MAJ", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              MM = new POS$Tag(env->getStaticObjectField(cls, "MM", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NA = new POS$Tag(env->getStaticObjectField(cls, "NA", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NNB = new POS$Tag(env->getStaticObjectField(cls, "NNB", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NNBC = new POS$Tag(env->getStaticObjectField(cls, "NNBC", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NNG = new POS$Tag(env->getStaticObjectField(cls, "NNG", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NNP = new POS$Tag(env->getStaticObjectField(cls, "NNP", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NP = new POS$Tag(env->getStaticObjectField(cls, "NP", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              NR = new POS$Tag(env->getStaticObjectField(cls, "NR", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SC = new POS$Tag(env->getStaticObjectField(cls, "SC", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SE = new POS$Tag(env->getStaticObjectField(cls, "SE", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SF = new POS$Tag(env->getStaticObjectField(cls, "SF", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SH = new POS$Tag(env->getStaticObjectField(cls, "SH", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SL = new POS$Tag(env->getStaticObjectField(cls, "SL", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SN = new POS$Tag(env->getStaticObjectField(cls, "SN", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SP = new POS$Tag(env->getStaticObjectField(cls, "SP", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SSC = new POS$Tag(env->getStaticObjectField(cls, "SSC", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SSO = new POS$Tag(env->getStaticObjectField(cls, "SSO", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              SY = new POS$Tag(env->getStaticObjectField(cls, "SY", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              UNA = new POS$Tag(env->getStaticObjectField(cls, "UNA", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              UNKNOWN = new POS$Tag(env->getStaticObjectField(cls, "UNKNOWN", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VA = new POS$Tag(env->getStaticObjectField(cls, "VA", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VCN = new POS$Tag(env->getStaticObjectField(cls, "VCN", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VCP = new POS$Tag(env->getStaticObjectField(cls, "VCP", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VSV = new POS$Tag(env->getStaticObjectField(cls, "VSV", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VV = new POS$Tag(env->getStaticObjectField(cls, "VV", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              VX = new POS$Tag(env->getStaticObjectField(cls, "VX", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              XPN = new POS$Tag(env->getStaticObjectField(cls, "XPN", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              XR = new POS$Tag(env->getStaticObjectField(cls, "XR", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              XSA = new POS$Tag(env->getStaticObjectField(cls, "XSA", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              XSN = new POS$Tag(env->getStaticObjectField(cls, "XSN", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              XSV = new POS$Tag(env->getStaticObjectField(cls, "XSV", "Lorg/apache/lucene/analysis/ko/POS$Tag;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint POS$Tag::code() const
          {
            return env->callIntMethod(this$, mids$[mid_code_9972fcc56b44e79d]);
          }

          ::java::lang::String POS$Tag::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
          }

          POS$Tag POS$Tag::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return POS$Tag(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e52ac50b8a1444da], a0.this$));
          }

          JArray< POS$Tag > POS$Tag::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< POS$Tag >(env->callStaticObjectMethod(cls, mids$[mid_values_9743dd1134808a9f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_POS$Tag_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_POS$Tag_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_POS$Tag_of_(t_POS$Tag *self, PyObject *args);
          static PyObject *t_POS$Tag_code(t_POS$Tag *self);
          static PyObject *t_POS$Tag_description(t_POS$Tag *self);
          static PyObject *t_POS$Tag_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_POS$Tag_values(PyTypeObject *type);
          static PyObject *t_POS$Tag_get__parameters_(t_POS$Tag *self, void *data);
          static PyGetSetDef t_POS$Tag__fields_[] = {
            DECLARE_GET_FIELD(t_POS$Tag, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_POS$Tag__methods_[] = {
            DECLARE_METHOD(t_POS$Tag, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS$Tag, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS$Tag, of_, METH_VARARGS),
            DECLARE_METHOD(t_POS$Tag, code, METH_NOARGS),
            DECLARE_METHOD(t_POS$Tag, description, METH_NOARGS),
            DECLARE_METHOD(t_POS$Tag, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_POS$Tag, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(POS$Tag)[] = {
            { Py_tp_methods, t_POS$Tag__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_POS$Tag__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(POS$Tag)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(POS$Tag, t_POS$Tag, POS$Tag);
          PyObject *t_POS$Tag::wrap_Object(const POS$Tag& object, PyTypeObject *p0)
          {
            PyObject *obj = t_POS$Tag::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_POS$Tag *self = (t_POS$Tag *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_POS$Tag::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_POS$Tag::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_POS$Tag *self = (t_POS$Tag *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_POS$Tag::install(PyObject *module)
          {
            installType(&PY_TYPE(POS$Tag), &PY_TYPE_DEF(POS$Tag), module, "POS$Tag", 0);
          }

          void t_POS$Tag::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "class_", make_descriptor(POS$Tag::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "wrapfn_", make_descriptor(t_POS$Tag::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "boxfn_", make_descriptor(boxObject));
            env->getClass(POS$Tag::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "E", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::E)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "IC", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::IC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "J", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::J)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "MAG", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::MAG)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "MAJ", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::MAJ)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "MM", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::MM)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NA", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NA)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NNB", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NNB)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NNBC", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NNBC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NNG", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NNG)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NNP", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NNP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NP", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "NR", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::NR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SC", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SE", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SF", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SF)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SH", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SH)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SL", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SN", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SP", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SSC", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SSC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SSO", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SSO)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "SY", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::SY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "UNA", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::UNA)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "UNKNOWN", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::UNKNOWN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VA", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VA)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VCN", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VCN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VCP", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VCP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VSV", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VSV)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VV", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VV)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "VX", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::VX)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "XPN", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::XPN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "XR", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::XR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "XSA", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::XSA)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "XSN", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::XSN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Tag), "XSV", make_descriptor(t_POS$Tag::wrap_Object(*POS$Tag::XSV)));
          }

          static PyObject *t_POS$Tag_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, POS$Tag::initializeClass, 1)))
              return NULL;
            return t_POS$Tag::wrap_Object(POS$Tag(((t_POS$Tag *) arg)->object.this$));
          }
          static PyObject *t_POS$Tag_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, POS$Tag::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_POS$Tag_of_(t_POS$Tag *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_POS$Tag_code(t_POS$Tag *self)
          {
            jint result;
            OBJ_CALL(result = self->object.code());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_POS$Tag_description(t_POS$Tag *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_POS$Tag_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            POS$Tag result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS$Tag::valueOf(a0));
              return t_POS$Tag::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_POS$Tag_values(PyTypeObject *type)
          {
            JArray< POS$Tag > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS$Tag::values());
            return JArray<jobject>(result.this$).wrap(t_POS$Tag::wrap_jobject);
          }
          static PyObject *t_POS$Tag_get__parameters_(t_POS$Tag *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager$RefreshListener::class$ = NULL;
        jmethodID *ReferenceManager$RefreshListener::mids$ = NULL;
        bool ReferenceManager$RefreshListener::live$ = false;

        jclass ReferenceManager$RefreshListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager$RefreshListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_afterRefresh_9d72768e8fdce2b7] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_f2cc1bce94666404] = env->getMethodID(cls, "beforeRefresh", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ReferenceManager$RefreshListener::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_9d72768e8fdce2b7], a0);
        }

        void ReferenceManager$RefreshListener::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args);
        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self);
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data);
        static PyGetSetDef t_ReferenceManager$RefreshListener__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager$RefreshListener, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager$RefreshListener__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, afterRefresh, METH_O),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, beforeRefresh, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ReferenceManager$RefreshListener)[] = {
          { Py_tp_methods, t_ReferenceManager$RefreshListener__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ReferenceManager$RefreshListener__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ReferenceManager$RefreshListener)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ReferenceManager$RefreshListener, t_ReferenceManager$RefreshListener, ReferenceManager$RefreshListener);
        PyObject *t_ReferenceManager$RefreshListener::wrap_Object(const ReferenceManager$RefreshListener& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager$RefreshListener::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager$RefreshListener::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager$RefreshListener), &PY_TYPE_DEF(ReferenceManager$RefreshListener), module, "ReferenceManager$RefreshListener", 0);
        }

        void t_ReferenceManager$RefreshListener::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager$RefreshListener), "class_", make_descriptor(ReferenceManager$RefreshListener::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager$RefreshListener), "wrapfn_", make_descriptor(t_ReferenceManager$RefreshListener::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager$RefreshListener), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager$RefreshListener::wrap_Object(ReferenceManager$RefreshListener(((t_ReferenceManager$RefreshListener *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ProtectedTermFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ProtectedTermFilterFactory::class$ = NULL;
          jmethodID *ProtectedTermFilterFactory::mids$ = NULL;
          bool ProtectedTermFilterFactory::live$ = false;
          jchar ProtectedTermFilterFactory::FILTER_ARG_SEPARATOR = (jchar) 0;
          jchar ProtectedTermFilterFactory::FILTER_NAME_ID_SEPARATOR = (jchar) 0;
          ::java::lang::String *ProtectedTermFilterFactory::NAME = NULL;
          ::java::lang::String *ProtectedTermFilterFactory::PROTECTED_TERMS = NULL;

          jclass ProtectedTermFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ProtectedTermFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_doInform_b4ee53c41a5f629f] = env->getMethodID(cls, "doInform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_getProtectedTerms_7aec8e69a9807ca1] = env->getMethodID(cls, "getProtectedTerms", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");
              mids$[mid_create_debb7a449ce81286] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/function/Function;)Lorg/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FILTER_ARG_SEPARATOR = env->getStaticCharField(cls, "FILTER_ARG_SEPARATOR");
              FILTER_NAME_ID_SEPARATOR = env->getStaticCharField(cls, "FILTER_NAME_ID_SEPARATOR");
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PROTECTED_TERMS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TERMS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ProtectedTermFilterFactory::ProtectedTermFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          void ProtectedTermFilterFactory::doInform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_doInform_b4ee53c41a5f629f], a0.this$);
          }

          ::org::apache::lucene::analysis::CharArraySet ProtectedTermFilterFactory::getProtectedTerms() const
          {
            return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getProtectedTerms_7aec8e69a9807ca1]));
          }

          jboolean ProtectedTermFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ProtectedTermFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ProtectedTermFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ProtectedTermFilterFactory_init_(t_ProtectedTermFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ProtectedTermFilterFactory_doInform(t_ProtectedTermFilterFactory *self, PyObject *arg);
          static PyObject *t_ProtectedTermFilterFactory_getProtectedTerms(t_ProtectedTermFilterFactory *self);
          static PyObject *t_ProtectedTermFilterFactory_isIgnoreCase(t_ProtectedTermFilterFactory *self);
          static PyObject *t_ProtectedTermFilterFactory_get__ignoreCase(t_ProtectedTermFilterFactory *self, void *data);
          static PyObject *t_ProtectedTermFilterFactory_get__protectedTerms(t_ProtectedTermFilterFactory *self, void *data);
          static PyGetSetDef t_ProtectedTermFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ProtectedTermFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_ProtectedTermFilterFactory, protectedTerms),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ProtectedTermFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ProtectedTermFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ProtectedTermFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ProtectedTermFilterFactory, doInform, METH_O),
            DECLARE_METHOD(t_ProtectedTermFilterFactory, getProtectedTerms, METH_NOARGS),
            DECLARE_METHOD(t_ProtectedTermFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ProtectedTermFilterFactory)[] = {
            { Py_tp_methods, t_ProtectedTermFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ProtectedTermFilterFactory_init_ },
            { Py_tp_getset, t_ProtectedTermFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ProtectedTermFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ProtectedTermFilterFactory, t_ProtectedTermFilterFactory, ProtectedTermFilterFactory);

          void t_ProtectedTermFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ProtectedTermFilterFactory), &PY_TYPE_DEF(ProtectedTermFilterFactory), module, "ProtectedTermFilterFactory", 0);
          }

          void t_ProtectedTermFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "class_", make_descriptor(ProtectedTermFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "wrapfn_", make_descriptor(t_ProtectedTermFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ProtectedTermFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "FILTER_ARG_SEPARATOR", make_descriptor(ProtectedTermFilterFactory::FILTER_ARG_SEPARATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "FILTER_NAME_ID_SEPARATOR", make_descriptor(ProtectedTermFilterFactory::FILTER_NAME_ID_SEPARATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "NAME", make_descriptor(j2p(*ProtectedTermFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilterFactory), "PROTECTED_TERMS", make_descriptor(j2p(*ProtectedTermFilterFactory::PROTECTED_TERMS)));
          }

          static PyObject *t_ProtectedTermFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ProtectedTermFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ProtectedTermFilterFactory::wrap_Object(ProtectedTermFilterFactory(((t_ProtectedTermFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ProtectedTermFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ProtectedTermFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ProtectedTermFilterFactory_init_(t_ProtectedTermFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ProtectedTermFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ProtectedTermFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ProtectedTermFilterFactory_doInform(t_ProtectedTermFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.doInform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "doInform", arg);
            return NULL;
          }

          static PyObject *t_ProtectedTermFilterFactory_getProtectedTerms(t_ProtectedTermFilterFactory *self)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getProtectedTerms());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ProtectedTermFilterFactory_isIgnoreCase(t_ProtectedTermFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ProtectedTermFilterFactory_get__ignoreCase(t_ProtectedTermFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ProtectedTermFilterFactory_get__protectedTerms(t_ProtectedTermFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getProtectedTerms());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/StopFilter.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *StopFilter::class$ = NULL;
        jmethodID *StopFilter::mids$ = NULL;
        bool StopFilter::live$ = false;

        jclass StopFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/StopFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
            mids$[mid_makeStopSet_fab5761b154357c9] = env->getStaticMethodID(cls, "makeStopSet", "([Ljava/lang/String;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_makeStopSet_487ba64a71dbcb9e] = env->getStaticMethodID(cls, "makeStopSet", "(Ljava/util/List;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_makeStopSet_2d926dc014726ce2] = env->getStaticMethodID(cls, "makeStopSet", "([Ljava/lang/String;Z)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_makeStopSet_d7258fd52a8e30f3] = env->getStaticMethodID(cls, "makeStopSet", "(Ljava/util/List;Z)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StopFilter::StopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::CharArraySet StopFilter::makeStopSet(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_fab5761b154357c9], a0.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet StopFilter::makeStopSet(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_487ba64a71dbcb9e], a0.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet StopFilter::makeStopSet(const JArray< ::java::lang::String > & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_2d926dc014726ce2], a0.this$, a1));
        }

        ::org::apache::lucene::analysis::CharArraySet StopFilter::makeStopSet(const ::java::util::List & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_makeStopSet_d7258fd52a8e30f3], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_StopFilter__methods_[] = {
          DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StopFilter, makeStopSet, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StopFilter)[] = {
          { Py_tp_methods, t_StopFilter__methods_ },
          { Py_tp_init, (void *) t_StopFilter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StopFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
          NULL
        };

        DEFINE_TYPE(StopFilter, t_StopFilter, StopFilter);

        void t_StopFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(StopFilter), &PY_TYPE_DEF(StopFilter), module, "StopFilter", 0);
        }

        void t_StopFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "class_", make_descriptor(StopFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
            return NULL;
          return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
        }
        static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StopFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
          PyTypeObject **p1;
          StopFilter object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
          {
            INT_CALL(object = StopFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_StopFilter_makeStopSet(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::StopFilter::makeStopSet(a0));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::StopFilter::makeStopSet(a0));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "[sZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::StopFilter::makeStopSet(a0, a1));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::StopFilter::makeStopSet(a0, a1));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "makeStopSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {

          ::java::lang::Class *Lucene80Codec::class$ = NULL;
          jmethodID *Lucene80Codec::mids$ = NULL;
          bool Lucene80Codec::live$ = false;

          jclass Lucene80Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene80/Lucene80Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene80Codec::Lucene80Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::CompoundFormat Lucene80Codec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene80Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene80Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene80Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene80Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat Lucene80Codec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene80Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene80Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene80Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene80Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {
          static PyObject *t_Lucene80Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene80Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene80Codec_init_(t_Lucene80Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene80Codec_compoundFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_docValuesFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_fieldInfosFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_liveDocsFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_normsFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_pointsFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_postingsFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_segmentInfoFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_storedFieldsFormat(t_Lucene80Codec *self, PyObject *args);
          static PyObject *t_Lucene80Codec_termVectorsFormat(t_Lucene80Codec *self, PyObject *args);

          static PyMethodDef t_Lucene80Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene80Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80Codec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene80Codec)[] = {
            { Py_tp_methods, t_Lucene80Codec__methods_ },
            { Py_tp_init, (void *) t_Lucene80Codec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene80Codec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(Lucene80Codec, t_Lucene80Codec, Lucene80Codec);

          void t_Lucene80Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene80Codec), &PY_TYPE_DEF(Lucene80Codec), module, "Lucene80Codec", 0);
          }

          void t_Lucene80Codec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80Codec), "class_", make_descriptor(Lucene80Codec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80Codec), "wrapfn_", make_descriptor(t_Lucene80Codec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80Codec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene80Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene80Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene80Codec::wrap_Object(Lucene80Codec(((t_Lucene80Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene80Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene80Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene80Codec_init_(t_Lucene80Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene80Codec object((jobject) NULL);

            INT_CALL(object = Lucene80Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene80Codec_compoundFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_docValuesFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_fieldInfosFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_liveDocsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_normsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_pointsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_postingsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_segmentInfoFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_storedFieldsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene80Codec_termVectorsFormat(t_Lucene80Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MatchAllDocsQueryNodeProcessor::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeProcessor::mids$ = NULL;
              bool MatchAllDocsQueryNodeProcessor::live$ = false;

              jclass MatchAllDocsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeProcessor::MatchAllDocsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MatchAllDocsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MatchAllDocsQueryNodeProcessor)[] = {
                { Py_tp_methods, t_MatchAllDocsQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_MatchAllDocsQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MatchAllDocsQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor, MatchAllDocsQueryNodeProcessor);

              void t_MatchAllDocsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeProcessor), &PY_TYPE_DEF(MatchAllDocsQueryNodeProcessor), module, "MatchAllDocsQueryNodeProcessor", 0);
              }

              void t_MatchAllDocsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeProcessor), "class_", make_descriptor(MatchAllDocsQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeProcessor), "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeProcessor::wrap_Object(MatchAllDocsQueryNodeProcessor(((t_MatchAllDocsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TwoPhaseIterator::class$ = NULL;
        jmethodID *TwoPhaseIterator::mids$ = NULL;
        bool TwoPhaseIterator::live$ = false;

        jclass TwoPhaseIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TwoPhaseIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_approximation_173d81d7b8f93882] = env->getMethodID(cls, "approximation", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_asDocIdSetIterator_04e599bec4659f7a] = env->getStaticMethodID(cls, "asDocIdSetIterator", "(Lorg/apache/lucene/search/TwoPhaseIterator;)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_matchCost_58aec2b64dff50c8] = env->getMethodID(cls, "matchCost", "()F");
            mids$[mid_matches_8454bd5aa23fd11e] = env->getMethodID(cls, "matches", "()Z");
            mids$[mid_unwrap_fd1202cd6b56edec] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/search/TwoPhaseIterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::DocIdSetIterator TwoPhaseIterator::approximation() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_approximation_173d81d7b8f93882]));
        }

        ::org::apache::lucene::search::DocIdSetIterator TwoPhaseIterator::asDocIdSetIterator(const TwoPhaseIterator & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_asDocIdSetIterator_04e599bec4659f7a], a0.this$));
        }

        jfloat TwoPhaseIterator::matchCost() const
        {
          return env->callFloatMethod(this$, mids$[mid_matchCost_58aec2b64dff50c8]);
        }

        jboolean TwoPhaseIterator::matches() const
        {
          return env->callBooleanMethod(this$, mids$[mid_matches_8454bd5aa23fd11e]);
        }

        TwoPhaseIterator TwoPhaseIterator::unwrap(const ::org::apache::lucene::search::DocIdSetIterator & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TwoPhaseIterator(env->callStaticObjectMethod(cls, mids$[mid_unwrap_fd1202cd6b56edec], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TwoPhaseIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseIterator_approximation(t_TwoPhaseIterator *self);
        static PyObject *t_TwoPhaseIterator_asDocIdSetIterator(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseIterator_matchCost(t_TwoPhaseIterator *self);
        static PyObject *t_TwoPhaseIterator_matches(t_TwoPhaseIterator *self);
        static PyObject *t_TwoPhaseIterator_unwrap(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseIterator__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseIterator, approximation, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseIterator, asDocIdSetIterator, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseIterator, matchCost, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseIterator, matches, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseIterator, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TwoPhaseIterator)[] = {
          { Py_tp_methods, t_TwoPhaseIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TwoPhaseIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TwoPhaseIterator, t_TwoPhaseIterator, TwoPhaseIterator);

        void t_TwoPhaseIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseIterator), &PY_TYPE_DEF(TwoPhaseIterator), module, "TwoPhaseIterator", 0);
        }

        void t_TwoPhaseIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseIterator), "class_", make_descriptor(TwoPhaseIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseIterator), "wrapfn_", make_descriptor(t_TwoPhaseIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseIterator::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseIterator::wrap_Object(TwoPhaseIterator(((t_TwoPhaseIterator *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseIterator_approximation(t_TwoPhaseIterator *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.approximation());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_TwoPhaseIterator_asDocIdSetIterator(PyTypeObject *type, PyObject *arg)
        {
          TwoPhaseIterator a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArg(arg, "k", TwoPhaseIterator::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TwoPhaseIterator::asDocIdSetIterator(a0));
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "asDocIdSetIterator", arg);
          return NULL;
        }

        static PyObject *t_TwoPhaseIterator_matchCost(t_TwoPhaseIterator *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.matchCost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TwoPhaseIterator_matches(t_TwoPhaseIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.matches());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TwoPhaseIterator_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          TwoPhaseIterator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TwoPhaseIterator::unwrap(a0));
            return t_TwoPhaseIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PerFieldSimilarityWrapper::mids$ = NULL;
          bool PerFieldSimilarityWrapper::live$ = false;

          jclass PerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/PerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_get_842ad739f75ff8a0] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldSimilarityWrapper::PerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong PerFieldSimilarityWrapper::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity PerFieldSimilarityWrapper::get(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_get_842ad739f75ff8a0], a0.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer PerFieldSimilarityWrapper::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_scorer(t_PerFieldSimilarityWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, get, METH_O),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PerFieldSimilarityWrapper)[] = {
            { Py_tp_methods, t_PerFieldSimilarityWrapper__methods_ },
            { Py_tp_init, (void *) t_PerFieldSimilarityWrapper_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PerFieldSimilarityWrapper)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper, PerFieldSimilarityWrapper);

          void t_PerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldSimilarityWrapper), &PY_TYPE_DEF(PerFieldSimilarityWrapper), module, "PerFieldSimilarityWrapper", 0);
          }

          void t_PerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldSimilarityWrapper), "class_", make_descriptor(PerFieldSimilarityWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldSimilarityWrapper), "wrapfn_", make_descriptor(t_PerFieldSimilarityWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldSimilarityWrapper), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldSimilarityWrapper::wrap_Object(PerFieldSimilarityWrapper(((t_PerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PerFieldSimilarityWrapper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
          }

          static PyObject *t_PerFieldSimilarityWrapper_scorer(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator$InputIteratorWrapper::class$ = NULL;
          jmethodID *InputIterator$InputIteratorWrapper::mids$ = NULL;
          bool InputIterator$InputIteratorWrapper::live$ = false;

          jclass InputIterator$InputIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d9019675c3739ff4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_contexts_7dcf4034c6d1a92a] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_8454bd5aa23fd11e] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_7af2ea2e37ce82b8] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_2e5ae9edcb9b072f] = env->getMethodID(cls, "weight", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InputIterator$InputIteratorWrapper::InputIterator$InputIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d9019675c3739ff4, a0.this$)) {}

          ::java::util::Set InputIterator$InputIteratorWrapper::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_7dcf4034c6d1a92a]));
          }

          jboolean InputIterator$InputIteratorWrapper::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_8454bd5aa23fd11e]);
          }

          jboolean InputIterator$InputIteratorWrapper::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_7af2ea2e37ce82b8]));
          }

          jlong InputIterator$InputIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self);

          static PyMethodDef t_InputIterator$InputIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(InputIterator$InputIteratorWrapper)[] = {
            { Py_tp_methods, t_InputIterator$InputIteratorWrapper__methods_ },
            { Py_tp_init, (void *) t_InputIterator$InputIteratorWrapper_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_InputIterator$InputIteratorWrapper *)) get_next< t_InputIterator$InputIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(InputIterator$InputIteratorWrapper)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper, InputIterator$InputIteratorWrapper);

          void t_InputIterator$InputIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator$InputIteratorWrapper), &PY_TYPE_DEF(InputIterator$InputIteratorWrapper), module, "InputIterator$InputIteratorWrapper", 0);
          }

          void t_InputIterator$InputIteratorWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator$InputIteratorWrapper), "class_", make_descriptor(InputIterator$InputIteratorWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator$InputIteratorWrapper), "wrapfn_", make_descriptor(t_InputIterator$InputIteratorWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator$InputIteratorWrapper), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_InputIterator$InputIteratorWrapper::wrap_Object(InputIterator$InputIteratorWrapper(((t_InputIterator$InputIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            InputIterator$InputIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = InputIterator$InputIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilterFactory::class$ = NULL;
          jmethodID *CapitalizationFilterFactory::mids$ = NULL;
          bool CapitalizationFilterFactory::live$ = false;
          ::java::lang::String *CapitalizationFilterFactory::FORCE_FIRST_LETTER = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP_IGNORE_CASE = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_TOKEN_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_WORD_COUNT = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MIN_WORD_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::NAME = NULL;
          ::java::lang::String *CapitalizationFilterFactory::OK_PREFIX = NULL;
          ::java::lang::String *CapitalizationFilterFactory::ONLY_FIRST_WORD = NULL;

          jclass CapitalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ec8ad9c5ac951968] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CapitalizationFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FORCE_FIRST_LETTER = new ::java::lang::String(env->getStaticObjectField(cls, "FORCE_FIRST_LETTER", "Ljava/lang/String;"));
              KEEP = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP", "Ljava/lang/String;"));
              KEEP_IGNORE_CASE = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP_IGNORE_CASE", "Ljava/lang/String;"));
              MAX_TOKEN_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_LENGTH", "Ljava/lang/String;"));
              MAX_WORD_COUNT = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_WORD_COUNT", "Ljava/lang/String;"));
              MIN_WORD_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_WORD_LENGTH", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              OK_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "OK_PREFIX", "Ljava/lang/String;"));
              ONLY_FIRST_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "ONLY_FIRST_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilterFactory::CapitalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter CapitalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter(env->callObjectMethod(this$, mids$[mid_create_ec8ad9c5ac951968], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CapitalizationFilterFactory)[] = {
            { Py_tp_methods, t_CapitalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CapitalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CapitalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CapitalizationFilterFactory, t_CapitalizationFilterFactory, CapitalizationFilterFactory);

          void t_CapitalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilterFactory), &PY_TYPE_DEF(CapitalizationFilterFactory), module, "CapitalizationFilterFactory", 0);
          }

          void t_CapitalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "class_", make_descriptor(CapitalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "wrapfn_", make_descriptor(t_CapitalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "FORCE_FIRST_LETTER", make_descriptor(j2p(*CapitalizationFilterFactory::FORCE_FIRST_LETTER)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "KEEP", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "KEEP_IGNORE_CASE", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP_IGNORE_CASE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "MAX_TOKEN_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_TOKEN_LENGTH)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "MAX_WORD_COUNT", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_WORD_COUNT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "MIN_WORD_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MIN_WORD_LENGTH)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "NAME", make_descriptor(j2p(*CapitalizationFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "OK_PREFIX", make_descriptor(j2p(*CapitalizationFilterFactory::OK_PREFIX)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilterFactory), "ONLY_FIRST_WORD", make_descriptor(j2p(*CapitalizationFilterFactory::ONLY_FIRST_WORD)));
          }

          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilterFactory::wrap_Object(CapitalizationFilterFactory(((t_CapitalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CapitalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CapitalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CapitalizationFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CapitalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState$OrdRange::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState$OrdRange::mids$ = NULL;
          jfieldID *SortedSetDocValuesReaderState$OrdRange::fids$ = NULL;
          bool SortedSetDocValuesReaderState$OrdRange::live$ = false;

          jclass SortedSetDocValuesReaderState$OrdRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_end] = env->getFieldID(cls, "end", "I");
              fids$[fid_start] = env->getFieldID(cls, "start", "I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesReaderState$OrdRange::SortedSetDocValuesReaderState$OrdRange(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          jint SortedSetDocValuesReaderState$OrdRange::_get_end() const
          {
            return env->getIntField(this$, fids$[fid_end]);
          }

          jint SortedSetDocValuesReaderState$OrdRange::_get_start() const
          {
            return env->getIntField(this$, fids$[fid_start]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesReaderState$OrdRange__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, end),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState$OrdRange__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValuesReaderState$OrdRange)[] = {
            { Py_tp_methods, t_SortedSetDocValuesReaderState$OrdRange__methods_ },
            { Py_tp_init, (void *) t_SortedSetDocValuesReaderState$OrdRange_init_ },
            { Py_tp_getset, t_SortedSetDocValuesReaderState$OrdRange__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedSetDocValuesReaderState$OrdRange)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange, SortedSetDocValuesReaderState$OrdRange);

          void t_SortedSetDocValuesReaderState$OrdRange::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange), &PY_TYPE_DEF(SortedSetDocValuesReaderState$OrdRange), module, "SortedSetDocValuesReaderState$OrdRange", 0);
          }

          void t_SortedSetDocValuesReaderState$OrdRange::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState$OrdRange), "class_", make_descriptor(SortedSetDocValuesReaderState$OrdRange::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState$OrdRange), "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState$OrdRange::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState$OrdRange), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(SortedSetDocValuesReaderState$OrdRange(((t_SortedSetDocValuesReaderState$OrdRange *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            SortedSetDocValuesReaderState$OrdRange object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesReaderState$OrdRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_end());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_start());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldCollector::class$ = NULL;
        jmethodID *TopFieldCollector::mids$ = NULL;
        bool TopFieldCollector::live$ = false;

        jclass TopFieldCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_b52182028f19d2aa] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;II)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_create_f5f087340e149494] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;I)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_createSharedManager_132fdc21c4e0fa12] = env->getStaticMethodID(cls, "createSharedManager", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;I)Lorg/apache/lucene/search/CollectorManager;");
            mids$[mid_isEarlyTerminated_8454bd5aa23fd11e] = env->getMethodID(cls, "isEarlyTerminated", "()Z");
            mids$[mid_populateScores_e5ff1b93922d2e26] = env->getStaticMethodID(cls, "populateScores", "([Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_topDocs_dd7f87e164984a36] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_updateGlobalMinCompetitiveScore_57a565cc0113e133] = env->getMethodID(cls, "updateGlobalMinCompetitiveScore", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_updateMinCompetitiveScore_57a565cc0113e133] = env->getMethodID(cls, "updateMinCompetitiveScore", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_populateResults_22b73975846c3758] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_89238c61a7db05c2] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_b52182028f19d2aa], a0.this$, a1, a2));
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_f5f087340e149494], a0.this$, a1, a2.this$, a3));
        }

        ::org::apache::lucene::search::CollectorManager TopFieldCollector::createSharedManager(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::CollectorManager(env->callStaticObjectMethod(cls, mids$[mid_createSharedManager_132fdc21c4e0fa12], a0.this$, a1, a2.this$, a3));
        }

        jboolean TopFieldCollector::isEarlyTerminated() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEarlyTerminated_8454bd5aa23fd11e]);
        }

        void TopFieldCollector::populateScores(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::org::apache::lucene::search::Query & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_populateScores_e5ff1b93922d2e26], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::ScoreMode TopFieldCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        ::org::apache::lucene::search::TopFieldDocs TopFieldCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_topDocs_dd7f87e164984a36]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_createSharedManager(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_isEarlyTerminated(t_TopFieldCollector *self);
        static PyObject *t_TopFieldCollector_populateScores(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_scoreMode(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_topDocs(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_get__earlyTerminated(t_TopFieldCollector *self, void *data);
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data);
        static PyGetSetDef t_TopFieldCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopFieldCollector, earlyTerminated),
          DECLARE_GET_FIELD(t_TopFieldCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldCollector__methods_[] = {
          DECLARE_METHOD(t_TopFieldCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, createSharedManager, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, isEarlyTerminated, METH_NOARGS),
          DECLARE_METHOD(t_TopFieldCollector, populateScores, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, scoreMode, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopFieldCollector)[] = {
          { Py_tp_methods, t_TopFieldCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TopFieldCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopFieldCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopDocsCollector),
          NULL
        };

        DEFINE_TYPE(TopFieldCollector, t_TopFieldCollector, TopFieldCollector);
        PyObject *t_TopFieldCollector::wrap_Object(const TopFieldCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopFieldCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopFieldCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldCollector), &PY_TYPE_DEF(TopFieldCollector), module, "TopFieldCollector", 0);
        }

        void t_TopFieldCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldCollector), "class_", make_descriptor(TopFieldCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldCollector), "wrapfn_", make_descriptor(t_TopFieldCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldCollector::initializeClass, 1)))
            return NULL;
          return t_TopFieldCollector::wrap_Object(TopFieldCollector(((t_TopFieldCollector *) arg)->object.this$));
        }
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIkI", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopFieldCollector_createSharedManager(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::search::CollectorManager result((jobject) NULL);

          if (!parseArgs(args, "kIkI", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::createSharedManager(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_CollectorManager::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(TopFieldCollector), ::org::apache::lucene::search::PY_TYPE(TopFieldDocs));
          }

          PyErr_SetArgsError(type, "createSharedManager", args);
          return NULL;
        }

        static PyObject *t_TopFieldCollector_isEarlyTerminated(t_TopFieldCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEarlyTerminated());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TopFieldCollector_populateScores(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);

          if (!parseArgs(args, "[kkk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::search::TopFieldCollector::populateScores(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "populateScores", args);
          return NULL;
        }

        static PyObject *t_TopFieldCollector_scoreMode(t_TopFieldCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TopFieldCollector), (PyObject *) self, "scoreMode", args, 2);
        }

        static PyObject *t_TopFieldCollector_topDocs(t_TopFieldCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.topDocs());
            return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TopFieldCollector), (PyObject *) self, "topDocs", args, 2);
        }
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopFieldCollector_get__earlyTerminated(t_TopFieldCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEarlyTerminated());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/SuggestionTimeoutException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *SuggestionTimeoutException::class$ = NULL;
          jmethodID *SuggestionTimeoutException::mids$ = NULL;
          bool SuggestionTimeoutException::live$ = false;

          jclass SuggestionTimeoutException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/SuggestionTimeoutException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPartialResult_49ec78390f08338a] = env->getMethodID(cls, "getPartialResult", "()Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List SuggestionTimeoutException::getPartialResult() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPartialResult_49ec78390f08338a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_SuggestionTimeoutException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestionTimeoutException_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestionTimeoutException_getPartialResult(t_SuggestionTimeoutException *self);
          static PyObject *t_SuggestionTimeoutException_get__partialResult(t_SuggestionTimeoutException *self, void *data);
          static PyGetSetDef t_SuggestionTimeoutException__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestionTimeoutException, partialResult),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestionTimeoutException__methods_[] = {
            DECLARE_METHOD(t_SuggestionTimeoutException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestionTimeoutException, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestionTimeoutException, getPartialResult, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestionTimeoutException)[] = {
            { Py_tp_methods, t_SuggestionTimeoutException__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_SuggestionTimeoutException__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestionTimeoutException)[] = {
            &PY_TYPE_DEF(::java::lang::RuntimeException),
            NULL
          };

          DEFINE_TYPE(SuggestionTimeoutException, t_SuggestionTimeoutException, SuggestionTimeoutException);

          void t_SuggestionTimeoutException::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestionTimeoutException), &PY_TYPE_DEF(SuggestionTimeoutException), module, "SuggestionTimeoutException", 0);
          }

          void t_SuggestionTimeoutException::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestionTimeoutException), "class_", make_descriptor(SuggestionTimeoutException::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestionTimeoutException), "wrapfn_", make_descriptor(t_SuggestionTimeoutException::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestionTimeoutException), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestionTimeoutException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestionTimeoutException::initializeClass, 1)))
              return NULL;
            return t_SuggestionTimeoutException::wrap_Object(SuggestionTimeoutException(((t_SuggestionTimeoutException *) arg)->object.this$));
          }
          static PyObject *t_SuggestionTimeoutException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestionTimeoutException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestionTimeoutException_getPartialResult(t_SuggestionTimeoutException *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPartialResult());
            return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_SuggestionTimeoutException_get__partialResult(t_SuggestionTimeoutException *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPartialResult());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PositiveIntOutputs::class$ = NULL;
          jmethodID *PositiveIntOutputs::mids$ = NULL;
          bool PositiveIntOutputs::live$ = false;

          jclass PositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_dedd7b48ed1bba08] = env->getMethodID(cls, "add", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_common_dedd7b48ed1bba08] = env->getMethodID(cls, "common", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_getNoOutput_24165e10e82b50a8] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Long;");
              mids$[mid_getSingleton_ed55cf565389ca01] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/PositiveIntOutputs;");
              mids$[mid_outputToString_9aa924d3d1f50bd6] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Long;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_d203c0dc0f144d1b] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Long;)J");
              mids$[mid_read_73ca706a99e97a9e] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Long;");
              mids$[mid_subtract_dedd7b48ed1bba08] = env->getMethodID(cls, "subtract", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_cd8de5cc61d8b077] = env->getMethodID(cls, "write", "(Ljava/lang/Long;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Long PositiveIntOutputs::add(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_add_dedd7b48ed1bba08], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::common(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_dedd7b48ed1bba08], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getNoOutput_24165e10e82b50a8]));
          }

          PositiveIntOutputs PositiveIntOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return PositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_ed55cf565389ca01]));
          }

          ::java::lang::String PositiveIntOutputs::outputToString(const ::java::lang::Long & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_9aa924d3d1f50bd6], a0.this$));
          }

          jlong PositiveIntOutputs::ramBytesUsed(const ::java::lang::Long & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_d203c0dc0f144d1b], a0.this$);
          }

          ::java::lang::Long PositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_read_73ca706a99e97a9e], a0.this$));
          }

          ::java::lang::Long PositiveIntOutputs::subtract(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_dedd7b48ed1bba08], a0.this$, a1.this$));
          }

          ::java::lang::String PositiveIntOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void PositiveIntOutputs::write(const ::java::lang::Long & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_cd8de5cc61d8b077], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data);
          static PyGetSetDef t_PositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, singleton),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_PositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositiveIntOutputs)[] = {
            { Py_tp_methods, t_PositiveIntOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PositiveIntOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositiveIntOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(PositiveIntOutputs, t_PositiveIntOutputs, PositiveIntOutputs);
          PyObject *t_PositiveIntOutputs::wrap_Object(const PositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PositiveIntOutputs), &PY_TYPE_DEF(PositiveIntOutputs), module, "PositiveIntOutputs", 0);
          }

          void t_PositiveIntOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveIntOutputs), "class_", make_descriptor(PositiveIntOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveIntOutputs), "wrapfn_", make_descriptor(t_PositiveIntOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveIntOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_PositiveIntOutputs::wrap_Object(PositiveIntOutputs(((t_PositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(Long), ::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(Long), ::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type)
          {
            PositiveIntOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::PositiveIntOutputs::getSingleton());
            return t_PositiveIntOutputs::wrap_Object(result);
          }

          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(Long), ::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", ::java::lang::PY_TYPE(Long), ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data)
          {
            ::java::lang::Long value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Long::wrap_Object(value);
          }

          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data)
          {
            PositiveIntOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_PositiveIntOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$MemoryOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$MemoryOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$MemoryOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addDone_f2cc1bce94666404] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_438c62480c481c65] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_d2c45ef07a322466] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_040c4cd0390c5aff] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$MemoryOrdinalMap::DirectoryTaxonomyWriter$MemoryOrdinalMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_f2cc1bce94666404]);
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_438c62480c481c65], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$MemoryOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_d2c45ef07a322466]));
            }

            void DirectoryTaxonomyWriter$MemoryOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_040c4cd0390c5aff], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$MemoryOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DirectoryTaxonomyWriter$MemoryOrdinalMap)[] = {
              { Py_tp_methods, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__methods_ },
              { Py_tp_init, (void *) t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_ },
              { Py_tp_getset, t_DirectoryTaxonomyWriter$MemoryOrdinalMap__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DirectoryTaxonomyWriter$MemoryOrdinalMap)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap, t_DirectoryTaxonomyWriter$MemoryOrdinalMap, DirectoryTaxonomyWriter$MemoryOrdinalMap);

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), &PY_TYPE_DEF(DirectoryTaxonomyWriter$MemoryOrdinalMap), module, "DirectoryTaxonomyWriter$MemoryOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$MemoryOrdinalMap::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), "class_", make_descriptor(DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$MemoryOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$MemoryOrdinalMap(((t_DirectoryTaxonomyWriter$MemoryOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$MemoryOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_init_(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              DirectoryTaxonomyWriter$MemoryOrdinalMap object((jobject) NULL);

              INT_CALL(object = DirectoryTaxonomyWriter$MemoryOrdinalMap());
              self->object = object;

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addDone(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_getMap(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_setSize(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$MemoryOrdinalMap_get__map(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$MemoryOrdinalMap_set__size(t_DirectoryTaxonomyWriter$MemoryOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DoubleDocValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DoubleDocValues::class$ = NULL;
            jmethodID *DoubleDocValues::mids$ = NULL;
            bool DoubleDocValues::live$ = false;

            jclass DoubleDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DoubleDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_a2e4107cfe5ff421] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleDocValues::DoubleDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jboolean DoubleDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            jbyte DoubleDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
            }

            jdouble DoubleDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
            }

            jfloat DoubleDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DoubleDocValues::getRangeScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jboolean a4, jboolean a5) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_a2e4107cfe5ff421], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DoubleDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint DoubleDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
            }

            jlong DoubleDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
            }

            ::java::lang::Object DoubleDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jshort DoubleDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
            }

            ::java::lang::String DoubleDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String DoubleDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data);
            static PyGetSetDef t_DoubleDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleDocValues__methods_[] = {
              DECLARE_METHOD(t_DoubleDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DoubleDocValues)[] = {
              { Py_tp_methods, t_DoubleDocValues__methods_ },
              { Py_tp_init, (void *) t_DoubleDocValues_init_ },
              { Py_tp_getset, t_DoubleDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DoubleDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(DoubleDocValues, t_DoubleDocValues, DoubleDocValues);

            void t_DoubleDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleDocValues), &PY_TYPE_DEF(DoubleDocValues), module, "DoubleDocValues", 0);
            }

            void t_DoubleDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValues), "class_", make_descriptor(DoubleDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValues), "wrapfn_", make_descriptor(t_DoubleDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleDocValues::initializeClass, 1)))
                return NULL;
              return t_DoubleDocValues::wrap_Object(DoubleDocValues(((t_DoubleDocValues *) arg)->object.this$));
            }
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              DoubleDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = DoubleDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kkssZZ", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(DoubleDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/StopwordAnalyzerBase.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *StopwordAnalyzerBase::class$ = NULL;
        jmethodID *StopwordAnalyzerBase::mids$ = NULL;
        bool StopwordAnalyzerBase::live$ = false;

        jclass StopwordAnalyzerBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/StopwordAnalyzerBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getStopwordSet_7aec8e69a9807ca1] = env->getMethodID(cls, "getStopwordSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_loadStopwordSet_658e5f8039be4feb] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/nio/file/Path;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_loadStopwordSet_54423cfebc4b36d2] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_loadStopwordSet_030ed0a33e2000ee] = env->getStaticMethodID(cls, "loadStopwordSet", "(ZLjava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/CharArraySet;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::CharArraySet StopwordAnalyzerBase::getStopwordSet() const
        {
          return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopwordSet_7aec8e69a9807ca1]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self);
        static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data);
        static PyGetSetDef t_StopwordAnalyzerBase__fields_[] = {
          DECLARE_GET_FIELD(t_StopwordAnalyzerBase, stopwordSet),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StopwordAnalyzerBase__methods_[] = {
          DECLARE_METHOD(t_StopwordAnalyzerBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StopwordAnalyzerBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StopwordAnalyzerBase, getStopwordSet, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StopwordAnalyzerBase)[] = {
          { Py_tp_methods, t_StopwordAnalyzerBase__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_StopwordAnalyzerBase__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StopwordAnalyzerBase)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
          NULL
        };

        DEFINE_TYPE(StopwordAnalyzerBase, t_StopwordAnalyzerBase, StopwordAnalyzerBase);

        void t_StopwordAnalyzerBase::install(PyObject *module)
        {
          installType(&PY_TYPE(StopwordAnalyzerBase), &PY_TYPE_DEF(StopwordAnalyzerBase), module, "StopwordAnalyzerBase", 0);
        }

        void t_StopwordAnalyzerBase::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopwordAnalyzerBase), "class_", make_descriptor(StopwordAnalyzerBase::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopwordAnalyzerBase), "wrapfn_", make_descriptor(t_StopwordAnalyzerBase::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StopwordAnalyzerBase), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StopwordAnalyzerBase::initializeClass, 1)))
            return NULL;
          return t_StopwordAnalyzerBase::wrap_Object(StopwordAnalyzerBase(((t_StopwordAnalyzerBase *) arg)->object.this$));
        }
        static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StopwordAnalyzerBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self)
        {
          ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
          OBJ_CALL(result = self->object.getStopwordSet());
          return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
        }

        static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data)
        {
          ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
          OBJ_CALL(value = self->object.getStopwordSet());
          return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtensionQuery::class$ = NULL;
          jmethodID *ExtensionQuery::mids$ = NULL;
          bool ExtensionQuery::live$ = false;

          jclass ExtensionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtensionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ca984598d71d65b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRawQueryString_db9b55ba01e03e4b] = env->getMethodID(cls, "getRawQueryString", "()Ljava/lang/String;");
              mids$[mid_getTopLevelParser_3ac2c720499a94b0] = env->getMethodID(cls, "getTopLevelParser", "()Lorg/apache/lucene/queryparser/classic/QueryParser;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtensionQuery::ExtensionQuery(const ::org::apache::lucene::queryparser::classic::QueryParser & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9ca984598d71d65b, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String ExtensionQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::java::lang::String ExtensionQuery::getRawQueryString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRawQueryString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser ExtensionQuery::getTopLevelParser() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser(env->callObjectMethod(this$, mids$[mid_getTopLevelParser_3ac2c720499a94b0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data);
          static PyGetSetDef t_ExtensionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ExtensionQuery, field),
            DECLARE_GET_FIELD(t_ExtensionQuery, rawQueryString),
            DECLARE_GET_FIELD(t_ExtensionQuery, topLevelParser),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtensionQuery__methods_[] = {
            DECLARE_METHOD(t_ExtensionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getRawQueryString, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getTopLevelParser, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ExtensionQuery)[] = {
            { Py_tp_methods, t_ExtensionQuery__methods_ },
            { Py_tp_init, (void *) t_ExtensionQuery_init_ },
            { Py_tp_getset, t_ExtensionQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ExtensionQuery)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ExtensionQuery, t_ExtensionQuery, ExtensionQuery);

          void t_ExtensionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtensionQuery), &PY_TYPE_DEF(ExtensionQuery), module, "ExtensionQuery", 0);
          }

          void t_ExtensionQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtensionQuery), "class_", make_descriptor(ExtensionQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtensionQuery), "wrapfn_", make_descriptor(t_ExtensionQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtensionQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtensionQuery::initializeClass, 1)))
              return NULL;
            return t_ExtensionQuery::wrap_Object(ExtensionQuery(((t_ExtensionQuery *) arg)->object.this$));
          }
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtensionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ExtensionQuery object((jobject) NULL);

            if (!parseArgs(args, "kss", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ExtensionQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getRawQueryString());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser result((jobject) NULL);
            OBJ_CALL(result = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(result);
          }

          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getRawQueryString());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser value((jobject) NULL);
            OBJ_CALL(value = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesTermsQuery.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/PrefixCodedTerms.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesTermsQuery::class$ = NULL;
        jmethodID *DocValuesTermsQuery::mids$ = NULL;
        bool DocValuesTermsQuery::live$ = false;

        jclass DocValuesTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e15507bf45c25446] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_init$_890b82217556b281] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_1933a485e060f4cd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getTerms_3329e7cdc497b63a] = env->getMethodID(cls, "getTerms", "()Lorg/apache/lucene/index/PrefixCodedTerms;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesTermsQuery::DocValuesTermsQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e15507bf45c25446, a0.this$, a1.this$)) {}

        DocValuesTermsQuery::DocValuesTermsQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_890b82217556b281, a0.this$, a1.this$)) {}

        DocValuesTermsQuery::DocValuesTermsQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_1933a485e060f4cd, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight DocValuesTermsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean DocValuesTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String DocValuesTermsQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::PrefixCodedTerms DocValuesTermsQuery::getTerms() const
        {
          return ::org::apache::lucene::index::PrefixCodedTerms(env->callObjectMethod(this$, mids$[mid_getTerms_3329e7cdc497b63a]));
        }

        jint DocValuesTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong DocValuesTermsQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String DocValuesTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void DocValuesTermsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocValuesTermsQuery_init_(t_DocValuesTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesTermsQuery_createWeight(t_DocValuesTermsQuery *self, PyObject *args);
        static PyObject *t_DocValuesTermsQuery_equals(t_DocValuesTermsQuery *self, PyObject *args);
        static PyObject *t_DocValuesTermsQuery_getField(t_DocValuesTermsQuery *self);
        static PyObject *t_DocValuesTermsQuery_getTerms(t_DocValuesTermsQuery *self);
        static PyObject *t_DocValuesTermsQuery_hashCode(t_DocValuesTermsQuery *self, PyObject *args);
        static PyObject *t_DocValuesTermsQuery_ramBytesUsed(t_DocValuesTermsQuery *self);
        static PyObject *t_DocValuesTermsQuery_toString(t_DocValuesTermsQuery *self, PyObject *args);
        static PyObject *t_DocValuesTermsQuery_visit(t_DocValuesTermsQuery *self, PyObject *args);
        static PyObject *t_DocValuesTermsQuery_get__field(t_DocValuesTermsQuery *self, void *data);
        static PyObject *t_DocValuesTermsQuery_get__terms(t_DocValuesTermsQuery *self, void *data);
        static PyGetSetDef t_DocValuesTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesTermsQuery, field),
          DECLARE_GET_FIELD(t_DocValuesTermsQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesTermsQuery__methods_[] = {
          DECLARE_METHOD(t_DocValuesTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesTermsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesTermsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesTermsQuery)[] = {
          { Py_tp_methods, t_DocValuesTermsQuery__methods_ },
          { Py_tp_init, (void *) t_DocValuesTermsQuery_init_ },
          { Py_tp_getset, t_DocValuesTermsQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesTermsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(DocValuesTermsQuery, t_DocValuesTermsQuery, DocValuesTermsQuery);

        void t_DocValuesTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesTermsQuery), &PY_TYPE_DEF(DocValuesTermsQuery), module, "DocValuesTermsQuery", 0);
        }

        void t_DocValuesTermsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesTermsQuery), "class_", make_descriptor(DocValuesTermsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesTermsQuery), "wrapfn_", make_descriptor(t_DocValuesTermsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesTermsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesTermsQuery::initializeClass, 1)))
            return NULL;
          return t_DocValuesTermsQuery::wrap_Object(DocValuesTermsQuery(((t_DocValuesTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_DocValuesTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocValuesTermsQuery_init_(t_DocValuesTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              DocValuesTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = DocValuesTermsQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              DocValuesTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocValuesTermsQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              DocValuesTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = DocValuesTermsQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesTermsQuery_createWeight(t_DocValuesTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesTermsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DocValuesTermsQuery_equals(t_DocValuesTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DocValuesTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocValuesTermsQuery_getField(t_DocValuesTermsQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocValuesTermsQuery_getTerms(t_DocValuesTermsQuery *self)
        {
          ::org::apache::lucene::index::PrefixCodedTerms result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return ::org::apache::lucene::index::t_PrefixCodedTerms::wrap_Object(result);
        }

        static PyObject *t_DocValuesTermsQuery_hashCode(t_DocValuesTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DocValuesTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocValuesTermsQuery_ramBytesUsed(t_DocValuesTermsQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocValuesTermsQuery_toString(t_DocValuesTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(DocValuesTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesTermsQuery_visit(t_DocValuesTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocValuesTermsQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_DocValuesTermsQuery_get__field(t_DocValuesTermsQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocValuesTermsQuery_get__terms(t_DocValuesTermsQuery *self, void *data)
        {
          ::org::apache::lucene::index::PrefixCodedTerms value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return ::org::apache::lucene::index::t_PrefixCodedTerms::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinQuery::class$ = NULL;
          jmethodID *ToParentBlockJoinQuery::mids$ = NULL;
          bool ToParentBlockJoinQuery::live$ = false;

          jclass ToParentBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9343b0329f866efc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/join/BitSetProducer;Lorg/apache/lucene/search/join/ScoreMode;)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getChildQuery_cbf839a480265450] = env->getMethodID(cls, "getChildQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinQuery::ToParentBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::join::BitSetProducer & a1, const ::org::apache::lucene::search::join::ScoreMode & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9343b0329f866efc, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Weight ToParentBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean ToParentBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::getChildQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getChildQuery_cbf839a480265450]));
          }

          jint ToParentBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String ToParentBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void ToParentBlockJoinQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_getChildQuery(t_ToParentBlockJoinQuery *self);
          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_visit(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_get__childQuery(t_ToParentBlockJoinQuery *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinQuery, childQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, getChildQuery, METH_NOARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ToParentBlockJoinQuery)[] = {
            { Py_tp_methods, t_ToParentBlockJoinQuery__methods_ },
            { Py_tp_init, (void *) t_ToParentBlockJoinQuery_init_ },
            { Py_tp_getset, t_ToParentBlockJoinQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ToParentBlockJoinQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(ToParentBlockJoinQuery, t_ToParentBlockJoinQuery, ToParentBlockJoinQuery);

          void t_ToParentBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinQuery), &PY_TYPE_DEF(ToParentBlockJoinQuery), module, "ToParentBlockJoinQuery", 0);
          }

          void t_ToParentBlockJoinQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinQuery), "class_", make_descriptor(ToParentBlockJoinQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinQuery), "wrapfn_", make_descriptor(t_ToParentBlockJoinQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinQuery::wrap_Object(ToParentBlockJoinQuery(((t_ToParentBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::join::BitSetProducer a1((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a2((jobject) NULL);
            PyTypeObject **p2;
            ToParentBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              INT_CALL(object = ToParentBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_getChildQuery(t_ToParentBlockJoinQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getChildQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_visit(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_get__childQuery(t_ToParentBlockJoinQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDate.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDate::class$ = NULL;
          jmethodID *MutableValueDate::mids$ = NULL;
          bool MutableValueDate::live$ = false;

          jclass MutableValueDate::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDate");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDate::MutableValueDate() : ::org::apache::lucene::util::mutable$::MutableValueLong(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDate::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          ::java::lang::Object MutableValueDate::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args);
          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args);

          static PyMethodDef t_MutableValueDate__methods_[] = {
            DECLARE_METHOD(t_MutableValueDate, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDate, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueDate)[] = {
            { Py_tp_methods, t_MutableValueDate__methods_ },
            { Py_tp_init, (void *) t_MutableValueDate_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueDate)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValueLong),
            NULL
          };

          DEFINE_TYPE(MutableValueDate, t_MutableValueDate, MutableValueDate);

          void t_MutableValueDate::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDate), &PY_TYPE_DEF(MutableValueDate), module, "MutableValueDate", 0);
          }

          void t_MutableValueDate::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDate), "class_", make_descriptor(MutableValueDate::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDate), "wrapfn_", make_descriptor(t_MutableValueDate::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDate), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDate::initializeClass, 1)))
              return NULL;
            return t_MutableValueDate::wrap_Object(MutableValueDate(((t_MutableValueDate *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDate::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDate object((jobject) NULL);

            INT_CALL(object = MutableValueDate());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueDate), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueDate), (PyObject *) self, "toObject", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilterFactory::class$ = NULL;
          jmethodID *GermanStemFilterFactory::mids$ = NULL;
          bool GermanStemFilterFactory::live$ = false;
          ::java::lang::String *GermanStemFilterFactory::NAME = NULL;

          jclass GermanStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_10b8eb0ea054e793] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/de/GermanStemFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilterFactory::GermanStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::de::GermanStemFilter GermanStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::de::GermanStemFilter(env->callObjectMethod(this$, mids$[mid_create_10b8eb0ea054e793], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanStemFilterFactory)[] = {
            { Py_tp_methods, t_GermanStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GermanStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GermanStemFilterFactory, t_GermanStemFilterFactory, GermanStemFilterFactory);

          void t_GermanStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilterFactory), &PY_TYPE_DEF(GermanStemFilterFactory), module, "GermanStemFilterFactory", 0);
          }

          void t_GermanStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilterFactory), "class_", make_descriptor(GermanStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilterFactory), "wrapfn_", make_descriptor(t_GermanStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilterFactory), "NAME", make_descriptor(j2p(*GermanStemFilterFactory::NAME)));
          }

          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilterFactory::wrap_Object(GermanStemFilterFactory(((t_GermanStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::de::GermanStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::de::t_GermanStemFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GermanStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/TimSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *TimSorter::class$ = NULL;
        jmethodID *TimSorter::mids$ = NULL;
        bool TimSorter::live$ = false;

        jclass TimSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/TimSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_438c62480c481c65] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_restore_438c62480c481c65] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_compareSaved_57a58545eba514db] = env->getMethodID(cls, "compareSaved", "(II)I");
            mids$[mid_save_438c62480c481c65] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TimSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args);

        static PyMethodDef t_TimSorter__methods_[] = {
          DECLARE_METHOD(t_TimSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TimSorter)[] = {
          { Py_tp_methods, t_TimSorter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TimSorter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Sorter),
          NULL
        };

        DEFINE_TYPE(TimSorter, t_TimSorter, TimSorter);

        void t_TimSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(TimSorter), &PY_TYPE_DEF(TimSorter), module, "TimSorter", 0);
        }

        void t_TimSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimSorter), "class_", make_descriptor(TimSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimSorter), "wrapfn_", make_descriptor(t_TimSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimSorter::initializeClass, 1)))
            return NULL;
          return t_TimSorter::wrap_Object(TimSorter(((t_TimSorter *) arg)->object.this$));
        }
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TimSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/BreakIterator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/text/BreakIterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *BreakIterator::class$ = NULL;
    jmethodID *BreakIterator::mids$ = NULL;
    bool BreakIterator::live$ = false;
    jint BreakIterator::DONE = (jint) 0;

    jclass BreakIterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/BreakIterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_current_9972fcc56b44e79d] = env->getMethodID(cls, "current", "()I");
        mids$[mid_first_9972fcc56b44e79d] = env->getMethodID(cls, "first", "()I");
        mids$[mid_following_1e143afe1894d213] = env->getMethodID(cls, "following", "(I)I");
        mids$[mid_getAvailableLocales_9de0c9f607235a40] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCharacterInstance_f15a5abf5d7f4951] = env->getStaticMethodID(cls, "getCharacterInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getCharacterInstance_7c1a8f0d37bbd4c0] = env->getStaticMethodID(cls, "getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_f15a5abf5d7f4951] = env->getStaticMethodID(cls, "getLineInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_7c1a8f0d37bbd4c0] = env->getStaticMethodID(cls, "getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_f15a5abf5d7f4951] = env->getStaticMethodID(cls, "getSentenceInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_7c1a8f0d37bbd4c0] = env->getStaticMethodID(cls, "getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_f15a5abf5d7f4951] = env->getStaticMethodID(cls, "getWordInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_7c1a8f0d37bbd4c0] = env->getStaticMethodID(cls, "getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_isBoundary_a1d30e1ee40c89a2] = env->getMethodID(cls, "isBoundary", "(I)Z");
        mids$[mid_last_9972fcc56b44e79d] = env->getMethodID(cls, "last", "()I");
        mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");
        mids$[mid_next_1e143afe1894d213] = env->getMethodID(cls, "next", "(I)I");
        mids$[mid_preceding_1e143afe1894d213] = env->getMethodID(cls, "preceding", "(I)I");
        mids$[mid_previous_9972fcc56b44e79d] = env->getMethodID(cls, "previous", "()I");
        mids$[mid_setText_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        DONE = env->getStaticIntField(cls, "DONE");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object BreakIterator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jint BreakIterator::current() const
    {
      return env->callIntMethod(this$, mids$[mid_current_9972fcc56b44e79d]);
    }

    jint BreakIterator::first() const
    {
      return env->callIntMethod(this$, mids$[mid_first_9972fcc56b44e79d]);
    }

    jint BreakIterator::following(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_following_1e143afe1894d213], a0);
    }

    JArray< ::java::util::Locale > BreakIterator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_9de0c9f607235a40]));
    }

    BreakIterator BreakIterator::getCharacterInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_f15a5abf5d7f4951]));
    }

    BreakIterator BreakIterator::getCharacterInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_7c1a8f0d37bbd4c0], a0.this$));
    }

    BreakIterator BreakIterator::getLineInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_f15a5abf5d7f4951]));
    }

    BreakIterator BreakIterator::getLineInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_7c1a8f0d37bbd4c0], a0.this$));
    }

    BreakIterator BreakIterator::getSentenceInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_f15a5abf5d7f4951]));
    }

    BreakIterator BreakIterator::getSentenceInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_7c1a8f0d37bbd4c0], a0.this$));
    }

    BreakIterator BreakIterator::getWordInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_f15a5abf5d7f4951]));
    }

    BreakIterator BreakIterator::getWordInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_7c1a8f0d37bbd4c0], a0.this$));
    }

    jboolean BreakIterator::isBoundary(jint a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isBoundary_a1d30e1ee40c89a2], a0);
    }

    jint BreakIterator::last() const
    {
      return env->callIntMethod(this$, mids$[mid_last_9972fcc56b44e79d]);
    }

    jint BreakIterator::next() const
    {
      return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
    }

    jint BreakIterator::next(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_next_1e143afe1894d213], a0);
    }

    jint BreakIterator::preceding(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_preceding_1e143afe1894d213], a0);
    }

    jint BreakIterator::previous() const
    {
      return env->callIntMethod(this$, mids$[mid_previous_9972fcc56b44e79d]);
    }

    void BreakIterator::setText(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setText_9fd2eb66a64e6f0f], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_clone(t_BreakIterator *self);
    static PyObject *t_BreakIterator_current(t_BreakIterator *self);
    static PyObject *t_BreakIterator_first(t_BreakIterator *self);
    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_last(t_BreakIterator *self);
    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args);
    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_previous(t_BreakIterator *self);
    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data);
    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data);
    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data);
    static PyGetSetDef t_BreakIterator__fields_[] = {
      DECLARE_GET_FIELD(t_BreakIterator, availableLocales),
      DECLARE_GET_FIELD(t_BreakIterator, characterInstance),
      DECLARE_GET_FIELD(t_BreakIterator, lineInstance),
      DECLARE_GET_FIELD(t_BreakIterator, sentenceInstance),
      DECLARE_SET_FIELD(t_BreakIterator, text),
      DECLARE_GET_FIELD(t_BreakIterator, wordInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_BreakIterator__methods_[] = {
      DECLARE_METHOD(t_BreakIterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, clone, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, current, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, first, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, following, METH_O),
      DECLARE_METHOD(t_BreakIterator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getCharacterInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getLineInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getSentenceInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getWordInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, isBoundary, METH_O),
      DECLARE_METHOD(t_BreakIterator, last, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, next, METH_VARARGS),
      DECLARE_METHOD(t_BreakIterator, preceding, METH_O),
      DECLARE_METHOD(t_BreakIterator, previous, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, setText, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(BreakIterator)[] = {
      { Py_tp_methods, t_BreakIterator__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_BreakIterator__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(BreakIterator)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(BreakIterator, t_BreakIterator, BreakIterator);

    void t_BreakIterator::install(PyObject *module)
    {
      installType(&PY_TYPE(BreakIterator), &PY_TYPE_DEF(BreakIterator), module, "BreakIterator", 0);
    }

    void t_BreakIterator::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIterator), "class_", make_descriptor(BreakIterator::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIterator), "wrapfn_", make_descriptor(t_BreakIterator::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIterator), "boxfn_", make_descriptor(boxObject));
      env->getClass(BreakIterator::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIterator), "DONE", make_descriptor(BreakIterator::DONE));
    }

    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, BreakIterator::initializeClass, 1)))
        return NULL;
      return t_BreakIterator::wrap_Object(BreakIterator(((t_BreakIterator *) arg)->object.this$));
    }
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, BreakIterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_BreakIterator_clone(t_BreakIterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_BreakIterator_current(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.current());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_first(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.first());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.following(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "following", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::BreakIterator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCharacterInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLineInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getSentenceInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getWordInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.isBoundary(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isBoundary", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_last(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.last());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.next());
          return PyLong_FromLong((long) result);
        }
        break;
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.next(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "next", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.preceding(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "preceding", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_previous(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.previous());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setText(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setText", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getCharacterInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getLineInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getSentenceInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setText(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "text", arg);
      return -1;
    }

    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getWordInstance());
      return t_BreakIterator::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilterFactory::class$ = NULL;
          jmethodID *LimitTokenCountFilterFactory::mids$ = NULL;
          bool LimitTokenCountFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::NAME = NULL;

          jclass LimitTokenCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_COUNT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_COUNT_KEY", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilterFactory::LimitTokenCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenCountFilterFactory)[] = {
            { Py_tp_methods, t_LimitTokenCountFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LimitTokenCountFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenCountFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory, LimitTokenCountFilterFactory);

          void t_LimitTokenCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilterFactory), &PY_TYPE_DEF(LimitTokenCountFilterFactory), module, "LimitTokenCountFilterFactory", 0);
          }

          void t_LimitTokenCountFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "class_", make_descriptor(LimitTokenCountFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "wrapfn_", make_descriptor(t_LimitTokenCountFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenCountFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "MAX_TOKEN_COUNT_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilterFactory), "NAME", make_descriptor(j2p(*LimitTokenCountFilterFactory::NAME)));
          }

          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilterFactory::wrap_Object(LimitTokenCountFilterFactory(((t_LimitTokenCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LimitTokenCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$SubReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$SubReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$SubReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$SubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_c175952bcee17188] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/LeafReader;");
            mids$[mid_wrap_a976ad78f2a75f1a] = env->getMethodID(cls, "wrap", "(Ljava/util/List;)[Lorg/apache/lucene/index/LeafReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$SubReaderWrapper::FilterDirectoryReader$SubReaderWrapper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::LeafReader FilterDirectoryReader$SubReaderWrapper::wrap(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          return ::org::apache::lucene::index::LeafReader(env->callObjectMethod(this$, mids$[mid_wrap_c175952bcee17188], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$SubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$SubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$SubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, wrap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterDirectoryReader$SubReaderWrapper)[] = {
          { Py_tp_methods, t_FilterDirectoryReader$SubReaderWrapper__methods_ },
          { Py_tp_init, (void *) t_FilterDirectoryReader$SubReaderWrapper_init_ },
          { Py_tp_getset, t_FilterDirectoryReader$SubReaderWrapper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterDirectoryReader$SubReaderWrapper)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper, FilterDirectoryReader$SubReaderWrapper);
        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(const FilterDirectoryReader$SubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$SubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper), &PY_TYPE_DEF(FilterDirectoryReader$SubReaderWrapper), module, "FilterDirectoryReader$SubReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$SubReaderWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader$SubReaderWrapper), "class_", make_descriptor(FilterDirectoryReader$SubReaderWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader$SubReaderWrapper), "wrapfn_", make_descriptor(t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader$SubReaderWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(FilterDirectoryReader$SubReaderWrapper(((t_FilterDirectoryReader$SubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$SubReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$SubReaderWrapper());
          self->object = object;
          self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::LeafReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_LeafReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$MaxBytesLengthExceededException::class$ = NULL;
        jmethodID *BytesRefHash$MaxBytesLengthExceededException::mids$ = NULL;
        bool BytesRefHash$MaxBytesLengthExceededException::live$ = false;

        jclass BytesRefHash$MaxBytesLengthExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BytesRefHash$MaxBytesLengthExceededException__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefHash$MaxBytesLengthExceededException)[] = {
          { Py_tp_methods, t_BytesRefHash$MaxBytesLengthExceededException__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefHash$MaxBytesLengthExceededException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(BytesRefHash$MaxBytesLengthExceededException, t_BytesRefHash$MaxBytesLengthExceededException, BytesRefHash$MaxBytesLengthExceededException);

        void t_BytesRefHash$MaxBytesLengthExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), &PY_TYPE_DEF(BytesRefHash$MaxBytesLengthExceededException), module, "BytesRefHash$MaxBytesLengthExceededException", 0);
        }

        void t_BytesRefHash$MaxBytesLengthExceededException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), "class_", make_descriptor(BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), "wrapfn_", make_descriptor(t_BytesRefHash$MaxBytesLengthExceededException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$MaxBytesLengthExceededException::wrap_Object(BytesRefHash$MaxBytesLengthExceededException(((t_BytesRefHash$MaxBytesLengthExceededException *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetObject.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoShape::class$ = NULL;
          jmethodID *GeoShape::mids$ = NULL;
          bool GeoShape::live$ = false;

          jclass GeoShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEdgePoints_e945274bd0921a4a] = env->getMethodID(cls, "getEdgePoints", "()[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_intersects_e74435b8d47a8bda] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > GeoShape::getEdgePoints() const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_getEdgePoints_e945274bd0921a4a]));
          }

          jboolean GeoShape::intersects(const ::org::apache::lucene::spatial3d::geom::Plane & a0, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_e74435b8d47a8bda], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoShape_getEdgePoints(t_GeoShape *self);
          static PyObject *t_GeoShape_intersects(t_GeoShape *self, PyObject *args);
          static PyObject *t_GeoShape_get__edgePoints(t_GeoShape *self, void *data);
          static PyGetSetDef t_GeoShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoShape, edgePoints),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoShape__methods_[] = {
            DECLARE_METHOD(t_GeoShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoShape, getEdgePoints, METH_NOARGS),
            DECLARE_METHOD(t_GeoShape, intersects, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoShape)[] = {
            { Py_tp_methods, t_GeoShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_GeoShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Bounded),
            NULL
          };

          DEFINE_TYPE(GeoShape, t_GeoShape, GeoShape);

          void t_GeoShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoShape), &PY_TYPE_DEF(GeoShape), module, "GeoShape", 0);
          }

          void t_GeoShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoShape), "class_", make_descriptor(GeoShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoShape), "wrapfn_", make_descriptor(t_GeoShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoShape::initializeClass, 1)))
              return NULL;
            return t_GeoShape::wrap_Object(GeoShape(((t_GeoShape *) arg)->object.this$));
          }
          static PyObject *t_GeoShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoShape_getEdgePoints(t_GeoShape *self)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getEdgePoints());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
          }

          static PyObject *t_GeoShape_intersects(t_GeoShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Plane a0((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k[k[k", ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.intersects(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersects", args);
            return NULL;
          }

          static PyObject *t_GeoShape_get__edgePoints(t_GeoShape *self, void *data)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getEdgePoints());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *UTF32ToUTF8::class$ = NULL;
          jmethodID *UTF32ToUTF8::mids$ = NULL;
          bool UTF32ToUTF8::live$ = false;

          jclass UTF32ToUTF8::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/UTF32ToUTF8");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_convert_cb3855ae955106b8] = env->getMethodID(cls, "convert", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UTF32ToUTF8::UTF32ToUTF8() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::automaton::Automaton UTF32ToUTF8::convert(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_convert_cb3855ae955106b8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg);

          static PyMethodDef t_UTF32ToUTF8__methods_[] = {
            DECLARE_METHOD(t_UTF32ToUTF8, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, convert, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UTF32ToUTF8)[] = {
            { Py_tp_methods, t_UTF32ToUTF8__methods_ },
            { Py_tp_init, (void *) t_UTF32ToUTF8_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UTF32ToUTF8)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UTF32ToUTF8, t_UTF32ToUTF8, UTF32ToUTF8);

          void t_UTF32ToUTF8::install(PyObject *module)
          {
            installType(&PY_TYPE(UTF32ToUTF8), &PY_TYPE_DEF(UTF32ToUTF8), module, "UTF32ToUTF8", 0);
          }

          void t_UTF32ToUTF8::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UTF32ToUTF8), "class_", make_descriptor(UTF32ToUTF8::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UTF32ToUTF8), "wrapfn_", make_descriptor(t_UTF32ToUTF8::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UTF32ToUTF8), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UTF32ToUTF8::initializeClass, 1)))
              return NULL;
            return t_UTF32ToUTF8::wrap_Object(UTF32ToUTF8(((t_UTF32ToUTF8 *) arg)->object.this$));
          }
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UTF32ToUTF8::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds)
          {
            UTF32ToUTF8 object((jobject) NULL);

            INT_CALL(object = UTF32ToUTF8());
            self->object = object;

            return 0;
          }

          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.convert(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "convert", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/PrintTaxonomyStats.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *PrintTaxonomyStats::class$ = NULL;
          jmethodID *PrintTaxonomyStats::mids$ = NULL;
          bool PrintTaxonomyStats::live$ = false;

          jclass PrintTaxonomyStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/PrintTaxonomyStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
              mids$[mid_printStats_b26b53d74effc7c6] = env->getStaticMethodID(cls, "printStats", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/io/PrintStream;Z)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrintTaxonomyStats::PrintTaxonomyStats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PrintTaxonomyStats::main(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
          }

          void PrintTaxonomyStats::printStats(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_printStats_b26b53d74effc7c6], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PrintTaxonomyStats__methods_[] = {
            DECLARE_METHOD(t_PrintTaxonomyStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, main, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, printStats, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PrintTaxonomyStats)[] = {
            { Py_tp_methods, t_PrintTaxonomyStats__methods_ },
            { Py_tp_init, (void *) t_PrintTaxonomyStats_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PrintTaxonomyStats)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PrintTaxonomyStats, t_PrintTaxonomyStats, PrintTaxonomyStats);

          void t_PrintTaxonomyStats::install(PyObject *module)
          {
            installType(&PY_TYPE(PrintTaxonomyStats), &PY_TYPE_DEF(PrintTaxonomyStats), module, "PrintTaxonomyStats", 0);
          }

          void t_PrintTaxonomyStats::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PrintTaxonomyStats), "class_", make_descriptor(PrintTaxonomyStats::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PrintTaxonomyStats), "wrapfn_", make_descriptor(t_PrintTaxonomyStats::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PrintTaxonomyStats), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrintTaxonomyStats::initializeClass, 1)))
              return NULL;
            return t_PrintTaxonomyStats::wrap_Object(PrintTaxonomyStats(((t_PrintTaxonomyStats *) arg)->object.this$));
          }
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrintTaxonomyStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds)
          {
            PrintTaxonomyStats object((jobject) NULL);

            INT_CALL(object = PrintTaxonomyStats());
            self->object = object;

            return 0;
          }

          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::main(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "main", arg);
            return NULL;
          }

          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::io::PrintStream a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::printStats(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "printStats", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FilterCodec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FilterCodec::class$ = NULL;
        jmethodID *FilterCodec::mids$ = NULL;
        bool FilterCodec::live$ = false;

        jclass FilterCodec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FilterCodec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
            mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
            mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::CompoundFormat FilterCodec::compoundFormat() const
        {
          return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat FilterCodec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat FilterCodec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat FilterCodec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
        }

        ::org::apache::lucene::codecs::NormsFormat FilterCodec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
        }

        ::org::apache::lucene::codecs::PointsFormat FilterCodec::pointsFormat() const
        {
          return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
        }

        ::org::apache::lucene::codecs::PostingsFormat FilterCodec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat FilterCodec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat FilterCodec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat FilterCodec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_compoundFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_pointsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args);

        static PyMethodDef t_FilterCodec__methods_[] = {
          DECLARE_METHOD(t_FilterCodec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, compoundFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, docValuesFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, fieldInfosFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, liveDocsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, normsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, pointsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, postingsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, segmentInfoFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, storedFieldsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, termVectorsFormat, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterCodec)[] = {
          { Py_tp_methods, t_FilterCodec__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterCodec)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
          NULL
        };

        DEFINE_TYPE(FilterCodec, t_FilterCodec, FilterCodec);

        void t_FilterCodec::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodec), &PY_TYPE_DEF(FilterCodec), module, "FilterCodec", 0);
        }

        void t_FilterCodec::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodec), "class_", make_descriptor(FilterCodec::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodec), "wrapfn_", make_descriptor(t_FilterCodec::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodec), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodec::initializeClass, 1)))
            return NULL;
          return t_FilterCodec::wrap_Object(FilterCodec(((t_FilterCodec *) arg)->object.this$));
        }
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterCodec_compoundFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.compoundFormat());
            return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "compoundFormat", args, 2);
        }

        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValuesFormat());
            return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "docValuesFormat", args, 2);
        }

        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fieldInfosFormat());
            return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
        }

        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.liveDocsFormat());
            return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "liveDocsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.normsFormat());
            return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "normsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_pointsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.pointsFormat());
            return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "pointsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.postingsFormat());
            return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "postingsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.segmentInfoFormat());
            return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
        }

        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.storedFieldsFormat());
            return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termVectorsFormat());
            return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodec), (PyObject *) self, "termVectorsFormat", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/BM25NBClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *BM25NBClassifier::class$ = NULL;
        jmethodID *BM25NBClassifier::mids$ = NULL;
        bool BM25NBClassifier::live$ = false;

        jclass BM25NBClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/BM25NBClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e4936342c09a71e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BM25NBClassifier::BM25NBClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::search::Query & a2, const ::java::lang::String & a3, const JArray< ::java::lang::String > & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e4936342c09a71e, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::org::apache::lucene::classification::ClassificationResult BM25NBClassifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List BM25NBClassifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List BM25NBClassifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_BM25NBClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BM25NBClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BM25NBClassifier_init_(t_BM25NBClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BM25NBClassifier_assignClass(t_BM25NBClassifier *self, PyObject *arg);
        static PyObject *t_BM25NBClassifier_getClasses(t_BM25NBClassifier *self, PyObject *args);

        static PyMethodDef t_BM25NBClassifier__methods_[] = {
          DECLARE_METHOD(t_BM25NBClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BM25NBClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BM25NBClassifier, assignClass, METH_O),
          DECLARE_METHOD(t_BM25NBClassifier, getClasses, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BM25NBClassifier)[] = {
          { Py_tp_methods, t_BM25NBClassifier__methods_ },
          { Py_tp_init, (void *) t_BM25NBClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BM25NBClassifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BM25NBClassifier, t_BM25NBClassifier, BM25NBClassifier);

        void t_BM25NBClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(BM25NBClassifier), &PY_TYPE_DEF(BM25NBClassifier), module, "BM25NBClassifier", 0);
        }

        void t_BM25NBClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BM25NBClassifier), "class_", make_descriptor(BM25NBClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BM25NBClassifier), "wrapfn_", make_descriptor(t_BM25NBClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BM25NBClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BM25NBClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BM25NBClassifier::initializeClass, 1)))
            return NULL;
          return t_BM25NBClassifier::wrap_Object(BM25NBClassifier(((t_BM25NBClassifier *) arg)->object.this$));
        }
        static PyObject *t_BM25NBClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BM25NBClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BM25NBClassifier_init_(t_BM25NBClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);
          JArray< ::java::lang::String > a4((jobject) NULL);
          BM25NBClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkks[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = BM25NBClassifier(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BM25NBClassifier_assignClass(t_BM25NBClassifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_BM25NBClassifier_getClasses(t_BM25NBClassifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizerFactory::class$ = NULL;
          jmethodID *LetterTokenizerFactory::mids$ = NULL;
          bool LetterTokenizerFactory::live$ = false;
          ::java::lang::String *LetterTokenizerFactory::NAME = NULL;

          jclass LetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5123b15b58931df4] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/core/LetterTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizerFactory::LetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LetterTokenizer LetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::core::LetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_5123b15b58931df4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_LetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LetterTokenizerFactory)[] = {
            { Py_tp_methods, t_LetterTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_LetterTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LetterTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(LetterTokenizerFactory, t_LetterTokenizerFactory, LetterTokenizerFactory);

          void t_LetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizerFactory), &PY_TYPE_DEF(LetterTokenizerFactory), module, "LetterTokenizerFactory", 0);
          }

          void t_LetterTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizerFactory), "class_", make_descriptor(LetterTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizerFactory), "wrapfn_", make_descriptor(t_LetterTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LetterTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizerFactory), "NAME", make_descriptor(j2p(*LetterTokenizerFactory::NAME)));
          }

          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizerFactory::wrap_Object(LetterTokenizerFactory(((t_LetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::LetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_LetterTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanPartOfSpeechStopFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanPartOfSpeechStopFilterFactory::class$ = NULL;
          jmethodID *KoreanPartOfSpeechStopFilterFactory::mids$ = NULL;
          bool KoreanPartOfSpeechStopFilterFactory::live$ = false;
          ::java::lang::String *KoreanPartOfSpeechStopFilterFactory::NAME = NULL;

          jclass KoreanPartOfSpeechStopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanPartOfSpeechStopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanPartOfSpeechStopFilterFactory::KoreanPartOfSpeechStopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KoreanPartOfSpeechStopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanPartOfSpeechStopFilterFactory_init_(t_KoreanPartOfSpeechStopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_create(t_KoreanPartOfSpeechStopFilterFactory *self, PyObject *args);

          static PyMethodDef t_KoreanPartOfSpeechStopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KoreanPartOfSpeechStopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanPartOfSpeechStopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanPartOfSpeechStopFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanPartOfSpeechStopFilterFactory)[] = {
            { Py_tp_methods, t_KoreanPartOfSpeechStopFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KoreanPartOfSpeechStopFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanPartOfSpeechStopFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KoreanPartOfSpeechStopFilterFactory, t_KoreanPartOfSpeechStopFilterFactory, KoreanPartOfSpeechStopFilterFactory);

          void t_KoreanPartOfSpeechStopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanPartOfSpeechStopFilterFactory), &PY_TYPE_DEF(KoreanPartOfSpeechStopFilterFactory), module, "KoreanPartOfSpeechStopFilterFactory", 0);
          }

          void t_KoreanPartOfSpeechStopFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilterFactory), "class_", make_descriptor(KoreanPartOfSpeechStopFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilterFactory), "wrapfn_", make_descriptor(t_KoreanPartOfSpeechStopFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanPartOfSpeechStopFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilterFactory), "NAME", make_descriptor(j2p(*KoreanPartOfSpeechStopFilterFactory::NAME)));
          }

          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanPartOfSpeechStopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KoreanPartOfSpeechStopFilterFactory::wrap_Object(KoreanPartOfSpeechStopFilterFactory(((t_KoreanPartOfSpeechStopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanPartOfSpeechStopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanPartOfSpeechStopFilterFactory_init_(t_KoreanPartOfSpeechStopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KoreanPartOfSpeechStopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KoreanPartOfSpeechStopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanPartOfSpeechStopFilterFactory_create(t_KoreanPartOfSpeechStopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KoreanPartOfSpeechStopFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OverlaySingleDocTermsLeafReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OverlaySingleDocTermsLeafReader::class$ = NULL;
          jmethodID *OverlaySingleDocTermsLeafReader::mids$ = NULL;
          bool OverlaySingleDocTermsLeafReader::live$ = false;

          jclass OverlaySingleDocTermsLeafReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OverlaySingleDocTermsLeafReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_273e2f2ef481a24f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/LeafReader;Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;I)V");
              mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OverlaySingleDocTermsLeafReader::OverlaySingleDocTermsLeafReader(const ::org::apache::lucene::index::LeafReader & a0, const ::org::apache::lucene::index::LeafReader & a1, const ::java::lang::String & a2, jint a3) : ::org::apache::lucene::index::FilterLeafReader(env->newObject(initializeClass, &mids$, mid_init$_273e2f2ef481a24f, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::index::IndexReader$CacheHelper OverlaySingleDocTermsLeafReader::getCoreCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
          }

          ::org::apache::lucene::index::IndexReader$CacheHelper OverlaySingleDocTermsLeafReader::getReaderCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
          }

          ::org::apache::lucene::index::Terms OverlaySingleDocTermsLeafReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OverlaySingleDocTermsLeafReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OverlaySingleDocTermsLeafReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OverlaySingleDocTermsLeafReader_init_(t_OverlaySingleDocTermsLeafReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OverlaySingleDocTermsLeafReader_getCoreCacheHelper(t_OverlaySingleDocTermsLeafReader *self, PyObject *args);
          static PyObject *t_OverlaySingleDocTermsLeafReader_getReaderCacheHelper(t_OverlaySingleDocTermsLeafReader *self, PyObject *args);
          static PyObject *t_OverlaySingleDocTermsLeafReader_terms(t_OverlaySingleDocTermsLeafReader *self, PyObject *args);
          static PyObject *t_OverlaySingleDocTermsLeafReader_get__coreCacheHelper(t_OverlaySingleDocTermsLeafReader *self, void *data);
          static PyObject *t_OverlaySingleDocTermsLeafReader_get__readerCacheHelper(t_OverlaySingleDocTermsLeafReader *self, void *data);
          static PyGetSetDef t_OverlaySingleDocTermsLeafReader__fields_[] = {
            DECLARE_GET_FIELD(t_OverlaySingleDocTermsLeafReader, coreCacheHelper),
            DECLARE_GET_FIELD(t_OverlaySingleDocTermsLeafReader, readerCacheHelper),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OverlaySingleDocTermsLeafReader__methods_[] = {
            DECLARE_METHOD(t_OverlaySingleDocTermsLeafReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OverlaySingleDocTermsLeafReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OverlaySingleDocTermsLeafReader, getCoreCacheHelper, METH_VARARGS),
            DECLARE_METHOD(t_OverlaySingleDocTermsLeafReader, getReaderCacheHelper, METH_VARARGS),
            DECLARE_METHOD(t_OverlaySingleDocTermsLeafReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OverlaySingleDocTermsLeafReader)[] = {
            { Py_tp_methods, t_OverlaySingleDocTermsLeafReader__methods_ },
            { Py_tp_init, (void *) t_OverlaySingleDocTermsLeafReader_init_ },
            { Py_tp_getset, t_OverlaySingleDocTermsLeafReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OverlaySingleDocTermsLeafReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader),
            NULL
          };

          DEFINE_TYPE(OverlaySingleDocTermsLeafReader, t_OverlaySingleDocTermsLeafReader, OverlaySingleDocTermsLeafReader);

          void t_OverlaySingleDocTermsLeafReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OverlaySingleDocTermsLeafReader), &PY_TYPE_DEF(OverlaySingleDocTermsLeafReader), module, "OverlaySingleDocTermsLeafReader", 0);
          }

          void t_OverlaySingleDocTermsLeafReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OverlaySingleDocTermsLeafReader), "class_", make_descriptor(OverlaySingleDocTermsLeafReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OverlaySingleDocTermsLeafReader), "wrapfn_", make_descriptor(t_OverlaySingleDocTermsLeafReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OverlaySingleDocTermsLeafReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OverlaySingleDocTermsLeafReader::initializeClass, 1)))
              return NULL;
            return t_OverlaySingleDocTermsLeafReader::wrap_Object(OverlaySingleDocTermsLeafReader(((t_OverlaySingleDocTermsLeafReader *) arg)->object.this$));
          }
          static PyObject *t_OverlaySingleDocTermsLeafReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OverlaySingleDocTermsLeafReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OverlaySingleDocTermsLeafReader_init_(t_OverlaySingleDocTermsLeafReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            OverlaySingleDocTermsLeafReader object((jobject) NULL);

            if (!parseArgs(args, "kksI", ::org::apache::lucene::index::LeafReader::initializeClass, ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = OverlaySingleDocTermsLeafReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_getCoreCacheHelper(t_OverlaySingleDocTermsLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getCoreCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OverlaySingleDocTermsLeafReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_getReaderCacheHelper(t_OverlaySingleDocTermsLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReaderCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OverlaySingleDocTermsLeafReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_terms(t_OverlaySingleDocTermsLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OverlaySingleDocTermsLeafReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_get__coreCacheHelper(t_OverlaySingleDocTermsLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }

          static PyObject *t_OverlaySingleDocTermsLeafReader_get__readerCacheHelper(t_OverlaySingleDocTermsLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways.h"
#include "org/apache/lucene/facet/DrillSideways$ConcurrentDrillSidewaysResult.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways::class$ = NULL;
        jmethodID *DrillSideways::mids$ = NULL;
        bool DrillSideways::live$ = false;

        jclass DrillSideways::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7c7f02a1a5cd6e57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_fdae4deb7c31098c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)V");
            mids$[mid_init$_b8faab75c840f8ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
            mids$[mid_init$_b19060b30c285464] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_search_0e2c19f7aa8393d2] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_f8cf1e9973bd9fa7] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_018032d1259857f5] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/CollectorManager;)Lorg/apache/lucene/facet/DrillSideways$ConcurrentDrillSidewaysResult;");
            mids$[mid_search_5853b3b847f2cf95] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/facet/DrillDownQuery;I)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_search_73997db8a6a1bce4] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/facet/DrillDownQuery;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;Z)Lorg/apache/lucene/facet/DrillSideways$DrillSidewaysResult;");
            mids$[mid_scoreSubDocsAtOnce_8454bd5aa23fd11e] = env->getMethodID(cls, "scoreSubDocsAtOnce", "()Z");
            mids$[mid_buildFacetsResult_0d859c906444c15b] = env->getMethodID(cls, "buildFacetsResult", "(Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/FacetsCollector;[Ljava/lang/String;)Lorg/apache/lucene/facet/Facets;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7c7f02a1a5cd6e57, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fdae4deb7c31098c, a0.this$, a1.this$, a2.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8faab75c840f8ef, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        DrillSideways::DrillSideways(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a3, const ::java::util::concurrent::ExecutorService & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b19060b30c285464, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, jint a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_0e2c19f7aa8393d2], a0.this$, a1));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_f8cf1e9973bd9fa7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$ConcurrentDrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::CollectorManager & a1) const
        {
          return ::org::apache::lucene::facet::DrillSideways$ConcurrentDrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_018032d1259857f5], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::facet::DrillDownQuery & a1, jint a2) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_5853b3b847f2cf95], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult DrillSideways::search(const ::org::apache::lucene::facet::DrillDownQuery & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::FieldDoc & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5) const
        {
          return ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult(env->callObjectMethod(this$, mids$[mid_search_73997db8a6a1bce4], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args);

        static PyMethodDef t_DrillSideways__methods_[] = {
          DECLARE_METHOD(t_DrillSideways, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways, search, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DrillSideways)[] = {
          { Py_tp_methods, t_DrillSideways__methods_ },
          { Py_tp_init, (void *) t_DrillSideways_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DrillSideways)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DrillSideways, t_DrillSideways, DrillSideways);

        void t_DrillSideways::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways), &PY_TYPE_DEF(DrillSideways), module, "DrillSideways", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways), "ConcurrentDrillSidewaysResult", make_descriptor(&PY_TYPE_DEF(DrillSideways$ConcurrentDrillSidewaysResult)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways), "DrillSidewaysResult", make_descriptor(&PY_TYPE_DEF(DrillSideways$DrillSidewaysResult)));
        }

        void t_DrillSideways::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways), "class_", make_descriptor(DrillSideways::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways), "wrapfn_", make_descriptor(t_DrillSideways::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways::initializeClass, 1)))
            return NULL;
          return t_DrillSideways::wrap_Object(DrillSideways(((t_DrillSideways *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways_init_(t_DrillSideways *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
              ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a3((jobject) NULL);
              ::java::util::concurrent::ExecutorService a4((jobject) NULL);
              DrillSideways object((jobject) NULL);

              if (!parseArgs(args, "kkkkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DrillSideways(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways_search(t_DrillSideways *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::CollectorManager a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::facet::DrillSideways$ConcurrentDrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::CollectorManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_CollectorManager::parameters_))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::facet::t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::facet::DrillDownQuery a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::facet::DrillDownQuery::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::facet::DrillDownQuery a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              ::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZ", ::org::apache::lucene::facet::DrillDownQuery::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::facet::t_DrillSideways$DrillSidewaysResult::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriAndWeight.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndriAndQuery.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriAndWeight::class$ = NULL;
        jmethodID *IndriAndWeight::mids$ = NULL;
        bool IndriAndWeight::live$ = false;

        jclass IndriAndWeight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriAndWeight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e9ea31b9439f9bad] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndriAndQuery;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)V");
            mids$[mid_bulkScorer_67bb05f0d672560c] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");
            mids$[mid_scorer_4046a1267922adae] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/Scorer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndriAndWeight::IndriAndWeight(const ::org::apache::lucene::search::IndriAndQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::org::apache::lucene::search::ScoreMode & a2, jfloat a3) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_e9ea31b9439f9bad, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::search::BulkScorer IndriAndWeight::bulkScorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_67bb05f0d672560c], a0.this$));
        }

        ::org::apache::lucene::search::Explanation IndriAndWeight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
        }

        void IndriAndWeight::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
        }

        jboolean IndriAndWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
        }

        ::org::apache::lucene::search::Scorer IndriAndWeight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_4046a1267922adae], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriAndWeight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriAndWeight_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndriAndWeight_init_(t_IndriAndWeight *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndriAndWeight_bulkScorer(t_IndriAndWeight *self, PyObject *args);
        static PyObject *t_IndriAndWeight_explain(t_IndriAndWeight *self, PyObject *args);
        static PyObject *t_IndriAndWeight_extractTerms(t_IndriAndWeight *self, PyObject *args);
        static PyObject *t_IndriAndWeight_isCacheable(t_IndriAndWeight *self, PyObject *args);
        static PyObject *t_IndriAndWeight_scorer(t_IndriAndWeight *self, PyObject *args);

        static PyMethodDef t_IndriAndWeight__methods_[] = {
          DECLARE_METHOD(t_IndriAndWeight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndWeight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndWeight, bulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_IndriAndWeight, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndriAndWeight, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndriAndWeight, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_IndriAndWeight, scorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriAndWeight)[] = {
          { Py_tp_methods, t_IndriAndWeight__methods_ },
          { Py_tp_init, (void *) t_IndriAndWeight_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriAndWeight)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Weight),
          NULL
        };

        DEFINE_TYPE(IndriAndWeight, t_IndriAndWeight, IndriAndWeight);

        void t_IndriAndWeight::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriAndWeight), &PY_TYPE_DEF(IndriAndWeight), module, "IndriAndWeight", 0);
        }

        void t_IndriAndWeight::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndWeight), "class_", make_descriptor(IndriAndWeight::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndWeight), "wrapfn_", make_descriptor(t_IndriAndWeight::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndWeight), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriAndWeight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriAndWeight::initializeClass, 1)))
            return NULL;
          return t_IndriAndWeight::wrap_Object(IndriAndWeight(((t_IndriAndWeight *) arg)->object.this$));
        }
        static PyObject *t_IndriAndWeight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriAndWeight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndriAndWeight_init_(t_IndriAndWeight *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::IndriAndQuery a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a2((jobject) NULL);
          PyTypeObject **p2;
          jfloat a3;
          IndriAndWeight object((jobject) NULL);

          if (!parseArgs(args, "kkKF", ::org::apache::lucene::search::IndriAndQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a3))
          {
            INT_CALL(object = IndriAndWeight(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndriAndWeight_bulkScorer(t_IndriAndWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriAndWeight), (PyObject *) self, "bulkScorer", args, 2);
        }

        static PyObject *t_IndriAndWeight_explain(t_IndriAndWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriAndWeight), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_IndriAndWeight_extractTerms(t_IndriAndWeight *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IndriAndWeight), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_IndriAndWeight_isCacheable(t_IndriAndWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.isCacheable(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndriAndWeight), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_IndriAndWeight_scorer(t_IndriAndWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.scorer(a0));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriAndWeight), (PyObject *) self, "scorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Builder::class$ = NULL;
          jmethodID *SynonymMap$Builder::mids$ = NULL;
          bool SynonymMap$Builder::live$ = false;

          jclass SynonymMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_ad3075940a174dd6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;Z)V");
              mids$[mid_build_832f3380ff98868b] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/synonym/SynonymMap;");
              mids$[mid_join_24f348ebaea89e1a] = env->getStaticMethodID(cls, "join", "([Ljava/lang/String;Lorg/apache/lucene/util/CharsRefBuilder;)Lorg/apache/lucene/util/CharsRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Builder::SynonymMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SynonymMap$Builder::SynonymMap$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

          void SynonymMap$Builder::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_ad3075940a174dd6], a0.this$, a1.this$, a2);
          }

          ::org::apache::lucene::analysis::synonym::SynonymMap SynonymMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::synonym::SynonymMap(env->callObjectMethod(this$, mids$[mid_build_832f3380ff98868b]));
          }

          ::org::apache::lucene::util::CharsRef SynonymMap$Builder::join(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::util::CharsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::CharsRef(env->callStaticObjectMethod(cls, mids$[mid_join_24f348ebaea89e1a], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args);
          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self);
          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SynonymMap$Builder__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, join, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymMap$Builder)[] = {
            { Py_tp_methods, t_SynonymMap$Builder__methods_ },
            { Py_tp_init, (void *) t_SynonymMap$Builder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymMap$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SynonymMap$Builder, t_SynonymMap$Builder, SynonymMap$Builder);

          void t_SynonymMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Builder), &PY_TYPE_DEF(SynonymMap$Builder), module, "SynonymMap$Builder", 0);
          }

          void t_SynonymMap$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Builder), "class_", make_descriptor(SynonymMap$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Builder), "wrapfn_", make_descriptor(t_SynonymMap$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Builder::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Builder::wrap_Object(SynonymMap$Builder(((t_SynonymMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SynonymMap$Builder object((jobject) NULL);

                INT_CALL(object = SynonymMap$Builder());
                self->object = object;
                break;
              }
             case 1:
              {
                jboolean a0;
                SynonymMap$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = SynonymMap$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self)
          {
            ::org::apache::lucene::analysis::synonym::SynonymMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::synonym::t_SynonymMap::wrap_Object(result);
          }

          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::util::CharsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::synonym::SynonymMap$Builder::join(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "join", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Spliterator.h"
#include "java/util/Iterator.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashSet::class$ = NULL;
    jmethodID *HashSet::mids$ = NULL;
    bool HashSet::live$ = false;

    jclass HashSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_50bc3ddc62a19f2d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_da161bce5801b190] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_7a761c107a8e14bd] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

    HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_50bc3ddc62a19f2d, a0.this$)) {}

    HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_da161bce5801b190, a0, a1)) {}

    jboolean HashSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_8b72f2dcdde6fd1d], a0.this$);
    }

    void HashSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    ::java::lang::Object HashSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jboolean HashSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean HashSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    ::java::util::Iterator HashSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
    }

    jboolean HashSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
    }

    jint HashSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
    }

    ::java::util::Spliterator HashSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_7a761c107a8e14bd]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clone(t_HashSet *self);
    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
    static PyGetSetDef t_HashSet__fields_[] = {
      DECLARE_GET_FIELD(t_HashSet, empty),
      DECLARE_GET_FIELD(t_HashSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashSet__methods_[] = {
      DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, spliterator, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(HashSet)[] = {
      { Py_tp_methods, t_HashSet__methods_ },
      { Py_tp_init, (void *) t_HashSet_init_ },
      { Py_tp_getset, t_HashSet__fields_ },
      { Py_tp_iter, (void *) ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >) },
      { Py_tp_iternext, (void *) 0 },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(HashSet)[] = {
      &PY_TYPE_DEF(::java::util::AbstractSet),
      NULL
    };

    DEFINE_TYPE(HashSet, t_HashSet, HashSet);
    PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_HashSet::install(PyObject *module)
    {
      installType(&PY_TYPE(HashSet), &PY_TYPE_DEF(HashSet), module, "HashSet", 0);
    }

    void t_HashSet::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashSet), "class_", make_descriptor(HashSet::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashSet), "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashSet), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
        return NULL;
      return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
    }
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashSet object((jobject) NULL);

          INT_CALL(object = HashSet());
          self->object = object;
          break;
        }
       case 1:
        {
          jint a0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashSet(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashSet_clone(t_HashSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(HashSet), (PyObject *) self, "spliterator", args, 2);
    }
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsWriter::mids$ = NULL;
          bool CompressingStoredFieldsWriter::live$ = false;
          ::java::lang::String *CompressingStoredFieldsWriter::FIELDS_EXTENSION = NULL;
          ::java::lang::String *CompressingStoredFieldsWriter::INDEX_CODEC_NAME = NULL;
          ::java::lang::String *CompressingStoredFieldsWriter::INDEX_EXTENSION = NULL;
          ::java::lang::String *CompressingStoredFieldsWriter::META_EXTENSION = NULL;

          jclass CompressingStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_f2cc1bce94666404] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_6926471512b57791] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_startDocument_f2cc1bce94666404] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_c717cea83051791d] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FIELDS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_EXTENSION", "Ljava/lang/String;"));
              INDEX_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_CODEC_NAME", "Ljava/lang/String;"));
              INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EXTENSION", "Ljava/lang/String;"));
              META_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "META_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void CompressingStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
          }

          void CompressingStoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_f2cc1bce94666404]);
          }

          jint CompressingStoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_6926471512b57791], a0.this$);
          }

          jlong CompressingStoredFieldsWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void CompressingStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_f2cc1bce94666404]);
          }

          void CompressingStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_c717cea83051791d], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_ramBytesUsed(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingStoredFieldsWriter)[] = {
            { Py_tp_methods, t_CompressingStoredFieldsWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingStoredFieldsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsWriter),
            NULL
          };

          DEFINE_TYPE(CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter, CompressingStoredFieldsWriter);

          void t_CompressingStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsWriter), &PY_TYPE_DEF(CompressingStoredFieldsWriter), module, "CompressingStoredFieldsWriter", 0);
          }

          void t_CompressingStoredFieldsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "class_", make_descriptor(CompressingStoredFieldsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "wrapfn_", make_descriptor(t_CompressingStoredFieldsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressingStoredFieldsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "FIELDS_EXTENSION", make_descriptor(j2p(*CompressingStoredFieldsWriter::FIELDS_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "INDEX_CODEC_NAME", make_descriptor(j2p(*CompressingStoredFieldsWriter::INDEX_CODEC_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "INDEX_EXTENSION", make_descriptor(j2p(*CompressingStoredFieldsWriter::INDEX_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsWriter), "META_EXTENSION", make_descriptor(j2p(*CompressingStoredFieldsWriter::META_EXTENSION)));
          }

          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsWriter::wrap_Object(CompressingStoredFieldsWriter(((t_CompressingStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_ramBytesUsed(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordQueue::class$ = NULL;
          jmethodID *SuggestWordQueue::mids$ = NULL;
          bool SuggestWordQueue::live$ = false;
          ::java::util::Comparator *SuggestWordQueue::DEFAULT_COMPARATOR = NULL;

          jclass SuggestWordQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4c76659c2f23dfef] = env->getMethodID(cls, "<init>", "(ILjava/util/Comparator;)V");
              mids$[mid_lessThan_38c2b7aa51b68779] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordQueue::SuggestWordQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          SuggestWordQueue::SuggestWordQueue(jint a0, const ::java::util::Comparator & a1) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_4c76659c2f23dfef, a0, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args);
          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data);
          static PyGetSetDef t_SuggestWordQueue__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestWordQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWordQueue__methods_[] = {
            DECLARE_METHOD(t_SuggestWordQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestWordQueue)[] = {
            { Py_tp_methods, t_SuggestWordQueue__methods_ },
            { Py_tp_init, (void *) t_SuggestWordQueue_init_ },
            { Py_tp_getset, t_SuggestWordQueue__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestWordQueue)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::PriorityQueue),
            NULL
          };

          DEFINE_TYPE(SuggestWordQueue, t_SuggestWordQueue, SuggestWordQueue);
          PyObject *t_SuggestWordQueue::wrap_Object(const SuggestWordQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestWordQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestWordQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordQueue), &PY_TYPE_DEF(SuggestWordQueue), module, "SuggestWordQueue", 0);
          }

          void t_SuggestWordQueue::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordQueue), "class_", make_descriptor(SuggestWordQueue::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordQueue), "wrapfn_", make_descriptor(t_SuggestWordQueue::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordQueue), "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestWordQueue::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordQueue), "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*SuggestWordQueue::DEFAULT_COMPARATOR)));
          }

          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordQueue::initializeClass, 1)))
              return NULL;
            return t_SuggestWordQueue::wrap_Object(SuggestWordQueue(((t_SuggestWordQueue *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SuggestWordQueue(a0));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SuggestWordQueue(a0, a1));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsConsumer::class$ = NULL;
        jmethodID *FieldsConsumer::mids$ = NULL;
        bool FieldsConsumer::live$ = false;

        jclass FieldsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_642801caeb837493] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/codecs/NormsProducer;)V");
            mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsConsumer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void FieldsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_642801caeb837493], a0.this$, a1.this$);
        }

        void FieldsConsumer::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self);
        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args);
        static PyObject *t_FieldsConsumer_write(t_FieldsConsumer *self, PyObject *args);

        static PyMethodDef t_FieldsConsumer__methods_[] = {
          DECLARE_METHOD(t_FieldsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_FieldsConsumer, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldsConsumer)[] = {
          { Py_tp_methods, t_FieldsConsumer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldsConsumer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldsConsumer, t_FieldsConsumer, FieldsConsumer);

        void t_FieldsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsConsumer), &PY_TYPE_DEF(FieldsConsumer), module, "FieldsConsumer", 0);
        }

        void t_FieldsConsumer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsConsumer), "class_", make_descriptor(FieldsConsumer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsConsumer), "wrapfn_", make_descriptor(t_FieldsConsumer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsConsumer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsConsumer::initializeClass, 1)))
            return NULL;
          return t_FieldsConsumer::wrap_Object(FieldsConsumer(((t_FieldsConsumer *) arg)->object.this$));
        }
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_FieldsConsumer_write(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.write(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/lang/Readable.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Reader::class$ = NULL;
    jmethodID *Reader::mids$ = NULL;
    bool Reader::live$ = false;

    jclass Reader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Reader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_040c4cd0390c5aff] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_8454bd5aa23fd11e] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_946cc819d92a7347] = env->getMethodID(cls, "read", "([C)I");
        mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_8454bd5aa23fd11e] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_d711eecdc469624a] = env->getMethodID(cls, "skip", "(J)J");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Reader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
    }

    void Reader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_040c4cd0390c5aff], a0);
    }

    jboolean Reader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_8454bd5aa23fd11e]);
    }

    jint Reader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
    }

    jint Reader::read(const JArray< jchar > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_946cc819d92a7347], a0.this$);
    }

    jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
    }

    jboolean Reader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_8454bd5aa23fd11e]);
    }

    void Reader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
    }

    jlong Reader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_d711eecdc469624a], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_close(t_Reader *self);
    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
    static PyObject *t_Reader_markSupported(t_Reader *self);
    static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
    static PyObject *t_Reader_ready(t_Reader *self);
    static PyObject *t_Reader_reset(t_Reader *self);
    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

    static PyMethodDef t_Reader__methods_[] = {
      DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, close, METH_NOARGS),
      DECLARE_METHOD(t_Reader, mark, METH_O),
      DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_Reader, read, METH_VARARGS),
      DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
      DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
      DECLARE_METHOD(t_Reader, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Reader)[] = {
      { Py_tp_methods, t_Reader__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Reader)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Reader, t_Reader, Reader);

    void t_Reader::install(PyObject *module)
    {
      installType(&PY_TYPE(Reader), &PY_TYPE_DEF(Reader), module, "Reader", 0);
    }

    void t_Reader::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Reader), "class_", make_descriptor(Reader::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Reader), "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Reader), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
        return NULL;
      return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
    }
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Reader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Reader_close(t_Reader *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_Reader_markSupported(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyLong_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_Reader_ready(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.ready());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_reset(t_Reader *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTLookup::class$ = NULL;
            jmethodID *TSTLookup::mids$ = NULL;
            bool TSTLookup::live$ = false;

            jclass TSTLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_a9516587cd7033fe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
                mids$[mid_add_d7485052d53c5b82] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TSTLookup::TSTLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            TSTLookup::TSTLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_a9516587cd7033fe, a0.this$, a1.this$)) {}

            jboolean TSTLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_d7485052d53c5b82], a0.this$, a1.this$);
            }

            void TSTLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            ::java::lang::Object TSTLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            jlong TSTLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean TSTLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List TSTLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong TSTLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean TSTLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg);
            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data);
            static PyGetSetDef t_TSTLookup__fields_[] = {
              DECLARE_GET_FIELD(t_TSTLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TSTLookup__methods_[] = {
              DECLARE_METHOD(t_TSTLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, get, METH_O),
              DECLARE_METHOD(t_TSTLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TSTLookup)[] = {
              { Py_tp_methods, t_TSTLookup__methods_ },
              { Py_tp_init, (void *) t_TSTLookup_init_ },
              { Py_tp_getset, t_TSTLookup__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TSTLookup)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(TSTLookup, t_TSTLookup, TSTLookup);

            void t_TSTLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTLookup), &PY_TYPE_DEF(TSTLookup), module, "TSTLookup", 0);
            }

            void t_TSTLookup::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTLookup), "class_", make_descriptor(TSTLookup::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTLookup), "wrapfn_", make_descriptor(t_TSTLookup::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTLookup), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTLookup::initializeClass, 1)))
                return NULL;
              return t_TSTLookup::wrap_Object(TSTLookup(((t_TSTLookup *) arg)->object.this$));
            }
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TSTLookup object((jobject) NULL);

                  INT_CALL(object = TSTLookup());
                  self->object = object;
                  break;
                }
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  TSTLookup object((jobject) NULL);

                  if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = TSTLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(TSTLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesNumbersQuery.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesNumbersQuery::class$ = NULL;
        jmethodID *DocValuesNumbersQuery::mids$ = NULL;
        bool DocValuesNumbersQuery::live$ = false;

        jclass DocValuesNumbersQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesNumbersQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_713574b80c0518e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[J)V");
            mids$[mid_init$_1ed5ff6d18f5a13e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Long;)V");
            mids$[mid_init$_1933a485e060f4cd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getNumbers_7dcf4034c6d1a92a] = env->getMethodID(cls, "getNumbers", "()Ljava/util/Set;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesNumbersQuery::DocValuesNumbersQuery(const ::java::lang::String & a0, const JArray< jlong > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_713574b80c0518e2, a0.this$, a1.this$)) {}

        DocValuesNumbersQuery::DocValuesNumbersQuery(const ::java::lang::String & a0, const JArray< ::java::lang::Long > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_1ed5ff6d18f5a13e, a0.this$, a1.this$)) {}

        DocValuesNumbersQuery::DocValuesNumbersQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_1933a485e060f4cd, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight DocValuesNumbersQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean DocValuesNumbersQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String DocValuesNumbersQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        ::java::util::Set DocValuesNumbersQuery::getNumbers() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getNumbers_7dcf4034c6d1a92a]));
        }

        jint DocValuesNumbersQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong DocValuesNumbersQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String DocValuesNumbersQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void DocValuesNumbersQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesNumbersQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesNumbersQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocValuesNumbersQuery_init_(t_DocValuesNumbersQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesNumbersQuery_createWeight(t_DocValuesNumbersQuery *self, PyObject *args);
        static PyObject *t_DocValuesNumbersQuery_equals(t_DocValuesNumbersQuery *self, PyObject *args);
        static PyObject *t_DocValuesNumbersQuery_getField(t_DocValuesNumbersQuery *self);
        static PyObject *t_DocValuesNumbersQuery_getNumbers(t_DocValuesNumbersQuery *self);
        static PyObject *t_DocValuesNumbersQuery_hashCode(t_DocValuesNumbersQuery *self, PyObject *args);
        static PyObject *t_DocValuesNumbersQuery_ramBytesUsed(t_DocValuesNumbersQuery *self);
        static PyObject *t_DocValuesNumbersQuery_toString(t_DocValuesNumbersQuery *self, PyObject *args);
        static PyObject *t_DocValuesNumbersQuery_visit(t_DocValuesNumbersQuery *self, PyObject *args);
        static PyObject *t_DocValuesNumbersQuery_get__field(t_DocValuesNumbersQuery *self, void *data);
        static PyObject *t_DocValuesNumbersQuery_get__numbers(t_DocValuesNumbersQuery *self, void *data);
        static PyGetSetDef t_DocValuesNumbersQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesNumbersQuery, field),
          DECLARE_GET_FIELD(t_DocValuesNumbersQuery, numbers),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesNumbersQuery__methods_[] = {
          DECLARE_METHOD(t_DocValuesNumbersQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, getNumbers, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesNumbersQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesNumbersQuery)[] = {
          { Py_tp_methods, t_DocValuesNumbersQuery__methods_ },
          { Py_tp_init, (void *) t_DocValuesNumbersQuery_init_ },
          { Py_tp_getset, t_DocValuesNumbersQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesNumbersQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(DocValuesNumbersQuery, t_DocValuesNumbersQuery, DocValuesNumbersQuery);

        void t_DocValuesNumbersQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesNumbersQuery), &PY_TYPE_DEF(DocValuesNumbersQuery), module, "DocValuesNumbersQuery", 0);
        }

        void t_DocValuesNumbersQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesNumbersQuery), "class_", make_descriptor(DocValuesNumbersQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesNumbersQuery), "wrapfn_", make_descriptor(t_DocValuesNumbersQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesNumbersQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesNumbersQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesNumbersQuery::initializeClass, 1)))
            return NULL;
          return t_DocValuesNumbersQuery::wrap_Object(DocValuesNumbersQuery(((t_DocValuesNumbersQuery *) arg)->object.this$));
        }
        static PyObject *t_DocValuesNumbersQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesNumbersQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocValuesNumbersQuery_init_(t_DocValuesNumbersQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jlong > a1((jobject) NULL);
              DocValuesNumbersQuery object((jobject) NULL);

              if (!parseArgs(args, "s[J", &a0, &a1))
              {
                INT_CALL(object = DocValuesNumbersQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::Long > a1((jobject) NULL);
              DocValuesNumbersQuery object((jobject) NULL);

              if (!parseArgs(args, "s[O", ::java::lang::PY_TYPE(Long), &a0, &a1))
              {
                INT_CALL(object = DocValuesNumbersQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              DocValuesNumbersQuery object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = DocValuesNumbersQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesNumbersQuery_createWeight(t_DocValuesNumbersQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesNumbersQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DocValuesNumbersQuery_equals(t_DocValuesNumbersQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DocValuesNumbersQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocValuesNumbersQuery_getField(t_DocValuesNumbersQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocValuesNumbersQuery_getNumbers(t_DocValuesNumbersQuery *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getNumbers());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(Long));
        }

        static PyObject *t_DocValuesNumbersQuery_hashCode(t_DocValuesNumbersQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DocValuesNumbersQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocValuesNumbersQuery_ramBytesUsed(t_DocValuesNumbersQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocValuesNumbersQuery_toString(t_DocValuesNumbersQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(DocValuesNumbersQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesNumbersQuery_visit(t_DocValuesNumbersQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocValuesNumbersQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_DocValuesNumbersQuery_get__field(t_DocValuesNumbersQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_DocValuesNumbersQuery_get__numbers(t_DocValuesNumbersQuery *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getNumbers());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *AutomatonQuery::class$ = NULL;
        jmethodID *AutomatonQuery::mids$ = NULL;
        bool AutomatonQuery::live$ = false;

        jclass AutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/AutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67b411381b8c08a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;)V");
            mids$[mid_init$_85f591863eff6e56] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;I)V");
            mids$[mid_init$_3ef4df68d91bf1c8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;IZ)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isAutomatonBinary_8454bd5aa23fd11e] = env->getMethodID(cls, "isAutomatonBinary", "()Z");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_getTermsEnum_e75dd6286a51776d] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_67b411381b8c08a1, a0.this$, a1.this$)) {}

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_85f591863eff6e56, a0.this$, a1.this$, a2)) {}

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1, jint a2, jboolean a3) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_3ef4df68d91bf1c8, a0.this$, a1.this$, a2, a3)) {}

        jboolean AutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::automaton::Automaton AutomatonQuery::getAutomaton() const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_d9f5c446a29ec187]));
        }

        jint AutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean AutomatonQuery::isAutomatonBinary() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAutomatonBinary_8454bd5aa23fd11e]);
        }

        jlong AutomatonQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String AutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void AutomatonQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_isAutomatonBinary(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_ramBytesUsed(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_visit(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data);
        static PyObject *t_AutomatonQuery_get__automatonBinary(t_AutomatonQuery *self, void *data);
        static PyGetSetDef t_AutomatonQuery__fields_[] = {
          DECLARE_GET_FIELD(t_AutomatonQuery, automaton),
          DECLARE_GET_FIELD(t_AutomatonQuery, automatonBinary),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_AutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, getAutomaton, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, isAutomatonBinary, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AutomatonQuery)[] = {
          { Py_tp_methods, t_AutomatonQuery__methods_ },
          { Py_tp_init, (void *) t_AutomatonQuery_init_ },
          { Py_tp_getset, t_AutomatonQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AutomatonQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiTermQuery),
          NULL
        };

        DEFINE_TYPE(AutomatonQuery, t_AutomatonQuery, AutomatonQuery);

        void t_AutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonQuery), &PY_TYPE_DEF(AutomatonQuery), module, "AutomatonQuery", 0);
        }

        void t_AutomatonQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonQuery), "class_", make_descriptor(AutomatonQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonQuery), "wrapfn_", make_descriptor(t_AutomatonQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_AutomatonQuery::wrap_Object(AutomatonQuery(((t_AutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
              AutomatonQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
              {
                INT_CALL(object = AutomatonQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
              jint a2;
              AutomatonQuery object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = AutomatonQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
              jint a2;
              jboolean a3;
              AutomatonQuery object((jobject) NULL);

              if (!parseArgs(args, "kkIZ", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = AutomatonQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(AutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self)
        {
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
        }

        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(AutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AutomatonQuery_isAutomatonBinary(t_AutomatonQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAutomatonBinary());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AutomatonQuery_ramBytesUsed(t_AutomatonQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(AutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AutomatonQuery_visit(t_AutomatonQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(AutomatonQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
        }

        static PyObject *t_AutomatonQuery_get__automatonBinary(t_AutomatonQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAutomatonBinary());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PointValues$IntersectVisitor::class$ = NULL;
        jmethodID *PointValues$IntersectVisitor::mids$ = NULL;
        bool PointValues$IntersectVisitor::live$ = false;

        jclass PointValues$IntersectVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PointValues$IntersectVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_7b8ae5aa66accb0b] = env->getMethodID(cls, "compare", "([B[B)Lorg/apache/lucene/index/PointValues$Relation;");
            mids$[mid_grow_040c4cd0390c5aff] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_visit_040c4cd0390c5aff] = env->getMethodID(cls, "visit", "(I)V");
            mids$[mid_visit_d5eb38abec56f5d8] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/DocIdSetIterator;[B)V");
            mids$[mid_visit_0ff3bfb1ed512144] = env->getMethodID(cls, "visit", "(I[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::PointValues$Relation PointValues$IntersectVisitor::compare(const JArray< jbyte > & a0, const JArray< jbyte > & a1) const
        {
          return ::org::apache::lucene::index::PointValues$Relation(env->callObjectMethod(this$, mids$[mid_compare_7b8ae5aa66accb0b], a0.this$, a1.this$));
        }

        void PointValues$IntersectVisitor::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_040c4cd0390c5aff], a0);
        }

        void PointValues$IntersectVisitor::visit(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_040c4cd0390c5aff], a0);
        }

        void PointValues$IntersectVisitor::visit(const ::org::apache::lucene::search::DocIdSetIterator & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_d5eb38abec56f5d8], a0.this$, a1.this$);
        }

        void PointValues$IntersectVisitor::visit(jint a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_0ff3bfb1ed512144], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PointValues$IntersectVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues$IntersectVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues$IntersectVisitor_compare(t_PointValues$IntersectVisitor *self, PyObject *args);
        static PyObject *t_PointValues$IntersectVisitor_grow(t_PointValues$IntersectVisitor *self, PyObject *arg);
        static PyObject *t_PointValues$IntersectVisitor_visit(t_PointValues$IntersectVisitor *self, PyObject *args);

        static PyMethodDef t_PointValues$IntersectVisitor__methods_[] = {
          DECLARE_METHOD(t_PointValues$IntersectVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues$IntersectVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues$IntersectVisitor, compare, METH_VARARGS),
          DECLARE_METHOD(t_PointValues$IntersectVisitor, grow, METH_O),
          DECLARE_METHOD(t_PointValues$IntersectVisitor, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointValues$IntersectVisitor)[] = {
          { Py_tp_methods, t_PointValues$IntersectVisitor__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointValues$IntersectVisitor)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointValues$IntersectVisitor, t_PointValues$IntersectVisitor, PointValues$IntersectVisitor);

        void t_PointValues$IntersectVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(PointValues$IntersectVisitor), &PY_TYPE_DEF(PointValues$IntersectVisitor), module, "PointValues$IntersectVisitor", 0);
        }

        void t_PointValues$IntersectVisitor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$IntersectVisitor), "class_", make_descriptor(PointValues$IntersectVisitor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$IntersectVisitor), "wrapfn_", make_descriptor(t_PointValues$IntersectVisitor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$IntersectVisitor), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointValues$IntersectVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointValues$IntersectVisitor::initializeClass, 1)))
            return NULL;
          return t_PointValues$IntersectVisitor::wrap_Object(PointValues$IntersectVisitor(((t_PointValues$IntersectVisitor *) arg)->object.this$));
        }
        static PyObject *t_PointValues$IntersectVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointValues$IntersectVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointValues$IntersectVisitor_compare(t_PointValues$IntersectVisitor *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          ::org::apache::lucene::index::PointValues$Relation result((jobject) NULL);

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return ::org::apache::lucene::index::t_PointValues$Relation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_PointValues$IntersectVisitor_grow(t_PointValues$IntersectVisitor *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_PointValues$IntersectVisitor_visit(t_PointValues$IntersectVisitor *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.visit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);

              if (!parseArgs(args, "k[B", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.visit(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              JArray< jbyte > a1((jobject) NULL);

              if (!parseArgs(args, "I[B", &a0, &a1))
              {
                OBJ_CALL(self->object.visit(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "visit", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/io/Console.h"
#include "java/io/InputStream.h"
#include "java/util/Properties.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *System::class$ = NULL;
    jmethodID *System::mids$ = NULL;
    bool System::live$ = false;
    ::java::io::PrintStream *System::err = NULL;
    ::java::io::InputStream *System::in = NULL;
    ::java::io::PrintStream *System::out = NULL;

    jclass System::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/System");

        mids$ = new jmethodID[max_mid];
        mids$[mid_arraycopy_50ca941bfe936d37] = env->getStaticMethodID(cls, "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
        mids$[mid_clearProperty_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "clearProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_console_622cf7bfce4b2650] = env->getStaticMethodID(cls, "console", "()Ljava/io/Console;");
        mids$[mid_currentTimeMillis_2e5ae9edcb9b072f] = env->getStaticMethodID(cls, "currentTimeMillis", "()J");
        mids$[mid_exit_040c4cd0390c5aff] = env->getStaticMethodID(cls, "exit", "(I)V");
        mids$[mid_gc_f2cc1bce94666404] = env->getStaticMethodID(cls, "gc", "()V");
        mids$[mid_getProperties_6a9331fd535ab5ec] = env->getStaticMethodID(cls, "getProperties", "()Ljava/util/Properties;");
        mids$[mid_getProperty_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getProperty_04b762e0ad33dcc5] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_getSecurityManager_53ff8c4da1aa4b91] = env->getStaticMethodID(cls, "getSecurityManager", "()Ljava/lang/SecurityManager;");
        mids$[mid_getenv_1c3426541413a55d] = env->getStaticMethodID(cls, "getenv", "()Ljava/util/Map;");
        mids$[mid_getenv_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getenv", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_identityHashCode_5a4805a36cf611e7] = env->getStaticMethodID(cls, "identityHashCode", "(Ljava/lang/Object;)I");
        mids$[mid_lineSeparator_db9b55ba01e03e4b] = env->getStaticMethodID(cls, "lineSeparator", "()Ljava/lang/String;");
        mids$[mid_load_9fd2eb66a64e6f0f] = env->getStaticMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_9fd2eb66a64e6f0f] = env->getStaticMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_mapLibraryName_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_nanoTime_2e5ae9edcb9b072f] = env->getStaticMethodID(cls, "nanoTime", "()J");
        mids$[mid_runFinalization_f2cc1bce94666404] = env->getStaticMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_9d72768e8fdce2b7] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_setErr_51d7bcb97eea24e3] = env->getStaticMethodID(cls, "setErr", "(Ljava/io/PrintStream;)V");
        mids$[mid_setIn_a227449bf251faf1] = env->getStaticMethodID(cls, "setIn", "(Ljava/io/InputStream;)V");
        mids$[mid_setOut_51d7bcb97eea24e3] = env->getStaticMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");
        mids$[mid_setProperties_5673ab61fe1799fe] = env->getStaticMethodID(cls, "setProperties", "(Ljava/util/Properties;)V");
        mids$[mid_setProperty_04b762e0ad33dcc5] = env->getStaticMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_setSecurityManager_3e7f43e60d77f0bc] = env->getStaticMethodID(cls, "setSecurityManager", "(Ljava/lang/SecurityManager;)V");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        err = new ::java::io::PrintStream(env->getStaticObjectField(cls, "err", "Ljava/io/PrintStream;"));
        in = new ::java::io::InputStream(env->getStaticObjectField(cls, "in", "Ljava/io/InputStream;"));
        out = new ::java::io::PrintStream(env->getStaticObjectField(cls, "out", "Ljava/io/PrintStream;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void System::arraycopy(const ::java::lang::Object & a0, jint a1, const ::java::lang::Object & a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_arraycopy_50ca941bfe936d37], a0.this$, a1, a2.this$, a3, a4);
    }

    ::java::lang::String System::clearProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_clearProperty_9bfa75c9f141b67f], a0.this$));
    }

    ::java::io::Console System::console()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::io::Console(env->callStaticObjectMethod(cls, mids$[mid_console_622cf7bfce4b2650]));
    }

    jlong System::currentTimeMillis()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_currentTimeMillis_2e5ae9edcb9b072f]);
    }

    void System::exit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_exit_040c4cd0390c5aff], a0);
    }

    void System::gc()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_gc_f2cc1bce94666404]);
    }

    ::java::util::Properties System::getProperties()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Properties(env->callStaticObjectMethod(cls, mids$[mid_getProperties_6a9331fd535ab5ec]));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_9bfa75c9f141b67f], a0.this$));
    }

    ::java::lang::String System::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_04b762e0ad33dcc5], a0.this$, a1.this$));
    }

    ::java::lang::SecurityManager System::getSecurityManager()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::SecurityManager(env->callStaticObjectMethod(cls, mids$[mid_getSecurityManager_53ff8c4da1aa4b91]));
    }

    ::java::util::Map System::getenv()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getenv_1c3426541413a55d]));
    }

    ::java::lang::String System::getenv(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getenv_9bfa75c9f141b67f], a0.this$));
    }

    jint System::identityHashCode(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_identityHashCode_5a4805a36cf611e7], a0.this$);
    }

    ::java::lang::String System::lineSeparator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_lineSeparator_db9b55ba01e03e4b]));
    }

    void System::load(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_load_9fd2eb66a64e6f0f], a0.this$);
    }

    void System::loadLibrary(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_loadLibrary_9fd2eb66a64e6f0f], a0.this$);
    }

    ::java::lang::String System::mapLibraryName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_mapLibraryName_9bfa75c9f141b67f], a0.this$));
    }

    jlong System::nanoTime()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_nanoTime_2e5ae9edcb9b072f]);
    }

    void System::runFinalization()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalization_f2cc1bce94666404]);
    }

    void System::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_9d72768e8fdce2b7], a0);
    }

    void System::setErr(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setErr_51d7bcb97eea24e3], a0.this$);
    }

    void System::setIn(const ::java::io::InputStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setIn_a227449bf251faf1], a0.this$);
    }

    void System::setOut(const ::java::io::PrintStream & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setOut_51d7bcb97eea24e3], a0.this$);
    }

    void System::setProperties(const ::java::util::Properties & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setProperties_5673ab61fe1799fe], a0.this$);
    }

    ::java::lang::String System::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_setProperty_04b762e0ad33dcc5], a0.this$, a1.this$));
    }

    void System::setSecurityManager(const ::java::lang::SecurityManager & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setSecurityManager_3e7f43e60d77f0bc], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_console(PyTypeObject *type);
    static PyObject *t_System_currentTimeMillis(PyTypeObject *type);
    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_gc(PyTypeObject *type);
    static PyObject *t_System_getProperties(PyTypeObject *type);
    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_getSecurityManager(PyTypeObject *type);
    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_lineSeparator(PyTypeObject *type);
    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_nanoTime(PyTypeObject *type);
    static PyObject *t_System_runFinalization(PyTypeObject *type);
    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args);
    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg);
    static PyObject *t_System_get__env(t_System *self, void *data);
    static int t_System_set__err(t_System *self, PyObject *arg, void *data);
    static int t_System_set__in(t_System *self, PyObject *arg, void *data);
    static int t_System_set__out(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__properties(t_System *self, void *data);
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data);
    static PyObject *t_System_get__securityManager(t_System *self, void *data);
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data);
    static PyGetSetDef t_System__fields_[] = {
      DECLARE_GET_FIELD(t_System, env),
      DECLARE_SET_FIELD(t_System, err),
      DECLARE_SET_FIELD(t_System, in),
      DECLARE_SET_FIELD(t_System, out),
      DECLARE_GETSET_FIELD(t_System, properties),
      DECLARE_GETSET_FIELD(t_System, securityManager),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_System__methods_[] = {
      DECLARE_METHOD(t_System, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, arraycopy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, clearProperty, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, console, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, currentTimeMillis, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, exit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, gc, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperties, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getSecurityManager, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, getenv, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, identityHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, lineSeparator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, load, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, loadLibrary, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, mapLibraryName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, nanoTime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalization, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_System, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setErr, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setIn, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setOut, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperties, METH_O | METH_CLASS),
      DECLARE_METHOD(t_System, setProperty, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_System, setSecurityManager, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(System)[] = {
      { Py_tp_methods, t_System__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_System__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(System)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(System, t_System, System);

    void t_System::install(PyObject *module)
    {
      installType(&PY_TYPE(System), &PY_TYPE_DEF(System), module, "System", 0);
    }

    void t_System::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "class_", make_descriptor(System::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "wrapfn_", make_descriptor(t_System::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "boxfn_", make_descriptor(boxObject));
      env->getClass(System::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "err", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::err)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "in", make_descriptor(::java::io::t_InputStream::wrap_Object(*System::in)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(System), "out", make_descriptor(::java::io::t_PrintStream::wrap_Object(*System::out)));
    }

    static PyObject *t_System_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, System::initializeClass, 1)))
        return NULL;
      return t_System::wrap_Object(System(((t_System *) arg)->object.this$));
    }
    static PyObject *t_System_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, System::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_System_arraycopy(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint a1;
      ::java::lang::Object a2((jobject) NULL);
      jint a3;
      jint a4;

      if (!parseArgs(args, "oIoII", &a0, &a1, &a2, &a3, &a4))
      {
        OBJ_CALL(::java::lang::System::arraycopy(a0, a1, a2, a3, a4));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "arraycopy", args);
      return NULL;
    }

    static PyObject *t_System_clearProperty(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::clearProperty(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "clearProperty", arg);
      return NULL;
    }

    static PyObject *t_System_console(PyTypeObject *type)
    {
      ::java::io::Console result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::console());
      return ::java::io::t_Console::wrap_Object(result);
    }

    static PyObject *t_System_currentTimeMillis(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::currentTimeMillis());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_exit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(::java::lang::System::exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "exit", arg);
      return NULL;
    }

    static PyObject *t_System_gc(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_getProperties(PyTypeObject *type)
    {
      ::java::util::Properties result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getProperties());
      return ::java::util::t_Properties::wrap_Object(result);
    }

    static PyObject *t_System_getProperty(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::System::getProperty(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getProperty", args);
      return NULL;
    }

    static PyObject *t_System_getSecurityManager(PyTypeObject *type)
    {
      ::java::lang::SecurityManager result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(result);
    }

    static PyObject *t_System_getenv(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = ::java::lang::System::getenv());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::System::getenv(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getenv", args);
      return NULL;
    }

    static PyObject *t_System_identityHashCode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::identityHashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "identityHashCode", arg);
      return NULL;
    }

    static PyObject *t_System_lineSeparator(PyTypeObject *type)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::System::lineSeparator());
      return j2p(result);
    }

    static PyObject *t_System_load(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "load", arg);
      return NULL;
    }

    static PyObject *t_System_loadLibrary(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(::java::lang::System::loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_System_mapLibraryName(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::System::mapLibraryName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "mapLibraryName", arg);
      return NULL;
    }

    static PyObject *t_System_nanoTime(PyTypeObject *type)
    {
      jlong result;
      OBJ_CALL(result = ::java::lang::System::nanoTime());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_System_runFinalization(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::System::runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_System_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::System::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_System_setErr(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setErr(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setErr", arg);
      return NULL;
    }

    static PyObject *t_System_setIn(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setIn(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setIn", arg);
      return NULL;
    }

    static PyObject *t_System_setOut(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::PrintStream a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setOut(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setOut", arg);
      return NULL;
    }

    static PyObject *t_System_setProperties(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Properties a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
      {
        OBJ_CALL(::java::lang::System::setProperties(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setProperties", arg);
      return NULL;
    }

    static PyObject *t_System_setProperty(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::String a1((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::System::setProperty(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "setProperty", args);
      return NULL;
    }

    static PyObject *t_System_setSecurityManager(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::SecurityManager a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::System::setSecurityManager(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setSecurityManager", arg);
      return NULL;
    }

    static PyObject *t_System_get__env(t_System *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getenv());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static int t_System_set__err(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setErr(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "err", arg);
      return -1;
    }

    static int t_System_set__in(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::InputStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
        {
          INT_CALL(self->object.setIn(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "in", arg);
      return -1;
    }

    static int t_System_set__out(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::io::PrintStream value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
        {
          INT_CALL(self->object.setOut(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "out", arg);
      return -1;
    }

    static PyObject *t_System_get__properties(t_System *self, void *data)
    {
      ::java::util::Properties value((jobject) NULL);
      OBJ_CALL(value = self->object.getProperties());
      return ::java::util::t_Properties::wrap_Object(value);
    }
    static int t_System_set__properties(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Properties value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Properties::initializeClass, &value))
        {
          INT_CALL(self->object.setProperties(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "properties", arg);
      return -1;
    }

    static PyObject *t_System_get__securityManager(t_System *self, void *data)
    {
      ::java::lang::SecurityManager value((jobject) NULL);
      OBJ_CALL(value = self->object.getSecurityManager());
      return ::java::lang::t_SecurityManager::wrap_Object(value);
    }
    static int t_System_set__securityManager(t_System *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::SecurityManager value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::SecurityManager::initializeClass, &value))
        {
          INT_CALL(self->object.setSecurityManager(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "securityManager", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CoveringQuery.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CoveringQuery::class$ = NULL;
        jmethodID *CoveringQuery::mids$ = NULL;
        bool CoveringQuery::live$ = false;

        jclass CoveringQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CoveringQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0231d3ddd2b28edc] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/LongValuesSource;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CoveringQuery::CoveringQuery(const ::java::util::Collection & a0, const ::org::apache::lucene::search::LongValuesSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_0231d3ddd2b28edc, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight CoveringQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean CoveringQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint CoveringQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong CoveringQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::search::Query CoveringQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String CoveringQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void CoveringQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CoveringQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CoveringQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CoveringQuery_init_(t_CoveringQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CoveringQuery_createWeight(t_CoveringQuery *self, PyObject *args);
        static PyObject *t_CoveringQuery_equals(t_CoveringQuery *self, PyObject *args);
        static PyObject *t_CoveringQuery_hashCode(t_CoveringQuery *self, PyObject *args);
        static PyObject *t_CoveringQuery_ramBytesUsed(t_CoveringQuery *self);
        static PyObject *t_CoveringQuery_rewrite(t_CoveringQuery *self, PyObject *args);
        static PyObject *t_CoveringQuery_toString(t_CoveringQuery *self, PyObject *args);
        static PyObject *t_CoveringQuery_visit(t_CoveringQuery *self, PyObject *args);

        static PyMethodDef t_CoveringQuery__methods_[] = {
          DECLARE_METHOD(t_CoveringQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CoveringQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CoveringQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CoveringQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CoveringQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CoveringQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CoveringQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CoveringQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_CoveringQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CoveringQuery)[] = {
          { Py_tp_methods, t_CoveringQuery__methods_ },
          { Py_tp_init, (void *) t_CoveringQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CoveringQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(CoveringQuery, t_CoveringQuery, CoveringQuery);

        void t_CoveringQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CoveringQuery), &PY_TYPE_DEF(CoveringQuery), module, "CoveringQuery", 0);
        }

        void t_CoveringQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CoveringQuery), "class_", make_descriptor(CoveringQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CoveringQuery), "wrapfn_", make_descriptor(t_CoveringQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CoveringQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CoveringQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CoveringQuery::initializeClass, 1)))
            return NULL;
          return t_CoveringQuery::wrap_Object(CoveringQuery(((t_CoveringQuery *) arg)->object.this$));
        }
        static PyObject *t_CoveringQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CoveringQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CoveringQuery_init_(t_CoveringQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
          CoveringQuery object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::LongValuesSource::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
          {
            INT_CALL(object = CoveringQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CoveringQuery_createWeight(t_CoveringQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CoveringQuery_equals(t_CoveringQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CoveringQuery_hashCode(t_CoveringQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CoveringQuery_ramBytesUsed(t_CoveringQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CoveringQuery_rewrite(t_CoveringQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CoveringQuery_toString(t_CoveringQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CoveringQuery_visit(t_CoveringQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CoveringQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BytesRefFieldSource::class$ = NULL;
            jmethodID *BytesRefFieldSource::mids$ = NULL;
            bool BytesRefFieldSource::live$ = false;

            jclass BytesRefFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BytesRefFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BytesRefFieldSource::BytesRefFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues BytesRefFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args);

            static PyMethodDef t_BytesRefFieldSource__methods_[] = {
              DECLARE_METHOD(t_BytesRefFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BytesRefFieldSource)[] = {
              { Py_tp_methods, t_BytesRefFieldSource__methods_ },
              { Py_tp_init, (void *) t_BytesRefFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BytesRefFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(BytesRefFieldSource, t_BytesRefFieldSource, BytesRefFieldSource);

            void t_BytesRefFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefFieldSource), &PY_TYPE_DEF(BytesRefFieldSource), module, "BytesRefFieldSource", 0);
            }

            void t_BytesRefFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFieldSource), "class_", make_descriptor(BytesRefFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFieldSource), "wrapfn_", make_descriptor(t_BytesRefFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefFieldSource::initializeClass, 1)))
                return NULL;
              return t_BytesRefFieldSource::wrap_Object(BytesRefFieldSource(((t_BytesRefFieldSource *) arg)->object.this$));
            }
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              BytesRefFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BytesRefFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(BytesRefFieldSource), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/MutablePointsReaderUtils.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "org/apache/lucene/codecs/MutablePointValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *MutablePointsReaderUtils::class$ = NULL;
          jmethodID *MutablePointsReaderUtils::mids$ = NULL;
          bool MutablePointsReaderUtils::live$ = false;

          jclass MutablePointsReaderUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/MutablePointsReaderUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_partition_d947b26d2cfaa75c] = env->getStaticMethodID(cls, "partition", "(Lorg/apache/lucene/util/bkd/BKDConfig;IIILorg/apache/lucene/codecs/MutablePointValues;IIILorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_sort_5cf6a24348223585] = env->getStaticMethodID(cls, "sort", "(Lorg/apache/lucene/util/bkd/BKDConfig;ILorg/apache/lucene/codecs/MutablePointValues;II)V");
              mids$[mid_sortByDim_eb3f73bdec04dbde] = env->getStaticMethodID(cls, "sortByDim", "(Lorg/apache/lucene/util/bkd/BKDConfig;I[ILorg/apache/lucene/codecs/MutablePointValues;IILorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void MutablePointsReaderUtils::partition(const ::org::apache::lucene::util::bkd::BKDConfig & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::codecs::MutablePointValues & a4, jint a5, jint a6, jint a7, const ::org::apache::lucene::util::BytesRef & a8, const ::org::apache::lucene::util::BytesRef & a9)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_partition_d947b26d2cfaa75c], a0.this$, a1, a2, a3, a4.this$, a5, a6, a7, a8.this$, a9.this$);
          }

          void MutablePointsReaderUtils::sort(const ::org::apache::lucene::util::bkd::BKDConfig & a0, jint a1, const ::org::apache::lucene::codecs::MutablePointValues & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_sort_5cf6a24348223585], a0.this$, a1, a2.this$, a3, a4);
          }

          void MutablePointsReaderUtils::sortByDim(const ::org::apache::lucene::util::bkd::BKDConfig & a0, jint a1, const JArray< jint > & a2, const ::org::apache::lucene::codecs::MutablePointValues & a3, jint a4, jint a5, const ::org::apache::lucene::util::BytesRef & a6, const ::org::apache::lucene::util::BytesRef & a7)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_sortByDim_eb3f73bdec04dbde], a0.this$, a1, a2.this$, a3.this$, a4, a5, a6.this$, a7.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_MutablePointsReaderUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutablePointsReaderUtils_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutablePointsReaderUtils_partition(PyTypeObject *type, PyObject *args);
          static PyObject *t_MutablePointsReaderUtils_sort(PyTypeObject *type, PyObject *args);
          static PyObject *t_MutablePointsReaderUtils_sortByDim(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MutablePointsReaderUtils__methods_[] = {
            DECLARE_METHOD(t_MutablePointsReaderUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutablePointsReaderUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutablePointsReaderUtils, partition, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MutablePointsReaderUtils, sort, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MutablePointsReaderUtils, sortByDim, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutablePointsReaderUtils)[] = {
            { Py_tp_methods, t_MutablePointsReaderUtils__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutablePointsReaderUtils)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(MutablePointsReaderUtils, t_MutablePointsReaderUtils, MutablePointsReaderUtils);

          void t_MutablePointsReaderUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(MutablePointsReaderUtils), &PY_TYPE_DEF(MutablePointsReaderUtils), module, "MutablePointsReaderUtils", 0);
          }

          void t_MutablePointsReaderUtils::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointsReaderUtils), "class_", make_descriptor(MutablePointsReaderUtils::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointsReaderUtils), "wrapfn_", make_descriptor(t_MutablePointsReaderUtils::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointsReaderUtils), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutablePointsReaderUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutablePointsReaderUtils::initializeClass, 1)))
              return NULL;
            return t_MutablePointsReaderUtils::wrap_Object(MutablePointsReaderUtils(((t_MutablePointsReaderUtils *) arg)->object.this$));
          }
          static PyObject *t_MutablePointsReaderUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutablePointsReaderUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MutablePointsReaderUtils_partition(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::codecs::MutablePointValues a4((jobject) NULL);
            jint a5;
            jint a6;
            jint a7;
            ::org::apache::lucene::util::BytesRef a8((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a9((jobject) NULL);

            if (!parseArgs(args, "kIIIkIIIkk", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::codecs::MutablePointValues::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
            {
              OBJ_CALL(::org::apache::lucene::util::bkd::MutablePointsReaderUtils::partition(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "partition", args);
            return NULL;
          }

          static PyObject *t_MutablePointsReaderUtils_sort(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::codecs::MutablePointValues a2((jobject) NULL);
            jint a3;
            jint a4;

            if (!parseArgs(args, "kIkII", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::codecs::MutablePointValues::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(::org::apache::lucene::util::bkd::MutablePointsReaderUtils::sort(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "sort", args);
            return NULL;
          }

          static PyObject *t_MutablePointsReaderUtils_sortByDim(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            jint a1;
            JArray< jint > a2((jobject) NULL);
            ::org::apache::lucene::codecs::MutablePointValues a3((jobject) NULL);
            jint a4;
            jint a5;
            ::org::apache::lucene::util::BytesRef a6((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a7((jobject) NULL);

            if (!parseArgs(args, "kI[IkIIkk", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::codecs::MutablePointValues::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
            {
              OBJ_CALL(::org::apache::lucene::util::bkd::MutablePointsReaderUtils::sortByDim(a0, a1, a2, a3, a4, a5, a6, a7));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "sortByDim", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherManager.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherManager::class$ = NULL;
        jmethodID *SearcherManager::mids$ = NULL;
        bool SearcherManager::live$ = false;

        jclass SearcherManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_72cbb304e287a58f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_99a55412860ca47d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_f89ba7c5992c087c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_786efabc833066c2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZZLorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_getSearcher_ddf47cd7bdd18a7f] = env->getStaticMethodID(cls, "getSearcher", "(Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_isSearcherCurrent_8454bd5aa23fd11e] = env->getMethodID(cls, "isSearcherCurrent", "()Z");
            mids$[mid_refreshIfNeeded_0e5d2009174c9b0f] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_tryIncRef_2b606f72e79146e5] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/search/IndexSearcher;)Z");
            mids$[mid_decRef_9541dcc7c968ac14] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/search/IndexSearcher;)V");
            mids$[mid_getRefCount_2030bbb112a8934d] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/search/IndexSearcher;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_72cbb304e287a58f, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_99a55412860ca47d, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_f89ba7c5992c087c, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, jboolean a2, const ::org::apache::lucene::search::SearcherFactory & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_786efabc833066c2, a0.this$, a1, a2, a3.this$)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherManager::getSearcher(const ::org::apache::lucene::search::SearcherFactory & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::org::apache::lucene::index::IndexReader & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::IndexSearcher(env->callStaticObjectMethod(cls, mids$[mid_getSearcher_ddf47cd7bdd18a7f], a0.this$, a1.this$, a2.this$));
        }

        jboolean SearcherManager::isSearcherCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSearcherCurrent_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args);
        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args);
        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self);
        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data);
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data);
        static PyGetSetDef t_SearcherManager__fields_[] = {
          DECLARE_GET_FIELD(t_SearcherManager, searcherCurrent),
          DECLARE_GET_FIELD(t_SearcherManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SearcherManager__methods_[] = {
          DECLARE_METHOD(t_SearcherManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_SearcherManager, getSearcher, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, isSearcherCurrent, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SearcherManager)[] = {
          { Py_tp_methods, t_SearcherManager__methods_ },
          { Py_tp_init, (void *) t_SearcherManager_init_ },
          { Py_tp_getset, t_SearcherManager__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SearcherManager)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::ReferenceManager),
          NULL
        };

        DEFINE_TYPE(SearcherManager, t_SearcherManager, SearcherManager);
        PyObject *t_SearcherManager::wrap_Object(const SearcherManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SearcherManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SearcherManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherManager), &PY_TYPE_DEF(SearcherManager), module, "SearcherManager", 0);
        }

        void t_SearcherManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherManager), "class_", make_descriptor(SearcherManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherManager), "wrapfn_", make_descriptor(t_SearcherManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherManager::initializeClass, 1)))
            return NULL;
          return t_SearcherManager::wrap_Object(SearcherManager(((t_SearcherManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              jboolean a2;
              ::org::apache::lucene::search::SearcherFactory a3((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kZZk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = SearcherManager(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SearcherFactory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SearcherManager::getSearcher(a0, a1, a2));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSearcher", args);
          return NULL;
        }

        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/DoubleRangeGroupSelector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/grouping/DoubleRangeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/DoubleRange.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *DoubleRangeGroupSelector::class$ = NULL;
          jmethodID *DoubleRangeGroupSelector::mids$ = NULL;
          bool DoubleRangeGroupSelector::live$ = false;

          jclass DoubleRangeGroupSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/DoubleRangeGroupSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dcede42e025c5582] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DoubleValuesSource;Lorg/apache/lucene/search/grouping/DoubleRangeFactory;)V");
              mids$[mid_advanceTo_ddaa3f14f8aeda7d] = env->getMethodID(cls, "advanceTo", "(I)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_copyValue_f2b339d6dc64b7fe] = env->getMethodID(cls, "copyValue", "()Lorg/apache/lucene/search/grouping/DoubleRange;");
              mids$[mid_currentValue_f2b339d6dc64b7fe] = env->getMethodID(cls, "currentValue", "()Lorg/apache/lucene/search/grouping/DoubleRange;");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeGroupSelector::DoubleRangeGroupSelector(const ::org::apache::lucene::search::DoubleValuesSource & a0, const ::org::apache::lucene::search::grouping::DoubleRangeFactory & a1) : ::org::apache::lucene::search::grouping::GroupSelector(env->newObject(initializeClass, &mids$, mid_init$_dcede42e025c5582, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::grouping::GroupSelector$State DoubleRangeGroupSelector::advanceTo(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector$State(env->callObjectMethod(this$, mids$[mid_advanceTo_ddaa3f14f8aeda7d], a0));
          }

          ::org::apache::lucene::search::grouping::DoubleRange DoubleRangeGroupSelector::copyValue() const
          {
            return ::org::apache::lucene::search::grouping::DoubleRange(env->callObjectMethod(this$, mids$[mid_copyValue_f2b339d6dc64b7fe]));
          }

          ::org::apache::lucene::search::grouping::DoubleRange DoubleRangeGroupSelector::currentValue() const
          {
            return ::org::apache::lucene::search::grouping::DoubleRange(env->callObjectMethod(this$, mids$[mid_currentValue_f2b339d6dc64b7fe]));
          }

          void DoubleRangeGroupSelector::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void DoubleRangeGroupSelector::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void DoubleRangeGroupSelector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_DoubleRangeGroupSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeGroupSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeGroupSelector_of_(t_DoubleRangeGroupSelector *self, PyObject *args);
          static int t_DoubleRangeGroupSelector_init_(t_DoubleRangeGroupSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRangeGroupSelector_advanceTo(t_DoubleRangeGroupSelector *self, PyObject *args);
          static PyObject *t_DoubleRangeGroupSelector_copyValue(t_DoubleRangeGroupSelector *self, PyObject *args);
          static PyObject *t_DoubleRangeGroupSelector_currentValue(t_DoubleRangeGroupSelector *self, PyObject *args);
          static PyObject *t_DoubleRangeGroupSelector_setGroups(t_DoubleRangeGroupSelector *self, PyObject *args);
          static PyObject *t_DoubleRangeGroupSelector_setNextReader(t_DoubleRangeGroupSelector *self, PyObject *args);
          static PyObject *t_DoubleRangeGroupSelector_setScorer(t_DoubleRangeGroupSelector *self, PyObject *args);
          static int t_DoubleRangeGroupSelector_set__groups(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data);
          static int t_DoubleRangeGroupSelector_set__nextReader(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data);
          static int t_DoubleRangeGroupSelector_set__scorer(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data);
          static PyObject *t_DoubleRangeGroupSelector_get__parameters_(t_DoubleRangeGroupSelector *self, void *data);
          static PyGetSetDef t_DoubleRangeGroupSelector__fields_[] = {
            DECLARE_SET_FIELD(t_DoubleRangeGroupSelector, groups),
            DECLARE_SET_FIELD(t_DoubleRangeGroupSelector, nextReader),
            DECLARE_SET_FIELD(t_DoubleRangeGroupSelector, scorer),
            DECLARE_GET_FIELD(t_DoubleRangeGroupSelector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRangeGroupSelector__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeGroupSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, of_, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, advanceTo, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, copyValue, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, currentValue, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, setGroups, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRangeGroupSelector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleRangeGroupSelector)[] = {
            { Py_tp_methods, t_DoubleRangeGroupSelector__methods_ },
            { Py_tp_init, (void *) t_DoubleRangeGroupSelector_init_ },
            { Py_tp_getset, t_DoubleRangeGroupSelector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleRangeGroupSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::GroupSelector),
            NULL
          };

          DEFINE_TYPE(DoubleRangeGroupSelector, t_DoubleRangeGroupSelector, DoubleRangeGroupSelector);
          PyObject *t_DoubleRangeGroupSelector::wrap_Object(const DoubleRangeGroupSelector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleRangeGroupSelector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleRangeGroupSelector *self = (t_DoubleRangeGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DoubleRangeGroupSelector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleRangeGroupSelector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleRangeGroupSelector *self = (t_DoubleRangeGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DoubleRangeGroupSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeGroupSelector), &PY_TYPE_DEF(DoubleRangeGroupSelector), module, "DoubleRangeGroupSelector", 0);
          }

          void t_DoubleRangeGroupSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeGroupSelector), "class_", make_descriptor(DoubleRangeGroupSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeGroupSelector), "wrapfn_", make_descriptor(t_DoubleRangeGroupSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeGroupSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeGroupSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeGroupSelector::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeGroupSelector::wrap_Object(DoubleRangeGroupSelector(((t_DoubleRangeGroupSelector *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeGroupSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeGroupSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DoubleRangeGroupSelector_of_(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DoubleRangeGroupSelector_init_(t_DoubleRangeGroupSelector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::DoubleValuesSource a0((jobject) NULL);
            ::org::apache::lucene::search::grouping::DoubleRangeFactory a1((jobject) NULL);
            DoubleRangeGroupSelector object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, ::org::apache::lucene::search::grouping::DoubleRangeFactory::initializeClass, &a0, &a1))
            {
              INT_CALL(object = DoubleRangeGroupSelector(a0, a1));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::search::grouping::PY_TYPE(DoubleRange);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRangeGroupSelector_advanceTo(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::GroupSelector$State result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advanceTo(a0));
              return ::org::apache::lucene::search::grouping::t_GroupSelector$State::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "advanceTo", args, 2);
          }

          static PyObject *t_DoubleRangeGroupSelector_copyValue(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::grouping::DoubleRange result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.copyValue());
              return ::org::apache::lucene::search::grouping::t_DoubleRange::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "copyValue", args, 2);
          }

          static PyObject *t_DoubleRangeGroupSelector_currentValue(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::grouping::DoubleRange result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.currentValue());
              return ::org::apache::lucene::search::grouping::t_DoubleRange::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "currentValue", args, 2);
          }

          static PyObject *t_DoubleRangeGroupSelector_setGroups(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "setGroups", args, 2);
          }

          static PyObject *t_DoubleRangeGroupSelector_setNextReader(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_DoubleRangeGroupSelector_setScorer(t_DoubleRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleRangeGroupSelector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_DoubleRangeGroupSelector_get__parameters_(t_DoubleRangeGroupSelector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_DoubleRangeGroupSelector_set__groups(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_DoubleRangeGroupSelector_set__nextReader(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_DoubleRangeGroupSelector_set__scorer(t_DoubleRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiAnalyzer::class$ = NULL;
          jmethodID *ThaiAnalyzer::mids$ = NULL;
          bool ThaiAnalyzer::live$ = false;
          ::java::lang::String *ThaiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ThaiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiAnalyzer::ThaiAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet ThaiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data);
          static PyGetSetDef t_ThaiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ThaiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ThaiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ThaiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ThaiAnalyzer)[] = {
            { Py_tp_methods, t_ThaiAnalyzer__methods_ },
            { Py_tp_init, (void *) t_ThaiAnalyzer_init_ },
            { Py_tp_getset, t_ThaiAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ThaiAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(ThaiAnalyzer, t_ThaiAnalyzer, ThaiAnalyzer);

          void t_ThaiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiAnalyzer), &PY_TYPE_DEF(ThaiAnalyzer), module, "ThaiAnalyzer", 0);
          }

          void t_ThaiAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiAnalyzer), "class_", make_descriptor(ThaiAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiAnalyzer), "wrapfn_", make_descriptor(t_ThaiAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ThaiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ThaiAnalyzer::wrap_Object(ThaiAnalyzer(((t_ThaiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ThaiAnalyzer object((jobject) NULL);

                INT_CALL(object = ThaiAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::th::ThaiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceReader::class$ = NULL;
        jmethodID *IntBlockPool$SliceReader::mids$ = NULL;
        bool IntBlockPool$SliceReader::live$ = false;

        jclass IntBlockPool$SliceReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8c5ae63a3106e19c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_endOfSlice_8454bd5aa23fd11e] = env->getMethodID(cls, "endOfSlice", "()Z");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_reset_438c62480c481c65] = env->getMethodID(cls, "reset", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceReader::IntBlockPool$SliceReader(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8c5ae63a3106e19c, a0.this$)) {}

        jboolean IntBlockPool$SliceReader::endOfSlice() const
        {
          return env->callBooleanMethod(this$, mids$[mid_endOfSlice_8454bd5aa23fd11e]);
        }

        jint IntBlockPool$SliceReader::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        void IntBlockPool$SliceReader::reset(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$SliceReader__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, endOfSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, readInt, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntBlockPool$SliceReader)[] = {
          { Py_tp_methods, t_IntBlockPool$SliceReader__methods_ },
          { Py_tp_init, (void *) t_IntBlockPool$SliceReader_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntBlockPool$SliceReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntBlockPool$SliceReader, t_IntBlockPool$SliceReader, IntBlockPool$SliceReader);

        void t_IntBlockPool$SliceReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceReader), &PY_TYPE_DEF(IntBlockPool$SliceReader), module, "IntBlockPool$SliceReader", 0);
        }

        void t_IntBlockPool$SliceReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceReader), "class_", make_descriptor(IntBlockPool$SliceReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceReader), "wrapfn_", make_descriptor(t_IntBlockPool$SliceReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceReader::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceReader::wrap_Object(IntBlockPool$SliceReader(((t_IntBlockPool$SliceReader *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.endOfSlice());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.reset(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/PrefixCompletionQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *PrefixCompletionQuery::class$ = NULL;
            jmethodID *PrefixCompletionQuery::mids$ = NULL;
            bool PrefixCompletionQuery::live$ = false;

            jclass PrefixCompletionQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/PrefixCompletionQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e0bfd30c84c4b36c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)V");
                mids$[mid_init$_b4f66d1e72f337e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/suggest/BitsProducer;)V");
                mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrefixCompletionQuery::PrefixCompletionQuery(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_e0bfd30c84c4b36c, a0.this$, a1.this$)) {}

            PrefixCompletionQuery::PrefixCompletionQuery(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::search::suggest::BitsProducer & a2) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_b4f66d1e72f337e4, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::search::Weight PrefixCompletionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
            {
              return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
            }

            jboolean PrefixCompletionQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::analysis::Analyzer PrefixCompletionQuery::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
            }

            jint PrefixCompletionQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            void PrefixCompletionQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_PrefixCompletionQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrefixCompletionQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrefixCompletionQuery_init_(t_PrefixCompletionQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PrefixCompletionQuery_createWeight(t_PrefixCompletionQuery *self, PyObject *args);
            static PyObject *t_PrefixCompletionQuery_equals(t_PrefixCompletionQuery *self, PyObject *args);
            static PyObject *t_PrefixCompletionQuery_getAnalyzer(t_PrefixCompletionQuery *self);
            static PyObject *t_PrefixCompletionQuery_hashCode(t_PrefixCompletionQuery *self, PyObject *args);
            static PyObject *t_PrefixCompletionQuery_visit(t_PrefixCompletionQuery *self, PyObject *args);
            static PyObject *t_PrefixCompletionQuery_get__analyzer(t_PrefixCompletionQuery *self, void *data);
            static PyGetSetDef t_PrefixCompletionQuery__fields_[] = {
              DECLARE_GET_FIELD(t_PrefixCompletionQuery, analyzer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PrefixCompletionQuery__methods_[] = {
              DECLARE_METHOD(t_PrefixCompletionQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrefixCompletionQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrefixCompletionQuery, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_PrefixCompletionQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_PrefixCompletionQuery, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_PrefixCompletionQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_PrefixCompletionQuery, visit, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PrefixCompletionQuery)[] = {
              { Py_tp_methods, t_PrefixCompletionQuery__methods_ },
              { Py_tp_init, (void *) t_PrefixCompletionQuery_init_ },
              { Py_tp_getset, t_PrefixCompletionQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PrefixCompletionQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::CompletionQuery),
              NULL
            };

            DEFINE_TYPE(PrefixCompletionQuery, t_PrefixCompletionQuery, PrefixCompletionQuery);

            void t_PrefixCompletionQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(PrefixCompletionQuery), &PY_TYPE_DEF(PrefixCompletionQuery), module, "PrefixCompletionQuery", 0);
            }

            void t_PrefixCompletionQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCompletionQuery), "class_", make_descriptor(PrefixCompletionQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCompletionQuery), "wrapfn_", make_descriptor(t_PrefixCompletionQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCompletionQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrefixCompletionQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrefixCompletionQuery::initializeClass, 1)))
                return NULL;
              return t_PrefixCompletionQuery::wrap_Object(PrefixCompletionQuery(((t_PrefixCompletionQuery *) arg)->object.this$));
            }
            static PyObject *t_PrefixCompletionQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrefixCompletionQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrefixCompletionQuery_init_(t_PrefixCompletionQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::index::Term a1((jobject) NULL);
                  PrefixCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = PrefixCompletionQuery(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::index::Term a1((jobject) NULL);
                  ::org::apache::lucene::search::suggest::BitsProducer a2((jobject) NULL);
                  PrefixCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::suggest::BitsProducer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = PrefixCompletionQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PrefixCompletionQuery_createWeight(t_PrefixCompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              ::org::apache::lucene::search::Weight result((jobject) NULL);

              if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
                return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
              }

              return callSuper(PY_TYPE(PrefixCompletionQuery), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_PrefixCompletionQuery_equals(t_PrefixCompletionQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(PrefixCompletionQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_PrefixCompletionQuery_getAnalyzer(t_PrefixCompletionQuery *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_PrefixCompletionQuery_hashCode(t_PrefixCompletionQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(PrefixCompletionQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_PrefixCompletionQuery_visit(t_PrefixCompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visit(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PrefixCompletionQuery), (PyObject *) self, "visit", args, 2);
            }

            static PyObject *t_PrefixCompletionQuery_get__analyzer(t_PrefixCompletionQuery *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthCharFilter::class$ = NULL;
          jmethodID *CJKWidthCharFilter::mids$ = NULL;
          bool CJKWidthCharFilter::live$ = false;

          jclass CJKWidthCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthCharFilter::CJKWidthCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint CJKWidthCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint CJKWidthCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthCharFilter_init_(t_CJKWidthCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthCharFilter_read(t_CJKWidthCharFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthCharFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKWidthCharFilter)[] = {
            { Py_tp_methods, t_CJKWidthCharFilter__methods_ },
            { Py_tp_init, (void *) t_CJKWidthCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKWidthCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::charfilter::BaseCharFilter),
            NULL
          };

          DEFINE_TYPE(CJKWidthCharFilter, t_CJKWidthCharFilter, CJKWidthCharFilter);

          void t_CJKWidthCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthCharFilter), &PY_TYPE_DEF(CJKWidthCharFilter), module, "CJKWidthCharFilter", 0);
          }

          void t_CJKWidthCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilter), "class_", make_descriptor(CJKWidthCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilter), "wrapfn_", make_descriptor(t_CJKWidthCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthCharFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthCharFilter::wrap_Object(CJKWidthCharFilter(((t_CJKWidthCharFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthCharFilter_init_(t_CJKWidthCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            CJKWidthCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthCharFilter_read(t_CJKWidthCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(CJKWidthCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CloseableThreadLocal::class$ = NULL;
        jmethodID *CloseableThreadLocal::mids$ = NULL;
        bool CloseableThreadLocal::live$ = false;

        jclass CloseableThreadLocal::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CloseableThreadLocal");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_get_d6bcd06f3102c4d9] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_d20f626183f72f7d] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_initialValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "initialValue", "()Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CloseableThreadLocal::CloseableThreadLocal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void CloseableThreadLocal::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::java::lang::Object CloseableThreadLocal::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_d6bcd06f3102c4d9]));
        }

        void CloseableThreadLocal::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d20f626183f72f7d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args);
        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data);
        static PyGetSetDef t_CloseableThreadLocal__fields_[] = {
          DECLARE_GET_FIELD(t_CloseableThreadLocal, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CloseableThreadLocal__methods_[] = {
          DECLARE_METHOD(t_CloseableThreadLocal, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, of_, METH_VARARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, close, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, get, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CloseableThreadLocal)[] = {
          { Py_tp_methods, t_CloseableThreadLocal__methods_ },
          { Py_tp_init, (void *) t_CloseableThreadLocal_init_ },
          { Py_tp_getset, t_CloseableThreadLocal__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CloseableThreadLocal)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CloseableThreadLocal, t_CloseableThreadLocal, CloseableThreadLocal);
        PyObject *t_CloseableThreadLocal::wrap_Object(const CloseableThreadLocal& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CloseableThreadLocal::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CloseableThreadLocal::install(PyObject *module)
        {
          installType(&PY_TYPE(CloseableThreadLocal), &PY_TYPE_DEF(CloseableThreadLocal), module, "CloseableThreadLocal", 0);
        }

        void t_CloseableThreadLocal::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CloseableThreadLocal), "class_", make_descriptor(CloseableThreadLocal::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CloseableThreadLocal), "wrapfn_", make_descriptor(t_CloseableThreadLocal::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CloseableThreadLocal), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CloseableThreadLocal::initializeClass, 1)))
            return NULL;
          return t_CloseableThreadLocal::wrap_Object(CloseableThreadLocal(((t_CloseableThreadLocal *) arg)->object.this$));
        }
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CloseableThreadLocal::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds)
        {
          CloseableThreadLocal object((jobject) NULL);

          INT_CALL(object = CloseableThreadLocal());
          self->object = object;

          return 0;
        }

        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SnapshotDeletionPolicy::class$ = NULL;
        jmethodID *SnapshotDeletionPolicy::mids$ = NULL;
        bool SnapshotDeletionPolicy::live$ = false;

        jclass SnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_91f3017565dd4804] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)V");
            mids$[mid_getIndexCommit_9b0caf1c02abc6bb] = env->getMethodID(cls, "getIndexCommit", "(J)Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getSnapshotCount_9972fcc56b44e79d] = env->getMethodID(cls, "getSnapshotCount", "()I");
            mids$[mid_getSnapshots_49ec78390f08338a] = env->getMethodID(cls, "getSnapshots", "()Ljava/util/List;");
            mids$[mid_onCommit_d03990be0130160d] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_d03990be0130160d] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_release_d519b4b694415d4a] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_snapshot_4abaa8d830d8ecf1] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_incRef_d519b4b694415d4a] = env->getMethodID(cls, "incRef", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_releaseGen_9c778c9bce6694df] = env->getMethodID(cls, "releaseGen", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SnapshotDeletionPolicy::SnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_91f3017565dd4804, a0.this$)) {}

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::getIndexCommit(jlong a0) const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_9b0caf1c02abc6bb], a0));
        }

        jint SnapshotDeletionPolicy::getSnapshotCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSnapshotCount_9972fcc56b44e79d]);
        }

        ::java::util::List SnapshotDeletionPolicy::getSnapshots() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSnapshots_49ec78390f08338a]));
        }

        void SnapshotDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_d03990be0130160d], a0.this$);
        }

        void SnapshotDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_d03990be0130160d], a0.this$);
        }

        void SnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_d519b4b694415d4a], a0.this$);
        }

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_4abaa8d830d8ecf1]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_SnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshotCount),
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshots),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_SnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getIndexCommit, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshotCount, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshots, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onInit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, release, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, snapshot, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SnapshotDeletionPolicy)[] = {
          { Py_tp_methods, t_SnapshotDeletionPolicy__methods_ },
          { Py_tp_init, (void *) t_SnapshotDeletionPolicy_init_ },
          { Py_tp_getset, t_SnapshotDeletionPolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SnapshotDeletionPolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexDeletionPolicy),
          NULL
        };

        DEFINE_TYPE(SnapshotDeletionPolicy, t_SnapshotDeletionPolicy, SnapshotDeletionPolicy);

        void t_SnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SnapshotDeletionPolicy), &PY_TYPE_DEF(SnapshotDeletionPolicy), module, "SnapshotDeletionPolicy", 0);
        }

        void t_SnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SnapshotDeletionPolicy), "class_", make_descriptor(SnapshotDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SnapshotDeletionPolicy), "wrapfn_", make_descriptor(t_SnapshotDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SnapshotDeletionPolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_SnapshotDeletionPolicy::wrap_Object(SnapshotDeletionPolicy(((t_SnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          SnapshotDeletionPolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            INT_CALL(object = SnapshotDeletionPolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getIndexCommit(a0));
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSnapshotCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexCommit));
        }

        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.snapshot());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSnapshotCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilter::class$ = NULL;
          jmethodID *BrazilianStemFilter::mids$ = NULL;
          bool BrazilianStemFilter::live$ = false;

          jclass BrazilianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilter::BrazilianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean BrazilianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BrazilianStemFilter)[] = {
            { Py_tp_methods, t_BrazilianStemFilter__methods_ },
            { Py_tp_init, (void *) t_BrazilianStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BrazilianStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(BrazilianStemFilter, t_BrazilianStemFilter, BrazilianStemFilter);

          void t_BrazilianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilter), &PY_TYPE_DEF(BrazilianStemFilter), module, "BrazilianStemFilter", 0);
          }

          void t_BrazilianStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilter), "class_", make_descriptor(BrazilianStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilter), "wrapfn_", make_descriptor(t_BrazilianStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilter::wrap_Object(BrazilianStemFilter(((t_BrazilianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BrazilianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BrazilianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BrazilianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EnglishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EnglishStemmer::class$ = NULL;
        jmethodID *EnglishStemmer::mids$ = NULL;
        bool EnglishStemmer::live$ = false;

        jclass EnglishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EnglishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EnglishStemmer::EnglishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean EnglishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint EnglishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean EnglishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args);

        static PyMethodDef t_EnglishStemmer__methods_[] = {
          DECLARE_METHOD(t_EnglishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(EnglishStemmer)[] = {
          { Py_tp_methods, t_EnglishStemmer__methods_ },
          { Py_tp_init, (void *) t_EnglishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(EnglishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(EnglishStemmer, t_EnglishStemmer, EnglishStemmer);

        void t_EnglishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EnglishStemmer), &PY_TYPE_DEF(EnglishStemmer), module, "EnglishStemmer", 0);
        }

        void t_EnglishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishStemmer), "class_", make_descriptor(EnglishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishStemmer), "wrapfn_", make_descriptor(t_EnglishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EnglishStemmer::initializeClass, 1)))
            return NULL;
          return t_EnglishStemmer::wrap_Object(EnglishStemmer(((t_EnglishStemmer *) arg)->object.this$));
        }
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EnglishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds)
        {
          EnglishStemmer object((jobject) NULL);

          INT_CALL(object = EnglishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(EnglishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(EnglishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(EnglishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizer::class$ = NULL;
          jmethodID *PathHierarchyTokenizer::mids$ = NULL;
          bool PathHierarchyTokenizer::live$ = false;
          jchar PathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint PathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass PathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_f28e156a8b542ec8] = env->getMethodID(cls, "<init>", "(CC)V");
              mids$[mid_init$_49eec491b83160ef] = env->getMethodID(cls, "<init>", "(IC)V");
              mids$[mid_init$_92254c745d1d56c8] = env->getMethodID(cls, "<init>", "(CCI)V");
              mids$[mid_init$_f7f4575bb0fb8a29] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;CCI)V");
              mids$[mid_init$_9643b5b77a650257] = env->getMethodID(cls, "<init>", "(ICCI)V");
              mids$[mid_init$_38dd631bad36a6f7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;ICCI)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizer::PathHierarchyTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(jint a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(jchar a0, jchar a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f28e156a8b542ec8, a0, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(jint a0, jchar a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_49eec491b83160ef, a0, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(jchar a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92254c745d1d56c8, a0, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f7f4575bb0fb8a29, a0.this$, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(jint a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9643b5b77a650257, a0, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_38dd631bad36a6f7, a0.this$, a1, a2, a3, a4)) {}

          void PathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean PathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void PathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PathHierarchyTokenizer)[] = {
            { Py_tp_methods, t_PathHierarchyTokenizer__methods_ },
            { Py_tp_init, (void *) t_PathHierarchyTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PathHierarchyTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(PathHierarchyTokenizer, t_PathHierarchyTokenizer, PathHierarchyTokenizer);

          void t_PathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizer), &PY_TYPE_DEF(PathHierarchyTokenizer), module, "PathHierarchyTokenizer", 0);
          }

          void t_PathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizer), "class_", make_descriptor(PathHierarchyTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizer), "wrapfn_", make_descriptor(t_PathHierarchyTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizer), "DEFAULT_DELIMITER", make_descriptor(PathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizer), "DEFAULT_SKIP", make_descriptor(PathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizer::wrap_Object(PathHierarchyTokenizer(((t_PathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PathHierarchyTokenizer object((jobject) NULL);

                INT_CALL(object = PathHierarchyTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jchar a0;
                jchar a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "CC", &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                jchar a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "IC", &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jchar a0;
                jchar a1;
                jint a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "CCI", &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "ICCI", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *FieldReader::class$ = NULL;
          jmethodID *FieldReader::mids$ = NULL;
          bool FieldReader::live$ = false;

          jclass FieldReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/FieldReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getMin_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getStats_3e5b165a6bc9d464] = env->getMethodID(cls, "getStats", "()Lorg/apache/lucene/codecs/blocktree/Stats;");
              mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Collection FieldReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          jint FieldReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMin() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::codecs::blocktree::Stats FieldReader::getStats() const
          {
            return ::org::apache::lucene::codecs::blocktree::Stats(env->callObjectMethod(this$, mids$[mid_getStats_3e5b165a6bc9d464]));
          }

          jlong FieldReader::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
          }

          jlong FieldReader::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
          }

          jboolean FieldReader::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_8454bd5aa23fd11e]);
          }

          jboolean FieldReader::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
          }

          jboolean FieldReader::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          jboolean FieldReader::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::iterator() const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
          }

          jlong FieldReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong FieldReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          ::java::lang::String FieldReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_getChildResources(t_FieldReader *self);
          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getStats(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self);
          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_toString(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_get__childResources(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__stats(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data);
          static PyGetSetDef t_FieldReader__fields_[] = {
            DECLARE_GET_FIELD(t_FieldReader, childResources),
            DECLARE_GET_FIELD(t_FieldReader, docCount),
            DECLARE_GET_FIELD(t_FieldReader, max),
            DECLARE_GET_FIELD(t_FieldReader, min),
            DECLARE_GET_FIELD(t_FieldReader, stats),
            DECLARE_GET_FIELD(t_FieldReader, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldReader, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldReader__methods_[] = {
            DECLARE_METHOD(t_FieldReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, getChildResources, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMax, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMin, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getStats, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, size, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldReader)[] = {
            { Py_tp_methods, t_FieldReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FieldReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::Terms),
            NULL
          };

          DEFINE_TYPE(FieldReader, t_FieldReader, FieldReader);

          void t_FieldReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldReader), &PY_TYPE_DEF(FieldReader), module, "FieldReader", 0);
          }

          void t_FieldReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldReader), "class_", make_descriptor(FieldReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldReader), "wrapfn_", make_descriptor(t_FieldReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldReader::initializeClass, 1)))
              return NULL;
            return t_FieldReader::wrap_Object(FieldReader(((t_FieldReader *) arg)->object.this$));
          }
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldReader_getChildResources(t_FieldReader *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
          }

          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMin());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getMin", args, 2);
          }

          static PyObject *t_FieldReader_getStats(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::blocktree::Stats result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getStats());
              return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getStats", args, 2);
          }

          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FieldReader_toString(t_FieldReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldReader_get__childResources(t_FieldReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__stats(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::codecs::blocktree::Stats value((jobject) NULL);
            OBJ_CALL(value = self->object.getStats());
            return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermScorer::class$ = NULL;
          jmethodID *QueryTermScorer::mids$ = NULL;
          bool QueryTermScorer::live$ = false;

          jclass QueryTermScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_86dfc09fe6478bfb] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedTerm;)V");
              mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_e3c97842bfe33454] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_c5ae5fd35d2e5a2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_allFragmentsProcessed_f2cc1bce94666404] = env->getMethodID(cls, "allFragmentsProcessed", "()V");
              mids$[mid_getFragmentScore_58aec2b64dff50c8] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_58aec2b64dff50c8] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_6de1e28d9d10cd9e] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_786a99056c1d5c74] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermScorer::QueryTermScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86dfc09fe6478bfb, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3c97842bfe33454, a0.this$, a1.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c5ae5fd35d2e5a2f, a0.this$, a1.this$, a2.this$)) {}

          void QueryTermScorer::allFragmentsProcessed() const
          {
            env->callVoidMethod(this$, mids$[mid_allFragmentsProcessed_f2cc1bce94666404]);
          }

          jfloat QueryTermScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_58aec2b64dff50c8]);
          }

          jfloat QueryTermScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_58aec2b64dff50c8]);
          }

          jfloat QueryTermScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::analysis::TokenStream QueryTermScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_6de1e28d9d10cd9e], a0.this$));
          }

          void QueryTermScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_786a99056c1d5c74], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data);
          static PyGetSetDef t_QueryTermScorer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryTermScorer, fragmentScore),
            DECLARE_GET_FIELD(t_QueryTermScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryTermScorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryTermScorer__methods_[] = {
            DECLARE_METHOD(t_QueryTermScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, allFragmentsProcessed, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, init, METH_O),
            DECLARE_METHOD(t_QueryTermScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryTermScorer)[] = {
            { Py_tp_methods, t_QueryTermScorer__methods_ },
            { Py_tp_init, (void *) t_QueryTermScorer_init_ },
            { Py_tp_getset, t_QueryTermScorer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryTermScorer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryTermScorer, t_QueryTermScorer, QueryTermScorer);

          void t_QueryTermScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermScorer), &PY_TYPE_DEF(QueryTermScorer), module, "QueryTermScorer", 0);
          }

          void t_QueryTermScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermScorer), "class_", make_descriptor(QueryTermScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermScorer), "wrapfn_", make_descriptor(t_QueryTermScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermScorer::initializeClass, 1)))
              return NULL;
            return t_QueryTermScorer::wrap_Object(QueryTermScorer(((t_QueryTermScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self)
          {
            OBJ_CALL(self->object.allFragmentsProcessed());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragListBuilder::class$ = NULL;
          jmethodID *FragListBuilder::mids$ = NULL;
          bool FragListBuilder::live$ = false;

          jclass FragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFieldFragList_2f27b0bbe6847286] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::vectorhighlight::FieldFragList FragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_2f27b0bbe6847286], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args);

          static PyMethodDef t_FragListBuilder__methods_[] = {
            DECLARE_METHOD(t_FragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FragListBuilder)[] = {
            { Py_tp_methods, t_FragListBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FragListBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FragListBuilder, t_FragListBuilder, FragListBuilder);

          void t_FragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragListBuilder), &PY_TYPE_DEF(FragListBuilder), module, "FragListBuilder", 0);
          }

          void t_FragListBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragListBuilder), "class_", make_descriptor(FragListBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragListBuilder), "wrapfn_", make_descriptor(t_FragListBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragListBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragListBuilder::initializeClass, 1)))
              return NULL;
            return t_FragListBuilder::wrap_Object(FragListBuilder(((t_FragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragListBuilder_createFieldFragList(t_FragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "org/apache/lucene/search/SegmentCacheable.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/function/LongToDoubleFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValues.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DoubleValuesSource::class$ = NULL;
        jmethodID *DoubleValuesSource::mids$ = NULL;
        bool DoubleValuesSource::live$ = false;
        DoubleValuesSource *DoubleValuesSource::SCORES = NULL;

        jclass DoubleValuesSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DoubleValuesSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_constant_b9077eda4cd1ff40] = env->getStaticMethodID(cls, "constant", "(D)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_explain_078291bf633e6cdb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_fromDoubleField_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "fromDoubleField", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromField_5710a20d8a6101bd] = env->getStaticMethodID(cls, "fromField", "(Ljava/lang/String;Ljava/util/function/LongToDoubleFunction;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromFloatField_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "fromFloatField", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromIntField_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "fromIntField", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromLongField_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "fromLongField", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromQuery_179ffb190b72be6c] = env->getStaticMethodID(cls, "fromQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_fromScorer_cfe0356fda8f3aa7] = env->getStaticMethodID(cls, "fromScorer", "(Lorg/apache/lucene/search/Scorable;)Lorg/apache/lucene/search/DoubleValues;");
            mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValues_1c9eae1e8e48f839] = env->getMethodID(cls, "getValues", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/DoubleValues;)Lorg/apache/lucene/search/DoubleValues;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_e1c8cc0c21609653] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_toLongValuesSource_1eae8270233c8b33] = env->getMethodID(cls, "toLongValuesSource", "()Lorg/apache/lucene/search/LongValuesSource;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            SCORES = new DoubleValuesSource(env->getStaticObjectField(cls, "SCORES", "Lorg/apache/lucene/search/DoubleValuesSource;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleValuesSource::DoubleValuesSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        DoubleValuesSource DoubleValuesSource::constant(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_constant_b9077eda4cd1ff40], a0));
        }

        jboolean DoubleValuesSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::Explanation DoubleValuesSource::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1, const ::org::apache::lucene::search::Explanation & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_078291bf633e6cdb], a0.this$, a1, a2.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromDoubleField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromDoubleField_ff23b83f44e75cdf], a0.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromField(const ::java::lang::String & a0, const ::java::util::function::LongToDoubleFunction & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromField_5710a20d8a6101bd], a0.this$, a1.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromFloatField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromFloatField_ff23b83f44e75cdf], a0.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromIntField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromIntField_ff23b83f44e75cdf], a0.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromLongField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromLongField_ff23b83f44e75cdf], a0.this$));
        }

        DoubleValuesSource DoubleValuesSource::fromQuery(const ::org::apache::lucene::search::Query & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromQuery_179ffb190b72be6c], a0.this$));
        }

        ::org::apache::lucene::search::DoubleValues DoubleValuesSource::fromScorer(const ::org::apache::lucene::search::Scorable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DoubleValues(env->callStaticObjectMethod(cls, mids$[mid_fromScorer_cfe0356fda8f3aa7], a0.this$));
        }

        ::org::apache::lucene::search::SortField DoubleValuesSource::getSortField(jboolean a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
        }

        ::org::apache::lucene::search::DoubleValues DoubleValuesSource::getValues(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::DoubleValues & a1) const
        {
          return ::org::apache::lucene::search::DoubleValues(env->callObjectMethod(this$, mids$[mid_getValues_1c9eae1e8e48f839], a0.this$, a1.this$));
        }

        jint DoubleValuesSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean DoubleValuesSource::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
        }

        DoubleValuesSource DoubleValuesSource::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_rewrite_e1c8cc0c21609653], a0.this$));
        }

        ::org::apache::lucene::search::LongValuesSource DoubleValuesSource::toLongValuesSource() const
        {
          return ::org::apache::lucene::search::LongValuesSource(env->callObjectMethod(this$, mids$[mid_toLongValuesSource_1eae8270233c8b33]));
        }

        ::java::lang::String DoubleValuesSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DoubleValuesSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleValuesSource_init_(t_DoubleValuesSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleValuesSource_constant(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_equals(t_DoubleValuesSource *self, PyObject *args);
        static PyObject *t_DoubleValuesSource_explain(t_DoubleValuesSource *self, PyObject *args);
        static PyObject *t_DoubleValuesSource_fromDoubleField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_fromField(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoubleValuesSource_fromFloatField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_fromIntField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_fromLongField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_fromQuery(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_fromScorer(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValuesSource_getSortField(t_DoubleValuesSource *self, PyObject *arg);
        static PyObject *t_DoubleValuesSource_getValues(t_DoubleValuesSource *self, PyObject *args);
        static PyObject *t_DoubleValuesSource_hashCode(t_DoubleValuesSource *self, PyObject *args);
        static PyObject *t_DoubleValuesSource_needsScores(t_DoubleValuesSource *self);
        static PyObject *t_DoubleValuesSource_rewrite(t_DoubleValuesSource *self, PyObject *arg);
        static PyObject *t_DoubleValuesSource_toLongValuesSource(t_DoubleValuesSource *self);
        static PyObject *t_DoubleValuesSource_toString(t_DoubleValuesSource *self, PyObject *args);

        static PyMethodDef t_DoubleValuesSource__methods_[] = {
          DECLARE_METHOD(t_DoubleValuesSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, constant, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_DoubleValuesSource, explain, METH_VARARGS),
          DECLARE_METHOD(t_DoubleValuesSource, fromDoubleField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromFloatField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromIntField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromLongField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromQuery, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, fromScorer, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValuesSource, getSortField, METH_O),
          DECLARE_METHOD(t_DoubleValuesSource, getValues, METH_VARARGS),
          DECLARE_METHOD(t_DoubleValuesSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DoubleValuesSource, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_DoubleValuesSource, rewrite, METH_O),
          DECLARE_METHOD(t_DoubleValuesSource, toLongValuesSource, METH_NOARGS),
          DECLARE_METHOD(t_DoubleValuesSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoubleValuesSource)[] = {
          { Py_tp_methods, t_DoubleValuesSource__methods_ },
          { Py_tp_init, (void *) t_DoubleValuesSource_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoubleValuesSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DoubleValuesSource, t_DoubleValuesSource, DoubleValuesSource);

        void t_DoubleValuesSource::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleValuesSource), &PY_TYPE_DEF(DoubleValuesSource), module, "DoubleValuesSource", 0);
        }

        void t_DoubleValuesSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValuesSource), "class_", make_descriptor(DoubleValuesSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValuesSource), "wrapfn_", make_descriptor(t_DoubleValuesSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValuesSource), "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleValuesSource::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValuesSource), "SCORES", make_descriptor(t_DoubleValuesSource::wrap_Object(*DoubleValuesSource::SCORES)));
        }

        static PyObject *t_DoubleValuesSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleValuesSource::initializeClass, 1)))
            return NULL;
          return t_DoubleValuesSource::wrap_Object(DoubleValuesSource(((t_DoubleValuesSource *) arg)->object.this$));
        }
        static PyObject *t_DoubleValuesSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleValuesSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleValuesSource_init_(t_DoubleValuesSource *self, PyObject *args, PyObject *kwds)
        {
          DoubleValuesSource object((jobject) NULL);

          INT_CALL(object = DoubleValuesSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleValuesSource_constant(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::constant(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "constant", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_equals(t_DoubleValuesSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DoubleValuesSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DoubleValuesSource_explain(t_DoubleValuesSource *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation a2((jobject) NULL);
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromDoubleField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromDoubleField(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromDoubleField", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromField(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::function::LongToDoubleFunction a1((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::function::LongToDoubleFunction::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromField(a0, a1));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromField", args);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromFloatField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromFloatField(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromFloatField", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromIntField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromIntField(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromIntField", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromLongField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromLongField(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromLongField", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromQuery(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromQuery(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromQuery", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_fromScorer(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValuesSource::fromScorer(a0));
            return ::org::apache::lucene::search::t_DoubleValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromScorer", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_getSortField(t_DoubleValuesSource *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.getSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_getValues(t_DoubleValuesSource *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValues a1((jobject) NULL);
          ::org::apache::lucene::search::DoubleValues result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::DoubleValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getValues(a0, a1));
            return ::org::apache::lucene::search::t_DoubleValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", args);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_hashCode(t_DoubleValuesSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DoubleValuesSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DoubleValuesSource_needsScores(t_DoubleValuesSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DoubleValuesSource_rewrite(t_DoubleValuesSource *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_DoubleValuesSource_toLongValuesSource(t_DoubleValuesSource *self)
        {
          ::org::apache::lucene::search::LongValuesSource result((jobject) NULL);
          OBJ_CALL(result = self->object.toLongValuesSource());
          return ::org::apache::lucene::search::t_LongValuesSource::wrap_Object(result);
        }

        static PyObject *t_DoubleValuesSource_toString(t_DoubleValuesSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DoubleValuesSource), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::class$ = NULL;
          jmethodID *VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::mids$ = NULL;
          bool VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::live$ = false;

          jclass VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_isIndexTerm_b105bc98075287ea] = env->getMethodID(cls, "isIndexTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)Z");
              mids$[mid_newField_747195a1c5ce5890] = env->getMethodID(cls, "newField", "(Lorg/apache/lucene/index/FieldInfo;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector(jint a0, jint a1) : ::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          jboolean VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::isIndexTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIndexTerm_b105bc98075287ea], a0.this$, a1.this$);
          }

          void VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::newField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_newField_747195a1c5ce5890], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_init_(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_newField(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args);

          static PyMethodDef t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector__methods_[] = {
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, isIndexTerm, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, newField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector)[] = {
            { Py_tp_methods, t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector__methods_ },
            { Py_tp_init, (void *) t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector),
            NULL
          };

          DEFINE_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector, VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector);

          void t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), &PY_TYPE_DEF(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), module, "VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector", 0);
          }

          void t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), "class_", make_descriptor(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), "wrapfn_", make_descriptor(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::initializeClass, 1)))
              return NULL;
            return t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::wrap_Object(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector(((t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *) arg)->object.this$));
          }
          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_init_(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isIndexTerm(a0, a1));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), (PyObject *) self, "isIndexTerm", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector_newField(t_VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.newField(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector), (PyObject *) self, "newField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilter::class$ = NULL;
          jmethodID *ASCIIFoldingFilter::mids$ = NULL;
          bool ASCIIFoldingFilter::live$ = false;

          jclass ASCIIFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_2ffd64a9e6352a93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_foldToASCII_d7b537fea0247190] = env->getMethodID(cls, "foldToASCII", "([CI)V");
              mids$[mid_foldToASCII_bb1020cb3a89930d] = env->getStaticMethodID(cls, "foldToASCII", "([CI[CII)I");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isPreserveOriginal_8454bd5aa23fd11e] = env->getMethodID(cls, "isPreserveOriginal", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2ffd64a9e6352a93, a0.this$, a1)) {}

          void ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_foldToASCII_d7b537fea0247190], a0.this$, a1);
          }

          jint ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_foldToASCII_bb1020cb3a89930d], a0.this$, a1, a2.this$, a3, a4);
          }

          jboolean ASCIIFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          jboolean ASCIIFoldingFilter::isPreserveOriginal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPreserveOriginal_8454bd5aa23fd11e]);
          }

          void ASCIIFoldingFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self);
          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilter__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilter, preserveOriginal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, isPreserveOriginal, METH_NOARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ASCIIFoldingFilter)[] = {
            { Py_tp_methods, t_ASCIIFoldingFilter__methods_ },
            { Py_tp_init, (void *) t_ASCIIFoldingFilter_init_ },
            { Py_tp_getset, t_ASCIIFoldingFilter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ASCIIFoldingFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ASCIIFoldingFilter, t_ASCIIFoldingFilter, ASCIIFoldingFilter);

          void t_ASCIIFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilter), &PY_TYPE_DEF(ASCIIFoldingFilter), module, "ASCIIFoldingFilter", 0);
          }

          void t_ASCIIFoldingFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilter), "class_", make_descriptor(ASCIIFoldingFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilter), "wrapfn_", make_descriptor(t_ASCIIFoldingFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilter::wrap_Object(ASCIIFoldingFilter(((t_ASCIIFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.foldToASCII(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "foldToASCII", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter::foldToASCII(a0, a1, a2, a3, a4));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "foldToASCII_", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesRewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesRewriteMethod::class$ = NULL;
        jmethodID *DocValuesRewriteMethod::mids$ = NULL;
        bool DocValuesRewriteMethod::live$ = false;

        jclass DocValuesRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_9b63ebac49a26b30] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesRewriteMethod::DocValuesRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean DocValuesRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint DocValuesRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query DocValuesRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_9b63ebac49a26b30], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocValuesRewriteMethod_init_(t_DocValuesRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesRewriteMethod_equals(t_DocValuesRewriteMethod *self, PyObject *args);
        static PyObject *t_DocValuesRewriteMethod_hashCode(t_DocValuesRewriteMethod *self, PyObject *args);
        static PyObject *t_DocValuesRewriteMethod_rewrite(t_DocValuesRewriteMethod *self, PyObject *args);

        static PyMethodDef t_DocValuesRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_DocValuesRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesRewriteMethod)[] = {
          { Py_tp_methods, t_DocValuesRewriteMethod__methods_ },
          { Py_tp_init, (void *) t_DocValuesRewriteMethod_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesRewriteMethod)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiTermQuery$RewriteMethod),
          NULL
        };

        DEFINE_TYPE(DocValuesRewriteMethod, t_DocValuesRewriteMethod, DocValuesRewriteMethod);

        void t_DocValuesRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesRewriteMethod), &PY_TYPE_DEF(DocValuesRewriteMethod), module, "DocValuesRewriteMethod", 0);
        }

        void t_DocValuesRewriteMethod::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesRewriteMethod), "class_", make_descriptor(DocValuesRewriteMethod::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesRewriteMethod), "wrapfn_", make_descriptor(t_DocValuesRewriteMethod::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesRewriteMethod), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_DocValuesRewriteMethod::wrap_Object(DocValuesRewriteMethod(((t_DocValuesRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_DocValuesRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocValuesRewriteMethod_init_(t_DocValuesRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          DocValuesRewriteMethod object((jobject) NULL);

          INT_CALL(object = DocValuesRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocValuesRewriteMethod_equals(t_DocValuesRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DocValuesRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocValuesRewriteMethod_hashCode(t_DocValuesRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DocValuesRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocValuesRewriteMethod_rewrite(t_DocValuesRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SetKeywordMarkerFilter::class$ = NULL;
          jmethodID *SetKeywordMarkerFilter::mids$ = NULL;
          bool SetKeywordMarkerFilter::live$ = false;

          jclass SetKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_isKeyword_8454bd5aa23fd11e] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SetKeywordMarkerFilter::SetKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SetKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_SetKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SetKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SetKeywordMarkerFilter)[] = {
            { Py_tp_methods, t_SetKeywordMarkerFilter__methods_ },
            { Py_tp_init, (void *) t_SetKeywordMarkerFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SetKeywordMarkerFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter),
            NULL
          };

          DEFINE_TYPE(SetKeywordMarkerFilter, t_SetKeywordMarkerFilter, SetKeywordMarkerFilter);

          void t_SetKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SetKeywordMarkerFilter), &PY_TYPE_DEF(SetKeywordMarkerFilter), module, "SetKeywordMarkerFilter", 0);
          }

          void t_SetKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SetKeywordMarkerFilter), "class_", make_descriptor(SetKeywordMarkerFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SetKeywordMarkerFilter), "wrapfn_", make_descriptor(t_SetKeywordMarkerFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SetKeywordMarkerFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SetKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_SetKeywordMarkerFilter::wrap_Object(SetKeywordMarkerFilter(((t_SetKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SetKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            SetKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
            {
              INT_CALL(object = SetKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemmer::class$ = NULL;
          jmethodID *GermanStemmer::mids$ = NULL;
          bool GermanStemmer::live$ = false;

          jclass GermanStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_9bfa75c9f141b67f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemmer::GermanStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GermanStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanStemmer)[] = {
            { Py_tp_methods, t_GermanStemmer__methods_ },
            { Py_tp_init, (void *) t_GermanStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GermanStemmer, t_GermanStemmer, GermanStemmer);

          void t_GermanStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemmer), &PY_TYPE_DEF(GermanStemmer), module, "GermanStemmer", 0);
          }

          void t_GermanStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "class_", make_descriptor(GermanStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanStemmer object((jobject) NULL);

            INT_CALL(object = GermanStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STUniformSplitTermsReader::class$ = NULL;
            jmethodID *STUniformSplitTermsReader::mids$ = NULL;
            bool STUniformSplitTermsReader::live$ = false;

            jclass STUniformSplitTermsReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_72f63d35d3099b63] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)V");
                mids$[mid_fillFieldMap_e54b52c5e61e05e0] = env->getMethodID(cls, "fillFieldMap", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;ZLorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/store/IndexInput;Ljava/util/Collection;Lorg/apache/lucene/index/FieldInfos;)V");
                mids$[mid_createUnionFieldMetadata_8af7767ebb91982a] = env->getMethodID(cls, "createUnionFieldMetadata", "(Ljava/lang/Iterable;)Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;");
                mids$[mid_getTermsRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTermsRamBytesUsed", "()J");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STUniformSplitTermsReader::STUniformSplitTermsReader(const ::org::apache::lucene::codecs::PostingsReaderBase & a0, const ::org::apache::lucene::index::SegmentReadState & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a2, jboolean a3) : ::org::apache::lucene::codecs::uniformsplit::UniformSplitTermsReader(env->newObject(initializeClass, &mids$, mid_init$_72f63d35d3099b63, a0.this$, a1.this$, a2.this$, a3)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STUniformSplitTermsReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STUniformSplitTermsReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STUniformSplitTermsReader_init_(t_STUniformSplitTermsReader *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_STUniformSplitTermsReader__methods_[] = {
              DECLARE_METHOD(t_STUniformSplitTermsReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitTermsReader, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STUniformSplitTermsReader)[] = {
              { Py_tp_methods, t_STUniformSplitTermsReader__methods_ },
              { Py_tp_init, (void *) t_STUniformSplitTermsReader_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STUniformSplitTermsReader)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::UniformSplitTermsReader),
              NULL
            };

            DEFINE_TYPE(STUniformSplitTermsReader, t_STUniformSplitTermsReader, STUniformSplitTermsReader);

            void t_STUniformSplitTermsReader::install(PyObject *module)
            {
              installType(&PY_TYPE(STUniformSplitTermsReader), &PY_TYPE_DEF(STUniformSplitTermsReader), module, "STUniformSplitTermsReader", 0);
            }

            void t_STUniformSplitTermsReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsReader), "class_", make_descriptor(STUniformSplitTermsReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsReader), "wrapfn_", make_descriptor(t_STUniformSplitTermsReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STUniformSplitTermsReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STUniformSplitTermsReader::initializeClass, 1)))
                return NULL;
              return t_STUniformSplitTermsReader::wrap_Object(STUniformSplitTermsReader(((t_STUniformSplitTermsReader *) arg)->object.this$));
            }
            static PyObject *t_STUniformSplitTermsReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STUniformSplitTermsReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STUniformSplitTermsReader_init_(t_STUniformSplitTermsReader *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::codecs::PostingsReaderBase a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a2((jobject) NULL);
              jboolean a3;
              STUniformSplitTermsReader object((jobject) NULL);

              if (!parseArgs(args, "kkkZ", ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = STUniformSplitTermsReader(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext$Context::class$ = NULL;
        jmethodID *IOContext$Context::mids$ = NULL;
        bool IOContext$Context::live$ = false;
        IOContext$Context *IOContext$Context::DEFAULT = NULL;
        IOContext$Context *IOContext$Context::FLUSH = NULL;
        IOContext$Context *IOContext$Context::MERGE = NULL;
        IOContext$Context *IOContext$Context::READ = NULL;

        jclass IOContext$Context::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext$Context");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_cb77494d972c1019] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/store/IOContext$Context;");
            mids$[mid_values_557ef9eef174ee61] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/store/IOContext$Context;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext$Context(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext$Context;"));
            FLUSH = new IOContext$Context(env->getStaticObjectField(cls, "FLUSH", "Lorg/apache/lucene/store/IOContext$Context;"));
            MERGE = new IOContext$Context(env->getStaticObjectField(cls, "MERGE", "Lorg/apache/lucene/store/IOContext$Context;"));
            READ = new IOContext$Context(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext$Context;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext$Context IOContext$Context::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IOContext$Context(env->callStaticObjectMethod(cls, mids$[mid_valueOf_cb77494d972c1019], a0.this$));
        }

        JArray< IOContext$Context > IOContext$Context::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IOContext$Context >(env->callStaticObjectMethod(cls, mids$[mid_values_557ef9eef174ee61]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args);
        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOContext$Context_values(PyTypeObject *type);
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data);
        static PyGetSetDef t_IOContext$Context__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext$Context, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext$Context__methods_[] = {
          DECLARE_METHOD(t_IOContext$Context, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOContext$Context, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOContext$Context)[] = {
          { Py_tp_methods, t_IOContext$Context__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IOContext$Context__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOContext$Context)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(IOContext$Context, t_IOContext$Context, IOContext$Context);
        PyObject *t_IOContext$Context::wrap_Object(const IOContext$Context& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOContext$Context::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOContext$Context::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext$Context), &PY_TYPE_DEF(IOContext$Context), module, "IOContext$Context", 0);
        }

        void t_IOContext$Context::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "class_", make_descriptor(IOContext$Context::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "wrapfn_", make_descriptor(t_IOContext$Context::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext$Context::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "DEFAULT", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::DEFAULT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "FLUSH", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::FLUSH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "MERGE", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::MERGE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext$Context), "READ", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::READ)));
        }

        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext$Context::initializeClass, 1)))
            return NULL;
          return t_IOContext$Context::wrap_Object(IOContext$Context(((t_IOContext$Context *) arg)->object.this$));
        }
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext$Context::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IOContext$Context result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::valueOf(a0));
            return t_IOContext$Context::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IOContext$Context_values(PyTypeObject *type)
        {
          JArray< IOContext$Context > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::values());
          return JArray<jobject>(result.this$).wrap(t_IOContext$Context::wrap_jobject);
        }
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Terms::class$ = NULL;
        jmethodID *Terms::mids$ = NULL;
        bool Terms::live$ = false;
        JArray< Terms > *Terms::EMPTY_ARRAY = NULL;

        jclass Terms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Terms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getStats_d6bcd06f3102c4d9] = env->getMethodID(cls, "getStats", "()Ljava/lang/Object;");
            mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Terms >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Terms;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint Terms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef Terms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::util::BytesRef Terms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_7af2ea2e37ce82b8]));
        }

        ::java::lang::Object Terms::getStats() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStats_d6bcd06f3102c4d9]));
        }

        jlong Terms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
        }

        jlong Terms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
        }

        jboolean Terms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_8454bd5aa23fd11e]);
        }

        jboolean Terms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
        }

        jboolean Terms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
        }

        jboolean Terms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::TermsEnum Terms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum Terms::iterator() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
        }

        jlong Terms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_getDocCount(t_Terms *self);
        static PyObject *t_Terms_getMax(t_Terms *self);
        static PyObject *t_Terms_getMin(t_Terms *self);
        static PyObject *t_Terms_getStats(t_Terms *self);
        static PyObject *t_Terms_getSumDocFreq(t_Terms *self);
        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self);
        static PyObject *t_Terms_hasFreqs(t_Terms *self);
        static PyObject *t_Terms_hasOffsets(t_Terms *self);
        static PyObject *t_Terms_hasPayloads(t_Terms *self);
        static PyObject *t_Terms_hasPositions(t_Terms *self);
        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args);
        static PyObject *t_Terms_iterator(t_Terms *self);
        static PyObject *t_Terms_size(t_Terms *self);
        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data);
        static PyObject *t_Terms_get__max(t_Terms *self, void *data);
        static PyObject *t_Terms_get__min(t_Terms *self, void *data);
        static PyObject *t_Terms_get__stats(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data);
        static PyGetSetDef t_Terms__fields_[] = {
          DECLARE_GET_FIELD(t_Terms, docCount),
          DECLARE_GET_FIELD(t_Terms, max),
          DECLARE_GET_FIELD(t_Terms, min),
          DECLARE_GET_FIELD(t_Terms, stats),
          DECLARE_GET_FIELD(t_Terms, sumDocFreq),
          DECLARE_GET_FIELD(t_Terms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Terms__methods_[] = {
          DECLARE_METHOD(t_Terms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMax, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMin, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getStats, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasFreqs, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPositions, METH_NOARGS),
          DECLARE_METHOD(t_Terms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_Terms, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Terms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Terms)[] = {
          { Py_tp_methods, t_Terms__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Terms__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Terms)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Terms, t_Terms, Terms);

        void t_Terms::install(PyObject *module)
        {
          installType(&PY_TYPE(Terms), &PY_TYPE_DEF(Terms), module, "Terms", 0);
        }

        void t_Terms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Terms), "class_", make_descriptor(Terms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Terms), "wrapfn_", make_descriptor(t_Terms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Terms), "boxfn_", make_descriptor(boxObject));
          env->getClass(Terms::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Terms), "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Terms::EMPTY_ARRAY->this$).wrap(t_Terms::wrap_jobject)));
        }

        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Terms::initializeClass, 1)))
            return NULL;
          return t_Terms::wrap_Object(Terms(((t_Terms *) arg)->object.this$));
        }
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Terms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Terms_getDocCount(t_Terms *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Terms_getMax(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getMin(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getStats(t_Terms *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getStats());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Terms_getSumDocFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_hasFreqs(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreqs());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasOffsets(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPayloads(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPositions(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", args);
          return NULL;
        }

        static PyObject *t_Terms_iterator(t_Terms *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_Terms_size(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_Terms_get__max(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__min(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__stats(t_Terms *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getStats());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer::class$ = NULL;
        jmethodID *RollingBuffer::mids$ = NULL;
        bool RollingBuffer::live$ = false;

        jclass RollingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_freeBefore_040c4cd0390c5aff] = env->getMethodID(cls, "freeBefore", "(I)V");
            mids$[mid_get_a00453d23ae80529] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/RollingBuffer$Resettable;");
            mids$[mid_getBufferSize_9972fcc56b44e79d] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getMaxPos_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxPos", "()I");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_newInstance_a3dd803aa6dd9c73] = env->getMethodID(cls, "newInstance", "()Lorg/apache/lucene/util/RollingBuffer$Resettable;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RollingBuffer::RollingBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void RollingBuffer::freeBefore(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_freeBefore_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::util::RollingBuffer$Resettable RollingBuffer::get(jint a0) const
        {
          return ::org::apache::lucene::util::RollingBuffer$Resettable(env->callObjectMethod(this$, mids$[mid_get_a00453d23ae80529], a0));
        }

        jint RollingBuffer::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_9972fcc56b44e79d]);
        }

        jint RollingBuffer::getMaxPos() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxPos_9972fcc56b44e79d]);
        }

        void RollingBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args);
        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_getBufferSize(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_get__bufferSize(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data);
        static PyGetSetDef t_RollingBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer, bufferSize),
          DECLARE_GET_FIELD(t_RollingBuffer, maxPos),
          DECLARE_GET_FIELD(t_RollingBuffer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer, freeBefore, METH_O),
          DECLARE_METHOD(t_RollingBuffer, get, METH_O),
          DECLARE_METHOD(t_RollingBuffer, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, getMaxPos, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RollingBuffer)[] = {
          { Py_tp_methods, t_RollingBuffer__methods_ },
          { Py_tp_init, (void *) t_RollingBuffer_init_ },
          { Py_tp_getset, t_RollingBuffer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RollingBuffer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RollingBuffer, t_RollingBuffer, RollingBuffer);
        PyObject *t_RollingBuffer::wrap_Object(const RollingBuffer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer), &PY_TYPE_DEF(RollingBuffer), module, "RollingBuffer", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer), "Resettable", make_descriptor(&PY_TYPE_DEF(RollingBuffer$Resettable)));
        }

        void t_RollingBuffer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer), "class_", make_descriptor(RollingBuffer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer), "wrapfn_", make_descriptor(t_RollingBuffer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer::wrap_Object(RollingBuffer(((t_RollingBuffer *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds)
        {
          RollingBuffer object((jobject) NULL);

          INT_CALL(object = RollingBuffer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.freeBefore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::RollingBuffer$Resettable result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_RollingBuffer$Resettable::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_getBufferSize(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxPos());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RollingBuffer_get__bufferSize(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getBufferSize());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxPos());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/EnumFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *EnumFieldSource::class$ = NULL;
            jmethodID *EnumFieldSource::mids$ = NULL;
            bool EnumFieldSource::live$ = false;

            jclass EnumFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/EnumFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_af842149a65a901e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            EnumFieldSource::EnumFieldSource(const ::java::lang::String & a0, const ::java::util::Map & a1, const ::java::util::Map & a2) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_af842149a65a901e, a0.this$, a1.this$, a2.this$)) {}

            ::java::lang::String EnumFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean EnumFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues EnumFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint EnumFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args);
            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args);

            static PyMethodDef t_EnumFieldSource__methods_[] = {
              DECLARE_METHOD(t_EnumFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_EnumFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_EnumFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(EnumFieldSource)[] = {
              { Py_tp_methods, t_EnumFieldSource__methods_ },
              { Py_tp_init, (void *) t_EnumFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(EnumFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(EnumFieldSource, t_EnumFieldSource, EnumFieldSource);

            void t_EnumFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(EnumFieldSource), &PY_TYPE_DEF(EnumFieldSource), module, "EnumFieldSource", 0);
            }

            void t_EnumFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(EnumFieldSource), "class_", make_descriptor(EnumFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(EnumFieldSource), "wrapfn_", make_descriptor(t_EnumFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(EnumFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_EnumFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, EnumFieldSource::initializeClass, 1)))
                return NULL;
              return t_EnumFieldSource::wrap_Object(EnumFieldSource(((t_EnumFieldSource *) arg)->object.this$));
            }
            static PyObject *t_EnumFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, EnumFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_EnumFieldSource_init_(t_EnumFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Map a2((jobject) NULL);
              PyTypeObject **p2;
              EnumFieldSource object((jobject) NULL);

              if (!parseArgs(args, "sKK", ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &p2, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = EnumFieldSource(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_EnumFieldSource_description(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(EnumFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_EnumFieldSource_equals(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(EnumFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_EnumFieldSource_getValues(t_EnumFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(EnumFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_EnumFieldSource_hashCode(t_EnumFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(EnumFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *LikeThisQueryBuilder::class$ = NULL;
            jmethodID *LikeThisQueryBuilder::mids$ = NULL;
            bool LikeThisQueryBuilder::live$ = false;

            jclass LikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_836e2f683f228200] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;[Ljava/lang/String;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LikeThisQueryBuilder::LikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_836e2f683f228200, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_LikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_LikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LikeThisQueryBuilder)[] = {
              { Py_tp_methods, t_LikeThisQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_LikeThisQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LikeThisQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(LikeThisQueryBuilder, t_LikeThisQueryBuilder, LikeThisQueryBuilder);

            void t_LikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(LikeThisQueryBuilder), &PY_TYPE_DEF(LikeThisQueryBuilder), module, "LikeThisQueryBuilder", 0);
            }

            void t_LikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LikeThisQueryBuilder), "class_", make_descriptor(LikeThisQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LikeThisQueryBuilder), "wrapfn_", make_descriptor(t_LikeThisQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LikeThisQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_LikeThisQueryBuilder::wrap_Object(LikeThisQueryBuilder(((t_LikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              LikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LikeThisQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryCachingPolicy::class$ = NULL;
        jmethodID *QueryCachingPolicy::mids$ = NULL;
        bool QueryCachingPolicy::live$ = false;

        jclass QueryCachingPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryCachingPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onUse_ede25bb9d48237ac] = env->getMethodID(cls, "onUse", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_shouldCache_8b8c985512e42a98] = env->getMethodID(cls, "shouldCache", "(Lorg/apache/lucene/search/Query;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void QueryCachingPolicy::onUse(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onUse_ede25bb9d48237ac], a0.this$);
        }

        jboolean QueryCachingPolicy::shouldCache(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_shouldCache_8b8c985512e42a98], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryCachingPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryCachingPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryCachingPolicy_onUse(t_QueryCachingPolicy *self, PyObject *arg);
        static PyObject *t_QueryCachingPolicy_shouldCache(t_QueryCachingPolicy *self, PyObject *arg);

        static PyMethodDef t_QueryCachingPolicy__methods_[] = {
          DECLARE_METHOD(t_QueryCachingPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryCachingPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryCachingPolicy, onUse, METH_O),
          DECLARE_METHOD(t_QueryCachingPolicy, shouldCache, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryCachingPolicy)[] = {
          { Py_tp_methods, t_QueryCachingPolicy__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryCachingPolicy)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryCachingPolicy, t_QueryCachingPolicy, QueryCachingPolicy);

        void t_QueryCachingPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryCachingPolicy), &PY_TYPE_DEF(QueryCachingPolicy), module, "QueryCachingPolicy", 0);
        }

        void t_QueryCachingPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCachingPolicy), "class_", make_descriptor(QueryCachingPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCachingPolicy), "wrapfn_", make_descriptor(t_QueryCachingPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCachingPolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryCachingPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryCachingPolicy::initializeClass, 1)))
            return NULL;
          return t_QueryCachingPolicy::wrap_Object(QueryCachingPolicy(((t_QueryCachingPolicy *) arg)->object.this$));
        }
        static PyObject *t_QueryCachingPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryCachingPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_QueryCachingPolicy_onUse(t_QueryCachingPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onUse(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onUse", arg);
          return NULL;
        }

        static PyObject *t_QueryCachingPolicy_shouldCache(t_QueryCachingPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.shouldCache(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "shouldCache", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttribute::class$ = NULL;
          jmethodID *KeywordAttribute::mids$ = NULL;
          bool KeywordAttribute::live$ = false;

          jclass KeywordAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isKeyword_8454bd5aa23fd11e] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_9d72768e8fdce2b7] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordAttribute::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_8454bd5aa23fd11e]);
          }

          void KeywordAttribute::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self);
          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg);
          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data);
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttribute, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttribute__methods_[] = {
            DECLARE_METHOD(t_KeywordAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttribute, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordAttribute)[] = {
            { Py_tp_methods, t_KeywordAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_KeywordAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(KeywordAttribute, t_KeywordAttribute, KeywordAttribute);

          void t_KeywordAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttribute), &PY_TYPE_DEF(KeywordAttribute), module, "KeywordAttribute", 0);
          }

          void t_KeywordAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttribute), "class_", make_descriptor(KeywordAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttribute), "wrapfn_", make_descriptor(t_KeywordAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttribute::initializeClass, 1)))
              return NULL;
            return t_KeywordAttribute::wrap_Object(KeywordAttribute(((t_KeywordAttribute *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *MemoryIndexOffsetStrategy::class$ = NULL;
          jmethodID *MemoryIndexOffsetStrategy::mids$ = NULL;
          bool MemoryIndexOffsetStrategy::live$ = false;

          jclass MemoryIndexOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_969950458d02784c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndexOffsetStrategy::MemoryIndexOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::uhighlight::AnalysisOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_969950458d02784c, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::uhighlight::OffsetsEnum MemoryIndexOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_MemoryIndexOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndexOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndexOffsetStrategy_init_(t_MemoryIndexOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndexOffsetStrategy_getOffsetsEnum(t_MemoryIndexOffsetStrategy *self, PyObject *args);

          static PyMethodDef t_MemoryIndexOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_MemoryIndexOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndexOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndexOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MemoryIndexOffsetStrategy)[] = {
            { Py_tp_methods, t_MemoryIndexOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_MemoryIndexOffsetStrategy_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MemoryIndexOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::AnalysisOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(MemoryIndexOffsetStrategy, t_MemoryIndexOffsetStrategy, MemoryIndexOffsetStrategy);

          void t_MemoryIndexOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndexOffsetStrategy), &PY_TYPE_DEF(MemoryIndexOffsetStrategy), module, "MemoryIndexOffsetStrategy", 0);
          }

          void t_MemoryIndexOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndexOffsetStrategy), "class_", make_descriptor(MemoryIndexOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndexOffsetStrategy), "wrapfn_", make_descriptor(t_MemoryIndexOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndexOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndexOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndexOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_MemoryIndexOffsetStrategy::wrap_Object(MemoryIndexOffsetStrategy(((t_MemoryIndexOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndexOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndexOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndexOffsetStrategy_init_(t_MemoryIndexOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            MemoryIndexOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MemoryIndexOffsetStrategy(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndexOffsetStrategy_getOffsetsEnum(t_MemoryIndexOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MemoryIndexOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharFilter::class$ = NULL;
        jmethodID *CharFilter::mids$ = NULL;
        bool CharFilter::live$ = false;

        jclass CharFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_correctOffset_1e143afe1894d213] = env->getMethodID(cls, "correctOffset", "(I)I");
            mids$[mid_correct_1e143afe1894d213] = env->getMethodID(cls, "correct", "(I)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharFilter::CharFilter(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

        void CharFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jint CharFilter::correctOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_correctOffset_1e143afe1894d213], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args);
        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg);

        static PyMethodDef t_CharFilter__methods_[] = {
          DECLARE_METHOD(t_CharFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_CharFilter, correctOffset, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharFilter)[] = {
          { Py_tp_methods, t_CharFilter__methods_ },
          { Py_tp_init, (void *) t_CharFilter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharFilter)[] = {
          &PY_TYPE_DEF(::java::io::Reader),
          NULL
        };

        DEFINE_TYPE(CharFilter, t_CharFilter, CharFilter);

        void t_CharFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CharFilter), &PY_TYPE_DEF(CharFilter), module, "CharFilter", 0);
        }

        void t_CharFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilter), "class_", make_descriptor(CharFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilter), "wrapfn_", make_descriptor(t_CharFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharFilter::initializeClass, 1)))
            return NULL;
          return t_CharFilter::wrap_Object(CharFilter(((t_CharFilter *) arg)->object.this$));
        }
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          CharFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = CharFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CharFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.correctOffset(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "correctOffset", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFieldFragList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFieldFragList::class$ = NULL;
          jmethodID *SimpleFieldFragList::mids$ = NULL;
          bool SimpleFieldFragList::live$ = false;

          jclass SimpleFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_0579db43a3783deb] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFieldFragList::SimpleFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          void SimpleFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0579db43a3783deb], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args);

          static PyMethodDef t_SimpleFieldFragList__methods_[] = {
            DECLARE_METHOD(t_SimpleFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleFieldFragList)[] = {
            { Py_tp_methods, t_SimpleFieldFragList__methods_ },
            { Py_tp_init, (void *) t_SimpleFieldFragList_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleFieldFragList)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::FieldFragList),
            NULL
          };

          DEFINE_TYPE(SimpleFieldFragList, t_SimpleFieldFragList, SimpleFieldFragList);

          void t_SimpleFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFieldFragList), &PY_TYPE_DEF(SimpleFieldFragList), module, "SimpleFieldFragList", 0);
          }

          void t_SimpleFieldFragList::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldFragList), "class_", make_descriptor(SimpleFieldFragList::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldFragList), "wrapfn_", make_descriptor(t_SimpleFieldFragList::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldFragList), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFieldFragList::initializeClass, 1)))
              return NULL;
            return t_SimpleFieldFragList::wrap_Object(SimpleFieldFragList(((t_SimpleFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SimpleFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SimpleFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterIterator::class$ = NULL;
          jmethodID *WordDelimiterIterator::mids$ = NULL;
          bool WordDelimiterIterator::live$ = false;
          jint WordDelimiterIterator::ALPHA = (jint) 0;
          jint WordDelimiterIterator::ALPHANUM = (jint) 0;
          JArray< jbyte > *WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE = NULL;
          jint WordDelimiterIterator::DONE = (jint) 0;

          jclass WordDelimiterIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getType_4d5233a30cda5878] = env->getStaticMethodID(cls, "getType", "(I)B");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              DEFAULT_WORD_DELIM_TABLE = new JArray< jbyte >(env->getStaticObjectField(cls, "DEFAULT_WORD_DELIM_TABLE", "[B"));
              DONE = env->getStaticIntField(cls, "DONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jbyte WordDelimiterIterator::getType(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticByteMethod(cls, mids$[mid_getType_4d5233a30cda5878], a0);
          }

          ::java::lang::String WordDelimiterIterator::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_toString(t_WordDelimiterIterator *self, PyObject *args);

          static PyMethodDef t_WordDelimiterIterator__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, getType, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordDelimiterIterator)[] = {
            { Py_tp_methods, t_WordDelimiterIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordDelimiterIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(WordDelimiterIterator, t_WordDelimiterIterator, WordDelimiterIterator);

          void t_WordDelimiterIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterIterator), &PY_TYPE_DEF(WordDelimiterIterator), module, "WordDelimiterIterator", 0);
          }

          void t_WordDelimiterIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "class_", make_descriptor(WordDelimiterIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "wrapfn_", make_descriptor(t_WordDelimiterIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterIterator::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "ALPHA", make_descriptor(WordDelimiterIterator::ALPHA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "ALPHANUM", make_descriptor(WordDelimiterIterator::ALPHANUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "DEFAULT_WORD_DELIM_TABLE", make_descriptor(WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE->wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterIterator), "DONE", make_descriptor(WordDelimiterIterator::DONE));
          }

          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterIterator::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterIterator::wrap_Object(WordDelimiterIterator(((t_WordDelimiterIterator *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jbyte result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterIterator::getType(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getType", arg);
            return NULL;
          }

          static PyObject *t_WordDelimiterIterator_toString(t_WordDelimiterIterator *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(WordDelimiterIterator), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/SuggestIndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/document/CompletionQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *SuggestIndexSearcher::class$ = NULL;
            jmethodID *SuggestIndexSearcher::mids$ = NULL;
            bool SuggestIndexSearcher::live$ = false;

            jclass SuggestIndexSearcher::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/SuggestIndexSearcher");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9c5103ca988341a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
                mids$[mid_suggest_01f7fb5940b63497] = env->getMethodID(cls, "suggest", "(Lorg/apache/lucene/search/suggest/document/CompletionQuery;Lorg/apache/lucene/search/suggest/document/TopSuggestDocsCollector;)V");
                mids$[mid_suggest_58e0da50b514db90] = env->getMethodID(cls, "suggest", "(Lorg/apache/lucene/search/suggest/document/CompletionQuery;IZ)Lorg/apache/lucene/search/suggest/document/TopSuggestDocs;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestIndexSearcher::SuggestIndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::search::IndexSearcher(env->newObject(initializeClass, &mids$, mid_init$_9c5103ca988341a1, a0.this$)) {}

            void SuggestIndexSearcher::suggest(const ::org::apache::lucene::search::suggest::document::CompletionQuery & a0, const ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_suggest_01f7fb5940b63497], a0.this$, a1.this$);
            }

            ::org::apache::lucene::search::suggest::document::TopSuggestDocs SuggestIndexSearcher::suggest(const ::org::apache::lucene::search::suggest::document::CompletionQuery & a0, jint a1, jboolean a2) const
            {
              return ::org::apache::lucene::search::suggest::document::TopSuggestDocs(env->callObjectMethod(this$, mids$[mid_suggest_58e0da50b514db90], a0.this$, a1, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_SuggestIndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestIndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestIndexSearcher_init_(t_SuggestIndexSearcher *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestIndexSearcher_suggest(t_SuggestIndexSearcher *self, PyObject *args);

            static PyMethodDef t_SuggestIndexSearcher__methods_[] = {
              DECLARE_METHOD(t_SuggestIndexSearcher, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestIndexSearcher, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestIndexSearcher, suggest, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SuggestIndexSearcher)[] = {
              { Py_tp_methods, t_SuggestIndexSearcher__methods_ },
              { Py_tp_init, (void *) t_SuggestIndexSearcher_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SuggestIndexSearcher)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::IndexSearcher),
              NULL
            };

            DEFINE_TYPE(SuggestIndexSearcher, t_SuggestIndexSearcher, SuggestIndexSearcher);

            void t_SuggestIndexSearcher::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestIndexSearcher), &PY_TYPE_DEF(SuggestIndexSearcher), module, "SuggestIndexSearcher", 0);
            }

            void t_SuggestIndexSearcher::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestIndexSearcher), "class_", make_descriptor(SuggestIndexSearcher::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestIndexSearcher), "wrapfn_", make_descriptor(t_SuggestIndexSearcher::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestIndexSearcher), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestIndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestIndexSearcher::initializeClass, 1)))
                return NULL;
              return t_SuggestIndexSearcher::wrap_Object(SuggestIndexSearcher(((t_SuggestIndexSearcher *) arg)->object.this$));
            }
            static PyObject *t_SuggestIndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestIndexSearcher::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestIndexSearcher_init_(t_SuggestIndexSearcher *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              SuggestIndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = SuggestIndexSearcher(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestIndexSearcher_suggest(t_SuggestIndexSearcher *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::search::suggest::document::CompletionQuery a0((jobject) NULL);
                  ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector a1((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::search::suggest::document::CompletionQuery::initializeClass, ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.suggest(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  ::org::apache::lucene::search::suggest::document::CompletionQuery a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  ::org::apache::lucene::search::suggest::document::TopSuggestDocs result((jobject) NULL);

                  if (!parseArgs(args, "kIZ", ::org::apache::lucene::search::suggest::document::CompletionQuery::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.suggest(a0, a1, a2));
                    return ::org::apache::lucene::search::suggest::document::t_TopSuggestDocs::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "suggest", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AbstractAnalysisFactory::class$ = NULL;
          jmethodID *AbstractAnalysisFactory::mids$ = NULL;
          bool AbstractAnalysisFactory::live$ = false;
          ::java::lang::String *AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM = NULL;

          jclass AbstractAnalysisFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AbstractAnalysisFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_d835200e8f3690ea] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_45e20f04061b8932] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_28d5d0ea7a096b22] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_get_315878521a3cf3b6] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_c34752479b6d5945] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;");
              mids$[mid_getChar_32dcfd560ce20708] = env->getMethodID(cls, "getChar", "(Ljava/util/Map;Ljava/lang/String;C)C");
              mids$[mid_getClassArg_db9b55ba01e03e4b] = env->getMethodID(cls, "getClassArg", "()Ljava/lang/String;");
              mids$[mid_getLuceneMatchVersion_6b68647131bbda98] = env->getMethodID(cls, "getLuceneMatchVersion", "()Lorg/apache/lucene/util/Version;");
              mids$[mid_getOriginalArgs_1c3426541413a55d] = env->getMethodID(cls, "getOriginalArgs", "()Ljava/util/Map;");
              mids$[mid_getSet_eb8dc935a5b9e7c1] = env->getMethodID(cls, "getSet", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Set;");
              mids$[mid_isExplicitLuceneMatchVersion_8454bd5aa23fd11e] = env->getMethodID(cls, "isExplicitLuceneMatchVersion", "()Z");
              mids$[mid_require_d835200e8f3690ea] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_require_28d5d0ea7a096b22] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_require_dceffcb70f000d89] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Z)Ljava/lang/String;");
              mids$[mid_requireChar_f4e7b079b9069df1] = env->getMethodID(cls, "requireChar", "(Ljava/util/Map;Ljava/lang/String;)C");
              mids$[mid_setExplicitLuceneMatchVersion_9d72768e8fdce2b7] = env->getMethodID(cls, "setExplicitLuceneMatchVersion", "(Z)V");
              mids$[mid_requireInt_0a6bbabb4635dec2] = env->getMethodID(cls, "requireInt", "(Ljava/util/Map;Ljava/lang/String;)I");
              mids$[mid_requireBoolean_5f61e8c540e73442] = env->getMethodID(cls, "requireBoolean", "(Ljava/util/Map;Ljava/lang/String;)Z");
              mids$[mid_requireFloat_0d3696ee71a6063a] = env->getMethodID(cls, "requireFloat", "(Ljava/util/Map;Ljava/lang/String;)F");
              mids$[mid_getPattern_9a0f33070a740efb] = env->getMethodID(cls, "getPattern", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/regex/Pattern;");
              mids$[mid_getWordSet_be9f150f05b1dfcb] = env->getMethodID(cls, "getWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_getLines_ac5123aff794b30b] = env->getMethodID(cls, "getLines", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_getSnowballWordSet_be9f150f05b1dfcb] = env->getMethodID(cls, "getSnowballWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_splitFileNames_25278b4b3ab80e37] = env->getMethodID(cls, "splitFileNames", "(Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_splitAt_7d679f377356b44f] = env->getMethodID(cls, "splitAt", "(CLjava/lang/String;)Ljava/util/List;");
              mids$[mid_getBoolean_3363c3c05ce5cff0] = env->getMethodID(cls, "getBoolean", "(Ljava/util/Map;Ljava/lang/String;Z)Z");
              mids$[mid_getInt_1f0426e4a6765a77] = env->getMethodID(cls, "getInt", "(Ljava/util/Map;Ljava/lang/String;I)I");
              mids$[mid_getFloat_704af808bb0362b8] = env->getMethodID(cls, "getFloat", "(Ljava/util/Map;Ljava/lang/String;F)F");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              LUCENE_MATCH_VERSION_PARAM = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MATCH_VERSION_PARAM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_d835200e8f3690ea], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_45e20f04061b8932], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_28d5d0ea7a096b22], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_315878521a3cf3b6], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3, jboolean a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_c34752479b6d5945], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          jchar AbstractAnalysisFactory::getChar(const ::java::util::Map & a0, const ::java::lang::String & a1, jchar a2) const
          {
            return env->callCharMethod(this$, mids$[mid_getChar_32dcfd560ce20708], a0.this$, a1.this$, a2);
          }

          ::java::lang::String AbstractAnalysisFactory::getClassArg() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassArg_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::Version AbstractAnalysisFactory::getLuceneMatchVersion() const
          {
            return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getLuceneMatchVersion_6b68647131bbda98]));
          }

          ::java::util::Map AbstractAnalysisFactory::getOriginalArgs() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getOriginalArgs_1c3426541413a55d]));
          }

          ::java::util::Set AbstractAnalysisFactory::getSet(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSet_eb8dc935a5b9e7c1], a0.this$, a1.this$));
          }

          jboolean AbstractAnalysisFactory::isExplicitLuceneMatchVersion() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExplicitLuceneMatchVersion_8454bd5aa23fd11e]);
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_d835200e8f3690ea], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_28d5d0ea7a096b22], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, jboolean a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_dceffcb70f000d89], a0.this$, a1.this$, a2.this$, a3));
          }

          jchar AbstractAnalysisFactory::requireChar(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return env->callCharMethod(this$, mids$[mid_requireChar_f4e7b079b9069df1], a0.this$, a1.this$);
          }

          void AbstractAnalysisFactory::setExplicitLuceneMatchVersion(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExplicitLuceneMatchVersion_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data);
          static PyGetSetDef t_AbstractAnalysisFactory__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, classArg),
            DECLARE_GETSET_FIELD(t_AbstractAnalysisFactory, explicitLuceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, luceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, originalArgs),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAnalysisFactory__methods_[] = {
            DECLARE_METHOD(t_AbstractAnalysisFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getClassArg, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getOriginalArgs, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getSet, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, isExplicitLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, require, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, requireChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, setExplicitLuceneMatchVersion, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AbstractAnalysisFactory)[] = {
            { Py_tp_methods, t_AbstractAnalysisFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_AbstractAnalysisFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AbstractAnalysisFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AbstractAnalysisFactory, t_AbstractAnalysisFactory, AbstractAnalysisFactory);

          void t_AbstractAnalysisFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAnalysisFactory), &PY_TYPE_DEF(AbstractAnalysisFactory), module, "AbstractAnalysisFactory", 0);
          }

          void t_AbstractAnalysisFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractAnalysisFactory), "class_", make_descriptor(AbstractAnalysisFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractAnalysisFactory), "wrapfn_", make_descriptor(t_AbstractAnalysisFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractAnalysisFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(AbstractAnalysisFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractAnalysisFactory), "LUCENE_MATCH_VERSION_PARAM", make_descriptor(j2p(*AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM)));
          }

          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAnalysisFactory::initializeClass, 1)))
              return NULL;
            return t_AbstractAnalysisFactory::wrap_Object(AbstractAnalysisFactory(((t_AbstractAnalysisFactory *) arg)->object.this$));
          }
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAnalysisFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Kss", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKs", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 5:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKsZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar a2;
            jchar result;

            if (!parseArgs(args, "KsC", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getChar(a0, a1, a2));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassArg());
            return j2p(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            ::org::apache::lucene::util::Version result((jobject) NULL);
            OBJ_CALL(result = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getSet(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getSet", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.require(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "require", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar result;

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.requireChar(a0, a1));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "requireChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExplicitLuceneMatchVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExplicitLuceneMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassArg());
            return j2p(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(value);
          }
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExplicitLuceneMatchVersion(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "explicitLuceneMatchVersion", arg);
            return -1;
          }

          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            OBJ_CALL(value = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttribute::class$ = NULL;
          jmethodID *CharTermAttribute::mids$ = NULL;
          bool CharTermAttribute::live$ = false;

          jclass CharTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_08b07ebb2001b248] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_d85521f0e70da213] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_b1f80b30aeff72d6] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_20585f004b528d2a] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_82412d869dba58e5] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_be0c00cc88f7d758] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_e11cf13c9a887534] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_copyBuffer_d5128be76a214037] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_resizeBuffer_4a35a620830b94db] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_ef58197fb96ec4fc] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_85969a49670f0d6d] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::StringBuilder & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_08b07ebb2001b248], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::String & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_d85521f0e70da213], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(jchar a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_b1f80b30aeff72d6], a0));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_20585f004b528d2a], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const CharTermAttribute & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_82412d869dba58e5], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_be0c00cc88f7d758], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttribute::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_e11cf13c9a887534]));
          }

          void CharTermAttribute::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_d5128be76a214037], a0.this$, a1, a2);
          }

          JArray< jchar > CharTermAttribute::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_4a35a620830b94db], a0));
          }

          CharTermAttribute CharTermAttribute::setEmpty() const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_ef58197fb96ec4fc]));
          }

          CharTermAttribute CharTermAttribute::setLength(jint a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_85969a49670f0d6d], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg);
          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg);
          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_CharTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_CharTermAttribute, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttribute__methods_[] = {
            DECLARE_METHOD(t_CharTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttribute, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, setLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharTermAttribute)[] = {
            { Py_tp_methods, t_CharTermAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CharTermAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharTermAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(CharTermAttribute, t_CharTermAttribute, CharTermAttribute);

          void t_CharTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttribute), &PY_TYPE_DEF(CharTermAttribute), module, "CharTermAttribute", 0);
          }

          void t_CharTermAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttribute), "class_", make_descriptor(CharTermAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttribute), "wrapfn_", make_descriptor(t_CharTermAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttribute::initializeClass, 1)))
              return NULL;
            return t_CharTermAttribute::wrap_Object(CharTermAttribute(((t_CharTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                CharTermAttribute a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self)
          {
            CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "length", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hy/ArmenianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {

          ::java::lang::Class *ArmenianAnalyzer::class$ = NULL;
          jmethodID *ArmenianAnalyzer::mids$ = NULL;
          bool ArmenianAnalyzer::live$ = false;
          ::java::lang::String *ArmenianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArmenianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hy/ArmenianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArmenianAnalyzer::ArmenianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet ArmenianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {
          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data);
          static PyGetSetDef t_ArmenianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArmenianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArmenianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArmenianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArmenianAnalyzer)[] = {
            { Py_tp_methods, t_ArmenianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_ArmenianAnalyzer_init_ },
            { Py_tp_getset, t_ArmenianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArmenianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(ArmenianAnalyzer, t_ArmenianAnalyzer, ArmenianAnalyzer);

          void t_ArmenianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArmenianAnalyzer), &PY_TYPE_DEF(ArmenianAnalyzer), module, "ArmenianAnalyzer", 0);
          }

          void t_ArmenianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianAnalyzer), "class_", make_descriptor(ArmenianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianAnalyzer), "wrapfn_", make_descriptor(t_ArmenianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArmenianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArmenianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArmenianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArmenianAnalyzer::wrap_Object(ArmenianAnalyzer(((t_ArmenianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArmenianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ArmenianAnalyzer object((jobject) NULL);

                INT_CALL(object = ArmenianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hy::ArmenianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STUniformSplitTermsWriter::class$ = NULL;
            jmethodID *STUniformSplitTermsWriter::mids$ = NULL;
            bool STUniformSplitTermsWriter::live$ = false;

            jclass STUniformSplitTermsWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTermsWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_858a5da9538896c8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
                mids$[mid_init$_035eacbde5d790cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
                mids$[mid_merge_642801caeb837493] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/codecs/NormsProducer;)V");
                mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");
                mids$[mid_writeDictionary_1e80ca7ff3c32f0a] = env->getMethodID(cls, "writeDictionary", "(ILorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STUniformSplitTermsWriter::STUniformSplitTermsWriter(const ::org::apache::lucene::codecs::PostingsWriterBase & a0, const ::org::apache::lucene::index::SegmentWriteState & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a2) : ::org::apache::lucene::codecs::uniformsplit::UniformSplitTermsWriter(env->newObject(initializeClass, &mids$, mid_init$_858a5da9538896c8, a0.this$, a1.this$, a2.this$)) {}

            STUniformSplitTermsWriter::STUniformSplitTermsWriter(const ::org::apache::lucene::codecs::PostingsWriterBase & a0, const ::org::apache::lucene::index::SegmentWriteState & a1, jint a2, jint a3, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a4) : ::org::apache::lucene::codecs::uniformsplit::UniformSplitTermsWriter(env->newObject(initializeClass, &mids$, mid_init$_035eacbde5d790cf, a0.this$, a1.this$, a2, a3, a4.this$)) {}

            void STUniformSplitTermsWriter::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_merge_642801caeb837493], a0.this$, a1.this$);
            }

            void STUniformSplitTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STUniformSplitTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STUniformSplitTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STUniformSplitTermsWriter_init_(t_STUniformSplitTermsWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STUniformSplitTermsWriter_merge(t_STUniformSplitTermsWriter *self, PyObject *args);
            static PyObject *t_STUniformSplitTermsWriter_write(t_STUniformSplitTermsWriter *self, PyObject *args);

            static PyMethodDef t_STUniformSplitTermsWriter__methods_[] = {
              DECLARE_METHOD(t_STUniformSplitTermsWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitTermsWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitTermsWriter, merge, METH_VARARGS),
              DECLARE_METHOD(t_STUniformSplitTermsWriter, write, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STUniformSplitTermsWriter)[] = {
              { Py_tp_methods, t_STUniformSplitTermsWriter__methods_ },
              { Py_tp_init, (void *) t_STUniformSplitTermsWriter_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STUniformSplitTermsWriter)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::UniformSplitTermsWriter),
              NULL
            };

            DEFINE_TYPE(STUniformSplitTermsWriter, t_STUniformSplitTermsWriter, STUniformSplitTermsWriter);

            void t_STUniformSplitTermsWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(STUniformSplitTermsWriter), &PY_TYPE_DEF(STUniformSplitTermsWriter), module, "STUniformSplitTermsWriter", 0);
            }

            void t_STUniformSplitTermsWriter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsWriter), "class_", make_descriptor(STUniformSplitTermsWriter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsWriter), "wrapfn_", make_descriptor(t_STUniformSplitTermsWriter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTermsWriter), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STUniformSplitTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STUniformSplitTermsWriter::initializeClass, 1)))
                return NULL;
              return t_STUniformSplitTermsWriter::wrap_Object(STUniformSplitTermsWriter(((t_STUniformSplitTermsWriter *) arg)->object.this$));
            }
            static PyObject *t_STUniformSplitTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STUniformSplitTermsWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STUniformSplitTermsWriter_init_(t_STUniformSplitTermsWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::codecs::PostingsWriterBase a0((jobject) NULL);
                  ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);
                  ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a2((jobject) NULL);
                  STUniformSplitTermsWriter object((jobject) NULL);

                  if (!parseArgs(args, "kkk", ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = STUniformSplitTermsWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::codecs::PostingsWriterBase a0((jobject) NULL);
                  ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a4((jobject) NULL);
                  STUniformSplitTermsWriter object((jobject) NULL);

                  if (!parseArgs(args, "kkIIk", ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = STUniformSplitTermsWriter(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STUniformSplitTermsWriter_merge(t_STUniformSplitTermsWriter *self, PyObject *args)
            {
              ::org::apache::lucene::index::MergeState a0((jobject) NULL);
              ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.merge(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(STUniformSplitTermsWriter), (PyObject *) self, "merge", args, 2);
            }

            static PyObject *t_STUniformSplitTermsWriter_write(t_STUniformSplitTermsWriter *self, PyObject *args)
            {
              ::org::apache::lucene::index::Fields a0((jobject) NULL);
              ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.write(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(STUniformSplitTermsWriter), (PyObject *) self, "write", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiRangeQuery$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiRangeQuery$Builder.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiRangeQuery$RangeClause.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiRangeQuery$Builder::class$ = NULL;
        jmethodID *MultiRangeQuery$Builder::mids$ = NULL;
        bool MultiRangeQuery$Builder::live$ = false;

        jclass MultiRangeQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiRangeQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_08af6957f9159d4d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;II)V");
            mids$[mid_add_d4eac46ff1f90804] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/MultiRangeQuery$RangeClause;)Lorg/apache/lucene/search/MultiRangeQuery$Builder;");
            mids$[mid_add_8e0a30849900f8c4] = env->getMethodID(cls, "add", "([B[B)Lorg/apache/lucene/search/MultiRangeQuery$Builder;");
            mids$[mid_build_03a96fdd31aca883] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiRangeQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiRangeQuery$Builder::MultiRangeQuery$Builder(const ::java::lang::String & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08af6957f9159d4d, a0.this$, a1, a2)) {}

        MultiRangeQuery$Builder MultiRangeQuery$Builder::add(const ::org::apache::lucene::search::MultiRangeQuery$RangeClause & a0) const
        {
          return MultiRangeQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_d4eac46ff1f90804], a0.this$));
        }

        MultiRangeQuery$Builder MultiRangeQuery$Builder::add(const JArray< jbyte > & a0, const JArray< jbyte > & a1) const
        {
          return MultiRangeQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_8e0a30849900f8c4], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::MultiRangeQuery MultiRangeQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::MultiRangeQuery(env->callObjectMethod(this$, mids$[mid_build_03a96fdd31aca883]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiRangeQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiRangeQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiRangeQuery$Builder_init_(t_MultiRangeQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiRangeQuery$Builder_add(t_MultiRangeQuery$Builder *self, PyObject *args);
        static PyObject *t_MultiRangeQuery$Builder_build(t_MultiRangeQuery$Builder *self);

        static PyMethodDef t_MultiRangeQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_MultiRangeQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiRangeQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiRangeQuery$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiRangeQuery$Builder, build, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiRangeQuery$Builder)[] = {
          { Py_tp_methods, t_MultiRangeQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_MultiRangeQuery$Builder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiRangeQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiRangeQuery$Builder, t_MultiRangeQuery$Builder, MultiRangeQuery$Builder);

        void t_MultiRangeQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiRangeQuery$Builder), &PY_TYPE_DEF(MultiRangeQuery$Builder), module, "MultiRangeQuery$Builder", 0);
        }

        void t_MultiRangeQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$Builder), "class_", make_descriptor(MultiRangeQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$Builder), "wrapfn_", make_descriptor(t_MultiRangeQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiRangeQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiRangeQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_MultiRangeQuery$Builder::wrap_Object(MultiRangeQuery$Builder(((t_MultiRangeQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_MultiRangeQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiRangeQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiRangeQuery$Builder_init_(t_MultiRangeQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          MultiRangeQuery$Builder object((jobject) NULL);

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            INT_CALL(object = MultiRangeQuery$Builder(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiRangeQuery$Builder_add(t_MultiRangeQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::MultiRangeQuery$RangeClause a0((jobject) NULL);
              MultiRangeQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiRangeQuery$RangeClause::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_MultiRangeQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              MultiRangeQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "[B[B", &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                return t_MultiRangeQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiRangeQuery$Builder_build(t_MultiRangeQuery$Builder *self)
        {
          ::org::apache::lucene::search::MultiRangeQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_MultiRangeQuery::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EstonianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EstonianStemmer::class$ = NULL;
        jmethodID *EstonianStemmer::mids$ = NULL;
        bool EstonianStemmer::live$ = false;

        jclass EstonianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EstonianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EstonianStemmer::EstonianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean EstonianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint EstonianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean EstonianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EstonianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EstonianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EstonianStemmer_init_(t_EstonianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EstonianStemmer_equals(t_EstonianStemmer *self, PyObject *args);
        static PyObject *t_EstonianStemmer_hashCode(t_EstonianStemmer *self, PyObject *args);
        static PyObject *t_EstonianStemmer_stem(t_EstonianStemmer *self, PyObject *args);

        static PyMethodDef t_EstonianStemmer__methods_[] = {
          DECLARE_METHOD(t_EstonianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EstonianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EstonianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EstonianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EstonianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(EstonianStemmer)[] = {
          { Py_tp_methods, t_EstonianStemmer__methods_ },
          { Py_tp_init, (void *) t_EstonianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(EstonianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(EstonianStemmer, t_EstonianStemmer, EstonianStemmer);

        void t_EstonianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EstonianStemmer), &PY_TYPE_DEF(EstonianStemmer), module, "EstonianStemmer", 0);
        }

        void t_EstonianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianStemmer), "class_", make_descriptor(EstonianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianStemmer), "wrapfn_", make_descriptor(t_EstonianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EstonianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EstonianStemmer::initializeClass, 1)))
            return NULL;
          return t_EstonianStemmer::wrap_Object(EstonianStemmer(((t_EstonianStemmer *) arg)->object.this$));
        }
        static PyObject *t_EstonianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EstonianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EstonianStemmer_init_(t_EstonianStemmer *self, PyObject *args, PyObject *kwds)
        {
          EstonianStemmer object((jobject) NULL);

          INT_CALL(object = EstonianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EstonianStemmer_equals(t_EstonianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(EstonianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EstonianStemmer_hashCode(t_EstonianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(EstonianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EstonianStemmer_stem(t_EstonianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(EstonianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/UniformSplitPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *UniformSplitPostingsFormat::class$ = NULL;
          jmethodID *UniformSplitPostingsFormat::mids$ = NULL;
          bool UniformSplitPostingsFormat::live$ = false;
          ::java::lang::String *UniformSplitPostingsFormat::NAME = NULL;
          ::java::lang::String *UniformSplitPostingsFormat::TERMS_BLOCKS_EXTENSION = NULL;
          ::java::lang::String *UniformSplitPostingsFormat::TERMS_DICTIONARY_EXTENSION = NULL;
          jint UniformSplitPostingsFormat::VERSION_CURRENT = (jint) 0;
          jint UniformSplitPostingsFormat::VERSION_ENCODABLE_FIELDS_METADATA = (jint) 0;
          jint UniformSplitPostingsFormat::VERSION_START = (jint) 0;

          jclass UniformSplitPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/UniformSplitPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d9dbd4ff0c4d75dd] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_createUniformSplitTermsWriter_259ba6d60343a68e] = env->getMethodID(cls, "createUniformSplitTermsWriter", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_createUniformSplitTermsReader_1493bdf3736e983b] = env->getMethodID(cls, "createUniformSplitTermsReader", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;)Lorg/apache/lucene/codecs/FieldsProducer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              TERMS_BLOCKS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "TERMS_BLOCKS_EXTENSION", "Ljava/lang/String;"));
              TERMS_DICTIONARY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "TERMS_DICTIONARY_EXTENSION", "Ljava/lang/String;"));
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_ENCODABLE_FIELDS_METADATA = env->getStaticIntField(cls, "VERSION_ENCODABLE_FIELDS_METADATA");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UniformSplitPostingsFormat::UniformSplitPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          UniformSplitPostingsFormat::UniformSplitPostingsFormat(jint a0, jint a1, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a2, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a3, jboolean a4) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d9dbd4ff0c4d75dd, a0, a1, a2.this$, a3.this$, a4)) {}

          ::org::apache::lucene::codecs::FieldsConsumer UniformSplitPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer UniformSplitPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_UniformSplitPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UniformSplitPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UniformSplitPostingsFormat_init_(t_UniformSplitPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UniformSplitPostingsFormat_fieldsConsumer(t_UniformSplitPostingsFormat *self, PyObject *args);
          static PyObject *t_UniformSplitPostingsFormat_fieldsProducer(t_UniformSplitPostingsFormat *self, PyObject *args);

          static PyMethodDef t_UniformSplitPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_UniformSplitPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitPostingsFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UniformSplitPostingsFormat)[] = {
            { Py_tp_methods, t_UniformSplitPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_UniformSplitPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UniformSplitPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(UniformSplitPostingsFormat, t_UniformSplitPostingsFormat, UniformSplitPostingsFormat);

          void t_UniformSplitPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(UniformSplitPostingsFormat), &PY_TYPE_DEF(UniformSplitPostingsFormat), module, "UniformSplitPostingsFormat", 0);
          }

          void t_UniformSplitPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "class_", make_descriptor(UniformSplitPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "wrapfn_", make_descriptor(t_UniformSplitPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(UniformSplitPostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "NAME", make_descriptor(j2p(*UniformSplitPostingsFormat::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "TERMS_BLOCKS_EXTENSION", make_descriptor(j2p(*UniformSplitPostingsFormat::TERMS_BLOCKS_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "TERMS_DICTIONARY_EXTENSION", make_descriptor(j2p(*UniformSplitPostingsFormat::TERMS_DICTIONARY_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "VERSION_CURRENT", make_descriptor(UniformSplitPostingsFormat::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "VERSION_ENCODABLE_FIELDS_METADATA", make_descriptor(UniformSplitPostingsFormat::VERSION_ENCODABLE_FIELDS_METADATA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitPostingsFormat), "VERSION_START", make_descriptor(UniformSplitPostingsFormat::VERSION_START));
          }

          static PyObject *t_UniformSplitPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UniformSplitPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_UniformSplitPostingsFormat::wrap_Object(UniformSplitPostingsFormat(((t_UniformSplitPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_UniformSplitPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UniformSplitPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UniformSplitPostingsFormat_init_(t_UniformSplitPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                UniformSplitPostingsFormat object((jobject) NULL);

                INT_CALL(object = UniformSplitPostingsFormat());
                self->object = object;
                break;
              }
             case 5:
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a2((jobject) NULL);
                ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a3((jobject) NULL);
                jboolean a4;
                UniformSplitPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "IIkkZ", ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = UniformSplitPostingsFormat(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UniformSplitPostingsFormat_fieldsConsumer(t_UniformSplitPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_UniformSplitPostingsFormat_fieldsProducer(t_UniformSplitPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DateRecognizerFilter.h"
#include "java/text/DateFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DateRecognizerFilter::class$ = NULL;
          jmethodID *DateRecognizerFilter::mids$ = NULL;
          bool DateRecognizerFilter::live$ = false;
          ::java::lang::String *DateRecognizerFilter::DATE_TYPE = NULL;

          jclass DateRecognizerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DateRecognizerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_f5c0954da5ce5781] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/text/DateFormat;)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DATE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerFilter::DateRecognizerFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          DateRecognizerFilter::DateRecognizerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::text::DateFormat & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f5c0954da5ce5781, a0.this$, a1.this$)) {}

          jboolean DateRecognizerFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DateRecognizerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerFilter_init_(t_DateRecognizerFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerFilter_accept(t_DateRecognizerFilter *self);

          static PyMethodDef t_DateRecognizerFilter__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DateRecognizerFilter)[] = {
            { Py_tp_methods, t_DateRecognizerFilter__methods_ },
            { Py_tp_init, (void *) t_DateRecognizerFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DateRecognizerFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(DateRecognizerFilter, t_DateRecognizerFilter, DateRecognizerFilter);

          void t_DateRecognizerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerFilter), &PY_TYPE_DEF(DateRecognizerFilter), module, "DateRecognizerFilter", 0);
          }

          void t_DateRecognizerFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilter), "class_", make_descriptor(DateRecognizerFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilter), "wrapfn_", make_descriptor(t_DateRecognizerFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilter), "DATE_TYPE", make_descriptor(j2p(*DateRecognizerFilter::DATE_TYPE)));
          }

          static PyObject *t_DateRecognizerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerFilter::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerFilter::wrap_Object(DateRecognizerFilter(((t_DateRecognizerFilter *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerFilter_init_(t_DateRecognizerFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DateRecognizerFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DateRecognizerFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::text::DateFormat a1((jobject) NULL);
                DateRecognizerFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::text::DateFormat::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DateRecognizerFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerFilter_accept(t_DateRecognizerFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/ContextSuggestField.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *ContextSuggestField::class$ = NULL;
            jmethodID *ContextSuggestField::mids$ = NULL;
            bool ContextSuggestField::live$ = false;
            jint ContextSuggestField::CONTEXT_SEPARATOR = (jint) 0;

            jclass ContextSuggestField::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/ContextSuggestField");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_db782509fd74b8de] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/CharSequence;)V");
                mids$[mid_contexts_7a21c115c1b038aa] = env->getMethodID(cls, "contexts", "()Ljava/lang/Iterable;");
                mids$[mid_wrapTokenStream_6c4ec0190b15759d] = env->getMethodID(cls, "wrapTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/suggest/document/CompletionTokenStream;");
                mids$[mid_type_871cd52a74f26213] = env->getMethodID(cls, "type", "()B");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                CONTEXT_SEPARATOR = env->getStaticIntField(cls, "CONTEXT_SEPARATOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ContextSuggestField::ContextSuggestField(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2, const JArray< ::java::lang::CharSequence > & a3) : ::org::apache::lucene::search::suggest::document::SuggestField(env->newObject(initializeClass, &mids$, mid_init$_db782509fd74b8de, a0.this$, a1.this$, a2, a3.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_ContextSuggestField_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ContextSuggestField_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ContextSuggestField_init_(t_ContextSuggestField *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ContextSuggestField__methods_[] = {
              DECLARE_METHOD(t_ContextSuggestField, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ContextSuggestField, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ContextSuggestField)[] = {
              { Py_tp_methods, t_ContextSuggestField__methods_ },
              { Py_tp_init, (void *) t_ContextSuggestField_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ContextSuggestField)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::SuggestField),
              NULL
            };

            DEFINE_TYPE(ContextSuggestField, t_ContextSuggestField, ContextSuggestField);

            void t_ContextSuggestField::install(PyObject *module)
            {
              installType(&PY_TYPE(ContextSuggestField), &PY_TYPE_DEF(ContextSuggestField), module, "ContextSuggestField", 0);
            }

            void t_ContextSuggestField::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextSuggestField), "class_", make_descriptor(ContextSuggestField::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextSuggestField), "wrapfn_", make_descriptor(t_ContextSuggestField::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextSuggestField), "boxfn_", make_descriptor(boxObject));
              env->getClass(ContextSuggestField::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextSuggestField), "CONTEXT_SEPARATOR", make_descriptor(ContextSuggestField::CONTEXT_SEPARATOR));
            }

            static PyObject *t_ContextSuggestField_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ContextSuggestField::initializeClass, 1)))
                return NULL;
              return t_ContextSuggestField::wrap_Object(ContextSuggestField(((t_ContextSuggestField *) arg)->object.this$));
            }
            static PyObject *t_ContextSuggestField_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ContextSuggestField::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ContextSuggestField_init_(t_ContextSuggestField *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              JArray< ::java::lang::CharSequence > a3((jobject) NULL);
              ContextSuggestField object((jobject) NULL);

              if (!parseArgs(args, "ssI[O", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ContextSuggestField(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleAnalyzerWrapper::class$ = NULL;
          jmethodID *ShingleAnalyzerWrapper::mids$ = NULL;
          bool ShingleAnalyzerWrapper::live$ = false;

          jclass ShingleAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_2bc54f6bb204f5dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_ae5ffe198c7b17dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;II)V");
              mids$[mid_init$_7b9722beed377992] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IILjava/lang/String;ZZLjava/lang/String;)V");
              mids$[mid_getFillerToken_db9b55ba01e03e4b] = env->getMethodID(cls, "getFillerToken", "()Ljava/lang/String;");
              mids$[mid_getMaxShingleSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxShingleSize", "()I");
              mids$[mid_getMinShingleSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMinShingleSize", "()I");
              mids$[mid_getTokenSeparator_db9b55ba01e03e4b] = env->getMethodID(cls, "getTokenSeparator", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_isOutputUnigrams_8454bd5aa23fd11e] = env->getMethodID(cls, "isOutputUnigrams", "()Z");
              mids$[mid_isOutputUnigramsIfNoShingles_8454bd5aa23fd11e] = env->getMethodID(cls, "isOutputUnigramsIfNoShingles", "()Z");
              mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper() : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2bc54f6bb204f5dc, a0.this$, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(jint a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_ae5ffe198c7b17dd, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2, const ::java::lang::String & a3, jboolean a4, jboolean a5, const ::java::lang::String & a6) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_7b9722beed377992, a0.this$, a1, a2, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String ShingleAnalyzerWrapper::getFillerToken() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFillerToken_db9b55ba01e03e4b]));
          }

          jint ShingleAnalyzerWrapper::getMaxShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxShingleSize_9972fcc56b44e79d]);
          }

          jint ShingleAnalyzerWrapper::getMinShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinShingleSize_9972fcc56b44e79d]);
          }

          ::java::lang::String ShingleAnalyzerWrapper::getTokenSeparator() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTokenSeparator_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::Analyzer ShingleAnalyzerWrapper::getWrappedAnalyzer(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getWrappedAnalyzer_dad9f41704206408], a0.this$));
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigrams() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigrams_8454bd5aa23fd11e]);
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigramsIfNoShingles() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigramsIfNoShingles_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data);
          static PyGetSetDef t_ShingleAnalyzerWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, fillerToken),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, maxShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, minShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigrams),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigramsIfNoShingles),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, tokenSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getFillerToken, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMaxShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMinShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getTokenSeparator, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getWrappedAnalyzer, METH_O),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigrams, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigramsIfNoShingles, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ShingleAnalyzerWrapper)[] = {
            { Py_tp_methods, t_ShingleAnalyzerWrapper__methods_ },
            { Py_tp_init, (void *) t_ShingleAnalyzerWrapper_init_ },
            { Py_tp_getset, t_ShingleAnalyzerWrapper__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ShingleAnalyzerWrapper)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::AnalyzerWrapper),
            NULL
          };

          DEFINE_TYPE(ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper, ShingleAnalyzerWrapper);

          void t_ShingleAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleAnalyzerWrapper), &PY_TYPE_DEF(ShingleAnalyzerWrapper), module, "ShingleAnalyzerWrapper", 0);
          }

          void t_ShingleAnalyzerWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleAnalyzerWrapper), "class_", make_descriptor(ShingleAnalyzerWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleAnalyzerWrapper), "wrapfn_", make_descriptor(t_ShingleAnalyzerWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleAnalyzerWrapper), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_ShingleAnalyzerWrapper::wrap_Object(ShingleAnalyzerWrapper(((t_ShingleAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ShingleAnalyzerWrapper object((jobject) NULL);

                INT_CALL(object = ShingleAnalyzerWrapper());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                jboolean a5;
                ::java::lang::String a6((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kIIsZZs", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFillerToken());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxShingleSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinShingleSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenSeparator());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWrappedAnalyzer(a0));
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWrappedAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFillerToken());
            return j2p(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxShingleSize());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinShingleSize());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenSeparator());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/PlainTextDictionary.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *PlainTextDictionary::class$ = NULL;
          jmethodID *PlainTextDictionary::mids$ = NULL;
          bool PlainTextDictionary::live$ = false;

          jclass PlainTextDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/PlainTextDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlainTextDictionary::PlainTextDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::nio::file::Path & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator PlainTextDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self);
          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data);
          static PyGetSetDef t_PlainTextDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_PlainTextDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlainTextDictionary__methods_[] = {
            DECLARE_METHOD(t_PlainTextDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PlainTextDictionary)[] = {
            { Py_tp_methods, t_PlainTextDictionary__methods_ },
            { Py_tp_init, (void *) t_PlainTextDictionary_init_ },
            { Py_tp_getset, t_PlainTextDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PlainTextDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PlainTextDictionary, t_PlainTextDictionary, PlainTextDictionary);

          void t_PlainTextDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(PlainTextDictionary), &PY_TYPE_DEF(PlainTextDictionary), module, "PlainTextDictionary", 0);
          }

          void t_PlainTextDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlainTextDictionary), "class_", make_descriptor(PlainTextDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlainTextDictionary), "wrapfn_", make_descriptor(t_PlainTextDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlainTextDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlainTextDictionary::initializeClass, 1)))
              return NULL;
            return t_PlainTextDictionary::wrap_Object(PlainTextDictionary(((t_PlainTextDictionary *) arg)->object.this$));
          }
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlainTextDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::nio::file::Path a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *MatchAllDocsQueryBuilder::class$ = NULL;
            jmethodID *MatchAllDocsQueryBuilder::mids$ = NULL;
            bool MatchAllDocsQueryBuilder::live$ = false;

            jclass MatchAllDocsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MatchAllDocsQueryBuilder::MatchAllDocsQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MatchAllDocsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MatchAllDocsQueryBuilder)[] = {
              { Py_tp_methods, t_MatchAllDocsQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_MatchAllDocsQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MatchAllDocsQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder, MatchAllDocsQueryBuilder);

            void t_MatchAllDocsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(MatchAllDocsQueryBuilder), &PY_TYPE_DEF(MatchAllDocsQueryBuilder), module, "MatchAllDocsQueryBuilder", 0);
            }

            void t_MatchAllDocsQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryBuilder), "class_", make_descriptor(MatchAllDocsQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryBuilder), "wrapfn_", make_descriptor(t_MatchAllDocsQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_MatchAllDocsQueryBuilder::wrap_Object(MatchAllDocsQueryBuilder(((t_MatchAllDocsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              MatchAllDocsQueryBuilder object((jobject) NULL);

              INT_CALL(object = MatchAllDocsQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoOutsideDistance.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoOutsideDistance::class$ = NULL;
          jmethodID *GeoOutsideDistance::mids$ = NULL;
          bool GeoOutsideDistance::live$ = false;

          jclass GeoOutsideDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoOutsideDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeOutsideDistance_d330d2576549fa67] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeOutsideDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble GeoOutsideDistance::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoOutsideDistance::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoOutsideDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoOutsideDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoOutsideDistance_computeOutsideDistance(t_GeoOutsideDistance *self, PyObject *args);

          static PyMethodDef t_GeoOutsideDistance__methods_[] = {
            DECLARE_METHOD(t_GeoOutsideDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoOutsideDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoOutsideDistance, computeOutsideDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoOutsideDistance)[] = {
            { Py_tp_methods, t_GeoOutsideDistance__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoOutsideDistance)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Membership),
            NULL
          };

          DEFINE_TYPE(GeoOutsideDistance, t_GeoOutsideDistance, GeoOutsideDistance);

          void t_GeoOutsideDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoOutsideDistance), &PY_TYPE_DEF(GeoOutsideDistance), module, "GeoOutsideDistance", 0);
          }

          void t_GeoOutsideDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoOutsideDistance), "class_", make_descriptor(GeoOutsideDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoOutsideDistance), "wrapfn_", make_descriptor(t_GeoOutsideDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoOutsideDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoOutsideDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoOutsideDistance::initializeClass, 1)))
              return NULL;
            return t_GeoOutsideDistance::wrap_Object(GeoOutsideDistance(((t_GeoOutsideDistance *) arg)->object.this$));
          }
          static PyObject *t_GeoOutsideDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoOutsideDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoOutsideDistance_computeOutsideDistance(t_GeoOutsideDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeOutsideDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollectorManager.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollectorManager::class$ = NULL;
        jmethodID *FacetsCollectorManager::mids$ = NULL;
        bool FacetsCollectorManager::live$ = false;

        jclass FacetsCollectorManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollectorManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newCollector_47fa8263af2d343b] = env->getMethodID(cls, "newCollector", "()Lorg/apache/lucene/facet/FacetsCollector;");
            mids$[mid_reduce_3c4d954440729da8] = env->getMethodID(cls, "reduce", "(Ljava/util/Collection;)Lorg/apache/lucene/facet/FacetsCollector;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollectorManager::FacetsCollectorManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::facet::FacetsCollector FacetsCollectorManager::newCollector() const
        {
          return ::org::apache::lucene::facet::FacetsCollector(env->callObjectMethod(this$, mids$[mid_newCollector_47fa8263af2d343b]));
        }

        ::org::apache::lucene::facet::FacetsCollector FacetsCollectorManager::reduce(const ::java::util::Collection & a0) const
        {
          return ::org::apache::lucene::facet::FacetsCollector(env->callObjectMethod(this$, mids$[mid_reduce_3c4d954440729da8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollectorManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollectorManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollectorManager_init_(t_FacetsCollectorManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollectorManager_newCollector(t_FacetsCollectorManager *self);
        static PyObject *t_FacetsCollectorManager_reduce(t_FacetsCollectorManager *self, PyObject *arg);

        static PyMethodDef t_FacetsCollectorManager__methods_[] = {
          DECLARE_METHOD(t_FacetsCollectorManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollectorManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollectorManager, newCollector, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollectorManager, reduce, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsCollectorManager)[] = {
          { Py_tp_methods, t_FacetsCollectorManager__methods_ },
          { Py_tp_init, (void *) t_FacetsCollectorManager_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsCollectorManager)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FacetsCollectorManager, t_FacetsCollectorManager, FacetsCollectorManager);

        void t_FacetsCollectorManager::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollectorManager), &PY_TYPE_DEF(FacetsCollectorManager), module, "FacetsCollectorManager", 0);
        }

        void t_FacetsCollectorManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollectorManager), "class_", make_descriptor(FacetsCollectorManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollectorManager), "wrapfn_", make_descriptor(t_FacetsCollectorManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollectorManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollectorManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollectorManager::initializeClass, 1)))
            return NULL;
          return t_FacetsCollectorManager::wrap_Object(FacetsCollectorManager(((t_FacetsCollectorManager *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollectorManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollectorManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollectorManager_init_(t_FacetsCollectorManager *self, PyObject *args, PyObject *kwds)
        {
          FacetsCollectorManager object((jobject) NULL);

          INT_CALL(object = FacetsCollectorManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsCollectorManager_newCollector(t_FacetsCollectorManager *self)
        {
          ::org::apache::lucene::facet::FacetsCollector result((jobject) NULL);
          OBJ_CALL(result = self->object.newCollector());
          return ::org::apache::lucene::facet::t_FacetsCollector::wrap_Object(result);
        }

        static PyObject *t_FacetsCollectorManager_reduce(t_FacetsCollectorManager *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::facet::FacetsCollector result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.reduce(a0));
            return ::org::apache::lucene::facet::t_FacetsCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reduce", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchNoBits::class$ = NULL;
        jmethodID *Bits$MatchNoBits::mids$ = NULL;
        bool Bits$MatchNoBits::live$ = false;

        jclass Bits$MatchNoBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchNoBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchNoBits::Bits$MatchNoBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        jboolean Bits$MatchNoBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        jint Bits$MatchNoBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self);

        static PyMethodDef t_Bits$MatchNoBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchNoBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchNoBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Bits$MatchNoBits)[] = {
          { Py_tp_methods, t_Bits$MatchNoBits__methods_ },
          { Py_tp_init, (void *) t_Bits$MatchNoBits_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Bits$MatchNoBits)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Bits$MatchNoBits, t_Bits$MatchNoBits, Bits$MatchNoBits);

        void t_Bits$MatchNoBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchNoBits), &PY_TYPE_DEF(Bits$MatchNoBits), module, "Bits$MatchNoBits", 0);
        }

        void t_Bits$MatchNoBits::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchNoBits), "class_", make_descriptor(Bits$MatchNoBits::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchNoBits), "wrapfn_", make_descriptor(t_Bits$MatchNoBits::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchNoBits), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchNoBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchNoBits::wrap_Object(Bits$MatchNoBits(((t_Bits$MatchNoBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchNoBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchNoBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchNoBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *CompoundWordTokenFilterBase::mids$ = NULL;
          bool CompoundWordTokenFilterBase::live$ = false;
          jint CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_f2cc1bce94666404] = env->getMethodID(cls, "decompose", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompoundWordTokenFilterBase)[] = {
            { Py_tp_methods, t_CompoundWordTokenFilterBase__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompoundWordTokenFilterBase)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CompoundWordTokenFilterBase, t_CompoundWordTokenFilterBase, CompoundWordTokenFilterBase);

          void t_CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(CompoundWordTokenFilterBase), &PY_TYPE_DEF(CompoundWordTokenFilterBase), module, "CompoundWordTokenFilterBase", 0);
          }

          void t_CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "class_", make_descriptor(CompoundWordTokenFilterBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "wrapfn_", make_descriptor(t_CompoundWordTokenFilterBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "boxfn_", make_descriptor(boxObject));
            env->getClass(CompoundWordTokenFilterBase::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundWordTokenFilterBase), "DEFAULT_MIN_WORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_CompoundWordTokenFilterBase::wrap_Object(CompoundWordTokenFilterBase(((t_CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NormValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NormValueSource::class$ = NULL;
            jmethodID *NormValueSource::mids$ = NULL;
            bool NormValueSource::live$ = false;

            jclass NormValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NormValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NormValueSource::NormValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            void NormValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String NormValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean NormValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NormValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint NormValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String NormValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_name(t_NormValueSource *self);

            static PyMethodDef t_NormValueSource__methods_[] = {
              DECLARE_METHOD(t_NormValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NormValueSource)[] = {
              { Py_tp_methods, t_NormValueSource__methods_ },
              { Py_tp_init, (void *) t_NormValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NormValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(NormValueSource, t_NormValueSource, NormValueSource);

            void t_NormValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NormValueSource), &PY_TYPE_DEF(NormValueSource), module, "NormValueSource", 0);
            }

            void t_NormValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NormValueSource), "class_", make_descriptor(NormValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NormValueSource), "wrapfn_", make_descriptor(t_NormValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NormValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NormValueSource::initializeClass, 1)))
                return NULL;
              return t_NormValueSource::wrap_Object(NormValueSource(((t_NormValueSource *) arg)->object.this$));
            }
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NormValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              NormValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NormValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(NormValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(NormValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(NormValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(NormValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(NormValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NormValueSource_name(t_NormValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie2.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie2::class$ = NULL;
      jmethodID *MultiTrie2::mids$ = NULL;
      bool MultiTrie2::live$ = false;

      jclass MultiTrie2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_e764c090f1e602d9] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_add_64031c067d5ae464] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_decompose_c02db7a0b6b95176] = env->getMethodID(cls, "decompose", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getFully_7239fae546f0688a] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_7239fae546f0688a] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_reduce_6c0a4cfd21a57862] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_d7f8caf61d54d699] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie2::MultiTrie2(jboolean a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

      MultiTrie2::MultiTrie2(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_e764c090f1e602d9, a0.this$)) {}

      void MultiTrie2::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_64031c067d5ae464], a0.this$, a1.this$);
      }

      JArray< ::java::lang::CharSequence > MultiTrie2::decompose(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_decompose_c02db7a0b6b95176], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_7239fae546f0688a], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_7239fae546f0688a], a0.this$));
      }

      ::org::egothor::stemmer::Trie MultiTrie2::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6c0a4cfd21a57862], a0.this$));
      }

      void MultiTrie2::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_d7f8caf61d54d699], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg);
      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args);

      static PyMethodDef t_MultiTrie2__methods_[] = {
        DECLARE_METHOD(t_MultiTrie2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, decompose, METH_O),
        DECLARE_METHOD(t_MultiTrie2, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(MultiTrie2)[] = {
        { Py_tp_methods, t_MultiTrie2__methods_ },
        { Py_tp_init, (void *) t_MultiTrie2_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(MultiTrie2)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::MultiTrie),
        NULL
      };

      DEFINE_TYPE(MultiTrie2, t_MultiTrie2, MultiTrie2);

      void t_MultiTrie2::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie2), &PY_TYPE_DEF(MultiTrie2), module, "MultiTrie2", 0);
      }

      void t_MultiTrie2::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie2), "class_", make_descriptor(MultiTrie2::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie2), "wrapfn_", make_descriptor(t_MultiTrie2::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie2), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie2::initializeClass, 1)))
          return NULL;
        return t_MultiTrie2::wrap_Object(MultiTrie2(((t_MultiTrie2 *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jboolean a0;
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(PY_TYPE(MultiTrie2), (PyObject *) self, "add", args, 2);
      }

      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.decompose(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "decompose", arg);
        return NULL;
      }

      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie2), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie2), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie2), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(PY_TYPE(MultiTrie2), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Placeholder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Placeholder::class$ = NULL;
        jmethodID *Placeholder::mids$ = NULL;
        bool Placeholder::live$ = false;

        jclass Placeholder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Placeholder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Placeholder::Placeholder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Placeholder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Placeholder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Placeholder_init_(t_Placeholder *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_Placeholder__methods_[] = {
          DECLARE_METHOD(t_Placeholder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Placeholder, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Placeholder)[] = {
          { Py_tp_methods, t_Placeholder__methods_ },
          { Py_tp_init, (void *) t_Placeholder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Placeholder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Placeholder, t_Placeholder, Placeholder);

        void t_Placeholder::install(PyObject *module)
        {
          installType(&PY_TYPE(Placeholder), &PY_TYPE_DEF(Placeholder), module, "Placeholder", 0);
        }

        void t_Placeholder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Placeholder), "class_", make_descriptor(Placeholder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Placeholder), "wrapfn_", make_descriptor(t_Placeholder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Placeholder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Placeholder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Placeholder::initializeClass, 1)))
            return NULL;
          return t_Placeholder::wrap_Object(Placeholder(((t_Placeholder *) arg)->object.this$));
        }
        static PyObject *t_Placeholder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Placeholder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Placeholder_init_(t_Placeholder *self, PyObject *args, PyObject *kwds)
        {
          Placeholder object((jobject) NULL);

          INT_CALL(object = Placeholder());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttributeImpl::class$ = NULL;
          jmethodID *PositionIncrementAttributeImpl::mids$ = NULL;
          bool PositionIncrementAttributeImpl::live$ = false;

          jclass PositionIncrementAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setPositionIncrement_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionIncrementAttributeImpl::PositionIncrementAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PositionIncrementAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void PositionIncrementAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          void PositionIncrementAttributeImpl::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean PositionIncrementAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint PositionIncrementAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_9972fcc56b44e79d]);
          }

          jint PositionIncrementAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void PositionIncrementAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void PositionIncrementAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_end(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self);
          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_reflectWith(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data);
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttributeImpl, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, end, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositionIncrementAttributeImpl)[] = {
            { Py_tp_methods, t_PositionIncrementAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_PositionIncrementAttributeImpl_init_ },
            { Py_tp_getset, t_PositionIncrementAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositionIncrementAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl, PositionIncrementAttributeImpl);

          void t_PositionIncrementAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttributeImpl), &PY_TYPE_DEF(PositionIncrementAttributeImpl), module, "PositionIncrementAttributeImpl", 0);
          }

          void t_PositionIncrementAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttributeImpl), "class_", make_descriptor(PositionIncrementAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttributeImpl), "wrapfn_", make_descriptor(t_PositionIncrementAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttributeImpl::wrap_Object(PositionIncrementAttributeImpl(((t_PositionIncrementAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionIncrementAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionIncrementAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_end(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_reflectWith(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyLong_FromLong((long) value);
          }
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Scorable$ChildScorable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorable::class$ = NULL;
        jmethodID *Scorable::mids$ = NULL;
        bool Scorable::live$ = false;

        jclass Scorable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getChildren_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinCompetitiveScore", "(F)V");
            mids$[mid_smoothingScore_384f078ef4b8f931] = env->getMethodID(cls, "smoothingScore", "(I)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorable::Scorable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint Scorable::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::java::util::Collection Scorable::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_d4dfbf7a26ff41df]));
        }

        jfloat Scorable::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        void Scorable::setMinCompetitiveScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a], a0);
        }

        jfloat Scorable::smoothingScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_smoothingScore_384f078ef4b8f931], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorable_init_(t_Scorable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorable_docID(t_Scorable *self);
        static PyObject *t_Scorable_getChildren(t_Scorable *self);
        static PyObject *t_Scorable_score(t_Scorable *self);
        static PyObject *t_Scorable_setMinCompetitiveScore(t_Scorable *self, PyObject *arg);
        static PyObject *t_Scorable_smoothingScore(t_Scorable *self, PyObject *arg);
        static PyObject *t_Scorable_get__children(t_Scorable *self, void *data);
        static int t_Scorable_set__minCompetitiveScore(t_Scorable *self, PyObject *arg, void *data);
        static PyGetSetDef t_Scorable__fields_[] = {
          DECLARE_GET_FIELD(t_Scorable, children),
          DECLARE_SET_FIELD(t_Scorable, minCompetitiveScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorable__methods_[] = {
          DECLARE_METHOD(t_Scorable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorable, docID, METH_NOARGS),
          DECLARE_METHOD(t_Scorable, getChildren, METH_NOARGS),
          DECLARE_METHOD(t_Scorable, score, METH_NOARGS),
          DECLARE_METHOD(t_Scorable, setMinCompetitiveScore, METH_O),
          DECLARE_METHOD(t_Scorable, smoothingScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Scorable)[] = {
          { Py_tp_methods, t_Scorable__methods_ },
          { Py_tp_init, (void *) t_Scorable_init_ },
          { Py_tp_getset, t_Scorable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Scorable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Scorable, t_Scorable, Scorable);

        void t_Scorable::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorable), &PY_TYPE_DEF(Scorable), module, "Scorable", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable), "ChildScorable", make_descriptor(&PY_TYPE_DEF(Scorable$ChildScorable)));
        }

        void t_Scorable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable), "class_", make_descriptor(Scorable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable), "wrapfn_", make_descriptor(t_Scorable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorable::initializeClass, 1)))
            return NULL;
          return t_Scorable::wrap_Object(Scorable(((t_Scorable *) arg)->object.this$));
        }
        static PyObject *t_Scorable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorable_init_(t_Scorable *self, PyObject *args, PyObject *kwds)
        {
          Scorable object((jobject) NULL);

          INT_CALL(object = Scorable());
          self->object = object;

          return 0;
        }

        static PyObject *t_Scorable_docID(t_Scorable *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Scorable_getChildren(t_Scorable *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Scorable$ChildScorable));
        }

        static PyObject *t_Scorable_score(t_Scorable *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.score());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Scorable_setMinCompetitiveScore(t_Scorable *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMinCompetitiveScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinCompetitiveScore", arg);
          return NULL;
        }

        static PyObject *t_Scorable_smoothingScore(t_Scorable *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.smoothingScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "smoothingScore", arg);
          return NULL;
        }

        static PyObject *t_Scorable_get__children(t_Scorable *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static int t_Scorable_set__minCompetitiveScore(t_Scorable *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMinCompetitiveScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minCompetitiveScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DirectoryReader::class$ = NULL;
        jmethodID *DirectoryReader::mids$ = NULL;
        bool DirectoryReader::live$ = false;

        jclass DirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_directory_7452b086ce8219b2] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getIndexCommit_4abaa8d830d8ecf1] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_2e5ae9edcb9b072f] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_indexExists_1524023b507b00a9] = env->getStaticMethodID(cls, "indexExists", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_isCurrent_8454bd5aa23fd11e] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_listCommits_90688d90915c8b74] = env->getStaticMethodID(cls, "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
            mids$[mid_open_6b4aca5e21cc99e9] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_f9995f21cd99d467] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_890b80518dc93fd7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_fb8f244d0fe66d05] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;Ljava/util/Comparator;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_8d74f7f05cdbccdf] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;ZZ)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_bfd9949da06c4860] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_b276f058edd17465] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_7e09521a1ae1f0ab] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_9a28daa1a4d0bd99] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_6b4aca5e21cc99e9] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_f2740abbecd1a98f] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_f2a35b536582c7c2] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Directory DirectoryReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_7452b086ce8219b2]));
        }

        ::org::apache::lucene::index::IndexCommit DirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_4abaa8d830d8ecf1]));
        }

        jlong DirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_2e5ae9edcb9b072f]);
        }

        jboolean DirectoryReader::indexExists(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_indexExists_1524023b507b00a9], a0.this$);
        }

        jboolean DirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_8454bd5aa23fd11e]);
        }

        ::java::util::List DirectoryReader::listCommits(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_listCommits_90688d90915c8b74], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_6b4aca5e21cc99e9], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_f9995f21cd99d467], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_890b80518dc93fd7], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_fb8f244d0fe66d05], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_8d74f7f05cdbccdf], a0.this$, a1, a2));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_bfd9949da06c4860], a0.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexCommit & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_b276f058edd17465], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_7e09521a1ae1f0ab], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_9a28daa1a4d0bd99], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args);
        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data);
        static PyGetSetDef t_DirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_DirectoryReader, current),
          DECLARE_GET_FIELD(t_DirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_DirectoryReader, version),
          DECLARE_GET_FIELD(t_DirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DirectoryReader__methods_[] = {
          DECLARE_METHOD(t_DirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_DirectoryReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, indexExists, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, isCurrent, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, listCommits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, openIfChanged, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DirectoryReader)[] = {
          { Py_tp_methods, t_DirectoryReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DirectoryReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DirectoryReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BaseCompositeReader),
          NULL
        };

        DEFINE_TYPE(DirectoryReader, t_DirectoryReader, DirectoryReader);
        PyObject *t_DirectoryReader::wrap_Object(const DirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(DirectoryReader), &PY_TYPE_DEF(DirectoryReader), module, "DirectoryReader", 0);
        }

        void t_DirectoryReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryReader), "class_", make_descriptor(DirectoryReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryReader), "wrapfn_", make_descriptor(t_DirectoryReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DirectoryReader::initializeClass, 1)))
            return NULL;
          return t_DirectoryReader::wrap_Object(DirectoryReader(((t_DirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::indexExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "indexExists", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCurrent());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::listCommits(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexCommit));
          }

          PyErr_SetArgsError(type, "listCommits", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "K", DirectoryReader::initializeClass, &a0, &p0, t_DirectoryReader::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexCommit a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "KkZ", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "openIfChanged", args);
          return NULL;
        }
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$SpanRewriteMethod::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$SpanRewriteMethod::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$SpanRewriteMethod::live$ = false;

          jclass SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_rewrite_5b5095bdee2c3fbe] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$SpanRewriteMethod::SpanMultiTermQueryWrapper$SpanRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$SpanRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_5b5095bdee2c3fbe], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanMultiTermQueryWrapper$SpanRewriteMethod)[] = {
            { Py_tp_methods, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_ },
            { Py_tp_init, (void *) t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_ },
            { Py_tp_getset, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanMultiTermQueryWrapper$SpanRewriteMethod)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::MultiTermQuery$RewriteMethod),
            NULL
          };

          DEFINE_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod, SpanMultiTermQueryWrapper$SpanRewriteMethod);
          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(const SpanMultiTermQueryWrapper$SpanRewriteMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), &PY_TYPE_DEF(SpanMultiTermQueryWrapper$SpanRewriteMethod), module, "SpanMultiTermQueryWrapper$SpanRewriteMethod", 0);
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), "class_", make_descriptor(SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(SpanMultiTermQueryWrapper$SpanRewriteMethod(((t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds)
          {
            SpanMultiTermQueryWrapper$SpanRewriteMethod object((jobject) NULL);

            INT_CALL(object = SpanMultiTermQueryWrapper$SpanRewriteMethod());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsFormat::class$ = NULL;
        jmethodID *NormsFormat::mids$ = NULL;
        bool NormsFormat::live$ = false;

        jclass NormsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_normsConsumer_129866fdd9f40fd4] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/NormsConsumer;");
            mids$[mid_normsProducer_c7aca038fcf2bba1] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/NormsProducer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::NormsConsumer NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::NormsConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_129866fdd9f40fd4], a0.this$));
        }

        ::org::apache::lucene::codecs::NormsProducer NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_c7aca038fcf2bba1], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg);
        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg);

        static PyMethodDef t_NormsFormat__methods_[] = {
          DECLARE_METHOD(t_NormsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, normsConsumer, METH_O),
          DECLARE_METHOD(t_NormsFormat, normsProducer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NormsFormat)[] = {
          { Py_tp_methods, t_NormsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NormsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NormsFormat, t_NormsFormat, NormsFormat);

        void t_NormsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFormat), &PY_TYPE_DEF(NormsFormat), module, "NormsFormat", 0);
        }

        void t_NormsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFormat), "class_", make_descriptor(NormsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFormat), "wrapfn_", make_descriptor(t_NormsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFormat::initializeClass, 1)))
            return NULL;
          return t_NormsFormat::wrap_Object(NormsFormat(((t_NormsFormat *) arg)->object.this$));
        }
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::NormsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsConsumer(a0));
            return ::org::apache::lucene::codecs::t_NormsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsConsumer", arg);
          return NULL;
        }

        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsProducer(a0));
            return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsProducer", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Builder.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Builder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues$Builder::class$ = NULL;
          jmethodID *PackedLongValues$Builder::mids$ = NULL;
          bool PackedLongValues$Builder::live$ = false;

          jclass PackedLongValues$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_f1342620ec58d093] = env->getMethodID(cls, "add", "(J)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_build_9abfa442b6513fc8] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/packed/PackedLongValues;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedLongValues$Builder PackedLongValues$Builder::add(jlong a0) const
          {
            return PackedLongValues$Builder(env->callObjectMethod(this$, mids$[mid_add_f1342620ec58d093], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues PackedLongValues$Builder::build() const
          {
            return ::org::apache::lucene::util::packed::PackedLongValues(env->callObjectMethod(this$, mids$[mid_build_9abfa442b6513fc8]));
          }

          jlong PackedLongValues$Builder::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong PackedLongValues$Builder::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_add(t_PackedLongValues$Builder *self, PyObject *arg);
          static PyObject *t_PackedLongValues$Builder_build(t_PackedLongValues$Builder *self);
          static PyObject *t_PackedLongValues$Builder_ramBytesUsed(t_PackedLongValues$Builder *self);
          static PyObject *t_PackedLongValues$Builder_size(t_PackedLongValues$Builder *self);

          static PyMethodDef t_PackedLongValues$Builder__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Builder, add, METH_O),
            DECLARE_METHOD(t_PackedLongValues$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Builder, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Builder, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedLongValues$Builder)[] = {
            { Py_tp_methods, t_PackedLongValues$Builder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedLongValues$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedLongValues$Builder, t_PackedLongValues$Builder, PackedLongValues$Builder);

          void t_PackedLongValues$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues$Builder), &PY_TYPE_DEF(PackedLongValues$Builder), module, "PackedLongValues$Builder", 0);
          }

          void t_PackedLongValues$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Builder), "class_", make_descriptor(PackedLongValues$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Builder), "wrapfn_", make_descriptor(t_PackedLongValues$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues$Builder::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues$Builder::wrap_Object(PackedLongValues$Builder(((t_PackedLongValues$Builder *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues$Builder_add(t_PackedLongValues$Builder *self, PyObject *arg)
          {
            jlong a0;
            PackedLongValues$Builder result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.add(a0));
              return t_PackedLongValues$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedLongValues$Builder_build(t_PackedLongValues$Builder *self)
          {
            ::org::apache::lucene::util::packed::PackedLongValues result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::packed::t_PackedLongValues::wrap_Object(result);
          }

          static PyObject *t_PackedLongValues$Builder_ramBytesUsed(t_PackedLongValues$Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_PackedLongValues$Builder_size(t_PackedLongValues$Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$MuldivContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$MuldivContext::class$ = NULL;
          jmethodID *JavascriptParser$MuldivContext::mids$ = NULL;
          bool JavascriptParser$MuldivContext::live$ = false;

          jclass JavascriptParser$MuldivContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$MuldivContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$MuldivContext::JavascriptParser$MuldivContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$MuldivContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$MuldivContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$MuldivContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$MuldivContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$MuldivContext_of_(t_JavascriptParser$MuldivContext *self, PyObject *args);
          static int t_JavascriptParser$MuldivContext_init_(t_JavascriptParser$MuldivContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$MuldivContext_expression(t_JavascriptParser$MuldivContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$MuldivContext_get__parameters_(t_JavascriptParser$MuldivContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$MuldivContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$MuldivContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$MuldivContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$MuldivContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$MuldivContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$MuldivContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$MuldivContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$MuldivContext)[] = {
            { Py_tp_methods, t_JavascriptParser$MuldivContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$MuldivContext_init_ },
            { Py_tp_getset, t_JavascriptParser$MuldivContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$MuldivContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$MuldivContext, t_JavascriptParser$MuldivContext, JavascriptParser$MuldivContext);
          PyObject *t_JavascriptParser$MuldivContext::wrap_Object(const JavascriptParser$MuldivContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$MuldivContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$MuldivContext *self = (t_JavascriptParser$MuldivContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$MuldivContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$MuldivContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$MuldivContext *self = (t_JavascriptParser$MuldivContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$MuldivContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$MuldivContext), &PY_TYPE_DEF(JavascriptParser$MuldivContext), module, "JavascriptParser$MuldivContext", 0);
          }

          void t_JavascriptParser$MuldivContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$MuldivContext), "class_", make_descriptor(JavascriptParser$MuldivContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$MuldivContext), "wrapfn_", make_descriptor(t_JavascriptParser$MuldivContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$MuldivContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$MuldivContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$MuldivContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$MuldivContext::wrap_Object(JavascriptParser$MuldivContext(((t_JavascriptParser$MuldivContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$MuldivContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$MuldivContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$MuldivContext_of_(t_JavascriptParser$MuldivContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$MuldivContext_init_(t_JavascriptParser$MuldivContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$MuldivContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$MuldivContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$MuldivContext_expression(t_JavascriptParser$MuldivContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$MuldivContext_get__parameters_(t_JavascriptParser$MuldivContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AllowLeadingWildcardProcessor::class$ = NULL;
              jmethodID *AllowLeadingWildcardProcessor::mids$ = NULL;
              bool AllowLeadingWildcardProcessor::live$ = false;

              jclass AllowLeadingWildcardProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AllowLeadingWildcardProcessor::AllowLeadingWildcardProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AllowLeadingWildcardProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args);

              static PyMethodDef t_AllowLeadingWildcardProcessor__methods_[] = {
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AllowLeadingWildcardProcessor)[] = {
                { Py_tp_methods, t_AllowLeadingWildcardProcessor__methods_ },
                { Py_tp_init, (void *) t_AllowLeadingWildcardProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AllowLeadingWildcardProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor, AllowLeadingWildcardProcessor);

              void t_AllowLeadingWildcardProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AllowLeadingWildcardProcessor), &PY_TYPE_DEF(AllowLeadingWildcardProcessor), module, "AllowLeadingWildcardProcessor", 0);
              }

              void t_AllowLeadingWildcardProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AllowLeadingWildcardProcessor), "class_", make_descriptor(AllowLeadingWildcardProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AllowLeadingWildcardProcessor), "wrapfn_", make_descriptor(t_AllowLeadingWildcardProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AllowLeadingWildcardProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 1)))
                  return NULL;
                return t_AllowLeadingWildcardProcessor::wrap_Object(AllowLeadingWildcardProcessor(((t_AllowLeadingWildcardProcessor *) arg)->object.this$));
              }
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds)
              {
                AllowLeadingWildcardProcessor object((jobject) NULL);

                INT_CALL(object = AllowLeadingWildcardProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AllowLeadingWildcardProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *InvalidTokenOffsetsException::class$ = NULL;
          jmethodID *InvalidTokenOffsetsException::mids$ = NULL;
          bool InvalidTokenOffsetsException::live$ = false;

          jclass InvalidTokenOffsetsException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/InvalidTokenOffsetsException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InvalidTokenOffsetsException::InvalidTokenOffsetsException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_InvalidTokenOffsetsException__methods_[] = {
            DECLARE_METHOD(t_InvalidTokenOffsetsException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidTokenOffsetsException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(InvalidTokenOffsetsException)[] = {
            { Py_tp_methods, t_InvalidTokenOffsetsException__methods_ },
            { Py_tp_init, (void *) t_InvalidTokenOffsetsException_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(InvalidTokenOffsetsException)[] = {
            &PY_TYPE_DEF(::java::lang::Exception),
            NULL
          };

          DEFINE_TYPE(InvalidTokenOffsetsException, t_InvalidTokenOffsetsException, InvalidTokenOffsetsException);

          void t_InvalidTokenOffsetsException::install(PyObject *module)
          {
            installType(&PY_TYPE(InvalidTokenOffsetsException), &PY_TYPE_DEF(InvalidTokenOffsetsException), module, "InvalidTokenOffsetsException", 0);
          }

          void t_InvalidTokenOffsetsException::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(InvalidTokenOffsetsException), "class_", make_descriptor(InvalidTokenOffsetsException::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InvalidTokenOffsetsException), "wrapfn_", make_descriptor(t_InvalidTokenOffsetsException::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InvalidTokenOffsetsException), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InvalidTokenOffsetsException::initializeClass, 1)))
              return NULL;
            return t_InvalidTokenOffsetsException::wrap_Object(InvalidTokenOffsetsException(((t_InvalidTokenOffsetsException *) arg)->object.this$));
          }
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InvalidTokenOffsetsException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            InvalidTokenOffsetsException object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = InvalidTokenOffsetsException(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery::class$ = NULL;
        jmethodID *BooleanQuery::mids$ = NULL;
        bool BooleanQuery::live$ = false;

        jclass BooleanQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clauses_49ec78390f08338a] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getMaxClauseCount_9972fcc56b44e79d] = env->getStaticMethodID(cls, "getMaxClauseCount", "()I");
            mids$[mid_getMinimumNumberShouldMatch_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumNumberShouldMatch", "()I");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setMaxClauseCount_040c4cd0390c5aff] = env->getStaticMethodID(cls, "setMaxClauseCount", "(I)V");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List BooleanQuery::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_49ec78390f08338a]));
        }

        ::org::apache::lucene::search::Weight BooleanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean BooleanQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint BooleanQuery::getMaxClauseCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxClauseCount_9972fcc56b44e79d]);
        }

        jint BooleanQuery::getMinimumNumberShouldMatch() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinimumNumberShouldMatch_9972fcc56b44e79d]);
        }

        jint BooleanQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::util::Iterator BooleanQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::search::Query BooleanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        void BooleanQuery::setMaxClauseCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setMaxClauseCount_040c4cd0390c5aff], a0);
        }

        ::java::lang::String BooleanQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void BooleanQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type);
        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_visit(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data);
        static PyGetSetDef t_BooleanQuery__fields_[] = {
          DECLARE_GETSET_FIELD(t_BooleanQuery, maxClauseCount),
          DECLARE_GET_FIELD(t_BooleanQuery, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, getMaxClauseCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, getMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, setMaxClauseCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanQuery)[] = {
          { Py_tp_methods, t_BooleanQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BooleanQuery__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_BooleanQuery *)) get_iterator< t_BooleanQuery >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(BooleanQuery, t_BooleanQuery, BooleanQuery);

        void t_BooleanQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery), &PY_TYPE_DEF(BooleanQuery), module, "BooleanQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery), "Builder", make_descriptor(&PY_TYPE_DEF(BooleanQuery$Builder)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery), "TooManyClauses", make_descriptor(&PY_TYPE_DEF(BooleanQuery$TooManyClauses)));
        }

        void t_BooleanQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery), "class_", make_descriptor(BooleanQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery), "wrapfn_", make_descriptor(t_BooleanQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery::wrap_Object(BooleanQuery(((t_BooleanQuery *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanQuery::getMaxClauseCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinimumNumberShouldMatch());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::BooleanQuery::setMaxClauseCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setMaxClauseCount", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanQuery_visit(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BooleanQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxClauseCount());
          return PyLong_FromLong((long) value);
        }
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxClauseCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxClauseCount", arg);
          return -1;
        }

        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinimumNumberShouldMatch());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianAnalyzer::class$ = NULL;
          jmethodID *LatvianAnalyzer::mids$ = NULL;
          bool LatvianAnalyzer::live$ = false;
          ::java::lang::String *LatvianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LatvianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianAnalyzer::LatvianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet LatvianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data);
          static PyGetSetDef t_LatvianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LatvianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatvianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LatvianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LatvianAnalyzer)[] = {
            { Py_tp_methods, t_LatvianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_LatvianAnalyzer_init_ },
            { Py_tp_getset, t_LatvianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LatvianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(LatvianAnalyzer, t_LatvianAnalyzer, LatvianAnalyzer);

          void t_LatvianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianAnalyzer), &PY_TYPE_DEF(LatvianAnalyzer), module, "LatvianAnalyzer", 0);
          }

          void t_LatvianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianAnalyzer), "class_", make_descriptor(LatvianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianAnalyzer), "wrapfn_", make_descriptor(t_LatvianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LatvianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LatvianAnalyzer::wrap_Object(LatvianAnalyzer(((t_LatvianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LatvianAnalyzer object((jobject) NULL);

                INT_CALL(object = LatvianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lv::LatvianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$PruneByAge::class$ = NULL;
        jmethodID *SearcherLifetimeManager$PruneByAge::mids$ = NULL;
        bool SearcherLifetimeManager$PruneByAge::live$ = false;

        jclass SearcherLifetimeManager$PruneByAge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$PruneByAge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3c435f10a3b1e038] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_doPrune_730c836a2963ba3c] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager$PruneByAge::SearcherLifetimeManager$PruneByAge(jdouble a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3c435f10a3b1e038, a0)) {}

        jboolean SearcherLifetimeManager$PruneByAge::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_730c836a2963ba3c], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$PruneByAge__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$PruneByAge, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SearcherLifetimeManager$PruneByAge)[] = {
          { Py_tp_methods, t_SearcherLifetimeManager$PruneByAge__methods_ },
          { Py_tp_init, (void *) t_SearcherLifetimeManager$PruneByAge_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SearcherLifetimeManager$PruneByAge)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SearcherLifetimeManager$PruneByAge, t_SearcherLifetimeManager$PruneByAge, SearcherLifetimeManager$PruneByAge);

        void t_SearcherLifetimeManager$PruneByAge::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$PruneByAge), &PY_TYPE_DEF(SearcherLifetimeManager$PruneByAge), module, "SearcherLifetimeManager$PruneByAge", 0);
        }

        void t_SearcherLifetimeManager$PruneByAge::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$PruneByAge), "class_", make_descriptor(SearcherLifetimeManager$PruneByAge::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$PruneByAge), "wrapfn_", make_descriptor(t_SearcherLifetimeManager$PruneByAge::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$PruneByAge), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$PruneByAge::wrap_Object(SearcherLifetimeManager$PruneByAge(((t_SearcherLifetimeManager$PruneByAge *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$PruneByAge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$PruneByAge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager$PruneByAge_init_(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          SearcherLifetimeManager$PruneByAge object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = SearcherLifetimeManager$PruneByAge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager$PruneByAge_doPrune(t_SearcherLifetimeManager$PruneByAge *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermExtractor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermExtractor::class$ = NULL;
          jmethodID *QueryTermExtractor::mids$ = NULL;
          bool QueryTermExtractor::live$ = false;

          jclass QueryTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIdfWeightedTerms_5a662fb1493a24b6] = env->getStaticMethodID(cls, "getIdfWeightedTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_7f2d9be8001c1454] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_4edb9600b319edfa] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;Z)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_c401e8dff1b0a47e] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;ZLjava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermExtractor::QueryTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getIdfWeightedTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getIdfWeightedTerms_5a662fb1493a24b6], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_7f2d9be8001c1454], a0.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_4edb9600b319edfa], a0.this$, a1));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_c401e8dff1b0a47e], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTermExtractor__methods_[] = {
            DECLARE_METHOD(t_QueryTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getIdfWeightedTerms, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getTerms, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryTermExtractor)[] = {
            { Py_tp_methods, t_QueryTermExtractor__methods_ },
            { Py_tp_init, (void *) t_QueryTermExtractor_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryTermExtractor)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryTermExtractor, t_QueryTermExtractor, QueryTermExtractor);

          void t_QueryTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermExtractor), &PY_TYPE_DEF(QueryTermExtractor), module, "QueryTermExtractor", 0);
          }

          void t_QueryTermExtractor::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermExtractor), "class_", make_descriptor(QueryTermExtractor::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermExtractor), "wrapfn_", make_descriptor(t_QueryTermExtractor::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTermExtractor), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermExtractor::initializeClass, 1)))
              return NULL;
            return t_QueryTermExtractor::wrap_Object(QueryTermExtractor(((t_QueryTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            QueryTermExtractor object((jobject) NULL);

            INT_CALL(object = QueryTermExtractor());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getIdfWeightedTerms(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
            }

            PyErr_SetArgsError(type, "getIdfWeightedTerms", args);
            return NULL;
          }

          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZs", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError(type, "getTerms", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SortedSetFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/SortedSetSelector$Type.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SortedSetFieldSource::class$ = NULL;
            jmethodID *SortedSetFieldSource::mids$ = NULL;
            bool SortedSetFieldSource::live$ = false;

            jclass SortedSetFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SortedSetFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_679a62dbe873358b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortedSetSelector$Type;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SortedSetFieldSource::SortedSetFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            SortedSetFieldSource::SortedSetFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortedSetSelector$Type & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_679a62dbe873358b, a0.this$, a1.this$)) {}

            ::java::lang::String SortedSetFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean SortedSetFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField SortedSetFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            ::org::apache::lucene::queries::function::FunctionValues SortedSetFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint SortedSetFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SortedSetFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SortedSetFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SortedSetFieldSource_init_(t_SortedSetFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SortedSetFieldSource_description(t_SortedSetFieldSource *self, PyObject *args);
            static PyObject *t_SortedSetFieldSource_equals(t_SortedSetFieldSource *self, PyObject *args);
            static PyObject *t_SortedSetFieldSource_getSortField(t_SortedSetFieldSource *self, PyObject *args);
            static PyObject *t_SortedSetFieldSource_getValues(t_SortedSetFieldSource *self, PyObject *args);
            static PyObject *t_SortedSetFieldSource_hashCode(t_SortedSetFieldSource *self, PyObject *args);

            static PyMethodDef t_SortedSetFieldSource__methods_[] = {
              DECLARE_METHOD(t_SortedSetFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SortedSetFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SortedSetFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SortedSetFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SortedSetFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_SortedSetFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SortedSetFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SortedSetFieldSource)[] = {
              { Py_tp_methods, t_SortedSetFieldSource__methods_ },
              { Py_tp_init, (void *) t_SortedSetFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SortedSetFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(SortedSetFieldSource, t_SortedSetFieldSource, SortedSetFieldSource);

            void t_SortedSetFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SortedSetFieldSource), &PY_TYPE_DEF(SortedSetFieldSource), module, "SortedSetFieldSource", 0);
            }

            void t_SortedSetFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetFieldSource), "class_", make_descriptor(SortedSetFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetFieldSource), "wrapfn_", make_descriptor(t_SortedSetFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SortedSetFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SortedSetFieldSource::initializeClass, 1)))
                return NULL;
              return t_SortedSetFieldSource::wrap_Object(SortedSetFieldSource(((t_SortedSetFieldSource *) arg)->object.this$));
            }
            static PyObject *t_SortedSetFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SortedSetFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SortedSetFieldSource_init_(t_SortedSetFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  SortedSetFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = SortedSetFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::SortedSetSelector$Type a1((jobject) NULL);
                  PyTypeObject **p1;
                  SortedSetFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortedSetSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedSetSelector$Type::parameters_))
                  {
                    INT_CALL(object = SortedSetFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SortedSetFieldSource_description(t_SortedSetFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SortedSetFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SortedSetFieldSource_equals(t_SortedSetFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SortedSetFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SortedSetFieldSource_getSortField(t_SortedSetFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SortedSetFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_SortedSetFieldSource_getValues(t_SortedSetFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SortedSetFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SortedSetFieldSource_hashCode(t_SortedSetFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(SortedSetFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene86/Lucene86PointsReader.h"
#include "org/apache/lucene/index/PointValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {

          ::java::lang::Class *Lucene86PointsReader::class$ = NULL;
          jmethodID *Lucene86PointsReader::mids$ = NULL;
          bool Lucene86PointsReader::live$ = false;

          jclass Lucene86PointsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene86/Lucene86PointsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getValues_72b990dbae0eea09] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene86PointsReader::Lucene86PointsReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::PointsReader(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void Lucene86PointsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void Lucene86PointsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::org::apache::lucene::index::PointValues Lucene86PointsReader::getValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getValues_72b990dbae0eea09], a0.this$));
          }

          jlong Lucene86PointsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {
          static PyObject *t_Lucene86PointsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene86PointsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene86PointsReader_init_(t_Lucene86PointsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene86PointsReader_checkIntegrity(t_Lucene86PointsReader *self, PyObject *args);
          static PyObject *t_Lucene86PointsReader_close(t_Lucene86PointsReader *self, PyObject *args);
          static PyObject *t_Lucene86PointsReader_getValues(t_Lucene86PointsReader *self, PyObject *args);
          static PyObject *t_Lucene86PointsReader_ramBytesUsed(t_Lucene86PointsReader *self, PyObject *args);

          static PyMethodDef t_Lucene86PointsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene86PointsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsReader, getValues, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene86PointsReader)[] = {
            { Py_tp_methods, t_Lucene86PointsReader__methods_ },
            { Py_tp_init, (void *) t_Lucene86PointsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene86PointsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsReader),
            NULL
          };

          DEFINE_TYPE(Lucene86PointsReader, t_Lucene86PointsReader, Lucene86PointsReader);

          void t_Lucene86PointsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene86PointsReader), &PY_TYPE_DEF(Lucene86PointsReader), module, "Lucene86PointsReader", 0);
          }

          void t_Lucene86PointsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsReader), "class_", make_descriptor(Lucene86PointsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsReader), "wrapfn_", make_descriptor(t_Lucene86PointsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene86PointsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene86PointsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene86PointsReader::wrap_Object(Lucene86PointsReader(((t_Lucene86PointsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene86PointsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene86PointsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene86PointsReader_init_(t_Lucene86PointsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            Lucene86PointsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = Lucene86PointsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene86PointsReader_checkIntegrity(t_Lucene86PointsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene86PointsReader_close(t_Lucene86PointsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene86PointsReader_getValues(t_Lucene86PointsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::PointValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getValues(a0));
              return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86PointsReader), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_Lucene86PointsReader_ramBytesUsed(t_Lucene86PointsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(Lucene86PointsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Format.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Format::class$ = NULL;
    jmethodID *Format::mids$ = NULL;
    bool Format::live$ = false;

    jclass Format::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Format");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_format_8f886c83a83356f0] = env->getMethodID(cls, "format", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_parseObject_c0a3c3394484d296] = env->getMethodID(cls, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Format::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    ::java::lang::String Format::format(const ::java::lang::Object & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_8f886c83a83356f0], a0.this$));
    }

    ::java::lang::Object Format::parseObject(const ::java::lang::String & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parseObject_c0a3c3394484d296], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_clone(t_Format *self);
    static PyObject *t_Format_format(t_Format *self, PyObject *arg);
    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg);

    static PyMethodDef t_Format__methods_[] = {
      DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, clone, METH_NOARGS),
      DECLARE_METHOD(t_Format, format, METH_O),
      DECLARE_METHOD(t_Format, parseObject, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Format)[] = {
      { Py_tp_methods, t_Format__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Format)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Format, t_Format, Format);

    void t_Format::install(PyObject *module)
    {
      installType(&PY_TYPE(Format), &PY_TYPE_DEF(Format), module, "Format", 0);
    }

    void t_Format::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Format), "class_", make_descriptor(Format::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Format), "wrapfn_", make_descriptor(t_Format::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Format), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Format::initializeClass, 1)))
        return NULL;
      return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
    }
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Format::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Format_clone(t_Format *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Format_format(t_Format *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", arg);
      return NULL;
    }

    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parseObject(a0));
        return ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parseObject", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharacterUtils.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharacterUtils::class$ = NULL;
        jmethodID *CharacterUtils::mids$ = NULL;
        bool CharacterUtils::live$ = false;

        jclass CharacterUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharacterUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_5929f9734171259b] = env->getStaticMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/CharacterUtils$CharacterBuffer;Ljava/io/Reader;)Z");
            mids$[mid_fill_c07b43a75bbb9ca6] = env->getStaticMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/CharacterUtils$CharacterBuffer;Ljava/io/Reader;I)Z");
            mids$[mid_newCharacterBuffer_dcebc97f386ff3eb] = env->getStaticMethodID(cls, "newCharacterBuffer", "(I)Lorg/apache/lucene/analysis/CharacterUtils$CharacterBuffer;");
            mids$[mid_toChars_852542866dfc5aa9] = env->getStaticMethodID(cls, "toChars", "([III[CI)I");
            mids$[mid_toCodePoints_3543975f27cb1cec] = env->getStaticMethodID(cls, "toCodePoints", "([CII[II)I");
            mids$[mid_toLowerCase_d5128be76a214037] = env->getStaticMethodID(cls, "toLowerCase", "([CII)V");
            mids$[mid_toUpperCase_d5128be76a214037] = env->getStaticMethodID(cls, "toUpperCase", "([CII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_fill_5929f9734171259b], a0.this$, a1.this$);
        }

        jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_fill_c07b43a75bbb9ca6], a0.this$, a1.this$, a2);
        }

        ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer CharacterUtils::newCharacterBuffer(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer(env->callStaticObjectMethod(cls, mids$[mid_newCharacterBuffer_dcebc97f386ff3eb], a0));
        }

        jint CharacterUtils::toChars(const JArray< jint > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_toChars_852542866dfc5aa9], a0.this$, a1, a2, a3.this$, a4);
        }

        jint CharacterUtils::toCodePoints(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_toCodePoints_3543975f27cb1cec], a0.this$, a1, a2, a3.this$, a4);
        }

        void CharacterUtils::toLowerCase(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_toLowerCase_d5128be76a214037], a0.this$, a1, a2);
        }

        void CharacterUtils::toUpperCase(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_toUpperCase_d5128be76a214037], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharacterUtils_fill(PyTypeObject *type, PyObject *args);
        static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharacterUtils_toChars(PyTypeObject *type, PyObject *args);
        static PyObject *t_CharacterUtils_toCodePoints(PyTypeObject *type, PyObject *args);
        static PyObject *t_CharacterUtils_toLowerCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_CharacterUtils_toUpperCase(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CharacterUtils__methods_[] = {
          DECLARE_METHOD(t_CharacterUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, fill, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, newCharacterBuffer, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, toChars, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, toCodePoints, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, toLowerCase, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils, toUpperCase, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharacterUtils)[] = {
          { Py_tp_methods, t_CharacterUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharacterUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CharacterUtils, t_CharacterUtils, CharacterUtils);

        void t_CharacterUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(CharacterUtils), &PY_TYPE_DEF(CharacterUtils), module, "CharacterUtils", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils), "CharacterBuffer", make_descriptor(&PY_TYPE_DEF(CharacterUtils$CharacterBuffer)));
        }

        void t_CharacterUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils), "class_", make_descriptor(CharacterUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils), "wrapfn_", make_descriptor(t_CharacterUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharacterUtils::initializeClass, 1)))
            return NULL;
          return t_CharacterUtils::wrap_Object(CharacterUtils(((t_CharacterUtils *) arg)->object.this$));
        }
        static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharacterUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharacterUtils_fill(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::CharacterUtils::fill(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              jint a2;
              jboolean result;

              if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::CharacterUtils::fill(a0, a1, a2));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "fill", args);
          return NULL;
        }

        static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::analysis::CharacterUtils$CharacterBuffer result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharacterUtils::newCharacterBuffer(a0));
            return ::org::apache::lucene::analysis::t_CharacterUtils$CharacterBuffer::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCharacterBuffer", arg);
          return NULL;
        }

        static PyObject *t_CharacterUtils_toChars(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > a3((jobject) NULL);
          jint a4;
          jint result;

          if (!parseArgs(args, "[III[CI", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharacterUtils::toChars(a0, a1, a2, a3, a4));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "toChars", args);
          return NULL;
        }

        static PyObject *t_CharacterUtils_toCodePoints(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > a3((jobject) NULL);
          jint a4;
          jint result;

          if (!parseArgs(args, "[CII[II", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharacterUtils::toCodePoints(a0, a1, a2, a3, a4));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "toCodePoints", args);
          return NULL;
        }

        static PyObject *t_CharacterUtils_toLowerCase(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::analysis::CharacterUtils::toLowerCase(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "toLowerCase", args);
          return NULL;
        }

        static PyObject *t_CharacterUtils_toUpperCase(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::analysis::CharacterUtils::toUpperCase(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "toUpperCase", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanFirstBuilder::class$ = NULL;
            jmethodID *SpanFirstBuilder::mids$ = NULL;
            bool SpanFirstBuilder::live$ = false;

            jclass SpanFirstBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a59cd39e7afcbd2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanFirstBuilder::SpanFirstBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_a59cd39e7afcbd2c, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanFirstBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanFirstBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanFirstBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanFirstBuilder)[] = {
              { Py_tp_methods, t_SpanFirstBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanFirstBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanFirstBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanFirstBuilder, t_SpanFirstBuilder, SpanFirstBuilder);

            void t_SpanFirstBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanFirstBuilder), &PY_TYPE_DEF(SpanFirstBuilder), module, "SpanFirstBuilder", 0);
            }

            void t_SpanFirstBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstBuilder), "class_", make_descriptor(SpanFirstBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstBuilder), "wrapfn_", make_descriptor(t_SpanFirstBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanFirstBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanFirstBuilder::wrap_Object(SpanFirstBuilder(((t_SpanFirstBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanFirstBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanFirstBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanFirstBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilter::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilter::mids$ = NULL;
          bool NorwegianMinimalStemFilter::live$ = false;

          jclass NorwegianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          jboolean NorwegianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianMinimalStemFilter)[] = {
            { Py_tp_methods, t_NorwegianMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_NorwegianMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter, NorwegianMinimalStemFilter);

          void t_NorwegianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilter), &PY_TYPE_DEF(NorwegianMinimalStemFilter), module, "NorwegianMinimalStemFilter", 0);
          }

          void t_NorwegianMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilter), "class_", make_descriptor(NorwegianMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilter), "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilter::wrap_Object(NorwegianMinimalStemFilter(((t_NorwegianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NorwegianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanAnalyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "org/apache/lucene/analysis/ko/dict/UserDictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanAnalyzer::class$ = NULL;
          jmethodID *KoreanAnalyzer::mids$ = NULL;
          bool KoreanAnalyzer::live$ = false;

          jclass KoreanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0c5c39d512f0baf1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/dict/UserDictionary;Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;Ljava/util/Set;Z)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanAnalyzer::KoreanAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          KoreanAnalyzer::KoreanAnalyzer(const ::org::apache::lucene::analysis::ko::dict::UserDictionary & a0, const ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode & a1, const ::java::util::Set & a2, jboolean a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0c5c39d512f0baf1, a0.this$, a1.this$, a2.this$, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanAnalyzer_init_(t_KoreanAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KoreanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KoreanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanAnalyzer)[] = {
            { Py_tp_methods, t_KoreanAnalyzer__methods_ },
            { Py_tp_init, (void *) t_KoreanAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(KoreanAnalyzer, t_KoreanAnalyzer, KoreanAnalyzer);

          void t_KoreanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanAnalyzer), &PY_TYPE_DEF(KoreanAnalyzer), module, "KoreanAnalyzer", 0);
          }

          void t_KoreanAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanAnalyzer), "class_", make_descriptor(KoreanAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanAnalyzer), "wrapfn_", make_descriptor(t_KoreanAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KoreanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KoreanAnalyzer::wrap_Object(KoreanAnalyzer(((t_KoreanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KoreanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanAnalyzer_init_(t_KoreanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                KoreanAnalyzer object((jobject) NULL);

                INT_CALL(object = KoreanAnalyzer());
                self->object = object;
                break;
              }
             case 4:
              {
                ::org::apache::lucene::analysis::ko::dict::UserDictionary a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                KoreanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKKZ", ::org::apache::lucene::analysis::ko::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$DecompoundMode::parameters_, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = KoreanAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/HashFunction.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *HashFunction::class$ = NULL;
          jmethodID *HashFunction::mids$ = NULL;
          bool HashFunction::live$ = false;

          jclass HashFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/HashFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_hash_1c2e5fa34f4312de] = env->getMethodID(cls, "hash", "(Lorg/apache/lucene/util/BytesRef;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HashFunction::HashFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint HashFunction::hash(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_hash_1c2e5fa34f4312de], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_HashFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HashFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HashFunction_init_(t_HashFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HashFunction_hash(t_HashFunction *self, PyObject *arg);

          static PyMethodDef t_HashFunction__methods_[] = {
            DECLARE_METHOD(t_HashFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HashFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HashFunction, hash, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HashFunction)[] = {
            { Py_tp_methods, t_HashFunction__methods_ },
            { Py_tp_init, (void *) t_HashFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HashFunction)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HashFunction, t_HashFunction, HashFunction);

          void t_HashFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(HashFunction), &PY_TYPE_DEF(HashFunction), module, "HashFunction", 0);
          }

          void t_HashFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HashFunction), "class_", make_descriptor(HashFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HashFunction), "wrapfn_", make_descriptor(t_HashFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HashFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HashFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HashFunction::initializeClass, 1)))
              return NULL;
            return t_HashFunction::wrap_Object(HashFunction(((t_HashFunction *) arg)->object.this$));
          }
          static PyObject *t_HashFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HashFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HashFunction_init_(t_HashFunction *self, PyObject *args, PyObject *kwds)
          {
            HashFunction object((jobject) NULL);

            INT_CALL(object = HashFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_HashFunction_hash(t_HashFunction *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.hash(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "hash", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Character.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jint Character::BYTES = (jint) 0;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b227b2c08d18d29e] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_1e143afe1894d213] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_8eea1dd85c3239c3] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_d4655f2a19359017] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_7a9041c03b6e9981] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_d4655f2a19359017] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_7a9041c03b6e9981] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_codePointCount_a0b845cd7e1b893f] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_compare_69a9f8c5bb01c1f0] = env->getStaticMethodID(cls, "compare", "(CC)I");
        mids$[mid_compareTo_1e2c3e1773615084] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_6cfef1ec0cc467c0] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_digit_57a58545eba514db] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_768732b3cc5506bb] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_920874b8f5998fce] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getDirectionality_4d5233a30cda5878] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getName_d7593acad64ef635] = env->getStaticMethodID(cls, "getName", "(I)Ljava/lang/String;");
        mids$[mid_getNumericValue_6449734bbde5adfd] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getNumericValue_1e143afe1894d213] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getType_6449734bbde5adfd] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_1e143afe1894d213] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_6449734bbde5adfd] = env->getStaticMethodID(cls, "hashCode", "(C)I");
        mids$[mid_highSurrogate_ebc61ec1e57770d1] = env->getStaticMethodID(cls, "highSurrogate", "(I)C");
        mids$[mid_isAlphabetic_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isAlphabetic", "(I)Z");
        mids$[mid_isBmpCodePoint_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isBmpCodePoint", "(I)Z");
        mids$[mid_isDefined_540573ecd04ffc16] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_540573ecd04ffc16] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isDigit_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isHighSurrogate_540573ecd04ffc16] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_540573ecd04ffc16] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isISOControl_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isIdentifierIgnorable_540573ecd04ffc16] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isIdentifierIgnorable_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdeographic_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isIdeographic", "(I)Z");
        mids$[mid_isJavaIdentifierPart_540573ecd04ffc16] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierPart_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierStart_540573ecd04ffc16] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaLetter_540573ecd04ffc16] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_540573ecd04ffc16] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_540573ecd04ffc16] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_540573ecd04ffc16] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLetterOrDigit_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLowSurrogate_540573ecd04ffc16] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_540573ecd04ffc16] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isLowerCase_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isMirrored_540573ecd04ffc16] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isMirrored_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isSpace_540573ecd04ffc16] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_540573ecd04ffc16] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSpaceChar_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSupplementaryCodePoint_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogate_540573ecd04ffc16] = env->getStaticMethodID(cls, "isSurrogate", "(C)Z");
        mids$[mid_isSurrogatePair_98700694bd8e1746] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_540573ecd04ffc16] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isTitleCase_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isUnicodeIdentifierPart_540573ecd04ffc16] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_540573ecd04ffc16] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUnicodeIdentifierStart_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUpperCase_540573ecd04ffc16] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isUpperCase_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isValidCodePoint_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_540573ecd04ffc16] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_isWhitespace_a1d30e1ee40c89a2] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_lowSurrogate_ebc61ec1e57770d1] = env->getStaticMethodID(cls, "lowSurrogate", "(I)C");
        mids$[mid_offsetByCodePoints_a0b845cd7e1b893f] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_77e39aa01f915269] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87303ccbf3475d77] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_4a35a620830b94db] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_dfadfe275a0a8864] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_69a9f8c5bb01c1f0] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_87303ccbf3475d77] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toLowerCase_1e143afe1894d213] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_4bb5e6191c541c0d] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87303ccbf3475d77] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_1e143afe1894d213] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_87303ccbf3475d77] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_toUpperCase_1e143afe1894d213] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_valueOf_cfedc34e8f9b465a] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b227b2c08d18d29e, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_1e143afe1894d213], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_8eea1dd85c3239c3]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_d4655f2a19359017], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_7a9041c03b6e9981], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_644fc0bf0aa7fb26], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_d4655f2a19359017], a0.this$, a1);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_7a9041c03b6e9981], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_644fc0bf0aa7fb26], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_644fc0bf0aa7fb26], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_a0b845cd7e1b893f], a0.this$, a1, a2);
    }

    jint Character::compare(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_69a9f8c5bb01c1f0], a0, a1);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_1e2c3e1773615084], a0.this$);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_6cfef1ec0cc467c0], a0, a1);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_57a58545eba514db], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_768732b3cc5506bb], a0, a1);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_920874b8f5998fce], a0);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_4d5233a30cda5878], a0);
    }

    ::java::lang::String Character::getName(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getName_d7593acad64ef635], a0));
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_6449734bbde5adfd], a0);
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_1e143afe1894d213], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_6449734bbde5adfd], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_1e143afe1894d213], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Character::hashCode(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_6449734bbde5adfd], a0);
    }

    jchar Character::highSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_highSurrogate_ebc61ec1e57770d1], a0);
    }

    jboolean Character::isAlphabetic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isAlphabetic_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isBmpCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isBmpCodePoint_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_540573ecd04ffc16], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_540573ecd04ffc16], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_540573ecd04ffc16], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_540573ecd04ffc16], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_540573ecd04ffc16], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isIdeographic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdeographic_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_540573ecd04ffc16], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_540573ecd04ffc16], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_540573ecd04ffc16], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_540573ecd04ffc16], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_540573ecd04ffc16], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_540573ecd04ffc16], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_540573ecd04ffc16], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_540573ecd04ffc16], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_540573ecd04ffc16], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_540573ecd04ffc16], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_540573ecd04ffc16], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogate_540573ecd04ffc16], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_98700694bd8e1746], a0, a1);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_540573ecd04ffc16], a0);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_540573ecd04ffc16], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_540573ecd04ffc16], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_540573ecd04ffc16], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_a1d30e1ee40c89a2], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_540573ecd04ffc16], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_a1d30e1ee40c89a2], a0);
    }

    jchar Character::lowSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_lowSurrogate_ebc61ec1e57770d1], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_a0b845cd7e1b893f], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_77e39aa01f915269], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87303ccbf3475d77], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_4a35a620830b94db], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_dfadfe275a0a8864], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_69a9f8c5bb01c1f0], a0, a1);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87303ccbf3475d77], a0);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_1e143afe1894d213], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_4bb5e6191c541c0d], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87303ccbf3475d77], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_1e143afe1894d213], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87303ccbf3475d77], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_1e143afe1894d213], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_cfedc34e8f9b465a], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, highSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isAlphabetic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isBmpCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdeographic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, lowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Character)[] = {
      { Py_tp_methods, t_Character__methods_ },
      { Py_tp_init, (void *) t_Character_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Character)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Character, t_Character, Character);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), &PY_TYPE_DEF(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "class_", make_descriptor(Character::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "wrapfn_", make_descriptor(unboxCharacter));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "BYTES", make_descriptor(Character::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "CONTROL", make_descriptor(Character::CONTROL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "FORMAT", make_descriptor(Character::FORMAT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "SIZE", make_descriptor(Character::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "SURROGATE", make_descriptor(Character::SURROGATE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Character), "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return c2p(result);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return c2p(result);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::getName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "getName", arg);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jint result;

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::highSurrogate(a0));
        return c2p(result);
      }

      PyErr_SetArgsError(type, "highSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isAlphabetic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isAlphabetic", arg);
      return NULL;
    }

    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isBmpCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isBmpCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isIdeographic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isIdeographic", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::lowSurrogate(a0));
        return c2p(result);
      }

      PyErr_SetArgsError(type, "lowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return c2p(result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return c2p(result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return c2p(result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return c2p(result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/PassageFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/Passage.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *PassageFormatter::class$ = NULL;
          jmethodID *PassageFormatter::mids$ = NULL;
          bool PassageFormatter::live$ = false;

          jclass PassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/PassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_format_01bedfec1580d766] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/uhighlight/Passage;Ljava/lang/String;)Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageFormatter::PassageFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::Object PassageFormatter::format(const JArray< ::org::apache::lucene::search::uhighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_format_01bedfec1580d766], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args);

          static PyMethodDef t_PassageFormatter__methods_[] = {
            DECLARE_METHOD(t_PassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PassageFormatter)[] = {
            { Py_tp_methods, t_PassageFormatter__methods_ },
            { Py_tp_init, (void *) t_PassageFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PassageFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PassageFormatter, t_PassageFormatter, PassageFormatter);

          void t_PassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageFormatter), &PY_TYPE_DEF(PassageFormatter), module, "PassageFormatter", 0);
          }

          void t_PassageFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageFormatter), "class_", make_descriptor(PassageFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageFormatter), "wrapfn_", make_descriptor(t_PassageFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageFormatter::initializeClass, 1)))
              return NULL;
            return t_PassageFormatter::wrap_Object(PassageFormatter(((t_PassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            PassageFormatter object((jobject) NULL);

            INT_CALL(object = PassageFormatter());
            self->object = object;

            return 0;
          }

          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::uhighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::uhighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntPointMultiRangeBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntPointMultiRangeBuilder::class$ = NULL;
        jmethodID *IntPointMultiRangeBuilder::mids$ = NULL;
        bool IntPointMultiRangeBuilder::live$ = false;

        jclass IntPointMultiRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntPointMultiRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_add_cab3080081e127d8] = env->getMethodID(cls, "add", "([I[I)V");
            mids$[mid_build_03a96fdd31aca883] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiRangeQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntPointMultiRangeBuilder::IntPointMultiRangeBuilder(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::MultiRangeQuery$Builder(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        void IntPointMultiRangeBuilder::add(const JArray< jint > & a0, const JArray< jint > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_cab3080081e127d8], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::MultiRangeQuery IntPointMultiRangeBuilder::build() const
        {
          return ::org::apache::lucene::search::MultiRangeQuery(env->callObjectMethod(this$, mids$[mid_build_03a96fdd31aca883]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntPointMultiRangeBuilder_init_(t_IntPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntPointMultiRangeBuilder_add(t_IntPointMultiRangeBuilder *self, PyObject *args);
        static PyObject *t_IntPointMultiRangeBuilder_build(t_IntPointMultiRangeBuilder *self, PyObject *args);

        static PyMethodDef t_IntPointMultiRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_IntPointMultiRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntPointMultiRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntPointMultiRangeBuilder, add, METH_VARARGS),
          DECLARE_METHOD(t_IntPointMultiRangeBuilder, build, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntPointMultiRangeBuilder)[] = {
          { Py_tp_methods, t_IntPointMultiRangeBuilder__methods_ },
          { Py_tp_init, (void *) t_IntPointMultiRangeBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntPointMultiRangeBuilder)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiRangeQuery$Builder),
          NULL
        };

        DEFINE_TYPE(IntPointMultiRangeBuilder, t_IntPointMultiRangeBuilder, IntPointMultiRangeBuilder);

        void t_IntPointMultiRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(IntPointMultiRangeBuilder), &PY_TYPE_DEF(IntPointMultiRangeBuilder), module, "IntPointMultiRangeBuilder", 0);
        }

        void t_IntPointMultiRangeBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPointMultiRangeBuilder), "class_", make_descriptor(IntPointMultiRangeBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPointMultiRangeBuilder), "wrapfn_", make_descriptor(t_IntPointMultiRangeBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPointMultiRangeBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntPointMultiRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_IntPointMultiRangeBuilder::wrap_Object(IntPointMultiRangeBuilder(((t_IntPointMultiRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_IntPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntPointMultiRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntPointMultiRangeBuilder_init_(t_IntPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          IntPointMultiRangeBuilder object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = IntPointMultiRangeBuilder(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntPointMultiRangeBuilder_add(t_IntPointMultiRangeBuilder *self, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntPointMultiRangeBuilder), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_IntPointMultiRangeBuilder_build(t_IntPointMultiRangeBuilder *self, PyObject *args)
        {
          ::org::apache::lucene::search::MultiRangeQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::search::t_MultiRangeQuery::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IntPointMultiRangeBuilder), (PyObject *) self, "build", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilter::class$ = NULL;
          jmethodID *CodepointCountFilter::mids$ = NULL;
          bool CodepointCountFilter::live$ = false;

          jclass CodepointCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc3fe04da12abad6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilter::CodepointCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_cc3fe04da12abad6, a0.this$, a1, a2)) {}

          jboolean CodepointCountFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self);

          static PyMethodDef t_CodepointCountFilter__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CodepointCountFilter)[] = {
            { Py_tp_methods, t_CodepointCountFilter__methods_ },
            { Py_tp_init, (void *) t_CodepointCountFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CodepointCountFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(CodepointCountFilter, t_CodepointCountFilter, CodepointCountFilter);

          void t_CodepointCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilter), &PY_TYPE_DEF(CodepointCountFilter), module, "CodepointCountFilter", 0);
          }

          void t_CodepointCountFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilter), "class_", make_descriptor(CodepointCountFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilter), "wrapfn_", make_descriptor(t_CodepointCountFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CodepointCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilter::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilter::wrap_Object(CodepointCountFilter(((t_CodepointCountFilter *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilter_init_(t_CodepointCountFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            jint a2;
            CodepointCountFilter object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = CodepointCountFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilter_accept(t_CodepointCountFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *FixedGapTermsIndexReader::class$ = NULL;
          jmethodID *FixedGapTermsIndexReader::mids$ = NULL;
          bool FixedGapTermsIndexReader::live$ = false;

          jclass FixedGapTermsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getFieldEnum_545426ea5d9b0f76] = env->getMethodID(cls, "getFieldEnum", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_supportsOrd_8454bd5aa23fd11e] = env->getMethodID(cls, "supportsOrd", "()Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedGapTermsIndexReader::FixedGapTermsIndexReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void FixedGapTermsIndexReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection FixedGapTermsIndexReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum FixedGapTermsIndexReader::getFieldEnum(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum(env->callObjectMethod(this$, mids$[mid_getFieldEnum_545426ea5d9b0f76], a0.this$));
          }

          jlong FixedGapTermsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jboolean FixedGapTermsIndexReader::supportsOrd() const
          {
            return env->callBooleanMethod(this$, mids$[mid_supportsOrd_8454bd5aa23fd11e]);
          }

          ::java::lang::String FixedGapTermsIndexReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_FixedGapTermsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedGapTermsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedGapTermsIndexReader_init_(t_FixedGapTermsIndexReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixedGapTermsIndexReader_close(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_getChildResources(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_getFieldEnum(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_ramBytesUsed(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_supportsOrd(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_toString(t_FixedGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexReader_get__childResources(t_FixedGapTermsIndexReader *self, void *data);
          static PyGetSetDef t_FixedGapTermsIndexReader__fields_[] = {
            DECLARE_GET_FIELD(t_FixedGapTermsIndexReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FixedGapTermsIndexReader__methods_[] = {
            DECLARE_METHOD(t_FixedGapTermsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, close, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, getFieldEnum, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, supportsOrd, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixedGapTermsIndexReader)[] = {
            { Py_tp_methods, t_FixedGapTermsIndexReader__methods_ },
            { Py_tp_init, (void *) t_FixedGapTermsIndexReader_init_ },
            { Py_tp_getset, t_FixedGapTermsIndexReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixedGapTermsIndexReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase),
            NULL
          };

          DEFINE_TYPE(FixedGapTermsIndexReader, t_FixedGapTermsIndexReader, FixedGapTermsIndexReader);

          void t_FixedGapTermsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedGapTermsIndexReader), &PY_TYPE_DEF(FixedGapTermsIndexReader), module, "FixedGapTermsIndexReader", 0);
          }

          void t_FixedGapTermsIndexReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexReader), "class_", make_descriptor(FixedGapTermsIndexReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexReader), "wrapfn_", make_descriptor(t_FixedGapTermsIndexReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedGapTermsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedGapTermsIndexReader::initializeClass, 1)))
              return NULL;
            return t_FixedGapTermsIndexReader::wrap_Object(FixedGapTermsIndexReader(((t_FixedGapTermsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_FixedGapTermsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedGapTermsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedGapTermsIndexReader_init_(t_FixedGapTermsIndexReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            FixedGapTermsIndexReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = FixedGapTermsIndexReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixedGapTermsIndexReader_close(t_FixedGapTermsIndexReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_getChildResources(t_FixedGapTermsIndexReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_getFieldEnum(t_FixedGapTermsIndexReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFieldEnum(a0));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexReaderBase$FieldIndexEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "getFieldEnum", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_ramBytesUsed(t_FixedGapTermsIndexReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_supportsOrd(t_FixedGapTermsIndexReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.supportsOrd());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "supportsOrd", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_toString(t_FixedGapTermsIndexReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexReader_get__childResources(t_FixedGapTermsIndexReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SegmentCacheable.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SegmentCacheable::class$ = NULL;
        jmethodID *SegmentCacheable::mids$ = NULL;
        bool SegmentCacheable::live$ = false;

        jclass SegmentCacheable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SegmentCacheable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SegmentCacheable::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SegmentCacheable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCacheable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCacheable_isCacheable(t_SegmentCacheable *self, PyObject *arg);

        static PyMethodDef t_SegmentCacheable__methods_[] = {
          DECLARE_METHOD(t_SegmentCacheable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCacheable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCacheable, isCacheable, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentCacheable)[] = {
          { Py_tp_methods, t_SegmentCacheable__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentCacheable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentCacheable, t_SegmentCacheable, SegmentCacheable);

        void t_SegmentCacheable::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCacheable), &PY_TYPE_DEF(SegmentCacheable), module, "SegmentCacheable", 0);
        }

        void t_SegmentCacheable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCacheable), "class_", make_descriptor(SegmentCacheable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCacheable), "wrapfn_", make_descriptor(t_SegmentCacheable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCacheable), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCacheable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCacheable::initializeClass, 1)))
            return NULL;
          return t_SegmentCacheable::wrap_Object(SegmentCacheable(((t_SegmentCacheable *) arg)->object.this$));
        }
        static PyObject *t_SegmentCacheable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCacheable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentCacheable_isCacheable(t_SegmentCacheable *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.isCacheable(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isCacheable", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToChildBlockJoinQuery::class$ = NULL;
          jmethodID *ToChildBlockJoinQuery::mids$ = NULL;
          bool ToChildBlockJoinQuery::live$ = false;

          jclass ToChildBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToChildBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_570ed6ee157f8f57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/join/BitSetProducer;)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getParentQuery_cbf839a480265450] = env->getMethodID(cls, "getParentQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToChildBlockJoinQuery::ToChildBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::join::BitSetProducer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_570ed6ee157f8f57, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight ToChildBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean ToChildBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::getParentQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getParentQuery_cbf839a480265450]));
          }

          jint ToChildBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String ToChildBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void ToChildBlockJoinQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_getParentQuery(t_ToChildBlockJoinQuery *self);
          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_visit(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_get__parentQuery(t_ToChildBlockJoinQuery *self, void *data);
          static PyGetSetDef t_ToChildBlockJoinQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ToChildBlockJoinQuery, parentQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToChildBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToChildBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, getParentQuery, METH_NOARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ToChildBlockJoinQuery)[] = {
            { Py_tp_methods, t_ToChildBlockJoinQuery__methods_ },
            { Py_tp_init, (void *) t_ToChildBlockJoinQuery_init_ },
            { Py_tp_getset, t_ToChildBlockJoinQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ToChildBlockJoinQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(ToChildBlockJoinQuery, t_ToChildBlockJoinQuery, ToChildBlockJoinQuery);

          void t_ToChildBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToChildBlockJoinQuery), &PY_TYPE_DEF(ToChildBlockJoinQuery), module, "ToChildBlockJoinQuery", 0);
          }

          void t_ToChildBlockJoinQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToChildBlockJoinQuery), "class_", make_descriptor(ToChildBlockJoinQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToChildBlockJoinQuery), "wrapfn_", make_descriptor(t_ToChildBlockJoinQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToChildBlockJoinQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToChildBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToChildBlockJoinQuery::wrap_Object(ToChildBlockJoinQuery(((t_ToChildBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToChildBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::join::BitSetProducer a1((jobject) NULL);
            ToChildBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = ToChildBlockJoinQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_getParentQuery(t_ToChildBlockJoinQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getParentQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_visit(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_get__parentQuery(t_ToChildBlockJoinQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getParentQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/SerializableObject.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygon.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/SerializableObject.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/util/BitSet.h"
#include "java/io/OutputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/ClassNotFoundException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "java/util/List.h"
#include "org/apache/lucene/spatial3d/geom/PlanetObject.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *SerializableObject::class$ = NULL;
          jmethodID *SerializableObject::mids$ = NULL;
          bool SerializableObject::live$ = false;

          jclass SerializableObject::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/SerializableObject");

              mids$ = new jmethodID[max_mid];
              mids$[mid_readBitSet_0b0f48d82746c736] = env->getStaticMethodID(cls, "readBitSet", "(Ljava/io/InputStream;)Ljava/util/BitSet;");
              mids$[mid_readBoolean_174f501a36e0b663] = env->getStaticMethodID(cls, "readBoolean", "(Ljava/io/InputStream;)Z");
              mids$[mid_readByteArray_1e5a62b02501f06d] = env->getStaticMethodID(cls, "readByteArray", "(Ljava/io/InputStream;)[B");
              mids$[mid_readClass_ef62a600991e43bd] = env->getStaticMethodID(cls, "readClass", "(Ljava/io/InputStream;)Ljava/lang/Class;");
              mids$[mid_readDouble_2fea61274f3a2c28] = env->getStaticMethodID(cls, "readDouble", "(Ljava/io/InputStream;)D");
              mids$[mid_readHeterogeneousArray_cc849cdca62e7a25] = env->getStaticMethodID(cls, "readHeterogeneousArray", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;Ljava/lang/Class;)[Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readHomogeneousArray_cc849cdca62e7a25] = env->getStaticMethodID(cls, "readHomogeneousArray", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;Ljava/lang/Class;)[Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readInt_238ab6568bf802e8] = env->getStaticMethodID(cls, "readInt", "(Ljava/io/InputStream;)I");
              mids$[mid_readLong_4635c00839a53804] = env->getStaticMethodID(cls, "readLong", "(Ljava/io/InputStream;)J");
              mids$[mid_readObject_91245c21bc491db3] = env->getStaticMethodID(cls, "readObject", "(Ljava/io/InputStream;)Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readObject_beb512d869766a25] = env->getStaticMethodID(cls, "readObject", "(Ljava/io/InputStream;Ljava/lang/Class;)Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readObject_df4cf569a60ba1b7] = env->getStaticMethodID(cls, "readObject", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readObject_99386bb5f6628f84] = env->getStaticMethodID(cls, "readObject", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;Ljava/lang/Class;)Lorg/apache/lucene/spatial3d/geom/SerializableObject;");
              mids$[mid_readPlanetObject_7e4d2b748ae24498] = env->getStaticMethodID(cls, "readPlanetObject", "(Ljava/io/InputStream;)Lorg/apache/lucene/spatial3d/geom/PlanetObject;");
              mids$[mid_readPointArray_c92c47102483364e] = env->getStaticMethodID(cls, "readPointArray", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_readPolygonArray_693a293f10e8b8c7] = env->getStaticMethodID(cls, "readPolygonArray", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)[Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_readString_82e414c2ccc532cd] = env->getStaticMethodID(cls, "readString", "(Ljava/io/InputStream;)Ljava/lang/String;");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");
              mids$[mid_writeBitSet_0586b80d101de9e0] = env->getStaticMethodID(cls, "writeBitSet", "(Ljava/io/OutputStream;Ljava/util/BitSet;)V");
              mids$[mid_writeBoolean_539208f3c661c2fc] = env->getStaticMethodID(cls, "writeBoolean", "(Ljava/io/OutputStream;Z)V");
              mids$[mid_writeByteArray_be3725db4052f0a4] = env->getStaticMethodID(cls, "writeByteArray", "(Ljava/io/OutputStream;[B)V");
              mids$[mid_writeClass_c0354757aee1501b] = env->getStaticMethodID(cls, "writeClass", "(Ljava/io/OutputStream;Ljava/lang/Class;)V");
              mids$[mid_writeDouble_37b773dbba3d78da] = env->getStaticMethodID(cls, "writeDouble", "(Ljava/io/OutputStream;D)V");
              mids$[mid_writeHeterogeneousArray_fda835f21ab66bb9] = env->getStaticMethodID(cls, "writeHeterogeneousArray", "(Ljava/io/OutputStream;[Lorg/apache/lucene/spatial3d/geom/SerializableObject;)V");
              mids$[mid_writeHeterogeneousArray_dc6833459c818724] = env->getStaticMethodID(cls, "writeHeterogeneousArray", "(Ljava/io/OutputStream;Ljava/util/List;)V");
              mids$[mid_writeHomogeneousArray_fda835f21ab66bb9] = env->getStaticMethodID(cls, "writeHomogeneousArray", "(Ljava/io/OutputStream;[Lorg/apache/lucene/spatial3d/geom/SerializableObject;)V");
              mids$[mid_writeHomogeneousArray_dc6833459c818724] = env->getStaticMethodID(cls, "writeHomogeneousArray", "(Ljava/io/OutputStream;Ljava/util/List;)V");
              mids$[mid_writeInt_9cd1b2cc4dc7e1cb] = env->getStaticMethodID(cls, "writeInt", "(Ljava/io/OutputStream;I)V");
              mids$[mid_writeLong_1e076dc5666c86cb] = env->getStaticMethodID(cls, "writeLong", "(Ljava/io/OutputStream;J)V");
              mids$[mid_writeObject_378abe38aa989628] = env->getStaticMethodID(cls, "writeObject", "(Ljava/io/OutputStream;Lorg/apache/lucene/spatial3d/geom/SerializableObject;)V");
              mids$[mid_writePlanetObject_58582ecdd610a7b3] = env->getStaticMethodID(cls, "writePlanetObject", "(Ljava/io/OutputStream;Lorg/apache/lucene/spatial3d/geom/PlanetObject;)V");
              mids$[mid_writePointArray_f0ee9647bd699b23] = env->getStaticMethodID(cls, "writePointArray", "(Ljava/io/OutputStream;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;)V");
              mids$[mid_writePointArray_dc6833459c818724] = env->getStaticMethodID(cls, "writePointArray", "(Ljava/io/OutputStream;Ljava/util/List;)V");
              mids$[mid_writePolygonArray_d64a78ff4bf6bbd4] = env->getStaticMethodID(cls, "writePolygonArray", "(Ljava/io/OutputStream;[Lorg/apache/lucene/spatial3d/geom/GeoPolygon;)V");
              mids$[mid_writePolygonArray_dc6833459c818724] = env->getStaticMethodID(cls, "writePolygonArray", "(Ljava/io/OutputStream;Ljava/util/List;)V");
              mids$[mid_writeString_6769bfc075198100] = env->getStaticMethodID(cls, "writeString", "(Ljava/io/OutputStream;Ljava/lang/String;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::BitSet SerializableObject::readBitSet(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::BitSet(env->callStaticObjectMethod(cls, mids$[mid_readBitSet_0b0f48d82746c736], a0.this$));
          }

          jboolean SerializableObject::readBoolean(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_readBoolean_174f501a36e0b663], a0.this$);
          }

          JArray< jbyte > SerializableObject::readByteArray(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_readByteArray_1e5a62b02501f06d], a0.this$));
          }

          ::java::lang::Class SerializableObject::readClass(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_readClass_ef62a600991e43bd], a0.this$));
          }

          jdouble SerializableObject::readDouble(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_readDouble_2fea61274f3a2c28], a0.this$);
          }

          JArray< SerializableObject > SerializableObject::readHeterogeneousArray(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1, const ::java::lang::Class & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SerializableObject >(env->callStaticObjectMethod(cls, mids$[mid_readHeterogeneousArray_cc849cdca62e7a25], a0.this$, a1.this$, a2.this$));
          }

          JArray< SerializableObject > SerializableObject::readHomogeneousArray(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1, const ::java::lang::Class & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SerializableObject >(env->callStaticObjectMethod(cls, mids$[mid_readHomogeneousArray_cc849cdca62e7a25], a0.this$, a1.this$, a2.this$));
          }

          jint SerializableObject::readInt(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_readInt_238ab6568bf802e8], a0.this$);
          }

          jlong SerializableObject::readLong(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_readLong_4635c00839a53804], a0.this$);
          }

          SerializableObject SerializableObject::readObject(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SerializableObject(env->callStaticObjectMethod(cls, mids$[mid_readObject_91245c21bc491db3], a0.this$));
          }

          SerializableObject SerializableObject::readObject(const ::java::io::InputStream & a0, const ::java::lang::Class & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return SerializableObject(env->callStaticObjectMethod(cls, mids$[mid_readObject_beb512d869766a25], a0.this$, a1.this$));
          }

          SerializableObject SerializableObject::readObject(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return SerializableObject(env->callStaticObjectMethod(cls, mids$[mid_readObject_df4cf569a60ba1b7], a0.this$, a1.this$));
          }

          SerializableObject SerializableObject::readObject(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1, const ::java::lang::Class & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return SerializableObject(env->callStaticObjectMethod(cls, mids$[mid_readObject_99386bb5f6628f84], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::PlanetObject SerializableObject::readPlanetObject(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::PlanetObject(env->callStaticObjectMethod(cls, mids$[mid_readPlanetObject_7e4d2b748ae24498], a0.this$));
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > SerializableObject::readPointArray(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callStaticObjectMethod(cls, mids$[mid_readPointArray_c92c47102483364e], a0.this$, a1.this$));
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPolygon > SerializableObject::readPolygonArray(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPolygon >(env->callStaticObjectMethod(cls, mids$[mid_readPolygonArray_693a293f10e8b8c7], a0.this$, a1.this$));
          }

          ::java::lang::String SerializableObject::readString(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_readString_82e414c2ccc532cd], a0.this$));
          }

          void SerializableObject::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }

          void SerializableObject::writeBitSet(const ::java::io::OutputStream & a0, const ::java::util::BitSet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeBitSet_0586b80d101de9e0], a0.this$, a1.this$);
          }

          void SerializableObject::writeBoolean(const ::java::io::OutputStream & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeBoolean_539208f3c661c2fc], a0.this$, a1);
          }

          void SerializableObject::writeByteArray(const ::java::io::OutputStream & a0, const JArray< jbyte > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeByteArray_be3725db4052f0a4], a0.this$, a1.this$);
          }

          void SerializableObject::writeClass(const ::java::io::OutputStream & a0, const ::java::lang::Class & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeClass_c0354757aee1501b], a0.this$, a1.this$);
          }

          void SerializableObject::writeDouble(const ::java::io::OutputStream & a0, jdouble a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeDouble_37b773dbba3d78da], a0.this$, a1);
          }

          void SerializableObject::writeHeterogeneousArray(const ::java::io::OutputStream & a0, const JArray< SerializableObject > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeHeterogeneousArray_fda835f21ab66bb9], a0.this$, a1.this$);
          }

          void SerializableObject::writeHeterogeneousArray(const ::java::io::OutputStream & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeHeterogeneousArray_dc6833459c818724], a0.this$, a1.this$);
          }

          void SerializableObject::writeHomogeneousArray(const ::java::io::OutputStream & a0, const JArray< SerializableObject > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeHomogeneousArray_fda835f21ab66bb9], a0.this$, a1.this$);
          }

          void SerializableObject::writeHomogeneousArray(const ::java::io::OutputStream & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeHomogeneousArray_dc6833459c818724], a0.this$, a1.this$);
          }

          void SerializableObject::writeInt(const ::java::io::OutputStream & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeInt_9cd1b2cc4dc7e1cb], a0.this$, a1);
          }

          void SerializableObject::writeLong(const ::java::io::OutputStream & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeLong_1e076dc5666c86cb], a0.this$, a1);
          }

          void SerializableObject::writeObject(const ::java::io::OutputStream & a0, const SerializableObject & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeObject_378abe38aa989628], a0.this$, a1.this$);
          }

          void SerializableObject::writePlanetObject(const ::java::io::OutputStream & a0, const ::org::apache::lucene::spatial3d::geom::PlanetObject & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writePlanetObject_58582ecdd610a7b3], a0.this$, a1.this$);
          }

          void SerializableObject::writePointArray(const ::java::io::OutputStream & a0, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writePointArray_f0ee9647bd699b23], a0.this$, a1.this$);
          }

          void SerializableObject::writePointArray(const ::java::io::OutputStream & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writePointArray_dc6833459c818724], a0.this$, a1.this$);
          }

          void SerializableObject::writePolygonArray(const ::java::io::OutputStream & a0, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPolygon > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writePolygonArray_d64a78ff4bf6bbd4], a0.this$, a1.this$);
          }

          void SerializableObject::writePolygonArray(const ::java::io::OutputStream & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writePolygonArray_dc6833459c818724], a0.this$, a1.this$);
          }

          void SerializableObject::writeString(const ::java::io::OutputStream & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_writeString_6769bfc075198100], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_SerializableObject_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readBitSet(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readBoolean(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readByteArray(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readDouble(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readHeterogeneousArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_readHomogeneousArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_readInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readObject(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_readPlanetObject(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_readPointArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_readPolygonArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_readString(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerializableObject_write(t_SerializableObject *self, PyObject *arg);
          static PyObject *t_SerializableObject_writeBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeBoolean(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeByteArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeClass(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeDouble(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeHeterogeneousArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeHomogeneousArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeLong(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeObject(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writePlanetObject(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writePointArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writePolygonArray(PyTypeObject *type, PyObject *args);
          static PyObject *t_SerializableObject_writeString(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SerializableObject__methods_[] = {
            DECLARE_METHOD(t_SerializableObject, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readBitSet, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readBoolean, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readByteArray, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readDouble, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readHeterogeneousArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readHomogeneousArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readObject, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readPlanetObject, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readPointArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readPolygonArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, readString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, write, METH_O),
            DECLARE_METHOD(t_SerializableObject, writeBitSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeBoolean, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeByteArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeClass, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeDouble, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeHeterogeneousArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeHomogeneousArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeLong, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeObject, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writePlanetObject, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writePointArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writePolygonArray, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SerializableObject, writeString, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SerializableObject)[] = {
            { Py_tp_methods, t_SerializableObject__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SerializableObject)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SerializableObject, t_SerializableObject, SerializableObject);

          void t_SerializableObject::install(PyObject *module)
          {
            installType(&PY_TYPE(SerializableObject), &PY_TYPE_DEF(SerializableObject), module, "SerializableObject", 0);
          }

          void t_SerializableObject::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerializableObject), "class_", make_descriptor(SerializableObject::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerializableObject), "wrapfn_", make_descriptor(t_SerializableObject::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerializableObject), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SerializableObject_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SerializableObject::initializeClass, 1)))
              return NULL;
            return t_SerializableObject::wrap_Object(SerializableObject(((t_SerializableObject *) arg)->object.this$));
          }
          static PyObject *t_SerializableObject_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SerializableObject::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SerializableObject_readBitSet(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::java::util::BitSet result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readBitSet(a0));
              return ::java::util::t_BitSet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readBitSet", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readBoolean(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readBoolean(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "readBoolean", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readByteArray(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            JArray< jbyte > result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readByteArray(a0));
              return result.wrap();
            }

            PyErr_SetArgsError(type, "readByteArray", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readClass", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readDouble(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readDouble(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "readDouble", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readHeterogeneousArray(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::Class a2((jobject) NULL);
            PyTypeObject **p2;
            JArray< SerializableObject > result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readHeterogeneousArray(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(t_SerializableObject::wrap_jobject);
            }

            PyErr_SetArgsError(type, "readHeterogeneousArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_readHomogeneousArray(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::Class a2((jobject) NULL);
            PyTypeObject **p2;
            JArray< SerializableObject > result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readHomogeneousArray(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(t_SerializableObject::wrap_jobject);
            }

            PyErr_SetArgsError(type, "readHomogeneousArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_readInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readInt(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "readInt", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readLong(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "readLong", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readObject(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                SerializableObject result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readObject(a0));
                  return t_SerializableObject::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                SerializableObject result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readObject(a0, a1));
                  return t_SerializableObject::wrap_Object(result);
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::Class a1((jobject) NULL);
                PyTypeObject **p1;
                SerializableObject result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readObject(a0, a1));
                  return t_SerializableObject::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                ::java::lang::Class a2((jobject) NULL);
                PyTypeObject **p2;
                SerializableObject result((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readObject(a0, a1, a2));
                  return t_SerializableObject::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "readObject", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_readPlanetObject(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::PlanetObject result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readPlanetObject(a0));
              return ::org::apache::lucene::spatial3d::geom::t_PlanetObject::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readPlanetObject", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_readPointArray(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readPointArray(a0, a1));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError(type, "readPointArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_readPolygonArray(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPolygon > result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readPolygonArray(a0, a1));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_jobject);
            }

            PyErr_SetArgsError(type, "readPolygonArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_readString(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SerializableObject::readString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "readString", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_write(t_SerializableObject *self, PyObject *arg)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", arg);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeBitSet(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            ::java::util::BitSet a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::java::io::OutputStream::initializeClass, ::java::util::BitSet::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeBitSet(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeBitSet", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeBoolean(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            jboolean a1;

            if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeBoolean(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeBoolean", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeByteArray(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            JArray< jbyte > a1((jobject) NULL);

            if (!parseArgs(args, "k[B", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeByteArray(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeByteArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeClass(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::java::io::OutputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeClass(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeClass", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeDouble(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            jdouble a1;

            if (!parseArgs(args, "kD", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeDouble(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeDouble", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeHeterogeneousArray(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::OutputStream a0((jobject) NULL);
                JArray< SerializableObject > a1((jobject) NULL);

                if (!parseArgs(args, "k[k", ::java::io::OutputStream::initializeClass, SerializableObject::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeHeterogeneousArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "kK", ::java::io::OutputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeHeterogeneousArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "writeHeterogeneousArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeHomogeneousArray(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::OutputStream a0((jobject) NULL);
                JArray< SerializableObject > a1((jobject) NULL);

                if (!parseArgs(args, "k[k", ::java::io::OutputStream::initializeClass, SerializableObject::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeHomogeneousArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "kK", ::java::io::OutputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeHomogeneousArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "writeHomogeneousArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeInt(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeInt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeInt", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeLong(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeLong", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeObject(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            SerializableObject a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::java::io::OutputStream::initializeClass, SerializableObject::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeObject(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeObject", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writePlanetObject(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::PlanetObject a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::java::io::OutputStream::initializeClass, ::org::apache::lucene::spatial3d::geom::PlanetObject::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writePlanetObject(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writePlanetObject", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writePointArray(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::OutputStream a0((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a1((jobject) NULL);

                if (!parseArgs(args, "k[k", ::java::io::OutputStream::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writePointArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "kK", ::java::io::OutputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writePointArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "writePointArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writePolygonArray(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::OutputStream a0((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::GeoPolygon > a1((jobject) NULL);

                if (!parseArgs(args, "k[k", ::java::io::OutputStream::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPolygon::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writePolygonArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "kK", ::java::io::OutputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writePolygonArray(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "writePolygonArray", args);
            return NULL;
          }

          static PyObject *t_SerializableObject_writeString(PyTypeObject *type, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ks", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::spatial3d::geom::SerializableObject::writeString(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "writeString", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterSortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterSortedSetDocValues::class$ = NULL;
        jmethodID *FilterSortedSetDocValues::mids$ = NULL;
        bool FilterSortedSetDocValues::live$ = false;

        jclass FilterSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4cc6ae2b32787221] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SortedSetDocValues;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getValueCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_intersect_2452e24ae7d5129f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_lookupOrd_9a5ffc0686333682] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_6f6ee5bba7f22d4c] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextOrd_2e5ae9edcb9b072f] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_termsEnum_3f9a21827903a65f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterSortedSetDocValues::FilterSortedSetDocValues(const ::org::apache::lucene::index::SortedSetDocValues & a0) : ::org::apache::lucene::index::SortedSetDocValues(env->newObject(initializeClass, &mids$, mid_init$_4cc6ae2b32787221, a0.this$)) {}

        jint FilterSortedSetDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean FilterSortedSetDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong FilterSortedSetDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterSortedSetDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jlong FilterSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::TermsEnum FilterSortedSetDocValues::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_2452e24ae7d5129f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef FilterSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9a5ffc0686333682], a0));
        }

        jlong FilterSortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_6f6ee5bba7f22d4c], a0.this$);
        }

        jint FilterSortedSetDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jlong FilterSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::TermsEnum FilterSortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_3f9a21827903a65f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterSortedSetDocValues_init_(t_FilterSortedSetDocValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterSortedSetDocValues_advance(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_advanceExact(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_cost(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_docID(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_getValueCount(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_intersect(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_lookupOrd(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_lookupTerm(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_nextDoc(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_nextOrd(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_termsEnum(t_FilterSortedSetDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedSetDocValues_get__valueCount(t_FilterSortedSetDocValues *self, void *data);
        static PyGetSetDef t_FilterSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_FilterSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_FilterSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, intersect, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, nextOrd, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedSetDocValues, termsEnum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterSortedSetDocValues)[] = {
          { Py_tp_methods, t_FilterSortedSetDocValues__methods_ },
          { Py_tp_init, (void *) t_FilterSortedSetDocValues_init_ },
          { Py_tp_getset, t_FilterSortedSetDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterSortedSetDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortedSetDocValues),
          NULL
        };

        DEFINE_TYPE(FilterSortedSetDocValues, t_FilterSortedSetDocValues, FilterSortedSetDocValues);

        void t_FilterSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterSortedSetDocValues), &PY_TYPE_DEF(FilterSortedSetDocValues), module, "FilterSortedSetDocValues", 0);
        }

        void t_FilterSortedSetDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedSetDocValues), "class_", make_descriptor(FilterSortedSetDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedSetDocValues), "wrapfn_", make_descriptor(t_FilterSortedSetDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedSetDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_FilterSortedSetDocValues::wrap_Object(FilterSortedSetDocValues(((t_FilterSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_FilterSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterSortedSetDocValues_init_(t_FilterSortedSetDocValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
          FilterSortedSetDocValues object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
          {
            INT_CALL(object = FilterSortedSetDocValues(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterSortedSetDocValues_advance(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_advanceExact(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_cost(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_docID(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_getValueCount(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_intersect(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersect(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_lookupOrd(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_lookupTerm(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "lookupTerm", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_nextDoc(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_nextOrd(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_termsEnum(t_FilterSortedSetDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termsEnum());
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedSetDocValues), (PyObject *) self, "termsEnum", args, 2);
        }

        static PyObject *t_FilterSortedSetDocValues_get__valueCount(t_FilterSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet::class$ = NULL;
        jmethodID *FixedBitSet::mids$ = NULL;
        bool FixedBitSet::live$ = false;

        jclass FixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_495563b8763b4788] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_9aa9e9f85a8b0554] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNot_9aa9e9f85a8b0554] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNotCount_0264c760e1a59b7f] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_asReadOnlyBits_ad87da2b626b21cf] = env->getMethodID(cls, "asReadOnlyBits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_1e143afe1894d213] = env->getStaticMethodID(cls, "bits2words", "(I)I");
            mids$[mid_cardinality_9972fcc56b44e79d] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_040c4cd0390c5aff] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_438c62480c481c65] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_db8ef277f046a30b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_copyOf_40dc352c96ebe19b] = env->getStaticMethodID(cls, "copyOf", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_ensureCapacity_079aa8706e605b14] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/FixedBitSet;I)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_040c4cd0390c5aff] = env->getMethodID(cls, "flip", "(I)V");
            mids$[mid_flip_438c62480c481c65] = env->getMethodID(cls, "flip", "(II)V");
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndClear_a1d30e1ee40c89a2] = env->getMethodID(cls, "getAndClear", "(I)Z");
            mids$[mid_getAndSet_a1d30e1ee40c89a2] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBits_d09b715a1c5ddffd] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersectionCount_0264c760e1a59b7f] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_intersects_b8a305e8775ee2da] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/FixedBitSet;)Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_1e143afe1894d213] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_9aa9e9f85a8b0554] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_or_da04cf8efc6499af] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_1e143afe1894d213] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_scanIsEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "scanIsEmpty", "()Z");
            mids$[mid_set_040c4cd0390c5aff] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_set_438c62480c481c65] = env->getMethodID(cls, "set", "(II)V");
            mids$[mid_unionCount_0264c760e1a59b7f] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_xor_9aa9e9f85a8b0554] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_xor_da04cf8efc6499af] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet::FixedBitSet(jint a0) : ::org::apache::lucene::util::BitSet(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        FixedBitSet::FixedBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::util::BitSet(env->newObject(initializeClass, &mids$, mid_init$_495563b8763b4788, a0.this$, a1)) {}

        void FixedBitSet::and$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_9aa9e9f85a8b0554], a0.this$);
        }

        void FixedBitSet::andNot(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_9aa9e9f85a8b0554], a0.this$);
        }

        jlong FixedBitSet::andNotCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_0264c760e1a59b7f], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits FixedBitSet::asReadOnlyBits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_asReadOnlyBits_ad87da2b626b21cf]));
        }

        jint FixedBitSet::bits2words(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_1e143afe1894d213], a0);
        }

        jint FixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_9972fcc56b44e79d]);
        }

        void FixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_040c4cd0390c5aff], a0);
        }

        void FixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_438c62480c481c65], a0, a1);
        }

        FixedBitSet FixedBitSet::clone() const
        {
          return FixedBitSet(env->callObjectMethod(this$, mids$[mid_clone_db8ef277f046a30b]));
        }

        FixedBitSet FixedBitSet::copyOf(const ::org::apache::lucene::util::Bits & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_copyOf_40dc352c96ebe19b], a0.this$));
        }

        FixedBitSet FixedBitSet::ensureCapacity(const FixedBitSet & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_079aa8706e605b14], a0.this$, a1));
        }

        jboolean FixedBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void FixedBitSet::flip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_040c4cd0390c5aff], a0);
        }

        void FixedBitSet::flip(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_438c62480c481c65], a0, a1);
        }

        jboolean FixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        jboolean FixedBitSet::getAndClear(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_a1d30e1ee40c89a2], a0);
        }

        jboolean FixedBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_a1d30e1ee40c89a2], a0);
        }

        JArray< jlong > FixedBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_d09b715a1c5ddffd]));
        }

        jint FixedBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong FixedBitSet::intersectionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_0264c760e1a59b7f], a0.this$, a1.this$);
        }

        jboolean FixedBitSet::intersects(const FixedBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_b8a305e8775ee2da], a0.this$);
        }

        jint FixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        jint FixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_1e143afe1894d213], a0);
        }

        void FixedBitSet::or$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_9aa9e9f85a8b0554], a0.this$);
        }

        void FixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_da04cf8efc6499af], a0.this$);
        }

        jint FixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_1e143afe1894d213], a0);
        }

        jlong FixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        jboolean FixedBitSet::scanIsEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scanIsEmpty_8454bd5aa23fd11e]);
        }

        void FixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_040c4cd0390c5aff], a0);
        }

        void FixedBitSet::set(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_438c62480c481c65], a0, a1);
        }

        jlong FixedBitSet::unionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_0264c760e1a59b7f], a0.this$, a1.this$);
        }

        void FixedBitSet::xor$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_9aa9e9f85a8b0554], a0.this$);
        }

        void FixedBitSet::xor$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_da04cf8efc6499af], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_asReadOnlyBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_copyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_scanIsEmpty(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get__bits(t_FixedBitSet *self, void *data);
        static PyGetSetDef t_FixedBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_FixedBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FixedBitSet__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, and, METH_O),
          DECLARE_METHOD(t_FixedBitSet, andNot, METH_O),
          DECLARE_METHOD(t_FixedBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, asReadOnlyBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, cardinality, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, copyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, intersects, METH_O),
          DECLARE_METHOD(t_FixedBitSet, length, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, scanIsEmpty, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, xor, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FixedBitSet)[] = {
          { Py_tp_methods, t_FixedBitSet__methods_ },
          { Py_tp_init, (void *) t_FixedBitSet_init_ },
          { Py_tp_getset, t_FixedBitSet__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FixedBitSet)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::BitSet),
          NULL
        };

        DEFINE_TYPE(FixedBitSet, t_FixedBitSet, FixedBitSet);

        void t_FixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet), &PY_TYPE_DEF(FixedBitSet), module, "FixedBitSet", 0);
        }

        void t_FixedBitSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FixedBitSet), "class_", make_descriptor(FixedBitSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FixedBitSet), "wrapfn_", make_descriptor(t_FixedBitSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FixedBitSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet::wrap_Object(FixedBitSet(((t_FixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = FixedBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = FixedBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_asReadOnlyBits(t_FixedBitSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.asReadOnlyBits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::bits2words(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cardinality());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "cardinality", args, 2);
        }

        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self)
        {
          FixedBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_FixedBitSet::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_copyOf(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          FixedBitSet result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::copyOf(a0));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "copyOf", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          jint a1;
          FixedBitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::ensureCapacity(a0, a1));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "nextSetBit", args, 2);
        }

        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "or", args, 2);
        }

        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "prevSetBit", args, 2);
        }

        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FixedBitSet_scanIsEmpty(t_FixedBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scanIsEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FixedBitSet), (PyObject *) self, "set", args, 2);
        }

        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "xor", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get__bits(t_FixedBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IllegalStateException::class$ = NULL;
    jmethodID *IllegalStateException::mids$ = NULL;
    bool IllegalStateException::live$ = false;

    jclass IllegalStateException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IllegalStateException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IllegalStateException::IllegalStateException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IllegalStateException__methods_[] = {
      DECLARE_METHOD(t_IllegalStateException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IllegalStateException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(IllegalStateException)[] = {
      { Py_tp_methods, t_IllegalStateException__methods_ },
      { Py_tp_init, (void *) t_IllegalStateException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(IllegalStateException)[] = {
      &PY_TYPE_DEF(::java::lang::RuntimeException),
      NULL
    };

    DEFINE_TYPE(IllegalStateException, t_IllegalStateException, IllegalStateException);

    void t_IllegalStateException::install(PyObject *module)
    {
      installType(&PY_TYPE(IllegalStateException), &PY_TYPE_DEF(IllegalStateException), module, "IllegalStateException", 0);
    }

    void t_IllegalStateException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(IllegalStateException), "class_", make_descriptor(IllegalStateException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IllegalStateException), "wrapfn_", make_descriptor(t_IllegalStateException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IllegalStateException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IllegalStateException::initializeClass, 1)))
        return NULL;
      return t_IllegalStateException::wrap_Object(IllegalStateException(((t_IllegalStateException *) arg)->object.this$));
    }
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IllegalStateException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IllegalStateException object((jobject) NULL);

          INT_CALL(object = IllegalStateException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IllegalStateException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryVisitor::class$ = NULL;
        jmethodID *QueryVisitor::mids$ = NULL;
        bool QueryVisitor::live$ = false;
        QueryVisitor *QueryVisitor::EMPTY_VISITOR = NULL;

        jclass QueryVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptField_145b2d0af0c06b93] = env->getMethodID(cls, "acceptField", "(Ljava/lang/String;)Z");
            mids$[mid_consumeTerms_b8d9a943ea313dc0] = env->getMethodID(cls, "consumeTerms", "(Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_consumeTermsMatching_6fac7d3ec9ed559a] = env->getMethodID(cls, "consumeTermsMatching", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/util/function/Supplier;)V");
            mids$[mid_getSubVisitor_cc768c513df0dad5] = env->getMethodID(cls, "getSubVisitor", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/QueryVisitor;");
            mids$[mid_termCollector_67121dca9fbd194e] = env->getStaticMethodID(cls, "termCollector", "(Ljava/util/Set;)Lorg/apache/lucene/search/QueryVisitor;");
            mids$[mid_visitLeaf_ede25bb9d48237ac] = env->getMethodID(cls, "visitLeaf", "(Lorg/apache/lucene/search/Query;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_VISITOR = new QueryVisitor(env->getStaticObjectField(cls, "EMPTY_VISITOR", "Lorg/apache/lucene/search/QueryVisitor;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryVisitor::QueryVisitor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean QueryVisitor::acceptField(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptField_145b2d0af0c06b93], a0.this$);
        }

        void QueryVisitor::consumeTerms(const ::org::apache::lucene::search::Query & a0, const JArray< ::org::apache::lucene::index::Term > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_consumeTerms_b8d9a943ea313dc0], a0.this$, a1.this$);
        }

        void QueryVisitor::consumeTermsMatching(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::util::function::Supplier & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_consumeTermsMatching_6fac7d3ec9ed559a], a0.this$, a1.this$, a2.this$);
        }

        QueryVisitor QueryVisitor::getSubVisitor(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          return QueryVisitor(env->callObjectMethod(this$, mids$[mid_getSubVisitor_cc768c513df0dad5], a0.this$, a1.this$));
        }

        QueryVisitor QueryVisitor::termCollector(const ::java::util::Set & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return QueryVisitor(env->callStaticObjectMethod(cls, mids$[mid_termCollector_67121dca9fbd194e], a0.this$));
        }

        void QueryVisitor::visitLeaf(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visitLeaf_ede25bb9d48237ac], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryVisitor_init_(t_QueryVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryVisitor_acceptField(t_QueryVisitor *self, PyObject *arg);
        static PyObject *t_QueryVisitor_consumeTerms(t_QueryVisitor *self, PyObject *args);
        static PyObject *t_QueryVisitor_consumeTermsMatching(t_QueryVisitor *self, PyObject *args);
        static PyObject *t_QueryVisitor_getSubVisitor(t_QueryVisitor *self, PyObject *args);
        static PyObject *t_QueryVisitor_termCollector(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryVisitor_visitLeaf(t_QueryVisitor *self, PyObject *arg);

        static PyMethodDef t_QueryVisitor__methods_[] = {
          DECLARE_METHOD(t_QueryVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryVisitor, acceptField, METH_O),
          DECLARE_METHOD(t_QueryVisitor, consumeTerms, METH_VARARGS),
          DECLARE_METHOD(t_QueryVisitor, consumeTermsMatching, METH_VARARGS),
          DECLARE_METHOD(t_QueryVisitor, getSubVisitor, METH_VARARGS),
          DECLARE_METHOD(t_QueryVisitor, termCollector, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryVisitor, visitLeaf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryVisitor)[] = {
          { Py_tp_methods, t_QueryVisitor__methods_ },
          { Py_tp_init, (void *) t_QueryVisitor_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryVisitor)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryVisitor, t_QueryVisitor, QueryVisitor);

        void t_QueryVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryVisitor), &PY_TYPE_DEF(QueryVisitor), module, "QueryVisitor", 0);
        }

        void t_QueryVisitor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryVisitor), "class_", make_descriptor(QueryVisitor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryVisitor), "wrapfn_", make_descriptor(t_QueryVisitor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryVisitor), "boxfn_", make_descriptor(boxObject));
          env->getClass(QueryVisitor::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryVisitor), "EMPTY_VISITOR", make_descriptor(t_QueryVisitor::wrap_Object(*QueryVisitor::EMPTY_VISITOR)));
        }

        static PyObject *t_QueryVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryVisitor::initializeClass, 1)))
            return NULL;
          return t_QueryVisitor::wrap_Object(QueryVisitor(((t_QueryVisitor *) arg)->object.this$));
        }
        static PyObject *t_QueryVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryVisitor_init_(t_QueryVisitor *self, PyObject *args, PyObject *kwds)
        {
          QueryVisitor object((jobject) NULL);

          INT_CALL(object = QueryVisitor());
          self->object = object;

          return 0;
        }

        static PyObject *t_QueryVisitor_acceptField(t_QueryVisitor *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.acceptField(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acceptField", arg);
          return NULL;
        }

        static PyObject *t_QueryVisitor_consumeTerms(t_QueryVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a1((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.consumeTerms(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "consumeTerms", args);
          return NULL;
        }

        static PyObject *t_QueryVisitor_consumeTermsMatching(t_QueryVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::util::function::Supplier a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "ksK", ::org::apache::lucene::search::Query::initializeClass, ::java::util::function::Supplier::initializeClass, &a0, &a1, &a2, &p2, ::java::util::function::t_Supplier::parameters_))
          {
            OBJ_CALL(self->object.consumeTermsMatching(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "consumeTermsMatching", args);
          return NULL;
        }

        static PyObject *t_QueryVisitor_getSubVisitor(t_QueryVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          QueryVisitor result((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1))
          {
            OBJ_CALL(result = self->object.getSubVisitor(a0, a1));
            return t_QueryVisitor::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSubVisitor", args);
          return NULL;
        }

        static PyObject *t_QueryVisitor_termCollector(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          QueryVisitor result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryVisitor::termCollector(a0));
            return t_QueryVisitor::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "termCollector", arg);
          return NULL;
        }

        static PyObject *t_QueryVisitor_visitLeaf(t_QueryVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visitLeaf(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitLeaf", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternKeywordMarkerFilter::class$ = NULL;
          jmethodID *PatternKeywordMarkerFilter::mids$ = NULL;
          bool PatternKeywordMarkerFilter::live$ = false;

          jclass PatternKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b590dbc211a93745] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;)V");
              mids$[mid_isKeyword_8454bd5aa23fd11e] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternKeywordMarkerFilter::PatternKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_b590dbc211a93745, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PatternKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternKeywordMarkerFilter)[] = {
            { Py_tp_methods, t_PatternKeywordMarkerFilter__methods_ },
            { Py_tp_init, (void *) t_PatternKeywordMarkerFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternKeywordMarkerFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter),
            NULL
          };

          DEFINE_TYPE(PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter, PatternKeywordMarkerFilter);

          void t_PatternKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternKeywordMarkerFilter), &PY_TYPE_DEF(PatternKeywordMarkerFilter), module, "PatternKeywordMarkerFilter", 0);
          }

          void t_PatternKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternKeywordMarkerFilter), "class_", make_descriptor(PatternKeywordMarkerFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternKeywordMarkerFilter), "wrapfn_", make_descriptor(t_PatternKeywordMarkerFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternKeywordMarkerFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_PatternKeywordMarkerFilter::wrap_Object(PatternKeywordMarkerFilter(((t_PatternKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            PatternKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/DiffIt.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *DiffIt::class$ = NULL;
      jmethodID *DiffIt::mids$ = NULL;
      bool DiffIt::live$ = false;

      jclass DiffIt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/DiffIt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void DiffIt::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_DiffIt__methods_[] = {
        DECLARE_METHOD(t_DiffIt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(DiffIt)[] = {
        { Py_tp_methods, t_DiffIt__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(DiffIt)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(DiffIt, t_DiffIt, DiffIt);

      void t_DiffIt::install(PyObject *module)
      {
        installType(&PY_TYPE(DiffIt), &PY_TYPE_DEF(DiffIt), module, "DiffIt", 0);
      }

      void t_DiffIt::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(DiffIt), "class_", make_descriptor(DiffIt::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(DiffIt), "wrapfn_", make_descriptor(t_DiffIt::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(DiffIt), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiffIt::initializeClass, 1)))
          return NULL;
        return t_DiffIt::wrap_Object(DiffIt(((t_DiffIt *) arg)->object.this$));
      }
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiffIt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::DiffIt::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermAutomatonQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermAutomatonQuery::class$ = NULL;
        jmethodID *TermAutomatonQuery::mids$ = NULL;
        bool TermAutomatonQuery::live$ = false;

        jclass TermAutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermAutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_addAnyTransition_438c62480c481c65] = env->getMethodID(cls, "addAnyTransition", "(II)V");
            mids$[mid_addTransition_e63620654f69bef5] = env->getMethodID(cls, "addTransition", "(IILjava/lang/String;)V");
            mids$[mid_addTransition_bdfb6546ac213635] = env->getMethodID(cls, "addTransition", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_createState_9972fcc56b44e79d] = env->getMethodID(cls, "createState", "()I");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
            mids$[mid_finish_040c4cd0390c5aff] = env->getMethodID(cls, "finish", "(I)V");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setAccept_b8f283cdbda5c964] = env->getMethodID(cls, "setAccept", "(IZ)V");
            mids$[mid_toDot_db9b55ba01e03e4b] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermAutomatonQuery::TermAutomatonQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        void TermAutomatonQuery::addAnyTransition(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addAnyTransition_438c62480c481c65], a0, a1);
        }

        void TermAutomatonQuery::addTransition(jint a0, jint a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addTransition_e63620654f69bef5], a0, a1, a2.this$);
        }

        void TermAutomatonQuery::addTransition(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addTransition_bdfb6546ac213635], a0, a1, a2.this$);
        }

        jint TermAutomatonQuery::createState() const
        {
          return env->callIntMethod(this$, mids$[mid_createState_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Weight TermAutomatonQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean TermAutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void TermAutomatonQuery::finish() const
        {
          env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
        }

        void TermAutomatonQuery::finish(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_040c4cd0390c5aff], a0);
        }

        jint TermAutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong TermAutomatonQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::search::Query TermAutomatonQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        void TermAutomatonQuery::setAccept(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setAccept_b8f283cdbda5c964], a0, a1);
        }

        ::java::lang::String TermAutomatonQuery::toDot() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_db9b55ba01e03e4b]));
        }

        ::java::lang::String TermAutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void TermAutomatonQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermAutomatonQuery_init_(t_TermAutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermAutomatonQuery_addAnyTransition(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_addTransition(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_createState(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_createWeight(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_equals(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_finish(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_hashCode(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_ramBytesUsed(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_rewrite(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_setAccept(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_toDot(t_TermAutomatonQuery *self);
        static PyObject *t_TermAutomatonQuery_toString(t_TermAutomatonQuery *self, PyObject *args);
        static PyObject *t_TermAutomatonQuery_visit(t_TermAutomatonQuery *self, PyObject *args);

        static PyMethodDef t_TermAutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_TermAutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermAutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermAutomatonQuery, addAnyTransition, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, addTransition, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, createState, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, setAccept, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, toDot, METH_NOARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_TermAutomatonQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermAutomatonQuery)[] = {
          { Py_tp_methods, t_TermAutomatonQuery__methods_ },
          { Py_tp_init, (void *) t_TermAutomatonQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermAutomatonQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(TermAutomatonQuery, t_TermAutomatonQuery, TermAutomatonQuery);

        void t_TermAutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermAutomatonQuery), &PY_TYPE_DEF(TermAutomatonQuery), module, "TermAutomatonQuery", 0);
        }

        void t_TermAutomatonQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermAutomatonQuery), "class_", make_descriptor(TermAutomatonQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermAutomatonQuery), "wrapfn_", make_descriptor(t_TermAutomatonQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermAutomatonQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermAutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_TermAutomatonQuery::wrap_Object(TermAutomatonQuery(((t_TermAutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_TermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermAutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermAutomatonQuery_init_(t_TermAutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          TermAutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = TermAutomatonQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermAutomatonQuery_addAnyTransition(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.addAnyTransition(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAnyTransition", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_addTransition(t_TermAutomatonQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addTransition(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addTransition(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addTransition", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_createState(t_TermAutomatonQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.createState());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TermAutomatonQuery_createWeight(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_equals(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_finish(t_TermAutomatonQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.finish());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.finish(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_hashCode(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_ramBytesUsed(t_TermAutomatonQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermAutomatonQuery_rewrite(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_setAccept(t_TermAutomatonQuery *self, PyObject *args)
        {
          jint a0;
          jboolean a1;

          if (!parseArgs(args, "IZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setAccept(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAccept", args);
          return NULL;
        }

        static PyObject *t_TermAutomatonQuery_toDot(t_TermAutomatonQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toDot());
          return j2p(result);
        }

        static PyObject *t_TermAutomatonQuery_toString(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermAutomatonQuery_visit(t_TermAutomatonQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TermAutomatonQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader::class$ = NULL;
        jmethodID *IndexReader::mids$ = NULL;
        bool IndexReader::live$ = false;

        jclass IndexReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decRef_f2cc1bce94666404] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_docFreq_d7008d5a6820eefc] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_ee5990b4c3dd7dcd] = env->getMethodID(cls, "document", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_document_e39e052dfc96e56b] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getContext_f9451e8f83eb5b68] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_getDocCount_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getRefCount_9972fcc56b44e79d] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_getSumDocFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVector_1bb595a580fb0404] = env->getMethodID(cls, "getTermVector", "(ILjava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_hasDeletions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_incRef_f2cc1bce94666404] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_leaves_49ec78390f08338a] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_registerParentReader_9c5103ca988341a1] = env->getMethodID(cls, "registerParentReader", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_totalTermFreq_4edac0e8611d73f1] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_tryIncRef_8454bd5aa23fd11e] = env->getMethodID(cls, "tryIncRef", "()Z");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void IndexReader::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_f2cc1bce94666404]);
        }

        jint IndexReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_d7008d5a6820eefc], a0.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_ee5990b4c3dd7dcd], a0));
        }

        void IndexReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_e39e052dfc96e56b], a0, a1.this$));
        }

        jboolean IndexReader::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::index::IndexReaderContext IndexReader::getContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_f9451e8f83eb5b68]));
        }

        jint IndexReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_a5a7d1128e9e2bb7], a0.this$);
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper IndexReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        jint IndexReader::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_9972fcc56b44e79d]);
        }

        jlong IndexReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_b1e05207ec98e246], a0.this$);
        }

        jlong IndexReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_b1e05207ec98e246], a0.this$);
        }

        ::org::apache::lucene::index::Terms IndexReader::getTermVector(jint a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVector_1bb595a580fb0404], a0, a1.this$));
        }

        ::org::apache::lucene::index::Fields IndexReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
        }

        jboolean IndexReader::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_8454bd5aa23fd11e]);
        }

        jint IndexReader::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        void IndexReader::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_f2cc1bce94666404]);
        }

        ::java::util::List IndexReader::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_49ec78390f08338a]));
        }

        jint IndexReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint IndexReader::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_9972fcc56b44e79d]);
        }

        jint IndexReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        void IndexReader::registerParentReader(const IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_registerParentReader_9c5103ca988341a1], a0.this$);
        }

        jlong IndexReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_4edac0e8611d73f1], a0.this$);
        }

        jboolean IndexReader::tryIncRef() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryIncRef_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexReader$ClosedListener.h"
#include "org/apache/lucene/index/IndexReader$CacheKey.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_close(t_IndexReader *self);
        static PyObject *t_IndexReader_decRef(t_IndexReader *self);
        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getContext(t_IndexReader *self);
        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getReaderCacheHelper(t_IndexReader *self);
        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self);
        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self);
        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_incRef(t_IndexReader *self);
        static PyObject *t_IndexReader_leaves(t_IndexReader *self);
        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self);
        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_numDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self);
        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__readerCacheHelper(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data);
        static PyGetSetDef t_IndexReader__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader, context),
          DECLARE_GET_FIELD(t_IndexReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_IndexReader, refCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader__methods_[] = {
          DECLARE_METHOD(t_IndexReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, decRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, docFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getDocCount, METH_O),
          DECLARE_METHOD(t_IndexReader, getReaderCacheHelper, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getSumDocFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getSumTotalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getTermVector, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getTermVectors, METH_O),
          DECLARE_METHOD(t_IndexReader, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, incRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, registerParentReader, METH_O),
          DECLARE_METHOD(t_IndexReader, totalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, tryIncRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexReader)[] = {
          { Py_tp_methods, t_IndexReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexReader, t_IndexReader, IndexReader);

        void t_IndexReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader), &PY_TYPE_DEF(IndexReader), module, "IndexReader", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "ClosedListener", make_descriptor(&PY_TYPE_DEF(IndexReader$ClosedListener)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "CacheKey", make_descriptor(&PY_TYPE_DEF(IndexReader$CacheKey)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "CacheHelper", make_descriptor(&PY_TYPE_DEF(IndexReader$CacheHelper)));
        }

        void t_IndexReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "class_", make_descriptor(IndexReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "wrapfn_", make_descriptor(t_IndexReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader::initializeClass, 1)))
            return NULL;
          return t_IndexReader::wrap_Object(IndexReader(((t_IndexReader *) arg)->object.this$));
        }
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader_close(t_IndexReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_decRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.document(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.document(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.document(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndexReader), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexReader_getContext(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocCount", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getReaderCacheHelper(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);
          OBJ_CALL(result = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumDocFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumTotalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "Is", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getTermVector(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVector", args);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVectors", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexReader), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexReader_incRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_leaves(t_IndexReader *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(LeafReaderContext));
        }

        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg)
        {
          IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.registerParentReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "registerParentReader", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tryIncRef());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__readerCacheHelper(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilter::class$ = NULL;
          jmethodID *LimitTokenCountFilter::mids$ = NULL;
          bool LimitTokenCountFilter::live$ = false;

          jclass LimitTokenCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_66cff404b0168626] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_66cff404b0168626, a0.this$, a1, a2)) {}

          jboolean LimitTokenCountFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void LimitTokenCountFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args);
          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenCountFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenCountFilter)[] = {
            { Py_tp_methods, t_LimitTokenCountFilter__methods_ },
            { Py_tp_init, (void *) t_LimitTokenCountFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenCountFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(LimitTokenCountFilter, t_LimitTokenCountFilter, LimitTokenCountFilter);

          void t_LimitTokenCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilter), &PY_TYPE_DEF(LimitTokenCountFilter), module, "LimitTokenCountFilter", 0);
          }

          void t_LimitTokenCountFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilter), "class_", make_descriptor(LimitTokenCountFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilter), "wrapfn_", make_descriptor(t_LimitTokenCountFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilter::wrap_Object(LimitTokenCountFilter(((t_LimitTokenCountFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StringHelper::class$ = NULL;
        jmethodID *StringHelper::mids$ = NULL;
        bool StringHelper::live$ = false;
        jint StringHelper::GOOD_FAST_HASH_SEED = (jint) 0;
        jint StringHelper::ID_LENGTH = (jint) 0;

        jclass StringHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StringHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bytesDifference_f465493e4f3be174] = env->getStaticMethodID(cls, "bytesDifference", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_endsWith_b7af11e6f81980b6] = env->getStaticMethodID(cls, "endsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_idToString_724cde42c4d4b340] = env->getStaticMethodID(cls, "idToString", "([B)Ljava/lang/String;");
            mids$[mid_intsRefToBytesRef_887f798643eedba4] = env->getStaticMethodID(cls, "intsRefToBytesRef", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_murmurhash3_x86_32_9f7425bab85cd786] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "(Lorg/apache/lucene/util/BytesRef;I)I");
            mids$[mid_murmurhash3_x86_32_f28ba127c1c46b31] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "([BIII)I");
            mids$[mid_randomId_cf386cdb1bbd339f] = env->getStaticMethodID(cls, "randomId", "()[B");
            mids$[mid_sortKeyLength_f465493e4f3be174] = env->getStaticMethodID(cls, "sortKeyLength", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_startsWith_49c9de354ba24a5d] = env->getStaticMethodID(cls, "startsWith", "([BLorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_startsWith_b7af11e6f81980b6] = env->getStaticMethodID(cls, "startsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            GOOD_FAST_HASH_SEED = env->getStaticIntField(cls, "GOOD_FAST_HASH_SEED");
            ID_LENGTH = env->getStaticIntField(cls, "ID_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint StringHelper::bytesDifference(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bytesDifference_f465493e4f3be174], a0.this$, a1.this$);
        }

        jboolean StringHelper::endsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_b7af11e6f81980b6], a0.this$, a1.this$);
        }

        ::java::lang::String StringHelper::idToString(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_idToString_724cde42c4d4b340], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef StringHelper::intsRefToBytesRef(const ::org::apache::lucene::util::IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intsRefToBytesRef_887f798643eedba4], a0.this$));
        }

        jint StringHelper::murmurhash3_x86_32(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_9f7425bab85cd786], a0.this$, a1);
        }

        jint StringHelper::murmurhash3_x86_32(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_f28ba127c1c46b31], a0.this$, a1, a2, a3);
        }

        JArray< jbyte > StringHelper::randomId()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_randomId_cf386cdb1bbd339f]));
        }

        jint StringHelper::sortKeyLength(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortKeyLength_f465493e4f3be174], a0.this$, a1.this$);
        }

        jboolean StringHelper::startsWith(const JArray< jbyte > & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_49c9de354ba24a5d], a0.this$, a1.this$);
        }

        jboolean StringHelper::startsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_b7af11e6f81980b6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_idToString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_intsRefToBytesRef(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_randomId(PyTypeObject *type);
        static PyObject *t_StringHelper_sortKeyLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_StringHelper__methods_[] = {
          DECLARE_METHOD(t_StringHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, bytesDifference, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, endsWith, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, idToString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, intsRefToBytesRef, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, murmurhash3_x86_32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, randomId, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, sortKeyLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, startsWith, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StringHelper)[] = {
          { Py_tp_methods, t_StringHelper__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StringHelper)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StringHelper, t_StringHelper, StringHelper);

        void t_StringHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(StringHelper), &PY_TYPE_DEF(StringHelper), module, "StringHelper", 0);
        }

        void t_StringHelper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringHelper), "class_", make_descriptor(StringHelper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringHelper), "wrapfn_", make_descriptor(t_StringHelper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringHelper), "boxfn_", make_descriptor(boxObject));
          env->getClass(StringHelper::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringHelper), "GOOD_FAST_HASH_SEED", make_descriptor(StringHelper::GOOD_FAST_HASH_SEED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringHelper), "ID_LENGTH", make_descriptor(StringHelper::ID_LENGTH));
        }

        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringHelper::initializeClass, 1)))
            return NULL;
          return t_StringHelper::wrap_Object(StringHelper(((t_StringHelper *) arg)->object.this$));
        }
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::bytesDifference(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bytesDifference", args);
          return NULL;
        }

        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::endsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "endsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_idToString(PyTypeObject *type, PyObject *arg)
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "[B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::idToString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "idToString", arg);
          return NULL;
        }

        static PyObject *t_StringHelper_intsRefToBytesRef(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::intsRefToBytesRef(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "intsRefToBytesRef", arg);
          return NULL;
        }

        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1));
                return PyLong_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "murmurhash3_x86_32", args);
          return NULL;
        }

        static PyObject *t_StringHelper_randomId(PyTypeObject *type)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::randomId());
          return result.wrap();
        }

        static PyObject *t_StringHelper_sortKeyLength(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::sortKeyLength(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortKeyLength", args);
          return NULL;
        }

        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "[Bk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "startsWith", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator::class$ = NULL;
        jmethodID *FieldComparator::mids$ = NULL;
        bool FieldComparator::live$ = false;

        jclass FieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareValues_9dae63203ae747af] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_disableSkipping_f2cc1bce94666404] = env->getMethodID(cls, "disableSkipping", "()V");
            mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_setSingleSort_f2cc1bce94666404] = env->getMethodID(cls, "setSingleSort", "()V");
            mids$[mid_setTopValue_d20f626183f72f7d] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_b15c79acb15c2870] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator::FieldComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint FieldComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
        }

        jint FieldComparator::compareValues(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_9dae63203ae747af], a0.this$, a1.this$);
        }

        void FieldComparator::disableSkipping() const
        {
          env->callVoidMethod(this$, mids$[mid_disableSkipping_f2cc1bce94666404]);
        }

        ::org::apache::lucene::search::LeafFieldComparator FieldComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
        }

        void FieldComparator::setSingleSort() const
        {
          env->callVoidMethod(this$, mids$[mid_setSingleSort_f2cc1bce94666404]);
        }

        void FieldComparator::setTopValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_d20f626183f72f7d], a0.this$);
        }

        ::java::lang::Object FieldComparator::value(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_b15c79acb15c2870], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args);
        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args);
        static PyObject *t_FieldComparator_disableSkipping(t_FieldComparator *self);
        static PyObject *t_FieldComparator_getLeafComparator(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_setSingleSort(t_FieldComparator *self);
        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg);
        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data);
        static PyGetSetDef t_FieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator, disableSkipping, METH_NOARGS),
          DECLARE_METHOD(t_FieldComparator, getLeafComparator, METH_O),
          DECLARE_METHOD(t_FieldComparator, setSingleSort, METH_NOARGS),
          DECLARE_METHOD(t_FieldComparator, setTopValue, METH_O),
          DECLARE_METHOD(t_FieldComparator, value, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldComparator)[] = {
          { Py_tp_methods, t_FieldComparator__methods_ },
          { Py_tp_init, (void *) t_FieldComparator_init_ },
          { Py_tp_getset, t_FieldComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldComparator, t_FieldComparator, FieldComparator);
        PyObject *t_FieldComparator::wrap_Object(const FieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator *self = (t_FieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator), &PY_TYPE_DEF(FieldComparator), module, "FieldComparator", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "TermValComparator", make_descriptor(&PY_TYPE_DEF(FieldComparator$TermValComparator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "TermOrdValComparator", make_descriptor(&PY_TYPE_DEF(FieldComparator$TermOrdValComparator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "RelevanceComparator", make_descriptor(&PY_TYPE_DEF(FieldComparator$RelevanceComparator)));
        }

        void t_FieldComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "class_", make_descriptor(FieldComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "wrapfn_", make_descriptor(t_FieldComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator::wrap_Object(FieldComparator(((t_FieldComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator_of_(t_FieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator_init_(t_FieldComparator *self, PyObject *args, PyObject *kwds)
        {
          FieldComparator object((jobject) NULL);

          INT_CALL(object = FieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparator_compare(t_FieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_compareValues(t_FieldComparator *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareValues", args);
          return NULL;
        }

        static PyObject *t_FieldComparator_disableSkipping(t_FieldComparator *self)
        {
          OBJ_CALL(self->object.disableSkipping());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldComparator_getLeafComparator(t_FieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafComparator(a0));
            return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafComparator", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_setSingleSort(t_FieldComparator *self)
        {
          OBJ_CALL(self->object.setSingleSort());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldComparator_setTopValue(t_FieldComparator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTopValue", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator_value(t_FieldComparator *self, PyObject *arg)
        {
          jint a0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return NULL;
        }
        static PyObject *t_FieldComparator_get__parameters_(t_FieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator_set__topValue(t_FieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/German2Stemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *German2Stemmer::class$ = NULL;
        jmethodID *German2Stemmer::mids$ = NULL;
        bool German2Stemmer::live$ = false;

        jclass German2Stemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/German2Stemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        German2Stemmer::German2Stemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean German2Stemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint German2Stemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean German2Stemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args);

        static PyMethodDef t_German2Stemmer__methods_[] = {
          DECLARE_METHOD(t_German2Stemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(German2Stemmer)[] = {
          { Py_tp_methods, t_German2Stemmer__methods_ },
          { Py_tp_init, (void *) t_German2Stemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(German2Stemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(German2Stemmer, t_German2Stemmer, German2Stemmer);

        void t_German2Stemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(German2Stemmer), &PY_TYPE_DEF(German2Stemmer), module, "German2Stemmer", 0);
        }

        void t_German2Stemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(German2Stemmer), "class_", make_descriptor(German2Stemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(German2Stemmer), "wrapfn_", make_descriptor(t_German2Stemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(German2Stemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, German2Stemmer::initializeClass, 1)))
            return NULL;
          return t_German2Stemmer::wrap_Object(German2Stemmer(((t_German2Stemmer *) arg)->object.this$));
        }
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, German2Stemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds)
        {
          German2Stemmer object((jobject) NULL);

          INT_CALL(object = German2Stemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(German2Stemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(German2Stemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(German2Stemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TermGroupSelector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TermGroupSelector::class$ = NULL;
          jmethodID *TermGroupSelector::mids$ = NULL;
          bool TermGroupSelector::live$ = false;

          jclass TermGroupSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TermGroupSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_advanceTo_ddaa3f14f8aeda7d] = env->getMethodID(cls, "advanceTo", "(I)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_copyValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "copyValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_currentValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "currentValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermGroupSelector::TermGroupSelector(const ::java::lang::String & a0) : ::org::apache::lucene::search::grouping::GroupSelector(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          ::org::apache::lucene::search::grouping::GroupSelector$State TermGroupSelector::advanceTo(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector$State(env->callObjectMethod(this$, mids$[mid_advanceTo_ddaa3f14f8aeda7d], a0));
          }

          ::org::apache::lucene::util::BytesRef TermGroupSelector::copyValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_copyValue_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef TermGroupSelector::currentValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_currentValue_7af2ea2e37ce82b8]));
          }

          void TermGroupSelector::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void TermGroupSelector::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void TermGroupSelector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TermGroupSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermGroupSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermGroupSelector_of_(t_TermGroupSelector *self, PyObject *args);
          static int t_TermGroupSelector_init_(t_TermGroupSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermGroupSelector_advanceTo(t_TermGroupSelector *self, PyObject *args);
          static PyObject *t_TermGroupSelector_copyValue(t_TermGroupSelector *self, PyObject *args);
          static PyObject *t_TermGroupSelector_currentValue(t_TermGroupSelector *self, PyObject *args);
          static PyObject *t_TermGroupSelector_setGroups(t_TermGroupSelector *self, PyObject *args);
          static PyObject *t_TermGroupSelector_setNextReader(t_TermGroupSelector *self, PyObject *args);
          static PyObject *t_TermGroupSelector_setScorer(t_TermGroupSelector *self, PyObject *args);
          static int t_TermGroupSelector_set__groups(t_TermGroupSelector *self, PyObject *arg, void *data);
          static int t_TermGroupSelector_set__nextReader(t_TermGroupSelector *self, PyObject *arg, void *data);
          static int t_TermGroupSelector_set__scorer(t_TermGroupSelector *self, PyObject *arg, void *data);
          static PyObject *t_TermGroupSelector_get__parameters_(t_TermGroupSelector *self, void *data);
          static PyGetSetDef t_TermGroupSelector__fields_[] = {
            DECLARE_SET_FIELD(t_TermGroupSelector, groups),
            DECLARE_SET_FIELD(t_TermGroupSelector, nextReader),
            DECLARE_SET_FIELD(t_TermGroupSelector, scorer),
            DECLARE_GET_FIELD(t_TermGroupSelector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermGroupSelector__methods_[] = {
            DECLARE_METHOD(t_TermGroupSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermGroupSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermGroupSelector, of_, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, advanceTo, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, copyValue, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, currentValue, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, setGroups, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_TermGroupSelector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermGroupSelector)[] = {
            { Py_tp_methods, t_TermGroupSelector__methods_ },
            { Py_tp_init, (void *) t_TermGroupSelector_init_ },
            { Py_tp_getset, t_TermGroupSelector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermGroupSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::GroupSelector),
            NULL
          };

          DEFINE_TYPE(TermGroupSelector, t_TermGroupSelector, TermGroupSelector);
          PyObject *t_TermGroupSelector::wrap_Object(const TermGroupSelector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TermGroupSelector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TermGroupSelector *self = (t_TermGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TermGroupSelector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TermGroupSelector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TermGroupSelector *self = (t_TermGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TermGroupSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(TermGroupSelector), &PY_TYPE_DEF(TermGroupSelector), module, "TermGroupSelector", 0);
          }

          void t_TermGroupSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupSelector), "class_", make_descriptor(TermGroupSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupSelector), "wrapfn_", make_descriptor(t_TermGroupSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermGroupSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermGroupSelector::initializeClass, 1)))
              return NULL;
            return t_TermGroupSelector::wrap_Object(TermGroupSelector(((t_TermGroupSelector *) arg)->object.this$));
          }
          static PyObject *t_TermGroupSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermGroupSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermGroupSelector_of_(t_TermGroupSelector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TermGroupSelector_init_(t_TermGroupSelector *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            TermGroupSelector object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = TermGroupSelector(a0));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::util::PY_TYPE(BytesRef);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermGroupSelector_advanceTo(t_TermGroupSelector *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::GroupSelector$State result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advanceTo(a0));
              return ::org::apache::lucene::search::grouping::t_GroupSelector$State::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "advanceTo", args, 2);
          }

          static PyObject *t_TermGroupSelector_copyValue(t_TermGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.copyValue());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "copyValue", args, 2);
          }

          static PyObject *t_TermGroupSelector_currentValue(t_TermGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.currentValue());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "currentValue", args, 2);
          }

          static PyObject *t_TermGroupSelector_setGroups(t_TermGroupSelector *self, PyObject *args)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "setGroups", args, 2);
          }

          static PyObject *t_TermGroupSelector_setNextReader(t_TermGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_TermGroupSelector_setScorer(t_TermGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermGroupSelector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_TermGroupSelector_get__parameters_(t_TermGroupSelector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_TermGroupSelector_set__groups(t_TermGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_TermGroupSelector_set__nextReader(t_TermGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_TermGroupSelector_set__scorer(t_TermGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonQueryParser::class$ = NULL;
          jmethodID *PythonQueryParser::mids$ = NULL;
          bool PythonQueryParser::live$ = false;

          jclass PythonQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_94838218118d13bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_f5d003a5f0f6b381] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_da5a988725940811] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_da5a988725940811] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_da5a988725940811] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_391b6230ae9c102d] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_94838218118d13bf, a0.this$)) {}

          PythonQueryParser::PythonQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}

          void PythonQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getBooleanQuery(const ::java::util::List & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_f5d003a5f0f6b381], a0.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_da5a988725940811], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_3a5baa20d223c529], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_da5a988725940811], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_3a5baa20d223c529], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getFuzzyQuery_391b6230ae9c102d], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getPrefixQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getRangeQuery_ee01989124e5cf67], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getWildcardQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
          }

          jlong PythonQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self);
          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *arg);
          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data);
          static PyGetSetDef t_PythonQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonQueryParser, getBooleanQuery, METH_O),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonQueryParser)[] = {
            { Py_tp_methods, t_PythonQueryParser__methods_ },
            { Py_tp_init, (void *) t_PythonQueryParser_init_ },
            { Py_tp_getset, t_PythonQueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::QueryParser),
            NULL
          };

          DEFINE_TYPE(PythonQueryParser, t_PythonQueryParser, PythonQueryParser);

          void t_PythonQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonQueryParser), &PY_TYPE_DEF(PythonQueryParser), module, "PythonQueryParser", 1);
          }

          void t_PythonQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonQueryParser), "class_", make_descriptor(PythonQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonQueryParser), "wrapfn_", make_descriptor(t_PythonQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonQueryParser), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonQueryParser::wrap_Object(PythonQueryParser(((t_PythonQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = PythonQueryParser(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PythonQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", arg);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Highlighter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Highlighter::class$ = NULL;
          jmethodID *Highlighter::mids$ = NULL;
          bool Highlighter::live$ = false;
          jint Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE = (jint) 0;

          jclass Highlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Highlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d66175d08cd0001f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_715f9fb56796387a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_888daa1f8d88ebe9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Encoder;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_getBestFragment_c0bd80aac67dd7ce] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragment_c4ce23f2101db7fc] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_2c596049afc6696a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestFragments_eb9171e7ca065395] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_a77855b70a411c39] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestTextFragments_8449e7d5b1418b9e] = env->getMethodID(cls, "getBestTextFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ZI)[Lorg/apache/lucene/search/highlight/TextFragment;");
              mids$[mid_getEncoder_a25b71e51060f28f] = env->getMethodID(cls, "getEncoder", "()Lorg/apache/lucene/search/highlight/Encoder;");
              mids$[mid_getFragmentScorer_c106b49ad9138f56] = env->getMethodID(cls, "getFragmentScorer", "()Lorg/apache/lucene/search/highlight/Scorer;");
              mids$[mid_getMaxDocCharsToAnalyze_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDocCharsToAnalyze", "()I");
              mids$[mid_getTextFragmenter_39f7ae30763bf762] = env->getMethodID(cls, "getTextFragmenter", "()Lorg/apache/lucene/search/highlight/Fragmenter;");
              mids$[mid_setEncoder_dcf269af48498608] = env->getMethodID(cls, "setEncoder", "(Lorg/apache/lucene/search/highlight/Encoder;)V");
              mids$[mid_setFragmentScorer_d66175d08cd0001f] = env->getMethodID(cls, "setFragmentScorer", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_setMaxDocCharsToAnalyze_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setTextFragmenter_d5d8ba1a2977b19f] = env->getMethodID(cls, "setTextFragmenter", "(Lorg/apache/lucene/search/highlight/Fragmenter;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_CHARS_TO_ANALYZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHARS_TO_ANALYZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d66175d08cd0001f, a0.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Scorer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_715f9fb56796387a, a0.this$, a1.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Encoder & a1, const ::org::apache::lucene::search::highlight::Scorer & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_888daa1f8d88ebe9, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_c0bd80aac67dd7ce], a0.this$, a1.this$));
          }

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_c4ce23f2101db7fc], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_2c596049afc6696a], a0.this$, a1.this$, a2));
          }

          ::java::lang::String Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragments_eb9171e7ca065395], a0.this$, a1.this$, a2, a3.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_a77855b70a411c39], a0.this$, a1.this$, a2.this$, a3));
          }

          JArray< ::org::apache::lucene::search::highlight::TextFragment > Highlighter::getBestTextFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jboolean a2, jint a3) const
          {
            return JArray< ::org::apache::lucene::search::highlight::TextFragment >(env->callObjectMethod(this$, mids$[mid_getBestTextFragments_8449e7d5b1418b9e], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::highlight::Encoder Highlighter::getEncoder() const
          {
            return ::org::apache::lucene::search::highlight::Encoder(env->callObjectMethod(this$, mids$[mid_getEncoder_a25b71e51060f28f]));
          }

          ::org::apache::lucene::search::highlight::Scorer Highlighter::getFragmentScorer() const
          {
            return ::org::apache::lucene::search::highlight::Scorer(env->callObjectMethod(this$, mids$[mid_getFragmentScorer_c106b49ad9138f56]));
          }

          jint Highlighter::getMaxDocCharsToAnalyze() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocCharsToAnalyze_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::highlight::Fragmenter Highlighter::getTextFragmenter() const
          {
            return ::org::apache::lucene::search::highlight::Fragmenter(env->callObjectMethod(this$, mids$[mid_getTextFragmenter_39f7ae30763bf762]));
          }

          void Highlighter::setEncoder(const ::org::apache::lucene::search::highlight::Encoder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEncoder_dcf269af48498608], a0.this$);
          }

          void Highlighter::setFragmentScorer(const ::org::apache::lucene::search::highlight::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentScorer_d66175d08cd0001f], a0.this$);
          }

          void Highlighter::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_040c4cd0390c5aff], a0);
          }

          void Highlighter::setTextFragmenter(const ::org::apache::lucene::search::highlight::Fragmenter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTextFragmenter_d5d8ba1a2977b19f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self);
          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self);
          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self);
          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self);
          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data);
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data);
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data);
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data);
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Highlighter__fields_[] = {
            DECLARE_GETSET_FIELD(t_Highlighter, encoder),
            DECLARE_GETSET_FIELD(t_Highlighter, fragmentScorer),
            DECLARE_GETSET_FIELD(t_Highlighter, maxDocCharsToAnalyze),
            DECLARE_GETSET_FIELD(t_Highlighter, textFragmenter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Highlighter__methods_[] = {
            DECLARE_METHOD(t_Highlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestTextFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getEncoder, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getFragmentScorer, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getMaxDocCharsToAnalyze, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getTextFragmenter, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, setEncoder, METH_O),
            DECLARE_METHOD(t_Highlighter, setFragmentScorer, METH_O),
            DECLARE_METHOD(t_Highlighter, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_Highlighter, setTextFragmenter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Highlighter)[] = {
            { Py_tp_methods, t_Highlighter__methods_ },
            { Py_tp_init, (void *) t_Highlighter_init_ },
            { Py_tp_getset, t_Highlighter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Highlighter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Highlighter, t_Highlighter, Highlighter);

          void t_Highlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(Highlighter), &PY_TYPE_DEF(Highlighter), module, "Highlighter", 0);
          }

          void t_Highlighter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Highlighter), "class_", make_descriptor(Highlighter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Highlighter), "wrapfn_", make_descriptor(t_Highlighter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Highlighter), "boxfn_", make_descriptor(boxObject));
            env->getClass(Highlighter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Highlighter), "DEFAULT_MAX_CHARS_TO_ANALYZE", make_descriptor(Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE));
          }

          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Highlighter::initializeClass, 1)))
              return NULL;
            return t_Highlighter::wrap_Object(Highlighter(((t_Highlighter *) arg)->object.this$));
          }
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Highlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
                {
                  INT_CALL(object = Highlighter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a1((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Highlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a1((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a2((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Highlighter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ksIs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kssI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            jint a3;
            JArray< ::org::apache::lucene::search::highlight::TextFragment > result((jobject) NULL);

            if (!parseArgs(args, "ksZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getBestTextFragments(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_TextFragment::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "getBestTextFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Encoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Scorer result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocCharsToAnalyze());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Fragmenter result((jobject) NULL);
            OBJ_CALL(result = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(result);
          }

          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Encoder a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setEncoder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEncoder", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFragmentScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentScorer", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Fragmenter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTextFragmenter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTextFragmenter", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(value);
          }
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &value))
              {
                INT_CALL(self->object.setEncoder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "encoder", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(value);
          }
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setFragmentScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentScorer", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocCharsToAnalyze());
            return PyLong_FromLong((long) value);
          }
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
            OBJ_CALL(value = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(value);
          }
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &value))
              {
                INT_CALL(self->object.setTextFragmenter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "textFragmenter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldableNode::class$ = NULL;
              jmethodID *FieldableNode::mids$ = NULL;
              bool FieldableNode::live$ = false;

              jclass FieldableNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence FieldableNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              void FieldableNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_getField(t_FieldableNode *self);
              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg);
              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data);
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldableNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldableNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldableNode__methods_[] = {
                DECLARE_METHOD(t_FieldableNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldableNode, setField, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldableNode)[] = {
                { Py_tp_methods, t_FieldableNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_FieldableNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldableNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode),
                NULL
              };

              DEFINE_TYPE(FieldableNode, t_FieldableNode, FieldableNode);

              void t_FieldableNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldableNode), &PY_TYPE_DEF(FieldableNode), module, "FieldableNode", 0);
              }

              void t_FieldableNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldableNode), "class_", make_descriptor(FieldableNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldableNode), "wrapfn_", make_descriptor(t_FieldableNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldableNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldableNode::initializeClass, 1)))
                  return NULL;
                return t_FieldableNode::wrap_Object(FieldableNode(((t_FieldableNode *) arg)->object.this$));
              }
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldableNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldableNode_getField(t_FieldableNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/QueryBitSetProducer.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BitSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *QueryBitSetProducer::class$ = NULL;
          jmethodID *QueryBitSetProducer::mids$ = NULL;
          bool QueryBitSetProducer::live$ = false;

          jclass QueryBitSetProducer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/QueryBitSetProducer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBitSet_bdf8e92f0f41af8b] = env->getMethodID(cls, "getBitSet", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/util/BitSet;");
              mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBitSetProducer::QueryBitSetProducer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

          jboolean QueryBitSetProducer::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::util::BitSet QueryBitSetProducer::getBitSet(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_bdf8e92f0f41af8b], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryBitSetProducer::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
          }

          jint QueryBitSetProducer::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String QueryBitSetProducer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_QueryBitSetProducer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBitSetProducer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBitSetProducer_init_(t_QueryBitSetProducer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBitSetProducer_equals(t_QueryBitSetProducer *self, PyObject *args);
          static PyObject *t_QueryBitSetProducer_getBitSet(t_QueryBitSetProducer *self, PyObject *arg);
          static PyObject *t_QueryBitSetProducer_getQuery(t_QueryBitSetProducer *self);
          static PyObject *t_QueryBitSetProducer_hashCode(t_QueryBitSetProducer *self, PyObject *args);
          static PyObject *t_QueryBitSetProducer_toString(t_QueryBitSetProducer *self, PyObject *args);
          static PyObject *t_QueryBitSetProducer_get__query(t_QueryBitSetProducer *self, void *data);
          static PyGetSetDef t_QueryBitSetProducer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryBitSetProducer, query),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryBitSetProducer__methods_[] = {
            DECLARE_METHOD(t_QueryBitSetProducer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBitSetProducer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBitSetProducer, equals, METH_VARARGS),
            DECLARE_METHOD(t_QueryBitSetProducer, getBitSet, METH_O),
            DECLARE_METHOD(t_QueryBitSetProducer, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryBitSetProducer, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_QueryBitSetProducer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryBitSetProducer)[] = {
            { Py_tp_methods, t_QueryBitSetProducer__methods_ },
            { Py_tp_init, (void *) t_QueryBitSetProducer_init_ },
            { Py_tp_getset, t_QueryBitSetProducer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryBitSetProducer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryBitSetProducer, t_QueryBitSetProducer, QueryBitSetProducer);

          void t_QueryBitSetProducer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBitSetProducer), &PY_TYPE_DEF(QueryBitSetProducer), module, "QueryBitSetProducer", 0);
          }

          void t_QueryBitSetProducer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBitSetProducer), "class_", make_descriptor(QueryBitSetProducer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBitSetProducer), "wrapfn_", make_descriptor(t_QueryBitSetProducer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBitSetProducer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBitSetProducer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBitSetProducer::initializeClass, 1)))
              return NULL;
            return t_QueryBitSetProducer::wrap_Object(QueryBitSetProducer(((t_QueryBitSetProducer *) arg)->object.this$));
          }
          static PyObject *t_QueryBitSetProducer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBitSetProducer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBitSetProducer_init_(t_QueryBitSetProducer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            QueryBitSetProducer object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              INT_CALL(object = QueryBitSetProducer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryBitSetProducer_equals(t_QueryBitSetProducer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(QueryBitSetProducer), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_QueryBitSetProducer_getBitSet(t_QueryBitSetProducer *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::BitSet result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getBitSet(a0));
              return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBitSet", arg);
            return NULL;
          }

          static PyObject *t_QueryBitSetProducer_getQuery(t_QueryBitSetProducer *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_QueryBitSetProducer_hashCode(t_QueryBitSetProducer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(QueryBitSetProducer), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_QueryBitSetProducer_toString(t_QueryBitSetProducer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(QueryBitSetProducer), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_QueryBitSetProducer_get__query(t_QueryBitSetProducer *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Term::class$ = NULL;
        jmethodID *Term::mids$ = NULL;
        bool Term::live$ = false;

        jclass Term::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Term");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_63a59e248b245c2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_830844d7efc99ffe] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_bytes_7af2ea2e37ce82b8] = env->getMethodID(cls, "bytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_d7008d5a6820eefc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_db9b55ba01e03e4b] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_text_db9b55ba01e03e4b] = env->getMethodID(cls, "text", "()Ljava/lang/String;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_2b6942d1baf39302] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Term::Term(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63a59e248b245c2c, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRefBuilder & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_830844d7efc99ffe, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef Term::bytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_bytes_7af2ea2e37ce82b8]));
        }

        jint Term::compareTo(const Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_d7008d5a6820eefc], a0.this$);
        }

        jboolean Term::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String Term::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_db9b55ba01e03e4b]));
        }

        jint Term::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong Term::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String Term::text() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_text_db9b55ba01e03e4b]));
        }

        ::java::lang::String Term::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String Term::toString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_2b6942d1baf39302], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Term_bytes(t_Term *self);
        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg);
        static PyObject *t_Term_equals(t_Term *self, PyObject *args);
        static PyObject *t_Term_field(t_Term *self);
        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args);
        static PyObject *t_Term_ramBytesUsed(t_Term *self);
        static PyObject *t_Term_text(t_Term *self);
        static PyObject *t_Term_toString(t_Term *self, PyObject *args);
        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Term__methods_[] = {
          DECLARE_METHOD(t_Term, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, bytes, METH_NOARGS),
          DECLARE_METHOD(t_Term, compareTo, METH_O),
          DECLARE_METHOD(t_Term, equals, METH_VARARGS),
          DECLARE_METHOD(t_Term, field, METH_NOARGS),
          DECLARE_METHOD(t_Term, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Term, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_Term, text, METH_NOARGS),
          DECLARE_METHOD(t_Term, toString, METH_VARARGS),
          DECLARE_METHOD(t_Term, toString_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Term)[] = {
          { Py_tp_methods, t_Term__methods_ },
          { Py_tp_init, (void *) t_Term_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Term)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Term, t_Term, Term);

        void t_Term::install(PyObject *module)
        {
          installType(&PY_TYPE(Term), &PY_TYPE_DEF(Term), module, "Term", 0);
        }

        void t_Term::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Term), "class_", make_descriptor(Term::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Term), "wrapfn_", make_descriptor(t_Term::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Term), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Term::initializeClass, 1)))
            return NULL;
          return t_Term::wrap_Object(Term(((t_Term *) arg)->object.this$));
        }
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Term::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = Term(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Term_bytes(t_Term *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg)
        {
          Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_Term_equals(t_Term *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Term), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Term_field(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Term), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Term_ramBytesUsed(t_Term *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Term_text(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.text());
          return j2p(result);
        }

        static PyObject *t_Term_toString(t_Term *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Term), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::Term::toString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toString_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$IndexSortStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$IndexSortStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$IndexSortStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$IndexSortStatus::fids$ = NULL;
        bool CheckIndex$Status$IndexSortStatus::live$ = false;

        jclass CheckIndex$Status$IndexSortStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$IndexSortStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$IndexSortStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$IndexSortStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$IndexSortStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$IndexSortStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$IndexSortStatus_get__error(t_CheckIndex$Status$IndexSortStatus *self, void *data);
        static int t_CheckIndex$Status$IndexSortStatus_set__error(t_CheckIndex$Status$IndexSortStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$IndexSortStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$IndexSortStatus, error),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$IndexSortStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$IndexSortStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$IndexSortStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$IndexSortStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$IndexSortStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$IndexSortStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$IndexSortStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$IndexSortStatus, t_CheckIndex$Status$IndexSortStatus, CheckIndex$Status$IndexSortStatus);

        void t_CheckIndex$Status$IndexSortStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$IndexSortStatus), &PY_TYPE_DEF(CheckIndex$Status$IndexSortStatus), module, "CheckIndex$Status$IndexSortStatus", 0);
        }

        void t_CheckIndex$Status$IndexSortStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$IndexSortStatus), "class_", make_descriptor(CheckIndex$Status$IndexSortStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$IndexSortStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$IndexSortStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$IndexSortStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$IndexSortStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$IndexSortStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$IndexSortStatus::wrap_Object(CheckIndex$Status$IndexSortStatus(((t_CheckIndex$Status$IndexSortStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$IndexSortStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$IndexSortStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$IndexSortStatus_get__error(t_CheckIndex$Status$IndexSortStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$IndexSortStatus_set__error(t_CheckIndex$Status$IndexSortStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels$FacetLabelReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetLabels$FacetLabelReader::class$ = NULL;
          jmethodID *TaxonomyFacetLabels$FacetLabelReader::mids$ = NULL;
          bool TaxonomyFacetLabels$FacetLabelReader::live$ = false;

          jclass TaxonomyFacetLabels$FacetLabelReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels$FacetLabelReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6c1a15f495a79435] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyFacetLabels;Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_nextFacetLabel_2f8d8c81610d6b29] = env->getMethodID(cls, "nextFacetLabel", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_nextFacetLabel_8bd600daa42cf8ee] = env->getMethodID(cls, "nextFacetLabel", "(ILjava/lang/String;)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetLabels$FacetLabelReader::TaxonomyFacetLabels$FacetLabelReader(const ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels & a0, const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a1, const ::org::apache::lucene::index::LeafReaderContext & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6c1a15f495a79435, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyFacetLabels$FacetLabelReader::nextFacetLabel(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_nextFacetLabel_2f8d8c81610d6b29], a0));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyFacetLabels$FacetLabelReader::nextFacetLabel(jint a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_nextFacetLabel_8bd600daa42cf8ee], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetLabels$FacetLabelReader_init_(t_TaxonomyFacetLabels$FacetLabelReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_nextFacetLabel(t_TaxonomyFacetLabels$FacetLabelReader *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacetLabels$FacetLabelReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetLabels$FacetLabelReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetLabels$FacetLabelReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetLabels$FacetLabelReader, nextFacetLabel, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetLabels$FacetLabelReader)[] = {
            { Py_tp_methods, t_TaxonomyFacetLabels$FacetLabelReader__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetLabels$FacetLabelReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetLabels$FacetLabelReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetLabels$FacetLabelReader, t_TaxonomyFacetLabels$FacetLabelReader, TaxonomyFacetLabels$FacetLabelReader);

          void t_TaxonomyFacetLabels$FacetLabelReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetLabels$FacetLabelReader), &PY_TYPE_DEF(TaxonomyFacetLabels$FacetLabelReader), module, "TaxonomyFacetLabels$FacetLabelReader", 0);
          }

          void t_TaxonomyFacetLabels$FacetLabelReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels$FacetLabelReader), "class_", make_descriptor(TaxonomyFacetLabels$FacetLabelReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels$FacetLabelReader), "wrapfn_", make_descriptor(t_TaxonomyFacetLabels$FacetLabelReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels$FacetLabelReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetLabels$FacetLabelReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetLabels$FacetLabelReader::wrap_Object(TaxonomyFacetLabels$FacetLabelReader(((t_TaxonomyFacetLabels$FacetLabelReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetLabels$FacetLabelReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetLabels$FacetLabelReader_init_(t_TaxonomyFacetLabels$FacetLabelReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a1((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a2((jobject) NULL);
            TaxonomyFacetLabels$FacetLabelReader object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels::initializeClass, ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = TaxonomyFacetLabels$FacetLabelReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TaxonomyFacetLabels$FacetLabelReader_nextFacetLabel(t_TaxonomyFacetLabels$FacetLabelReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.nextFacetLabel(a0));
                  return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.nextFacetLabel(a0, a1));
                  return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "nextFacetLabel", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/FingerprintFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *FingerprintFilterFactory::class$ = NULL;
          jmethodID *FingerprintFilterFactory::mids$ = NULL;
          bool FingerprintFilterFactory::live$ = false;
          ::java::lang::String *FingerprintFilterFactory::MAX_OUTPUT_TOKEN_SIZE_KEY = NULL;
          ::java::lang::String *FingerprintFilterFactory::NAME = NULL;
          ::java::lang::String *FingerprintFilterFactory::SEPARATOR_KEY = NULL;

          jclass FingerprintFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/FingerprintFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_OUTPUT_TOKEN_SIZE_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_OUTPUT_TOKEN_SIZE_KEY", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              SEPARATOR_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "SEPARATOR_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FingerprintFilterFactory::FingerprintFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FingerprintFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_FingerprintFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FingerprintFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FingerprintFilterFactory_init_(t_FingerprintFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FingerprintFilterFactory_create(t_FingerprintFilterFactory *self, PyObject *args);

          static PyMethodDef t_FingerprintFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FingerprintFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FingerprintFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FingerprintFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FingerprintFilterFactory)[] = {
            { Py_tp_methods, t_FingerprintFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FingerprintFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FingerprintFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FingerprintFilterFactory, t_FingerprintFilterFactory, FingerprintFilterFactory);

          void t_FingerprintFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FingerprintFilterFactory), &PY_TYPE_DEF(FingerprintFilterFactory), module, "FingerprintFilterFactory", 0);
          }

          void t_FingerprintFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "class_", make_descriptor(FingerprintFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "wrapfn_", make_descriptor(t_FingerprintFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FingerprintFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "MAX_OUTPUT_TOKEN_SIZE_KEY", make_descriptor(j2p(*FingerprintFilterFactory::MAX_OUTPUT_TOKEN_SIZE_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "NAME", make_descriptor(j2p(*FingerprintFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilterFactory), "SEPARATOR_KEY", make_descriptor(j2p(*FingerprintFilterFactory::SEPARATOR_KEY)));
          }

          static PyObject *t_FingerprintFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FingerprintFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FingerprintFilterFactory::wrap_Object(FingerprintFilterFactory(((t_FingerprintFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FingerprintFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FingerprintFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FingerprintFilterFactory_init_(t_FingerprintFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FingerprintFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FingerprintFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FingerprintFilterFactory_create(t_FingerprintFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FingerprintFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *TermRangeQueryNode::class$ = NULL;
              jmethodID *TermRangeQueryNode::mids$ = NULL;
              bool TermRangeQueryNode::live$ = false;

              jclass TermRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_13e3a66c020cf4d4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;ZZ)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNode::TermRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_13e3a66c020cf4d4, a0.this$, a1.this$, a2, a3)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args);
              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data);
              static PyGetSetDef t_TermRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_TermRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TermRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TermRangeQueryNode)[] = {
                { Py_tp_methods, t_TermRangeQueryNode__methods_ },
                { Py_tp_init, (void *) t_TermRangeQueryNode_init_ },
                { Py_tp_getset, t_TermRangeQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TermRangeQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode),
                NULL
              };

              DEFINE_TYPE(TermRangeQueryNode, t_TermRangeQueryNode, TermRangeQueryNode);
              PyObject *t_TermRangeQueryNode::wrap_Object(const TermRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_TermRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_TermRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNode), &PY_TYPE_DEF(TermRangeQueryNode), module, "TermRangeQueryNode", 0);
              }

              void t_TermRangeQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNode), "class_", make_descriptor(TermRangeQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNode), "wrapfn_", make_descriptor(t_TermRangeQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNode::wrap_Object(TermRangeQueryNode(((t_TermRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                TermRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TermRangeQueryNode(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(FieldQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanQueryBuilder::class$ = NULL;
            jmethodID *BooleanQueryBuilder::mids$ = NULL;
            bool BooleanQueryBuilder::live$ = false;

            jclass BooleanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_66be9e8c52a02d3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanQueryBuilder::BooleanQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_66be9e8c52a02d3e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BooleanQueryBuilder)[] = {
              { Py_tp_methods, t_BooleanQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_BooleanQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BooleanQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(BooleanQueryBuilder, t_BooleanQueryBuilder, BooleanQueryBuilder);

            void t_BooleanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanQueryBuilder), &PY_TYPE_DEF(BooleanQueryBuilder), module, "BooleanQueryBuilder", 0);
            }

            void t_BooleanQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryBuilder), "class_", make_descriptor(BooleanQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryBuilder), "wrapfn_", make_descriptor(t_BooleanQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanQueryBuilder::wrap_Object(BooleanQueryBuilder(((t_BooleanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BooleanQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryBuilder::class$ = NULL;
              jmethodID *StandardQueryBuilder::mids$ = NULL;
              bool StandardQueryBuilder::live$ = false;

              jclass StandardQueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::search::Query StandardQueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryBuilder)[] = {
                { Py_tp_methods, t_StandardQueryBuilder__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryBuilder)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder),
                NULL
              };

              DEFINE_TYPE(StandardQueryBuilder, t_StandardQueryBuilder, StandardQueryBuilder);

              void t_StandardQueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryBuilder), &PY_TYPE_DEF(StandardQueryBuilder), module, "StandardQueryBuilder", 0);
              }

              void t_StandardQueryBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryBuilder), "class_", make_descriptor(StandardQueryBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryBuilder), "wrapfn_", make_descriptor(t_StandardQueryBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryBuilder::wrap_Object(StandardQueryBuilder(((t_StandardQueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(PY_TYPE(StandardQueryBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LongFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LongFieldSource::class$ = NULL;
            jmethodID *LongFieldSource::mids$ = NULL;
            bool LongFieldSource::live$ = false;

            jclass LongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_externalToLong_b1e05207ec98e246] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_longToObject_d67ffef7256118d2] = env->getMethodID(cls, "longToObject", "(J)Ljava/lang/Object;");
                mids$[mid_longToString_55e776ffac018431] = env->getMethodID(cls, "longToString", "(J)Ljava/lang/String;");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");
                mids$[mid_newMutableValueLong_3a57a85aac063d2e] = env->getMethodID(cls, "newMutableValueLong", "()Lorg/apache/lucene/util/mutable/MutableValueLong;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String LongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean LongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jlong LongFieldSource::externalToLong(const ::java::lang::String & a0) const
            {
              return env->callLongMethod(this$, mids$[mid_externalToLong_b1e05207ec98e246], a0.this$);
            }

            ::org::apache::lucene::search::SortField LongFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            ::org::apache::lucene::queries::function::FunctionValues LongFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint LongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::Object LongFieldSource::longToObject(jlong a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_longToObject_d67ffef7256118d2], a0));
            }

            ::java::lang::String LongFieldSource::longToString(jlong a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_longToString_55e776ffac018431], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_getSortField(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg);

            static PyMethodDef t_LongFieldSource__methods_[] = {
              DECLARE_METHOD(t_LongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, externalToLong, METH_O),
              DECLARE_METHOD(t_LongFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, longToObject, METH_O),
              DECLARE_METHOD(t_LongFieldSource, longToString, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LongFieldSource)[] = {
              { Py_tp_methods, t_LongFieldSource__methods_ },
              { Py_tp_init, (void *) t_LongFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LongFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(LongFieldSource, t_LongFieldSource, LongFieldSource);

            void t_LongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LongFieldSource), &PY_TYPE_DEF(LongFieldSource), module, "LongFieldSource", 0);
            }

            void t_LongFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongFieldSource), "class_", make_descriptor(LongFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongFieldSource), "wrapfn_", make_descriptor(t_LongFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongFieldSource::initializeClass, 1)))
                return NULL;
              return t_LongFieldSource::wrap_Object(LongFieldSource(((t_LongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LongFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LongFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(LongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(LongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.externalToLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              PyErr_SetArgsError((PyObject *) self, "externalToLong", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_getSortField(t_LongFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LongFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LongFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToObject(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToObject", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToString(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToString", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSource::class$ = NULL;
          jmethodID *ValueSource::mids$ = NULL;
          bool ValueSource::live$ = false;

          jclass ValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_asDoubleValuesSource_ccca60747b1553ac] = env->getMethodID(cls, "asDoubleValuesSource", "()Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_asLongValuesSource_1eae8270233c8b33] = env->getMethodID(cls, "asLongValuesSource", "()Lorg/apache/lucene/search/LongValuesSource;");
              mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fromDoubleValuesSource_f12db4e7c1cc53dc] = env->getStaticMethodID(cls, "fromDoubleValuesSource", "(Lorg/apache/lucene/search/DoubleValuesSource;)Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
              mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_newContext_c6a6785e7abaa6c5] = env->getStaticMethodID(cls, "newContext", "(Lorg/apache/lucene/search/IndexSearcher;)Ljava/util/Map;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSource::ValueSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::DoubleValuesSource ValueSource::asDoubleValuesSource() const
          {
            return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_asDoubleValuesSource_ccca60747b1553ac]));
          }

          ::org::apache::lucene::search::LongValuesSource ValueSource::asLongValuesSource() const
          {
            return ::org::apache::lucene::search::LongValuesSource(env->callObjectMethod(this$, mids$[mid_asLongValuesSource_1eae8270233c8b33]));
          }

          void ValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
          }

          ::java::lang::String ValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
          }

          jboolean ValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ValueSource ValueSource::fromDoubleValuesSource(const ::org::apache::lucene::search::DoubleValuesSource & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ValueSource(env->callStaticObjectMethod(cls, mids$[mid_fromDoubleValuesSource_f12db4e7c1cc53dc], a0.this$));
          }

          ::org::apache::lucene::search::SortField ValueSource::getSortField(jboolean a0) const
          {
            return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
          }

          ::org::apache::lucene::queries::function::FunctionValues ValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
          }

          jint ValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::util::Map ValueSource::newContext(const ::org::apache::lucene::search::IndexSearcher & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_newContext_c6a6785e7abaa6c5], a0.this$));
          }

          ::java::lang::String ValueSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSource_asDoubleValuesSource(t_ValueSource *self);
          static PyObject *t_ValueSource_asLongValuesSource(t_ValueSource *self);
          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_description(t_ValueSource *self);
          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_fromDoubleValuesSource(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg);
          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args);

          static PyMethodDef t_ValueSource__methods_[] = {
            DECLARE_METHOD(t_ValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, asDoubleValuesSource, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, asLongValuesSource, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, description, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, fromDoubleValuesSource, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, getSortField, METH_O),
            DECLARE_METHOD(t_ValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, newContext, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ValueSource)[] = {
            { Py_tp_methods, t_ValueSource__methods_ },
            { Py_tp_init, (void *) t_ValueSource_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ValueSource)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ValueSource, t_ValueSource, ValueSource);

          void t_ValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSource), &PY_TYPE_DEF(ValueSource), module, "ValueSource", 0);
          }

          void t_ValueSource::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSource), "class_", make_descriptor(ValueSource::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSource), "wrapfn_", make_descriptor(t_ValueSource::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSource), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSource::initializeClass, 1)))
              return NULL;
            return t_ValueSource::wrap_Object(ValueSource(((t_ValueSource *) arg)->object.this$));
          }
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds)
          {
            ValueSource object((jobject) NULL);

            INT_CALL(object = ValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_ValueSource_asDoubleValuesSource(t_ValueSource *self)
          {
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
            OBJ_CALL(result = self->object.asDoubleValuesSource());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          static PyObject *t_ValueSource_asLongValuesSource(t_ValueSource *self)
          {
            ::org::apache::lucene::search::LongValuesSource result((jobject) NULL);
            OBJ_CALL(result = self->object.asLongValuesSource());
            return ::org::apache::lucene::search::t_LongValuesSource::wrap_Object(result);
          }

          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(self->object.createWeight(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createWeight", args);
            return NULL;
          }

          static PyObject *t_ValueSource_description(t_ValueSource *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ValueSource_fromDoubleValuesSource(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::DoubleValuesSource a0((jobject) NULL);
            ValueSource result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::fromDoubleValuesSource(a0));
              return t_ValueSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fromDoubleValuesSource", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg)
          {
            jboolean a0;
            ::org::apache::lucene::search::SortField result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.getSortField(a0));
              return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getValues", args);
            return NULL;
          }

          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ValueSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::newContext(a0));
              return ::java::util::t_Map::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newContext", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(ValueSource), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor::class$ = NULL;
        jmethodID *StoredFieldVisitor::mids$ = NULL;
        bool StoredFieldVisitor::live$ = false;

        jclass StoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryField_1d4795e4721fd31d] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_a30e01309dcb244d] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_f28d86c39f09c45a] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_intField_59b56ee38a8bb555] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_51ea8ae5f60c6fae] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_6afb8838461a3a79] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_1d4795e4721fd31d] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_1d4795e4721fd31d], a0.this$, a1.this$);
        }

        void StoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_a30e01309dcb244d], a0.this$, a1);
        }

        void StoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_f28d86c39f09c45a], a0.this$, a1);
        }

        void StoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_59b56ee38a8bb555], a0.this$, a1);
        }

        void StoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_51ea8ae5f60c6fae], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status StoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_6afb8838461a3a79], a0.this$));
        }

        void StoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_1d4795e4721fd31d], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args);

        static PyMethodDef t_StoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, needsField, METH_O),
          DECLARE_METHOD(t_StoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredFieldVisitor)[] = {
          { Py_tp_methods, t_StoredFieldVisitor__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredFieldVisitor)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StoredFieldVisitor, t_StoredFieldVisitor, StoredFieldVisitor);

        void t_StoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor), &PY_TYPE_DEF(StoredFieldVisitor), module, "StoredFieldVisitor", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor), "Status", make_descriptor(&PY_TYPE_DEF(StoredFieldVisitor$Status)));
        }

        void t_StoredFieldVisitor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor), "class_", make_descriptor(StoredFieldVisitor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor), "wrapfn_", make_descriptor(t_StoredFieldVisitor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor::wrap_Object(StoredFieldVisitor(((t_StoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "binaryField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doubleField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "floatField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "longField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "needsField", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "stringField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OpaqueQueryNode::class$ = NULL;
              jmethodID *OpaqueQueryNode::mids$ = NULL;
              bool OpaqueQueryNode::live$ = false;

              jclass OpaqueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_64031c067d5ae464] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getSchema_ba44900ab7d793b9] = env->getMethodID(cls, "getSchema", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_ba44900ab7d793b9] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpaqueQueryNode::OpaqueQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_64031c067d5ae464, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode OpaqueQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getSchema() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getSchema_ba44900ab7d793b9]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_ba44900ab7d793b9]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String OpaqueQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data);
              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data);
              static PyGetSetDef t_OpaqueQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_OpaqueQueryNode, schema),
                DECLARE_GET_FIELD(t_OpaqueQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_OpaqueQueryNode__methods_[] = {
                DECLARE_METHOD(t_OpaqueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getSchema, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(OpaqueQueryNode)[] = {
                { Py_tp_methods, t_OpaqueQueryNode__methods_ },
                { Py_tp_init, (void *) t_OpaqueQueryNode_init_ },
                { Py_tp_getset, t_OpaqueQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(OpaqueQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(OpaqueQueryNode, t_OpaqueQueryNode, OpaqueQueryNode);

              void t_OpaqueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OpaqueQueryNode), &PY_TYPE_DEF(OpaqueQueryNode), module, "OpaqueQueryNode", 0);
              }

              void t_OpaqueQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpaqueQueryNode), "class_", make_descriptor(OpaqueQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpaqueQueryNode), "wrapfn_", make_descriptor(t_OpaqueQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpaqueQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpaqueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OpaqueQueryNode::wrap_Object(OpaqueQueryNode(((t_OpaqueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpaqueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                OpaqueQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = OpaqueQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(OpaqueQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {

          ::java::lang::Class *QueryAutoStopWordAnalyzer::class$ = NULL;
          jmethodID *QueryAutoStopWordAnalyzer::mids$ = NULL;
          bool QueryAutoStopWordAnalyzer::live$ = false;
          jfloat QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent = (jfloat) 0;

          jclass QueryAutoStopWordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fe7a8bd09074677d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_785e8d90495cf293] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;F)V");
              mids$[mid_init$_4e704bd8ab990161] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;I)V");
              mids$[mid_init$_42c5d6fe375f6cc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");
              mids$[mid_init$_0214f229b8abff90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;I)V");
              mids$[mid_getStopWords_6715d5a0d228688a] = env->getMethodID(cls, "getStopWords", "()[Lorg/apache/lucene/index/Term;");
              mids$[mid_getStopWords_1606e23a23a4a8e5] = env->getMethodID(cls, "getStopWords", "(Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              defaultMaxDocFreqPercent = env->getStaticFloatField(cls, "defaultMaxDocFreqPercent");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_fe7a8bd09074677d, a0.this$, a1.this$)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, jfloat a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_785e8d90495cf293, a0.this$, a1.this$, a2)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_4e704bd8ab990161, a0.this$, a1.this$, a2)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::util::Collection & a2, jfloat a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_42c5d6fe375f6cc3, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::util::Collection & a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_0214f229b8abff90, a0.this$, a1.this$, a2.this$, a3)) {}

          JArray< ::org::apache::lucene::index::Term > QueryAutoStopWordAnalyzer::getStopWords() const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getStopWords_6715d5a0d228688a]));
          }

          JArray< ::java::lang::String > QueryAutoStopWordAnalyzer::getStopWords(const ::java::lang::String & a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getStopWords_1606e23a23a4a8e5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {
          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args);
          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data);
          static PyGetSetDef t_QueryAutoStopWordAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryAutoStopWordAnalyzer, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryAutoStopWordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, getStopWords, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryAutoStopWordAnalyzer)[] = {
            { Py_tp_methods, t_QueryAutoStopWordAnalyzer__methods_ },
            { Py_tp_init, (void *) t_QueryAutoStopWordAnalyzer_init_ },
            { Py_tp_getset, t_QueryAutoStopWordAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryAutoStopWordAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::AnalyzerWrapper),
            NULL
          };

          DEFINE_TYPE(QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer, QueryAutoStopWordAnalyzer);

          void t_QueryAutoStopWordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryAutoStopWordAnalyzer), &PY_TYPE_DEF(QueryAutoStopWordAnalyzer), module, "QueryAutoStopWordAnalyzer", 0);
          }

          void t_QueryAutoStopWordAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryAutoStopWordAnalyzer), "class_", make_descriptor(QueryAutoStopWordAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryAutoStopWordAnalyzer), "wrapfn_", make_descriptor(t_QueryAutoStopWordAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryAutoStopWordAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryAutoStopWordAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryAutoStopWordAnalyzer), "defaultMaxDocFreqPercent", make_descriptor(QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent));
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_QueryAutoStopWordAnalyzer::wrap_Object(QueryAutoStopWordAnalyzer(((t_QueryAutoStopWordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jfloat a2;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkF", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jfloat a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkKF", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kkKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
                OBJ_CALL(result = self->object.getStopWords());
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getStopWords(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getStopWords", args);
            return NULL;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data)
          {
            JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdSetBuilder.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/DocIdSetBuilder$BulkAdder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdSetBuilder::class$ = NULL;
        jmethodID *DocIdSetBuilder::mids$ = NULL;
        bool DocIdSetBuilder::live$ = false;

        jclass DocIdSetBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdSetBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_7a78e87a8da4ff32] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/index/Terms;)V");
            mids$[mid_init$_db1e851432c269c2] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/index/PointValues;Ljava/lang/String;)V");
            mids$[mid_add_da04cf8efc6499af] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_build_854971ef3f8dbb19] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_grow_1cc82bccfcad94a9] = env->getMethodID(cls, "grow", "(I)Lorg/apache/lucene/util/DocIdSetBuilder$BulkAdder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetBuilder::DocIdSetBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        DocIdSetBuilder::DocIdSetBuilder(jint a0, const ::org::apache::lucene::index::Terms & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7a78e87a8da4ff32, a0, a1.this$)) {}

        DocIdSetBuilder::DocIdSetBuilder(jint a0, const ::org::apache::lucene::index::PointValues & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db1e851432c269c2, a0, a1.this$, a2.this$)) {}

        void DocIdSetBuilder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_da04cf8efc6499af], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet DocIdSetBuilder::build() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_build_854971ef3f8dbb19]));
        }

        ::org::apache::lucene::util::DocIdSetBuilder$BulkAdder DocIdSetBuilder::grow(jint a0) const
        {
          return ::org::apache::lucene::util::DocIdSetBuilder$BulkAdder(env->callObjectMethod(this$, mids$[mid_grow_1cc82bccfcad94a9], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdSetBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetBuilder_init_(t_DocIdSetBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetBuilder_add(t_DocIdSetBuilder *self, PyObject *arg);
        static PyObject *t_DocIdSetBuilder_build(t_DocIdSetBuilder *self);
        static PyObject *t_DocIdSetBuilder_grow(t_DocIdSetBuilder *self, PyObject *arg);

        static PyMethodDef t_DocIdSetBuilder__methods_[] = {
          DECLARE_METHOD(t_DocIdSetBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetBuilder, add, METH_O),
          DECLARE_METHOD(t_DocIdSetBuilder, build, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetBuilder, grow, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIdSetBuilder)[] = {
          { Py_tp_methods, t_DocIdSetBuilder__methods_ },
          { Py_tp_init, (void *) t_DocIdSetBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIdSetBuilder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIdSetBuilder, t_DocIdSetBuilder, DocIdSetBuilder);

        void t_DocIdSetBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetBuilder), &PY_TYPE_DEF(DocIdSetBuilder), module, "DocIdSetBuilder", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder), "BulkAdder", make_descriptor(&PY_TYPE_DEF(DocIdSetBuilder$BulkAdder)));
        }

        void t_DocIdSetBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder), "class_", make_descriptor(DocIdSetBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder), "wrapfn_", make_descriptor(t_DocIdSetBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdSetBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetBuilder::initializeClass, 1)))
            return NULL;
          return t_DocIdSetBuilder::wrap_Object(DocIdSetBuilder(((t_DocIdSetBuilder *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetBuilder_init_(t_DocIdSetBuilder *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              DocIdSetBuilder object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = DocIdSetBuilder(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::index::Terms a1((jobject) NULL);
              DocIdSetBuilder object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocIdSetBuilder(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::index::PointValues a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocIdSetBuilder object((jobject) NULL);

              if (!parseArgs(args, "Iks", ::org::apache::lucene::index::PointValues::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocIdSetBuilder(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIdSetBuilder_add(t_DocIdSetBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetBuilder_build(t_DocIdSetBuilder *self)
        {
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
        }

        static PyObject *t_DocIdSetBuilder_grow(t_DocIdSetBuilder *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::DocIdSetBuilder$BulkAdder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.grow(a0));
            return ::org::apache::lucene::util::t_DocIdSetBuilder$BulkAdder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput$ByteBufferRecycler.h"
#include "java/util/function/IntFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersDataOutput$ByteBufferRecycler::class$ = NULL;
        jmethodID *ByteBuffersDataOutput$ByteBufferRecycler::mids$ = NULL;
        bool ByteBuffersDataOutput$ByteBufferRecycler::live$ = false;

        jclass ByteBuffersDataOutput$ByteBufferRecycler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersDataOutput$ByteBufferRecycler");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersDataOutput$ByteBufferRecycler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersDataOutput$ByteBufferRecycler_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ByteBuffersDataOutput$ByteBufferRecycler__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersDataOutput$ByteBufferRecycler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataOutput$ByteBufferRecycler, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersDataOutput$ByteBufferRecycler)[] = {
          { Py_tp_methods, t_ByteBuffersDataOutput$ByteBufferRecycler__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersDataOutput$ByteBufferRecycler)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ByteBuffersDataOutput$ByteBufferRecycler, t_ByteBuffersDataOutput$ByteBufferRecycler, ByteBuffersDataOutput$ByteBufferRecycler);

        void t_ByteBuffersDataOutput$ByteBufferRecycler::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersDataOutput$ByteBufferRecycler), &PY_TYPE_DEF(ByteBuffersDataOutput$ByteBufferRecycler), module, "ByteBuffersDataOutput$ByteBufferRecycler", 0);
        }

        void t_ByteBuffersDataOutput$ByteBufferRecycler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput$ByteBufferRecycler), "class_", make_descriptor(ByteBuffersDataOutput$ByteBufferRecycler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput$ByteBufferRecycler), "wrapfn_", make_descriptor(t_ByteBuffersDataOutput$ByteBufferRecycler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput$ByteBufferRecycler), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBuffersDataOutput$ByteBufferRecycler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersDataOutput$ByteBufferRecycler::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersDataOutput$ByteBufferRecycler::wrap_Object(ByteBuffersDataOutput$ByteBufferRecycler(((t_ByteBuffersDataOutput$ByteBufferRecycler *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersDataOutput$ByteBufferRecycler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersDataOutput$ByteBufferRecycler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeScheduler$MergeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler::class$ = NULL;
        jmethodID *MergeScheduler::mids$ = NULL;
        bool MergeScheduler::live$ = false;

        jclass MergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_d538047dffd358b1] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergeTrigger;)V");
            mids$[mid_wrapForMerge_44a548f62b1a07fc] = env->getMethodID(cls, "wrapForMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/store/Directory;");
            mids$[mid_verbose_8454bd5aa23fd11e] = env->getMethodID(cls, "verbose", "()Z");
            mids$[mid_message_9fd2eb66a64e6f0f] = env->getMethodID(cls, "message", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void MergeScheduler::merge(const ::org::apache::lucene::index::MergeScheduler$MergeSource & a0, const ::org::apache::lucene::index::MergeTrigger & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_d538047dffd358b1], a0.this$, a1.this$);
        }

        ::org::apache::lucene::store::Directory MergeScheduler::wrapForMerge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_wrapForMerge_44a548f62b1a07fc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self);
        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args);
        static PyObject *t_MergeScheduler_wrapForMerge(t_MergeScheduler *self, PyObject *args);

        static PyMethodDef t_MergeScheduler__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, close, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_MergeScheduler, wrapForMerge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeScheduler)[] = {
          { Py_tp_methods, t_MergeScheduler__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeScheduler)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergeScheduler, t_MergeScheduler, MergeScheduler);

        void t_MergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler), &PY_TYPE_DEF(MergeScheduler), module, "MergeScheduler", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler), "MergeSource", make_descriptor(&PY_TYPE_DEF(MergeScheduler$MergeSource)));
        }

        void t_MergeScheduler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler), "class_", make_descriptor(MergeScheduler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler), "wrapfn_", make_descriptor(t_MergeScheduler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler::wrap_Object(MergeScheduler(((t_MergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler$MergeSource a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::MergeScheduler$MergeSource::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_MergeScheduler_wrapForMerge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.wrapForMerge(a0, a1));
            return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrapForMerge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *SpanishMinimalStemFilterFactory::mids$ = NULL;
          bool SpanishMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *SpanishMinimalStemFilterFactory::NAME = NULL;

          jclass SpanishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishMinimalStemFilterFactory::SpanishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishMinimalStemFilterFactory_init_(t_SpanishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishMinimalStemFilterFactory_create(t_SpanishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_SpanishMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SpanishMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SpanishMinimalStemFilterFactory, t_SpanishMinimalStemFilterFactory, SpanishMinimalStemFilterFactory);

          void t_SpanishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishMinimalStemFilterFactory), &PY_TYPE_DEF(SpanishMinimalStemFilterFactory), module, "SpanishMinimalStemFilterFactory", 0);
          }

          void t_SpanishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilterFactory), "class_", make_descriptor(SpanishMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_SpanishMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*SpanishMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_SpanishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishMinimalStemFilterFactory::wrap_Object(SpanishMinimalStemFilterFactory(((t_SpanishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishMinimalStemFilterFactory_init_(t_SpanishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishMinimalStemFilterFactory_create(t_SpanishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanContainQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanContainQuery::class$ = NULL;
          jmethodID *SpanContainQuery::mids$ = NULL;
          bool SpanContainQuery::live$ = false;

          jclass SpanContainQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanContainQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBig_5a8903ceec80d1b9] = env->getMethodID(cls, "getBig", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getLittle_5a8903ceec80d1b9] = env->getMethodID(cls, "getLittle", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean SpanContainQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanContainQuery::getBig() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getBig_5a8903ceec80d1b9]));
          }

          ::java::lang::String SpanContainQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanContainQuery::getLittle() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getLittle_5a8903ceec80d1b9]));
          }

          jint SpanContainQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanContainQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          void SpanContainQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanContainQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanContainQuery_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanContainQuery_equals(t_SpanContainQuery *self, PyObject *args);
          static PyObject *t_SpanContainQuery_getBig(t_SpanContainQuery *self);
          static PyObject *t_SpanContainQuery_getField(t_SpanContainQuery *self, PyObject *args);
          static PyObject *t_SpanContainQuery_getLittle(t_SpanContainQuery *self);
          static PyObject *t_SpanContainQuery_hashCode(t_SpanContainQuery *self, PyObject *args);
          static PyObject *t_SpanContainQuery_rewrite(t_SpanContainQuery *self, PyObject *args);
          static PyObject *t_SpanContainQuery_visit(t_SpanContainQuery *self, PyObject *args);
          static PyObject *t_SpanContainQuery_get__big(t_SpanContainQuery *self, void *data);
          static PyObject *t_SpanContainQuery_get__field(t_SpanContainQuery *self, void *data);
          static PyObject *t_SpanContainQuery_get__little(t_SpanContainQuery *self, void *data);
          static PyGetSetDef t_SpanContainQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanContainQuery, big),
            DECLARE_GET_FIELD(t_SpanContainQuery, field),
            DECLARE_GET_FIELD(t_SpanContainQuery, little),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanContainQuery__methods_[] = {
            DECLARE_METHOD(t_SpanContainQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainQuery, getBig, METH_NOARGS),
            DECLARE_METHOD(t_SpanContainQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainQuery, getLittle, METH_NOARGS),
            DECLARE_METHOD(t_SpanContainQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanContainQuery)[] = {
            { Py_tp_methods, t_SpanContainQuery__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_SpanContainQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanContainQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanContainQuery, t_SpanContainQuery, SpanContainQuery);

          void t_SpanContainQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanContainQuery), &PY_TYPE_DEF(SpanContainQuery), module, "SpanContainQuery", 0);
          }

          void t_SpanContainQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery), "class_", make_descriptor(SpanContainQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery), "wrapfn_", make_descriptor(t_SpanContainQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanContainQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanContainQuery::initializeClass, 1)))
              return NULL;
            return t_SpanContainQuery::wrap_Object(SpanContainQuery(((t_SpanContainQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanContainQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanContainQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanContainQuery_equals(t_SpanContainQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanContainQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanContainQuery_getBig(t_SpanContainQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getBig());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanContainQuery_getField(t_SpanContainQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanContainQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanContainQuery_getLittle(t_SpanContainQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getLittle());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanContainQuery_hashCode(t_SpanContainQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanContainQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanContainQuery_rewrite(t_SpanContainQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanContainQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanContainQuery_visit(t_SpanContainQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanContainQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanContainQuery_get__big(t_SpanContainQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getBig());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanContainQuery_get__field(t_SpanContainQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanContainQuery_get__little(t_SpanContainQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getLittle());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleDocValuesField::class$ = NULL;
        jmethodID *DoubleDocValuesField::mids$ = NULL;
        bool DoubleDocValuesField::live$ = false;

        jclass DoubleDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b5c6442be7f92276] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_setDoubleValue_3c435f10a3b1e038] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setLongValue_9c778c9bce6694df] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleDocValuesField::DoubleDocValuesField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_b5c6442be7f92276, a0.this$, a1)) {}

        void DoubleDocValuesField::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_3c435f10a3b1e038], a0);
        }

        void DoubleDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args);
        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args);
        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoubleDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_DoubleDocValuesField, doubleValue),
          DECLARE_SET_FIELD(t_DoubleDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoubleDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoubleDocValuesField)[] = {
          { Py_tp_methods, t_DoubleDocValuesField__methods_ },
          { Py_tp_init, (void *) t_DoubleDocValuesField_init_ },
          { Py_tp_getset, t_DoubleDocValuesField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoubleDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::NumericDocValuesField),
          NULL
        };

        DEFINE_TYPE(DoubleDocValuesField, t_DoubleDocValuesField, DoubleDocValuesField);

        void t_DoubleDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleDocValuesField), &PY_TYPE_DEF(DoubleDocValuesField), module, "DoubleDocValuesField", 0);
        }

        void t_DoubleDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValuesField), "class_", make_descriptor(DoubleDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValuesField), "wrapfn_", make_descriptor(t_DoubleDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleDocValuesField::wrap_Object(DoubleDocValuesField(((t_DoubleDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          DoubleDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            INT_CALL(object = DoubleDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilter::class$ = NULL;
          jmethodID *ScandinavianFoldingFilter::mids$ = NULL;
          bool ScandinavianFoldingFilter::live$ = false;

          jclass ScandinavianFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilter::ScandinavianFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ScandinavianFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScandinavianFoldingFilter)[] = {
            { Py_tp_methods, t_ScandinavianFoldingFilter__methods_ },
            { Py_tp_init, (void *) t_ScandinavianFoldingFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScandinavianFoldingFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ScandinavianFoldingFilter, t_ScandinavianFoldingFilter, ScandinavianFoldingFilter);

          void t_ScandinavianFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilter), &PY_TYPE_DEF(ScandinavianFoldingFilter), module, "ScandinavianFoldingFilter", 0);
          }

          void t_ScandinavianFoldingFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilter), "class_", make_descriptor(ScandinavianFoldingFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilter), "wrapfn_", make_descriptor(t_ScandinavianFoldingFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilter::wrap_Object(ScandinavianFoldingFilter(((t_ScandinavianFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianFoldingFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianFoldingFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ScandinavianFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongsRef::class$ = NULL;
        jmethodID *LongsRef::mids$ = NULL;
        jfieldID *LongsRef::fids$ = NULL;
        bool LongsRef::live$ = false;
        JArray< jlong > *LongsRef::EMPTY_LONGS = NULL;

        jclass LongsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_d07f51188c558bf8] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_clone_96fcaaa82db94ed8] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_compareTo_69f82e2c8b244744] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/LongsRef;)I");
            mids$[mid_deepCopyOf_78371c48d7515f42] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/LongsRef;)Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_8454bd5aa23fd11e] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_longsEquals_66825b1458f8adfe] = env->getMethodID(cls, "longsEquals", "(Lorg/apache/lucene/util/LongsRef;)Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_longs] = env->getFieldID(cls, "longs", "[J");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_LONGS = new JArray< jlong >(env->getStaticObjectField(cls, "EMPTY_LONGS", "[J"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongsRef::LongsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        LongsRef::LongsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        LongsRef::LongsRef(const JArray< jlong > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d07f51188c558bf8, a0.this$, a1, a2)) {}

        LongsRef LongsRef::clone() const
        {
          return LongsRef(env->callObjectMethod(this$, mids$[mid_clone_96fcaaa82db94ed8]));
        }

        jint LongsRef::compareTo(const LongsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_69f82e2c8b244744], a0.this$);
        }

        LongsRef LongsRef::deepCopyOf(const LongsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_78371c48d7515f42], a0.this$));
        }

        jboolean LongsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint LongsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean LongsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_8454bd5aa23fd11e]);
        }

        jboolean LongsRef::longsEquals(const LongsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_longsEquals_66825b1458f8adfe], a0.this$);
        }

        ::java::lang::String LongsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint LongsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void LongsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        JArray< jlong > LongsRef::_get_longs() const
        {
          return JArray< jlong >(env->getObjectField(this$, fids$[fid_longs]));
        }

        void LongsRef::_set_longs(const JArray< jlong > & a0) const
        {
          env->setObjectField(this$, fids$[fid_longs], a0.this$);
        }

        jint LongsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void LongsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongsRef_clone(t_LongsRef *self);
        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_isValid(t_LongsRef *self);
        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data);
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data);
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data);
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data);

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data);
        static PyGetSetDef t_LongsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_LongsRef, length),
          DECLARE_GETSET_FIELD(t_LongsRef, longs),
          DECLARE_GETSET_FIELD(t_LongsRef, offset),
          DECLARE_GET_FIELD(t_LongsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongsRef__methods_[] = {
          DECLARE_METHOD(t_LongsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, compareTo, METH_O),
          DECLARE_METHOD(t_LongsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, longsEquals, METH_O),
          DECLARE_METHOD(t_LongsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongsRef)[] = {
          { Py_tp_methods, t_LongsRef__methods_ },
          { Py_tp_init, (void *) t_LongsRef_init_ },
          { Py_tp_getset, t_LongsRef__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongsRef)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LongsRef, t_LongsRef, LongsRef);

        void t_LongsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(LongsRef), &PY_TYPE_DEF(LongsRef), module, "LongsRef", 0);
        }

        void t_LongsRef::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongsRef), "class_", make_descriptor(LongsRef::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongsRef), "wrapfn_", make_descriptor(t_LongsRef::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongsRef), "boxfn_", make_descriptor(boxObject));
          env->getClass(LongsRef::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongsRef), "EMPTY_LONGS", make_descriptor(LongsRef::EMPTY_LONGS->wrap()));
        }

        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongsRef::initializeClass, 1)))
            return NULL;
          return t_LongsRef::wrap_Object(LongsRef(((t_LongsRef *) arg)->object.this$));
        }
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              LongsRef object((jobject) NULL);

              INT_CALL(object = LongsRef());
              self->object = object;
              break;
            }
           case 1:
            {
              jint a0;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = LongsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = LongsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongsRef_clone(t_LongsRef *self)
        {
          LongsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongsRef::wrap_Object(result);
        }

        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          LongsRef result((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongsRef::deepCopyOf(a0));
            return t_LongsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LongsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LongsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongsRef_isValid(t_LongsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.longsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "longsEquals", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LongsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyLong_FromLong((long) value);
        }
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_longs());
          return value.wrap();
        }
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          if (!parseArg(arg, "[J", &value))
          {
            INT_CALL(self->object._set_longs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "longs", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyLong_FromLong((long) value);
        }
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/VariableContext$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/js/VariableContext$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *VariableContext$Type::class$ = NULL;
          jmethodID *VariableContext$Type::mids$ = NULL;
          bool VariableContext$Type::live$ = false;
          VariableContext$Type *VariableContext$Type::INT_INDEX = NULL;
          VariableContext$Type *VariableContext$Type::MEMBER = NULL;
          VariableContext$Type *VariableContext$Type::METHOD = NULL;
          VariableContext$Type *VariableContext$Type::STR_INDEX = NULL;

          jclass VariableContext$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/VariableContext$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_df23ab7fb320537e] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/js/VariableContext$Type;");
              mids$[mid_values_5797f32d04dd31bb] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/expressions/js/VariableContext$Type;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INT_INDEX = new VariableContext$Type(env->getStaticObjectField(cls, "INT_INDEX", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              MEMBER = new VariableContext$Type(env->getStaticObjectField(cls, "MEMBER", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              METHOD = new VariableContext$Type(env->getStaticObjectField(cls, "METHOD", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              STR_INDEX = new VariableContext$Type(env->getStaticObjectField(cls, "STR_INDEX", "Lorg/apache/lucene/expressions/js/VariableContext$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableContext$Type VariableContext$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return VariableContext$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_df23ab7fb320537e], a0.this$));
          }

          JArray< VariableContext$Type > VariableContext$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< VariableContext$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_5797f32d04dd31bb]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_VariableContext$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext$Type_of_(t_VariableContext$Type *self, PyObject *args);
          static PyObject *t_VariableContext$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_VariableContext$Type_values(PyTypeObject *type);
          static PyObject *t_VariableContext$Type_get__parameters_(t_VariableContext$Type *self, void *data);
          static PyGetSetDef t_VariableContext$Type__fields_[] = {
            DECLARE_GET_FIELD(t_VariableContext$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VariableContext$Type__methods_[] = {
            DECLARE_METHOD(t_VariableContext$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_VariableContext$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_VariableContext$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableContext$Type)[] = {
            { Py_tp_methods, t_VariableContext$Type__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_VariableContext$Type__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableContext$Type)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(VariableContext$Type, t_VariableContext$Type, VariableContext$Type);
          PyObject *t_VariableContext$Type::wrap_Object(const VariableContext$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_VariableContext$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_VariableContext$Type *self = (t_VariableContext$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_VariableContext$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_VariableContext$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_VariableContext$Type *self = (t_VariableContext$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_VariableContext$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableContext$Type), &PY_TYPE_DEF(VariableContext$Type), module, "VariableContext$Type", 0);
          }

          void t_VariableContext$Type::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "class_", make_descriptor(VariableContext$Type::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "wrapfn_", make_descriptor(t_VariableContext$Type::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "boxfn_", make_descriptor(boxObject));
            env->getClass(VariableContext$Type::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "INT_INDEX", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::INT_INDEX)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "MEMBER", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::MEMBER)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "METHOD", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::METHOD)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext$Type), "STR_INDEX", make_descriptor(t_VariableContext$Type::wrap_Object(*VariableContext$Type::STR_INDEX)));
          }

          static PyObject *t_VariableContext$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableContext$Type::initializeClass, 1)))
              return NULL;
            return t_VariableContext$Type::wrap_Object(VariableContext$Type(((t_VariableContext$Type *) arg)->object.this$));
          }
          static PyObject *t_VariableContext$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableContext$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_VariableContext$Type_of_(t_VariableContext$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_VariableContext$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            VariableContext$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext$Type::valueOf(a0));
              return t_VariableContext$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_VariableContext$Type_values(PyTypeObject *type)
          {
            JArray< VariableContext$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext$Type::values());
            return JArray<jobject>(result.this$).wrap(t_VariableContext$Type::wrap_jobject);
          }
          static PyObject *t_VariableContext$Type_get__parameters_(t_VariableContext$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/HighFreqTerms$TotalTermFreqComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/misc/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *HighFreqTerms$TotalTermFreqComparator::class$ = NULL;
        jmethodID *HighFreqTerms$TotalTermFreqComparator::mids$ = NULL;
        bool HighFreqTerms$TotalTermFreqComparator::live$ = false;

        jclass HighFreqTerms$TotalTermFreqComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/HighFreqTerms$TotalTermFreqComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_c976d962c4791643] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/misc/TermStats;Lorg/apache/lucene/misc/TermStats;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HighFreqTerms$TotalTermFreqComparator::HighFreqTerms$TotalTermFreqComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint HighFreqTerms$TotalTermFreqComparator::compare(const ::org::apache::lucene::misc::TermStats & a0, const ::org::apache::lucene::misc::TermStats & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_c976d962c4791643], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HighFreqTerms$TotalTermFreqComparator_init_(t_HighFreqTerms$TotalTermFreqComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_compare(t_HighFreqTerms$TotalTermFreqComparator *self, PyObject *args);

        static PyMethodDef t_HighFreqTerms$TotalTermFreqComparator__methods_[] = {
          DECLARE_METHOD(t_HighFreqTerms$TotalTermFreqComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms$TotalTermFreqComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms$TotalTermFreqComparator, compare, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HighFreqTerms$TotalTermFreqComparator)[] = {
          { Py_tp_methods, t_HighFreqTerms$TotalTermFreqComparator__methods_ },
          { Py_tp_init, (void *) t_HighFreqTerms$TotalTermFreqComparator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HighFreqTerms$TotalTermFreqComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(HighFreqTerms$TotalTermFreqComparator, t_HighFreqTerms$TotalTermFreqComparator, HighFreqTerms$TotalTermFreqComparator);

        void t_HighFreqTerms$TotalTermFreqComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(HighFreqTerms$TotalTermFreqComparator), &PY_TYPE_DEF(HighFreqTerms$TotalTermFreqComparator), module, "HighFreqTerms$TotalTermFreqComparator", 0);
        }

        void t_HighFreqTerms$TotalTermFreqComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$TotalTermFreqComparator), "class_", make_descriptor(HighFreqTerms$TotalTermFreqComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$TotalTermFreqComparator), "wrapfn_", make_descriptor(t_HighFreqTerms$TotalTermFreqComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$TotalTermFreqComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HighFreqTerms$TotalTermFreqComparator::initializeClass, 1)))
            return NULL;
          return t_HighFreqTerms$TotalTermFreqComparator::wrap_Object(HighFreqTerms$TotalTermFreqComparator(((t_HighFreqTerms$TotalTermFreqComparator *) arg)->object.this$));
        }
        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HighFreqTerms$TotalTermFreqComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HighFreqTerms$TotalTermFreqComparator_init_(t_HighFreqTerms$TotalTermFreqComparator *self, PyObject *args, PyObject *kwds)
        {
          HighFreqTerms$TotalTermFreqComparator object((jobject) NULL);

          INT_CALL(object = HighFreqTerms$TotalTermFreqComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_HighFreqTerms$TotalTermFreqComparator_compare(t_HighFreqTerms$TotalTermFreqComparator *self, PyObject *args)
        {
          ::org::apache::lucene::misc::TermStats a0((jobject) NULL);
          ::org::apache::lucene::misc::TermStats a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::misc::TermStats::initializeClass, ::org::apache::lucene::misc::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSourceScorer::class$ = NULL;
          jmethodID *ValueSourceScorer::mids$ = NULL;
          bool ValueSourceScorer::live$ = false;

          jclass ValueSourceScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSourceScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
              mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_matches_a1d30e1ee40c89a2] = env->getMethodID(cls, "matches", "(I)Z");
              mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
              mids$[mid_twoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "twoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ValueSourceScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jfloat ValueSourceScorer::getMaxScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
          }

          ::org::apache::lucene::search::DocIdSetIterator ValueSourceScorer::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
          }

          jboolean ValueSourceScorer::matches(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matches_a1d30e1ee40c89a2], a0);
          }

          jfloat ValueSourceScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::search::TwoPhaseIterator ValueSourceScorer::twoPhaseIterator() const
          {
            return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_twoPhaseIterator_6458a12a224a1c8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_getMaxScore(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_iterator(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_twoPhaseIterator(t_ValueSourceScorer *self, PyObject *args);

          static PyMethodDef t_ValueSourceScorer__methods_[] = {
            DECLARE_METHOD(t_ValueSourceScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, getMaxScore, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, iterator, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, matches, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, twoPhaseIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ValueSourceScorer)[] = {
            { Py_tp_methods, t_ValueSourceScorer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ValueSourceScorer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Scorer),
            NULL
          };

          DEFINE_TYPE(ValueSourceScorer, t_ValueSourceScorer, ValueSourceScorer);

          void t_ValueSourceScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceScorer), &PY_TYPE_DEF(ValueSourceScorer), module, "ValueSourceScorer", 0);
          }

          void t_ValueSourceScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceScorer), "class_", make_descriptor(ValueSourceScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceScorer), "wrapfn_", make_descriptor(t_ValueSourceScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceScorer::initializeClass, 1)))
              return NULL;
            return t_ValueSourceScorer::wrap_Object(ValueSourceScorer(((t_ValueSourceScorer *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ValueSourceScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ValueSourceScorer_getMaxScore(t_ValueSourceScorer *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getMaxScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ValueSourceScorer), (PyObject *) self, "getMaxScore", args, 2);
          }

          static PyObject *t_ValueSourceScorer_iterator(t_ValueSourceScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ValueSourceScorer), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matches(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ValueSourceScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_ValueSourceScorer_twoPhaseIterator(t_ValueSourceScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.twoPhaseIterator());
              return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ValueSourceScorer), (PyObject *) self, "twoPhaseIterator", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *CharStream::class$ = NULL;
            jmethodID *CharStream::mids$ = NULL;
            bool CharStream::live$ = false;

            jclass CharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/CharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jchar CharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
            }

            void CharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
            }

            ::java::lang::String CharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
            }

            JArray< jchar > CharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
            }

            void CharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
            }

            jint CharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
            }

            jint CharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
            }

            jint CharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
            }

            jint CharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
            }

            jint CharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
            }

            jint CharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
            }

            jchar CharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_BeginToken(t_CharStream *self);
            static PyObject *t_CharStream_Done(t_CharStream *self);
            static PyObject *t_CharStream_GetImage(t_CharStream *self);
            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
            static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
            static PyObject *t_CharStream_getColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndLine(t_CharStream *self);
            static PyObject *t_CharStream_getLine(t_CharStream *self);
            static PyObject *t_CharStream_readChar(t_CharStream *self);
            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
            static PyGetSetDef t_CharStream__fields_[] = {
              DECLARE_GET_FIELD(t_CharStream, beginColumn),
              DECLARE_GET_FIELD(t_CharStream, beginLine),
              DECLARE_GET_FIELD(t_CharStream, column),
              DECLARE_GET_FIELD(t_CharStream, endColumn),
              DECLARE_GET_FIELD(t_CharStream, endLine),
              DECLARE_GET_FIELD(t_CharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharStream__methods_[] = {
              DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_CharStream, backup, METH_O),
              DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CharStream)[] = {
              { Py_tp_methods, t_CharStream__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CharStream__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CharStream)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CharStream, t_CharStream, CharStream);

            void t_CharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CharStream), &PY_TYPE_DEF(CharStream), module, "CharStream", 0);
            }

            void t_CharStream::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "class_", make_descriptor(CharStream::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                return NULL;
              return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
            }
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharStream_BeginToken(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return c2p(result);
            }

            static PyObject *t_CharStream_Done(t_CharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharStream_GetImage(t_CharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_getColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_getLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharStream_readChar(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return c2p(result);
            }

            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *WFSTCompletionLookup::class$ = NULL;
            jmethodID *WFSTCompletionLookup::mids$ = NULL;
            bool WFSTCompletionLookup::live$ = false;

            jclass WFSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/WFSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a9516587cd7033fe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
                mids$[mid_init$_6967b937aecb3b0a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Z)V");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            WFSTCompletionLookup::WFSTCompletionLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_a9516587cd7033fe, a0.this$, a1.this$)) {}

            WFSTCompletionLookup::WFSTCompletionLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6967b937aecb3b0a, a0.this$, a1.this$, a2)) {}

            void WFSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            ::java::lang::Object WFSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            ::java::util::Collection WFSTCompletionLookup::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong WFSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean WFSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List WFSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong WFSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean WFSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_getChildResources(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get__childResources(t_WFSTCompletionLookup *self, void *data);
            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data);
            static PyGetSetDef t_WFSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, childResources),
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_WFSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_WFSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_WFSTCompletionLookup, getChildResources, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(WFSTCompletionLookup)[] = {
              { Py_tp_methods, t_WFSTCompletionLookup__methods_ },
              { Py_tp_init, (void *) t_WFSTCompletionLookup_init_ },
              { Py_tp_getset, t_WFSTCompletionLookup__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(WFSTCompletionLookup)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(WFSTCompletionLookup, t_WFSTCompletionLookup, WFSTCompletionLookup);

            void t_WFSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(WFSTCompletionLookup), &PY_TYPE_DEF(WFSTCompletionLookup), module, "WFSTCompletionLookup", 0);
            }

            void t_WFSTCompletionLookup::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(WFSTCompletionLookup), "class_", make_descriptor(WFSTCompletionLookup::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(WFSTCompletionLookup), "wrapfn_", make_descriptor(t_WFSTCompletionLookup::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(WFSTCompletionLookup), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, WFSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_WFSTCompletionLookup::wrap_Object(WFSTCompletionLookup(((t_WFSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, WFSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jboolean a2;
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "ksZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_WFSTCompletionLookup_getChildResources(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getChildResources());
                return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getChildResources", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get__childResources(t_WFSTCompletionLookup *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonMultiFieldQueryParser::class$ = NULL;
          jmethodID *PythonMultiFieldQueryParser::mids$ = NULL;
          bool PythonMultiFieldQueryParser::live$ = false;

          jclass PythonMultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b575256d5b8b6872] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_f5d003a5f0f6b381] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_da5a988725940811] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_da5a988725940811] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_da5a988725940811] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_391b6230ae9c102d] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonMultiFieldQueryParser::PythonMultiFieldQueryParser(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser(env->newObject(initializeClass, &mids$, mid_init$_b575256d5b8b6872, a0.this$, a1.this$)) {}

          void PythonMultiFieldQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getBooleanQuery(const ::java::util::List & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_f5d003a5f0f6b381], a0.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_da5a988725940811], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_3a5baa20d223c529], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_da5a988725940811], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_3a5baa20d223c529], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getFuzzyQuery_391b6230ae9c102d], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getPrefixQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getRangeQuery_ee01989124e5cf67], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getWildcardQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
          }

          jlong PythonMultiFieldQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonMultiFieldQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self);
          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data);
          static PyGetSetDef t_PythonMultiFieldQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonMultiFieldQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonMultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getBooleanQuery, METH_O),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonMultiFieldQueryParser)[] = {
            { Py_tp_methods, t_PythonMultiFieldQueryParser__methods_ },
            { Py_tp_init, (void *) t_PythonMultiFieldQueryParser_init_ },
            { Py_tp_getset, t_PythonMultiFieldQueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonMultiFieldQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::MultiFieldQueryParser),
            NULL
          };

          DEFINE_TYPE(PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser, PythonMultiFieldQueryParser);

          void t_PythonMultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonMultiFieldQueryParser), &PY_TYPE_DEF(PythonMultiFieldQueryParser), module, "PythonMultiFieldQueryParser", 1);
          }

          void t_PythonMultiFieldQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonMultiFieldQueryParser), "class_", make_descriptor(PythonMultiFieldQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonMultiFieldQueryParser), "wrapfn_", make_descriptor(t_PythonMultiFieldQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonMultiFieldQueryParser), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonMultiFieldQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonMultiFieldQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonMultiFieldQueryParser::wrap_Object(PythonMultiFieldQueryParser(((t_PythonMultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            PythonMultiFieldQueryParser object((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PythonMultiFieldQueryParser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", arg);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *SlopQueryNode::class$ = NULL;
              jmethodID *SlopQueryNode::mids$ = NULL;
              bool SlopQueryNode::live$ = false;

              jclass SlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_fb9fd50664cff210] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_7f4134ae4682ace0] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_9972fcc56b44e79d] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNode::SlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_fb9fd50664cff210, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence SlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              jint SlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_9972fcc56b44e79d]);
              }

              void SlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence SlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String SlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg);
              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data);
              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data);
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data);
              static PyGetSetDef t_SlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_SlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_SlopQueryNode, field),
                DECLARE_GET_FIELD(t_SlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_SlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_SlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(SlopQueryNode)[] = {
                { Py_tp_methods, t_SlopQueryNode__methods_ },
                { Py_tp_init, (void *) t_SlopQueryNode_init_ },
                { Py_tp_getset, t_SlopQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(SlopQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(SlopQueryNode, t_SlopQueryNode, SlopQueryNode);

              void t_SlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNode), &PY_TYPE_DEF(SlopQueryNode), module, "SlopQueryNode", 0);
              }

              void t_SlopQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNode), "class_", make_descriptor(SlopQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNode), "wrapfn_", make_descriptor(t_SlopQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNode::wrap_Object(SlopQueryNode(((t_SlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                SlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(SlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(SlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(SlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyLong_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommit::class$ = NULL;
        jmethodID *TwoPhaseCommit::mids$ = NULL;
        bool TwoPhaseCommit::live$ = false;

        jclass TwoPhaseCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_commit_2e5ae9edcb9b072f] = env->getMethodID(cls, "commit", "()J");
            mids$[mid_prepareCommit_2e5ae9edcb9b072f] = env->getMethodID(cls, "prepareCommit", "()J");
            mids$[mid_rollback_f2cc1bce94666404] = env->getMethodID(cls, "rollback", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong TwoPhaseCommit::commit() const
        {
          return env->callLongMethod(this$, mids$[mid_commit_2e5ae9edcb9b072f]);
        }

        jlong TwoPhaseCommit::prepareCommit() const
        {
          return env->callLongMethod(this$, mids$[mid_prepareCommit_2e5ae9edcb9b072f]);
        }

        void TwoPhaseCommit::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self);

        static PyMethodDef t_TwoPhaseCommit__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, commit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, rollback, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TwoPhaseCommit)[] = {
          { Py_tp_methods, t_TwoPhaseCommit__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TwoPhaseCommit)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TwoPhaseCommit, t_TwoPhaseCommit, TwoPhaseCommit);

        void t_TwoPhaseCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommit), &PY_TYPE_DEF(TwoPhaseCommit), module, "TwoPhaseCommit", 0);
        }

        void t_TwoPhaseCommit::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommit), "class_", make_descriptor(TwoPhaseCommit::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommit), "wrapfn_", make_descriptor(t_TwoPhaseCommit::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommit), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommit::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommit::wrap_Object(TwoPhaseCommit(((t_TwoPhaseCommit *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.commit());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.prepareCommit());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Format::class$ = NULL;
          jmethodID *PackedInts$Format::mids$ = NULL;
          jfieldID *PackedInts$Format::fids$ = NULL;
          bool PackedInts$Format::live$ = false;
          PackedInts$Format *PackedInts$Format::PACKED = NULL;
          PackedInts$Format *PackedInts$Format::PACKED_SINGLE_BLOCK = NULL;

          jclass PackedInts$Format::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Format");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byId_86fda762a36e1dae] = env->getStaticMethodID(cls, "byId", "(I)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_byteCount_e212e19650267da0] = env->getMethodID(cls, "byteCount", "(III)J");
              mids$[mid_getId_9972fcc56b44e79d] = env->getMethodID(cls, "getId", "()I");
              mids$[mid_isSupported_a1d30e1ee40c89a2] = env->getMethodID(cls, "isSupported", "(I)Z");
              mids$[mid_longCount_5b9a30c564891466] = env->getMethodID(cls, "longCount", "(III)I");
              mids$[mid_overheadPerValue_384f078ef4b8f931] = env->getMethodID(cls, "overheadPerValue", "(I)F");
              mids$[mid_overheadRatio_384f078ef4b8f931] = env->getMethodID(cls, "overheadRatio", "(I)F");
              mids$[mid_valueOf_a214f44e87834be7] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/packed/PackedInts$Format;");
              mids$[mid_values_350f797355fac9fa] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/packed/PackedInts$Format;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_id] = env->getFieldID(cls, "id", "I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              PACKED = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              PACKED_SINGLE_BLOCK = new PackedInts$Format(env->getStaticObjectField(cls, "PACKED_SINGLE_BLOCK", "Lorg/apache/lucene/util/packed/PackedInts$Format;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Format PackedInts$Format::byId(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_byId_86fda762a36e1dae], a0));
          }

          jlong PackedInts$Format::byteCount(jint a0, jint a1, jint a2) const
          {
            return env->callLongMethod(this$, mids$[mid_byteCount_e212e19650267da0], a0, a1, a2);
          }

          jint PackedInts$Format::getId() const
          {
            return env->callIntMethod(this$, mids$[mid_getId_9972fcc56b44e79d]);
          }

          jboolean PackedInts$Format::isSupported(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSupported_a1d30e1ee40c89a2], a0);
          }

          jint PackedInts$Format::longCount(jint a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_longCount_5b9a30c564891466], a0, a1, a2);
          }

          jfloat PackedInts$Format::overheadPerValue(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadPerValue_384f078ef4b8f931], a0);
          }

          jfloat PackedInts$Format::overheadRatio(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_overheadRatio_384f078ef4b8f931], a0);
          }

          PackedInts$Format PackedInts$Format::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return PackedInts$Format(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a214f44e87834be7], a0.this$));
          }

          JArray< PackedInts$Format > PackedInts$Format::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< PackedInts$Format >(env->callStaticObjectMethod(cls, mids$[mid_values_350f797355fac9fa]));
          }

          jint PackedInts$Format::_get_id() const
          {
            return env->getIntField(this$, fids$[fid_id]);
          }

          void PackedInts$Format::_set_id(jint a0) const
          {
            env->setIntField(this$, fids$[fid_id], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self);
          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args);
          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg);
          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts$Format_values(PyTypeObject *type);

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data);
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data);
          static PyGetSetDef t_PackedInts$Format__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Format, id),
            DECLARE_GET_FIELD(t_PackedInts$Format, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Format__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Format, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, of_, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, byId, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, byteCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, getId, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Format, isSupported, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, longCount, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Format, overheadPerValue, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, overheadRatio, METH_O),
            DECLARE_METHOD(t_PackedInts$Format, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Format, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Format)[] = {
            { Py_tp_methods, t_PackedInts$Format__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PackedInts$Format__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Format)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(PackedInts$Format, t_PackedInts$Format, PackedInts$Format);
          PyObject *t_PackedInts$Format::wrap_Object(const PackedInts$Format& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PackedInts$Format::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PackedInts$Format::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PackedInts$Format *self = (t_PackedInts$Format *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PackedInts$Format::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Format), &PY_TYPE_DEF(PackedInts$Format), module, "PackedInts$Format", 0);
          }

          void t_PackedInts$Format::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Format), "class_", make_descriptor(PackedInts$Format::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Format), "wrapfn_", make_descriptor(t_PackedInts$Format::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Format), "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts$Format::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Format), "PACKED", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Format), "PACKED_SINGLE_BLOCK", make_descriptor(t_PackedInts$Format::wrap_Object(*PackedInts$Format::PACKED_SINGLE_BLOCK)));
          }

          static PyObject *t_PackedInts$Format_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Format::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Format::wrap_Object(PackedInts$Format(((t_PackedInts$Format *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Format_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Format::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Format_of_(t_PackedInts$Format *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PackedInts$Format_byId(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            PackedInts$Format result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::byId(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "byId", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_byteCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jlong result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.byteCount(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "byteCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_getId(t_PackedInts$Format *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getId());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Format_isSupported(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isSupported(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSupported", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_longCount(t_PackedInts$Format *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.longCount(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "longCount", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadPerValue(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadPerValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadPerValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_overheadRatio(t_PackedInts$Format *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.overheadRatio(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "overheadRatio", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Format_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            PackedInts$Format result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::valueOf(a0));
              return t_PackedInts$Format::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_PackedInts$Format_values(PyTypeObject *type)
          {
            JArray< PackedInts$Format > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts$Format::values());
            return JArray<jobject>(result.this$).wrap(t_PackedInts$Format::wrap_jobject);
          }
          static PyObject *t_PackedInts$Format_get__parameters_(t_PackedInts$Format *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PackedInts$Format_get__id(t_PackedInts$Format *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getId());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyQuery::class$ = NULL;
        jmethodID *FuzzyQuery::mids$ = NULL;
        bool FuzzyQuery::live$ = false;
        jint FuzzyQuery::defaultMaxEdits = (jint) 0;
        jint FuzzyQuery::defaultMaxExpansions = (jint) 0;
        jfloat FuzzyQuery::defaultMinSimilarity = (jfloat) 0;
        jint FuzzyQuery::defaultPrefixLength = (jint) 0;
        jboolean FuzzyQuery::defaultTranspositions = (jboolean) 0;

        jclass FuzzyQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_d948bda7346ba4b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_2d22f4c380c508c4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_47274f2f43f6691c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IIIZ)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_floatToEdits_d5349d97f03cc059] = env->getStaticMethodID(cls, "floatToEdits", "(FI)I");
            mids$[mid_getAutomata_9902dd107234d2e5] = env->getMethodID(cls, "getAutomata", "()Lorg/apache/lucene/util/automaton/CompiledAutomaton;");
            mids$[mid_getMaxEdits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxEdits", "()I");
            mids$[mid_getPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPrefixLength", "()I");
            mids$[mid_getTerm_5e734526802c58d9] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTranspositions_8454bd5aa23fd11e] = env->getMethodID(cls, "getTranspositions", "()Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_getTermsEnum_e75dd6286a51776d] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            defaultMaxEdits = env->getStaticIntField(cls, "defaultMaxEdits");
            defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
            defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
            defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
            defaultTranspositions = env->getStaticBooleanField(cls, "defaultTranspositions");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_d948bda7346ba4b9, a0.this$, a1)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_2d22f4c380c508c4, a0.this$, a1, a2)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_47274f2f43f6691c, a0.this$, a1, a2, a3, a4)) {}

        jboolean FuzzyQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint FuzzyQuery::floatToEdits(jfloat a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToEdits_d5349d97f03cc059], a0, a1);
        }

        ::org::apache::lucene::util::automaton::CompiledAutomaton FuzzyQuery::getAutomata() const
        {
          return ::org::apache::lucene::util::automaton::CompiledAutomaton(env->callObjectMethod(this$, mids$[mid_getAutomata_9902dd107234d2e5]));
        }

        jint FuzzyQuery::getMaxEdits() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxEdits_9972fcc56b44e79d]);
        }

        jint FuzzyQuery::getPrefixLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrefixLength_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Term FuzzyQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_5e734526802c58d9]));
        }

        jboolean FuzzyQuery::getTranspositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getTranspositions_8454bd5aa23fd11e]);
        }

        jint FuzzyQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String FuzzyQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void FuzzyQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args);
        static PyObject *t_FuzzyQuery_getAutomata(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_visit(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_get__automata(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data);
        static PyGetSetDef t_FuzzyQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyQuery, automata),
          DECLARE_GET_FIELD(t_FuzzyQuery, maxEdits),
          DECLARE_GET_FIELD(t_FuzzyQuery, prefixLength),
          DECLARE_GET_FIELD(t_FuzzyQuery, term),
          DECLARE_GET_FIELD(t_FuzzyQuery, transpositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyQuery__methods_[] = {
          DECLARE_METHOD(t_FuzzyQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, floatToEdits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, getAutomata, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getMaxEdits, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getPrefixLength, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTranspositions, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FuzzyQuery)[] = {
          { Py_tp_methods, t_FuzzyQuery__methods_ },
          { Py_tp_init, (void *) t_FuzzyQuery_init_ },
          { Py_tp_getset, t_FuzzyQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FuzzyQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiTermQuery),
          NULL
        };

        DEFINE_TYPE(FuzzyQuery, t_FuzzyQuery, FuzzyQuery);

        void t_FuzzyQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyQuery), &PY_TYPE_DEF(FuzzyQuery), module, "FuzzyQuery", 0);
        }

        void t_FuzzyQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "class_", make_descriptor(FuzzyQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "wrapfn_", make_descriptor(t_FuzzyQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "boxfn_", make_descriptor(boxObject));
          env->getClass(FuzzyQuery::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "defaultMaxEdits", make_descriptor(FuzzyQuery::defaultMaxEdits));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "defaultMaxExpansions", make_descriptor(FuzzyQuery::defaultMaxExpansions));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "defaultMinSimilarity", make_descriptor(FuzzyQuery::defaultMinSimilarity));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "defaultPrefixLength", make_descriptor(FuzzyQuery::defaultPrefixLength));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQuery), "defaultTranspositions", make_descriptor(FuzzyQuery::defaultTranspositions));
        }

        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyQuery::initializeClass, 1)))
            return NULL;
          return t_FuzzyQuery::wrap_Object(FuzzyQuery(((t_FuzzyQuery *) arg)->object.this$));
        }
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FuzzyQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jboolean a4;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FuzzyQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "FI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FuzzyQuery::floatToEdits(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToEdits", args);
          return NULL;
        }

        static PyObject *t_FuzzyQuery_getAutomata(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomata());
          return ::org::apache::lucene::util::automaton::t_CompiledAutomaton::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxEdits());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrefixLength());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getTranspositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FuzzyQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(FuzzyQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FuzzyQuery_visit(t_FuzzyQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FuzzyQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_FuzzyQuery_get__automata(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomata());
          return ::org::apache::lucene::util::automaton::t_CompiledAutomaton::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxEdits());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrefixLength());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getTranspositions());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FrenchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FrenchStemmer::class$ = NULL;
        jmethodID *FrenchStemmer::mids$ = NULL;
        bool FrenchStemmer::live$ = false;

        jclass FrenchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FrenchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrenchStemmer::FrenchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean FrenchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint FrenchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean FrenchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args);

        static PyMethodDef t_FrenchStemmer__methods_[] = {
          DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FrenchStemmer)[] = {
          { Py_tp_methods, t_FrenchStemmer__methods_ },
          { Py_tp_init, (void *) t_FrenchStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FrenchStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(FrenchStemmer, t_FrenchStemmer, FrenchStemmer);

        void t_FrenchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrenchStemmer), &PY_TYPE_DEF(FrenchStemmer), module, "FrenchStemmer", 0);
        }

        void t_FrenchStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchStemmer), "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchStemmer), "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
            return NULL;
          return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
        }
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
        {
          FrenchStemmer object((jobject) NULL);

          INT_CALL(object = FrenchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FrenchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FrenchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FrenchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleFragmenter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleFragmenter::class$ = NULL;
          jmethodID *SimpleFragmenter::mids$ = NULL;
          bool SimpleFragmenter::live$ = false;

          jclass SimpleFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getFragmentSize_9972fcc56b44e79d] = env->getMethodID(cls, "getFragmentSize", "()I");
              mids$[mid_isNewFragment_8454bd5aa23fd11e] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_setFragmentSize_040c4cd0390c5aff] = env->getMethodID(cls, "setFragmentSize", "(I)V");
              mids$[mid_start_c5ab6d211d8d31bc] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmenter::SimpleFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SimpleFragmenter::SimpleFragmenter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jint SimpleFragmenter::getFragmentSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragmentSize_9972fcc56b44e79d]);
          }

          jboolean SimpleFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_8454bd5aa23fd11e]);
          }

          void SimpleFragmenter::setFragmentSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentSize_040c4cd0390c5aff], a0);
          }

          void SimpleFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_c5ab6d211d8d31bc], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg);
          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args);
          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data);
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data);
          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data);
          static PyGetSetDef t_SimpleFragmenter__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleFragmenter, fragmentSize),
            DECLARE_GET_FIELD(t_SimpleFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, getFragmentSize, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, setFragmentSize, METH_O),
            DECLARE_METHOD(t_SimpleFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleFragmenter)[] = {
            { Py_tp_methods, t_SimpleFragmenter__methods_ },
            { Py_tp_init, (void *) t_SimpleFragmenter_init_ },
            { Py_tp_getset, t_SimpleFragmenter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleFragmenter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleFragmenter, t_SimpleFragmenter, SimpleFragmenter);

          void t_SimpleFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmenter), &PY_TYPE_DEF(SimpleFragmenter), module, "SimpleFragmenter", 0);
          }

          void t_SimpleFragmenter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmenter), "class_", make_descriptor(SimpleFragmenter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmenter), "wrapfn_", make_descriptor(t_SimpleFragmenter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmenter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmenter::wrap_Object(SimpleFragmenter(((t_SimpleFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmenter object((jobject) NULL);

                INT_CALL(object = SimpleFragmenter());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                SimpleFragmenter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragmentSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFragmentSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentSize", arg);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragmentSize());
            return PyLong_FromLong((long) value);
          }
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFragmentSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentSize", arg);
            return -1;
          }

          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {

            ::java::lang::Class *PrecedenceQueryParser::class$ = NULL;
            jmethodID *PrecedenceQueryParser::mids$ = NULL;
            bool PrecedenceQueryParser::live$ = false;

            jclass PrecedenceQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrecedenceQueryParser::PrecedenceQueryParser() : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            PrecedenceQueryParser::PrecedenceQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PrecedenceQueryParser__methods_[] = {
              DECLARE_METHOD(t_PrecedenceQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrecedenceQueryParser, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PrecedenceQueryParser)[] = {
              { Py_tp_methods, t_PrecedenceQueryParser__methods_ },
              { Py_tp_init, (void *) t_PrecedenceQueryParser_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PrecedenceQueryParser)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser),
              NULL
            };

            DEFINE_TYPE(PrecedenceQueryParser, t_PrecedenceQueryParser, PrecedenceQueryParser);

            void t_PrecedenceQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PrecedenceQueryParser), &PY_TYPE_DEF(PrecedenceQueryParser), module, "PrecedenceQueryParser", 0);
            }

            void t_PrecedenceQueryParser::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryParser), "class_", make_descriptor(PrecedenceQueryParser::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryParser), "wrapfn_", make_descriptor(t_PrecedenceQueryParser::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryParser), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrecedenceQueryParser::initializeClass, 1)))
                return NULL;
              return t_PrecedenceQueryParser::wrap_Object(PrecedenceQueryParser(((t_PrecedenceQueryParser *) arg)->object.this$));
            }
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrecedenceQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PrecedenceQueryParser object((jobject) NULL);

                  INT_CALL(object = PrecedenceQueryParser());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  PrecedenceQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = PrecedenceQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/StringDocValuesReaderState.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *StringDocValuesReaderState::class$ = NULL;
        jmethodID *StringDocValuesReaderState::mids$ = NULL;
        bool StringDocValuesReaderState::live$ = false;

        jclass StringDocValuesReaderState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/StringDocValuesReaderState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_456f925f19f7f45c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringDocValuesReaderState::StringDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_456f925f19f7f45c, a0.this$, a1.this$)) {}

        ::java::lang::String StringDocValuesReaderState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_StringDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringDocValuesReaderState_init_(t_StringDocValuesReaderState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StringDocValuesReaderState_toString(t_StringDocValuesReaderState *self, PyObject *args);

        static PyMethodDef t_StringDocValuesReaderState__methods_[] = {
          DECLARE_METHOD(t_StringDocValuesReaderState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringDocValuesReaderState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringDocValuesReaderState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StringDocValuesReaderState)[] = {
          { Py_tp_methods, t_StringDocValuesReaderState__methods_ },
          { Py_tp_init, (void *) t_StringDocValuesReaderState_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StringDocValuesReaderState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StringDocValuesReaderState, t_StringDocValuesReaderState, StringDocValuesReaderState);

        void t_StringDocValuesReaderState::install(PyObject *module)
        {
          installType(&PY_TYPE(StringDocValuesReaderState), &PY_TYPE_DEF(StringDocValuesReaderState), module, "StringDocValuesReaderState", 0);
        }

        void t_StringDocValuesReaderState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringDocValuesReaderState), "class_", make_descriptor(StringDocValuesReaderState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringDocValuesReaderState), "wrapfn_", make_descriptor(t_StringDocValuesReaderState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringDocValuesReaderState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StringDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringDocValuesReaderState::initializeClass, 1)))
            return NULL;
          return t_StringDocValuesReaderState::wrap_Object(StringDocValuesReaderState(((t_StringDocValuesReaderState *) arg)->object.this$));
        }
        static PyObject *t_StringDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringDocValuesReaderState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringDocValuesReaderState_init_(t_StringDocValuesReaderState *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          StringDocValuesReaderState object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            INT_CALL(object = StringDocValuesReaderState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_StringDocValuesReaderState_toString(t_StringDocValuesReaderState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(StringDocValuesReaderState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$Type::class$ = NULL;
              jmethodID *ProximityQueryNode$Type::mids$ = NULL;
              bool ProximityQueryNode$Type::live$ = false;
              ProximityQueryNode$Type *ProximityQueryNode$Type::NUMBER = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::PARAGRAPH = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::SENTENCE = NULL;

              jclass ProximityQueryNode$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_01db9b4e32e9249b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_values_fc4e4803cacbaf83] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  NUMBER = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "NUMBER", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  PARAGRAPH = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "PARAGRAPH", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  SENTENCE = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "SENTENCE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$Type ProximityQueryNode$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ProximityQueryNode$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_01db9b4e32e9249b], a0.this$));
              }

              JArray< ProximityQueryNode$Type > ProximityQueryNode$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ProximityQueryNode$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_fc4e4803cacbaf83]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type);
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data);
              static PyGetSetDef t_ProximityQueryNode$Type__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode$Type__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ProximityQueryNode$Type)[] = {
                { Py_tp_methods, t_ProximityQueryNode$Type__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_ProximityQueryNode$Type__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ProximityQueryNode$Type)[] = {
                &PY_TYPE_DEF(::java::lang::Enum),
                NULL
              };

              DEFINE_TYPE(ProximityQueryNode$Type, t_ProximityQueryNode$Type, ProximityQueryNode$Type);
              PyObject *t_ProximityQueryNode$Type::wrap_Object(const ProximityQueryNode$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ProximityQueryNode$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ProximityQueryNode$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$Type), &PY_TYPE_DEF(ProximityQueryNode$Type), module, "ProximityQueryNode$Type", 0);
              }

              void t_ProximityQueryNode$Type::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "class_", make_descriptor(ProximityQueryNode$Type::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "wrapfn_", make_descriptor(t_ProximityQueryNode$Type::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "boxfn_", make_descriptor(boxObject));
                env->getClass(ProximityQueryNode$Type::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "NUMBER", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::NUMBER)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "PARAGRAPH", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::PARAGRAPH)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$Type), "SENTENCE", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::SENTENCE)));
              }

              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$Type::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$Type::wrap_Object(ProximityQueryNode$Type(((t_ProximityQueryNode$Type *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ProximityQueryNode$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::valueOf(a0));
                  return t_ProximityQueryNode$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type)
              {
                JArray< ProximityQueryNode$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::values());
                return JArray<jobject>(result.this$).wrap(t_ProximityQueryNode$Type::wrap_jobject);
              }
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopAnalyzer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/nio/file/Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopAnalyzer::class$ = NULL;
          jmethodID *StopAnalyzer::mids$ = NULL;
          bool StopAnalyzer::live$ = false;

          jclass StopAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::java::nio::file::Path & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StopAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StopAnalyzer)[] = {
            { Py_tp_methods, t_StopAnalyzer__methods_ },
            { Py_tp_init, (void *) t_StopAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StopAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(StopAnalyzer, t_StopAnalyzer, StopAnalyzer);

          void t_StopAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StopAnalyzer), &PY_TYPE_DEF(StopAnalyzer), module, "StopAnalyzer", 0);
          }

          void t_StopAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopAnalyzer), "class_", make_descriptor(StopAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopAnalyzer), "wrapfn_", make_descriptor(t_StopAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StopAnalyzer::wrap_Object(StopAnalyzer(((t_StopAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::nio::file::Path a0((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanAnalyzer::class$ = NULL;
          jmethodID *GermanAnalyzer::mids$ = NULL;
          bool GermanAnalyzer::live$ = false;
          ::java::lang::String *GermanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GermanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanAnalyzer::GermanAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet GermanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data);
          static PyGetSetDef t_GermanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GermanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GermanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanAnalyzer)[] = {
            { Py_tp_methods, t_GermanAnalyzer__methods_ },
            { Py_tp_init, (void *) t_GermanAnalyzer_init_ },
            { Py_tp_getset, t_GermanAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(GermanAnalyzer, t_GermanAnalyzer, GermanAnalyzer);

          void t_GermanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanAnalyzer), &PY_TYPE_DEF(GermanAnalyzer), module, "GermanAnalyzer", 0);
          }

          void t_GermanAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanAnalyzer), "class_", make_descriptor(GermanAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanAnalyzer), "wrapfn_", make_descriptor(t_GermanAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GermanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GermanAnalyzer::wrap_Object(GermanAnalyzer(((t_GermanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GermanAnalyzer object((jobject) NULL);

                INT_CALL(object = GermanAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::de::GermanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingInfixSuggester::class$ = NULL;
            jmethodID *AnalyzingInfixSuggester::mids$ = NULL;
            bool AnalyzingInfixSuggester::live$ = false;
            jboolean AnalyzingInfixSuggester::DEFAULT_ALL_TERMS_REQUIRED = (jboolean) 0;
            jboolean AnalyzingInfixSuggester::DEFAULT_HIGHLIGHT = (jboolean) 0;
            jint AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS = (jint) 0;

            jclass AnalyzingInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b06573e2fea5d93f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_c56c3a5359ce7e82] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IZ)V");
                mids$[mid_init$_3977d9b2ec27297d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IZZZ)V");
                mids$[mid_init$_56c4c7125e457877] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IZZZZ)V");
                mids$[mid_add_86cc3152c266aae0] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_addContextToQuery_a9cadb6fb6c91941] = env->getMethodID(cls, "addContextToQuery", "(Lorg/apache/lucene/search/BooleanQuery$Builder;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_f2cc1bce94666404] = env->getMethodID(cls, "commit", "()V");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_2a2afc7b868a29c5] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;IZZ)Ljava/util/List;");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_46ccd4df2ff3d83e] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/BooleanQuery;IZZ)Ljava/util/List;");
                mids$[mid_lookup_e54afc1bb977fe8b] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Map;IZZ)Ljava/util/List;");
                mids$[mid_lookup_7723ef64fb9167ab] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_refresh_f2cc1bce94666404] = env->getMethodID(cls, "refresh", "()V");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_update_86cc3152c266aae0] = env->getMethodID(cls, "update", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;JLorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getDirectory_3bbac5ac7f2b55df] = env->getMethodID(cls, "getDirectory", "(Ljava/nio/file/Path;)Lorg/apache/lucene/store/Directory;");
                mids$[mid_highlight_1af0ad6555ec6446] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Ljava/util/Set;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_getTextFieldType_cc3ee11125b99c9b] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_8928817123803a4e] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_getIndexWriterConfig_bfd633e4628d99e0] = env->getMethodID(cls, "getIndexWriterConfig", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_getLastTokenQuery_1cf26fcf5e3c5839] = env->getMethodID(cls, "getLastTokenQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_finishQuery_67dd0f542e9bcd1f] = env->getMethodID(cls, "finishQuery", "(Lorg/apache/lucene/search/BooleanQuery$Builder;Z)Lorg/apache/lucene/search/Query;");
                mids$[mid_addNonMatch_676b08686d015750] = env->getMethodID(cls, "addNonMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V");
                mids$[mid_addWholeMatch_0fe8b914bb412351] = env->getMethodID(cls, "addWholeMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_addPrefixMatch_63435e12e234e384] = env->getMethodID(cls, "addPrefixMatch", "(Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_ALL_TERMS_REQUIRED = env->getStaticBooleanField(cls, "DEFAULT_ALL_TERMS_REQUIRED");
                DEFAULT_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_HIGHLIGHT");
                DEFAULT_MIN_PREFIX_CHARS = env->getStaticIntField(cls, "DEFAULT_MIN_PREFIX_CHARS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b06573e2fea5d93f, a0.this$, a1.this$)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::analysis::Analyzer & a2, jint a3, jboolean a4) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_c56c3a5359ce7e82, a0.this$, a1.this$, a2.this$, a3, a4)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::analysis::Analyzer & a2, jint a3, jboolean a4, jboolean a5, jboolean a6) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_3977d9b2ec27297d, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

            AnalyzingInfixSuggester::AnalyzingInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::analysis::Analyzer & a2, jint a3, jboolean a4, jboolean a5, jboolean a6, jboolean a7) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_56c4c7125e457877, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7)) {}

            void AnalyzingInfixSuggester::add(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_add_86cc3152c266aae0], a0.this$, a1.this$, a2, a3.this$);
            }

            void AnalyzingInfixSuggester::addContextToQuery(const ::org::apache::lucene::search::BooleanQuery$Builder & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addContextToQuery_a9cadb6fb6c91941], a0.this$, a1.this$, a2.this$);
            }

            void AnalyzingInfixSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            void AnalyzingInfixSuggester::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            void AnalyzingInfixSuggester::commit() const
            {
              env->callVoidMethod(this$, mids$[mid_commit_f2cc1bce94666404]);
            }

            ::java::util::Collection AnalyzingInfixSuggester::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong AnalyzingInfixSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean AnalyzingInfixSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1, jboolean a2, jboolean a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_2a2afc7b868a29c5], a0.this$, a1, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::search::BooleanQuery & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_46ccd4df2ff3d83e], a0.this$, a1.this$, a2, a3, a4));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Map & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_e54afc1bb977fe8b], a0.this$, a1.this$, a2, a3, a4));
            }

            ::java::util::List AnalyzingInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_7723ef64fb9167ab], a0.this$, a1.this$, a2, a3, a4));
            }

            jlong AnalyzingInfixSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            void AnalyzingInfixSuggester::refresh() const
            {
              env->callVoidMethod(this$, mids$[mid_refresh_f2cc1bce94666404]);
            }

            jboolean AnalyzingInfixSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }

            void AnalyzingInfixSuggester::update(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::Set & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) const
            {
              env->callVoidMethod(this$, mids$[mid_update_86cc3152c266aae0], a0.this$, a1.this$, a2, a3.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_addContextToQuery(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_commit(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_getChildResources(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self);
            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingInfixSuggester_get__childResources(t_AnalyzingInfixSuggester *self, void *data);
            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingInfixSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, childResources),
              DECLARE_GET_FIELD(t_AnalyzingInfixSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, add, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, addContextToQuery, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, close, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, commit, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getChildResources, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, refresh, METH_NOARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, store, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingInfixSuggester, update, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(AnalyzingInfixSuggester)[] = {
              { Py_tp_methods, t_AnalyzingInfixSuggester__methods_ },
              { Py_tp_init, (void *) t_AnalyzingInfixSuggester_init_ },
              { Py_tp_getset, t_AnalyzingInfixSuggester__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(AnalyzingInfixSuggester)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(AnalyzingInfixSuggester, t_AnalyzingInfixSuggester, AnalyzingInfixSuggester);

            void t_AnalyzingInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingInfixSuggester), &PY_TYPE_DEF(AnalyzingInfixSuggester), module, "AnalyzingInfixSuggester", 0);
            }

            void t_AnalyzingInfixSuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "class_", make_descriptor(AnalyzingInfixSuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "wrapfn_", make_descriptor(t_AnalyzingInfixSuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingInfixSuggester::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "DEFAULT_ALL_TERMS_REQUIRED", make_descriptor(AnalyzingInfixSuggester::DEFAULT_ALL_TERMS_REQUIRED));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "DEFAULT_HIGHLIGHT", make_descriptor(AnalyzingInfixSuggester::DEFAULT_HIGHLIGHT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingInfixSuggester), "DEFAULT_MIN_PREFIX_CHARS", make_descriptor(AnalyzingInfixSuggester::DEFAULT_MIN_PREFIX_CHARS));
            }

            static PyObject *t_AnalyzingInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingInfixSuggester::wrap_Object(AnalyzingInfixSuggester(((t_AnalyzingInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingInfixSuggester_init_(t_AnalyzingInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 5:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  jint a3;
                  jboolean a4;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkIZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  jint a3;
                  jboolean a4;
                  jboolean a5;
                  jboolean a6;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkIZZZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 8:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  jint a3;
                  jboolean a4;
                  jboolean a5;
                  jboolean a6;
                  jboolean a7;
                  AnalyzingInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkIZZZZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                  {
                    INT_CALL(object = AnalyzingInfixSuggester(a0, a1, a2, a3, a4, a5, a6, a7));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingInfixSuggester_add(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.add(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_addContextToQuery(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::BooleanQuery$Builder a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;

              if (!parseArgs(args, "kkK", ::org::apache::lucene::search::BooleanQuery$Builder::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.addContextToQuery(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addContextToQuery", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_build(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_close(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_commit(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.commit());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_getChildResources(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getChildResources());
                return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getChildResources", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_getCount(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_load(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_lookup(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  jboolean a2;
                  jboolean a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OIZZ", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::org::apache::lucene::search::BooleanQuery a1((jobject) NULL);
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OkIZZ", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::search::BooleanQuery::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Map a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", ::java::lang::PY_TYPE(CharSequence), ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_ramBytesUsed(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_refresh(t_AnalyzingInfixSuggester *self)
            {
              OBJ_CALL(self->object.refresh());
              Py_RETURN_NONE;
            }

            static PyObject *t_AnalyzingInfixSuggester_store(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(AnalyzingInfixSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingInfixSuggester_update(t_AnalyzingInfixSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "kKJk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(self->object.update(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "update", args);
              return NULL;
            }

            static PyObject *t_AnalyzingInfixSuggester_get__childResources(t_AnalyzingInfixSuggester *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_AnalyzingInfixSuggester_get__count(t_AnalyzingInfixSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/BlockJoinSelector$Type.h"
#include "org/apache/lucene/search/join/BlockJoinSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *BlockJoinSelector$Type::class$ = NULL;
          jmethodID *BlockJoinSelector$Type::mids$ = NULL;
          bool BlockJoinSelector$Type::live$ = false;
          BlockJoinSelector$Type *BlockJoinSelector$Type::MAX = NULL;
          BlockJoinSelector$Type *BlockJoinSelector$Type::MIN = NULL;

          jclass BlockJoinSelector$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/BlockJoinSelector$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_97553a65c885a107] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/BlockJoinSelector$Type;");
              mids$[mid_values_a0d82391621622c0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/BlockJoinSelector$Type;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX = new BlockJoinSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/join/BlockJoinSelector$Type;"));
              MIN = new BlockJoinSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/join/BlockJoinSelector$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockJoinSelector$Type BlockJoinSelector$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return BlockJoinSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_97553a65c885a107], a0.this$));
          }

          JArray< BlockJoinSelector$Type > BlockJoinSelector$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< BlockJoinSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_a0d82391621622c0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_BlockJoinSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockJoinSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockJoinSelector$Type_of_(t_BlockJoinSelector$Type *self, PyObject *args);
          static PyObject *t_BlockJoinSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_BlockJoinSelector$Type_values(PyTypeObject *type);
          static PyObject *t_BlockJoinSelector$Type_get__parameters_(t_BlockJoinSelector$Type *self, void *data);
          static PyGetSetDef t_BlockJoinSelector$Type__fields_[] = {
            DECLARE_GET_FIELD(t_BlockJoinSelector$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockJoinSelector$Type__methods_[] = {
            DECLARE_METHOD(t_BlockJoinSelector$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockJoinSelector$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockJoinSelector$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_BlockJoinSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BlockJoinSelector$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockJoinSelector$Type)[] = {
            { Py_tp_methods, t_BlockJoinSelector$Type__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BlockJoinSelector$Type__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockJoinSelector$Type)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(BlockJoinSelector$Type, t_BlockJoinSelector$Type, BlockJoinSelector$Type);
          PyObject *t_BlockJoinSelector$Type::wrap_Object(const BlockJoinSelector$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BlockJoinSelector$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BlockJoinSelector$Type *self = (t_BlockJoinSelector$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BlockJoinSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BlockJoinSelector$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BlockJoinSelector$Type *self = (t_BlockJoinSelector$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BlockJoinSelector$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockJoinSelector$Type), &PY_TYPE_DEF(BlockJoinSelector$Type), module, "BlockJoinSelector$Type", 0);
          }

          void t_BlockJoinSelector$Type::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector$Type), "class_", make_descriptor(BlockJoinSelector$Type::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector$Type), "wrapfn_", make_descriptor(t_BlockJoinSelector$Type::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector$Type), "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockJoinSelector$Type::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector$Type), "MAX", make_descriptor(t_BlockJoinSelector$Type::wrap_Object(*BlockJoinSelector$Type::MAX)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector$Type), "MIN", make_descriptor(t_BlockJoinSelector$Type::wrap_Object(*BlockJoinSelector$Type::MIN)));
          }

          static PyObject *t_BlockJoinSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockJoinSelector$Type::initializeClass, 1)))
              return NULL;
            return t_BlockJoinSelector$Type::wrap_Object(BlockJoinSelector$Type(((t_BlockJoinSelector$Type *) arg)->object.this$));
          }
          static PyObject *t_BlockJoinSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockJoinSelector$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockJoinSelector$Type_of_(t_BlockJoinSelector$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_BlockJoinSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            BlockJoinSelector$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector$Type::valueOf(a0));
              return t_BlockJoinSelector$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_BlockJoinSelector$Type_values(PyTypeObject *type)
          {
            JArray< BlockJoinSelector$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector$Type::values());
            return JArray<jobject>(result.this$).wrap(t_BlockJoinSelector$Type::wrap_jobject);
          }
          static PyObject *t_BlockJoinSelector$Type_get__parameters_(t_BlockJoinSelector$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilter::class$ = NULL;
          jmethodID *KStemFilter::mids$ = NULL;
          bool KStemFilter::live$ = false;

          jclass KStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilter::KStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean KStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args);

          static PyMethodDef t_KStemFilter__methods_[] = {
            DECLARE_METHOD(t_KStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KStemFilter)[] = {
            { Py_tp_methods, t_KStemFilter__methods_ },
            { Py_tp_init, (void *) t_KStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(KStemFilter, t_KStemFilter, KStemFilter);

          void t_KStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilter), &PY_TYPE_DEF(KStemFilter), module, "KStemFilter", 0);
          }

          void t_KStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilter), "class_", make_descriptor(KStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilter), "wrapfn_", make_descriptor(t_KStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilter::initializeClass, 1)))
              return NULL;
            return t_KStemFilter::wrap_Object(KStemFilter(((t_KStemFilter *) arg)->object.this$));
          }
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamDataOutput::class$ = NULL;
        jmethodID *OutputStreamDataOutput::mids$ = NULL;
        bool OutputStreamDataOutput::live$ = false;

        jclass OutputStreamDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02fcdace254a9894] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamDataOutput::OutputStreamDataOutput(const ::java::io::OutputStream & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_02fcdace254a9894, a0.this$)) {}

        void OutputStreamDataOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void OutputStreamDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void OutputStreamDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self);
        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args);
        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args);

        static PyMethodDef t_OutputStreamDataOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OutputStreamDataOutput)[] = {
          { Py_tp_methods, t_OutputStreamDataOutput__methods_ },
          { Py_tp_init, (void *) t_OutputStreamDataOutput_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OutputStreamDataOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(OutputStreamDataOutput, t_OutputStreamDataOutput, OutputStreamDataOutput);

        void t_OutputStreamDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamDataOutput), &PY_TYPE_DEF(OutputStreamDataOutput), module, "OutputStreamDataOutput", 0);
        }

        void t_OutputStreamDataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamDataOutput), "class_", make_descriptor(OutputStreamDataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamDataOutput), "wrapfn_", make_descriptor(t_OutputStreamDataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamDataOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamDataOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamDataOutput::wrap_Object(OutputStreamDataOutput(((t_OutputStreamDataOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          OutputStreamDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = OutputStreamDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueInt.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueInt::class$ = NULL;
          jmethodID *MutableValueInt::mids$ = NULL;
          jfieldID *MutableValueInt::fids$ = NULL;
          bool MutableValueInt::live$ = false;

          jclass MutableValueInt::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueInt");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueInt::MutableValueInt() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueInt::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueInt::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueInt::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueInt::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueInt::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueInt::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          jint MutableValueInt::_get_value() const
          {
            return env->getIntField(this$, fids$[fid_value]);
          }

          void MutableValueInt::_set_value(jint a0) const
          {
            env->setIntField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data);
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueInt__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueInt, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueInt__methods_[] = {
            DECLARE_METHOD(t_MutableValueInt, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueInt)[] = {
            { Py_tp_methods, t_MutableValueInt__methods_ },
            { Py_tp_init, (void *) t_MutableValueInt_init_ },
            { Py_tp_getset, t_MutableValueInt__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueInt)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueInt, t_MutableValueInt, MutableValueInt);

          void t_MutableValueInt::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueInt), &PY_TYPE_DEF(MutableValueInt), module, "MutableValueInt", 0);
          }

          void t_MutableValueInt::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueInt), "class_", make_descriptor(MutableValueInt::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueInt), "wrapfn_", make_descriptor(t_MutableValueInt::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueInt), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueInt::initializeClass, 1)))
              return NULL;
            return t_MutableValueInt::wrap_Object(MutableValueInt(((t_MutableValueInt *) arg)->object.this$));
          }
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueInt::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds)
          {
            MutableValueInt object((jobject) NULL);

            INT_CALL(object = MutableValueInt());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueInt), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLong((long) value);
          }
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/OnHeapFSTStore.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FSTStore.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *OnHeapFSTStore::class$ = NULL;
          jmethodID *OnHeapFSTStore::mids$ = NULL;
          bool OnHeapFSTStore::live$ = false;

          jclass OnHeapFSTStore::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/OnHeapFSTStore");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getReverseBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getReverseBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_init_4833aa1d1f4cf120] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_writeTo_ead2c38342037c59] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OnHeapFSTStore::OnHeapFSTStore(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          ::org::apache::lucene::util::fst::FST$BytesReader OnHeapFSTStore::getReverseBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getReverseBytesReader_79a0688c6e123a32]));
          }

          void OnHeapFSTStore::init(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_4833aa1d1f4cf120], a0.this$, a1);
          }

          jlong OnHeapFSTStore::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong OnHeapFSTStore::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          void OnHeapFSTStore::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_writeTo_ead2c38342037c59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_OnHeapFSTStore_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OnHeapFSTStore_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OnHeapFSTStore_init_(t_OnHeapFSTStore *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OnHeapFSTStore_getReverseBytesReader(t_OnHeapFSTStore *self);
          static PyObject *t_OnHeapFSTStore_init(t_OnHeapFSTStore *self, PyObject *args);
          static PyObject *t_OnHeapFSTStore_ramBytesUsed(t_OnHeapFSTStore *self);
          static PyObject *t_OnHeapFSTStore_size(t_OnHeapFSTStore *self);
          static PyObject *t_OnHeapFSTStore_writeTo(t_OnHeapFSTStore *self, PyObject *arg);
          static PyObject *t_OnHeapFSTStore_get__reverseBytesReader(t_OnHeapFSTStore *self, void *data);
          static PyGetSetDef t_OnHeapFSTStore__fields_[] = {
            DECLARE_GET_FIELD(t_OnHeapFSTStore, reverseBytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OnHeapFSTStore__methods_[] = {
            DECLARE_METHOD(t_OnHeapFSTStore, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OnHeapFSTStore, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OnHeapFSTStore, getReverseBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_OnHeapFSTStore, init, METH_VARARGS),
            DECLARE_METHOD(t_OnHeapFSTStore, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_OnHeapFSTStore, size, METH_NOARGS),
            DECLARE_METHOD(t_OnHeapFSTStore, writeTo, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OnHeapFSTStore)[] = {
            { Py_tp_methods, t_OnHeapFSTStore__methods_ },
            { Py_tp_init, (void *) t_OnHeapFSTStore_init_ },
            { Py_tp_getset, t_OnHeapFSTStore__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OnHeapFSTStore)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OnHeapFSTStore, t_OnHeapFSTStore, OnHeapFSTStore);

          void t_OnHeapFSTStore::install(PyObject *module)
          {
            installType(&PY_TYPE(OnHeapFSTStore), &PY_TYPE_DEF(OnHeapFSTStore), module, "OnHeapFSTStore", 0);
          }

          void t_OnHeapFSTStore::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OnHeapFSTStore), "class_", make_descriptor(OnHeapFSTStore::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OnHeapFSTStore), "wrapfn_", make_descriptor(t_OnHeapFSTStore::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OnHeapFSTStore), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OnHeapFSTStore_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OnHeapFSTStore::initializeClass, 1)))
              return NULL;
            return t_OnHeapFSTStore::wrap_Object(OnHeapFSTStore(((t_OnHeapFSTStore *) arg)->object.this$));
          }
          static PyObject *t_OnHeapFSTStore_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OnHeapFSTStore::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OnHeapFSTStore_init_(t_OnHeapFSTStore *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            OnHeapFSTStore object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = OnHeapFSTStore(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OnHeapFSTStore_getReverseBytesReader(t_OnHeapFSTStore *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_OnHeapFSTStore_init(t_OnHeapFSTStore *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_OnHeapFSTStore_ramBytesUsed(t_OnHeapFSTStore *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_OnHeapFSTStore_size(t_OnHeapFSTStore *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_OnHeapFSTStore_writeTo(t_OnHeapFSTStore *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.writeTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeTo", arg);
            return NULL;
          }

          static PyObject *t_OnHeapFSTStore_get__reverseBytesReader(t_OnHeapFSTStore *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttributeImpl::class$ = NULL;
          jmethodID *TypeAttributeImpl::mids$ = NULL;
          bool TypeAttributeImpl::live$ = false;

          jclass TypeAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setType_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_db9b55ba01e03e4b] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAttributeImpl::TypeAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          TypeAttributeImpl::TypeAttributeImpl(const ::java::lang::String & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          void TypeAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void TypeAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean TypeAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint TypeAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void TypeAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void TypeAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_9fd2eb66a64e6f0f], a0.this$);
          }

          ::java::lang::String TypeAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_reflectWith(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self);

          static PyMethodDef t_TypeAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TypeAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_TypeAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAttributeImpl)[] = {
            { Py_tp_methods, t_TypeAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_TypeAttributeImpl_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(TypeAttributeImpl, t_TypeAttributeImpl, TypeAttributeImpl);

          void t_TypeAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttributeImpl), &PY_TYPE_DEF(TypeAttributeImpl), module, "TypeAttributeImpl", 0);
          }

          void t_TypeAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttributeImpl), "class_", make_descriptor(TypeAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttributeImpl), "wrapfn_", make_descriptor(t_TypeAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TypeAttributeImpl::wrap_Object(TypeAttributeImpl(((t_TypeAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TypeAttributeImpl object((jobject) NULL);

                INT_CALL(object = TypeAttributeImpl());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                TypeAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = TypeAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TypeAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TypeAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TypeAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TypeAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_reflectWith(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TypeAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StandardDirectoryReader.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StandardDirectoryReader::class$ = NULL;
        jmethodID *StandardDirectoryReader::mids$ = NULL;
        bool StandardDirectoryReader::live$ = false;

        jclass StandardDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StandardDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getIndexCommit_4abaa8d830d8ecf1] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getSegmentInfos_ecb6478d4be6f78b] = env->getMethodID(cls, "getSegmentInfos", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_getVersion_2e5ae9edcb9b072f] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_8454bd5aa23fd11e] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_open_bbcec4207edeaa85] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;Ljava/util/List;Ljava/util/Comparator;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doOpenIfChanged_6b4aca5e21cc99e9] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_f2740abbecd1a98f] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_f2a35b536582c7c2] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexCommit StandardDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_4abaa8d830d8ecf1]));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper StandardDirectoryReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::SegmentInfos StandardDirectoryReader::getSegmentInfos() const
        {
          return ::org::apache::lucene::index::SegmentInfos(env->callObjectMethod(this$, mids$[mid_getSegmentInfos_ecb6478d4be6f78b]));
        }

        jlong StandardDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_2e5ae9edcb9b072f]);
        }

        jboolean StandardDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::DirectoryReader StandardDirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::java::util::List & a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_bbcec4207edeaa85], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::java::lang::String StandardDirectoryReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StandardDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StandardDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StandardDirectoryReader_of_(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_getIndexCommit(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_getReaderCacheHelper(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_getSegmentInfos(t_StandardDirectoryReader *self);
        static PyObject *t_StandardDirectoryReader_getVersion(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_isCurrent(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_StandardDirectoryReader_toString(t_StandardDirectoryReader *self, PyObject *args);
        static PyObject *t_StandardDirectoryReader_get__current(t_StandardDirectoryReader *self, void *data);
        static PyObject *t_StandardDirectoryReader_get__indexCommit(t_StandardDirectoryReader *self, void *data);
        static PyObject *t_StandardDirectoryReader_get__readerCacheHelper(t_StandardDirectoryReader *self, void *data);
        static PyObject *t_StandardDirectoryReader_get__segmentInfos(t_StandardDirectoryReader *self, void *data);
        static PyObject *t_StandardDirectoryReader_get__version(t_StandardDirectoryReader *self, void *data);
        static PyObject *t_StandardDirectoryReader_get__parameters_(t_StandardDirectoryReader *self, void *data);
        static PyGetSetDef t_StandardDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_StandardDirectoryReader, current),
          DECLARE_GET_FIELD(t_StandardDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_StandardDirectoryReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_StandardDirectoryReader, segmentInfos),
          DECLARE_GET_FIELD(t_StandardDirectoryReader, version),
          DECLARE_GET_FIELD(t_StandardDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StandardDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_StandardDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StandardDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StandardDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, getSegmentInfos, METH_NOARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, isCurrent, METH_VARARGS),
          DECLARE_METHOD(t_StandardDirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StandardDirectoryReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StandardDirectoryReader)[] = {
          { Py_tp_methods, t_StandardDirectoryReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_StandardDirectoryReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StandardDirectoryReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DirectoryReader),
          NULL
        };

        DEFINE_TYPE(StandardDirectoryReader, t_StandardDirectoryReader, StandardDirectoryReader);
        PyObject *t_StandardDirectoryReader::wrap_Object(const StandardDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StandardDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StandardDirectoryReader *self = (t_StandardDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StandardDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StandardDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StandardDirectoryReader *self = (t_StandardDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StandardDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StandardDirectoryReader), &PY_TYPE_DEF(StandardDirectoryReader), module, "StandardDirectoryReader", 0);
        }

        void t_StandardDirectoryReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StandardDirectoryReader), "class_", make_descriptor(StandardDirectoryReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StandardDirectoryReader), "wrapfn_", make_descriptor(t_StandardDirectoryReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StandardDirectoryReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StandardDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StandardDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_StandardDirectoryReader::wrap_Object(StandardDirectoryReader(((t_StandardDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_StandardDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StandardDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StandardDirectoryReader_of_(t_StandardDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StandardDirectoryReader_getIndexCommit(t_StandardDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(PY_TYPE(StandardDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_StandardDirectoryReader_getReaderCacheHelper(t_StandardDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(StandardDirectoryReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_StandardDirectoryReader_getSegmentInfos(t_StandardDirectoryReader *self)
        {
          ::org::apache::lucene::index::SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfos());
          return ::org::apache::lucene::index::t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_StandardDirectoryReader_getVersion(t_StandardDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(StandardDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_StandardDirectoryReader_isCurrent(t_StandardDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(StandardDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }

        static PyObject *t_StandardDirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;
          ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StandardDirectoryReader::open(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
          }

          return callSuper(type, "open", args, 2);
        }

        static PyObject *t_StandardDirectoryReader_toString(t_StandardDirectoryReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(StandardDirectoryReader), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_StandardDirectoryReader_get__parameters_(t_StandardDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_StandardDirectoryReader_get__current(t_StandardDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_StandardDirectoryReader_get__indexCommit(t_StandardDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_StandardDirectoryReader_get__readerCacheHelper(t_StandardDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_StandardDirectoryReader_get__segmentInfos(t_StandardDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfos());
          return ::org::apache::lucene::index::t_SegmentInfos::wrap_Object(value);
        }

        static PyObject *t_StandardDirectoryReader_get__version(t_StandardDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDReader$IntersectState.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "org/apache/lucene/util/bkd/BKDReader$IndexTree.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDReader$IntersectState::class$ = NULL;
          jmethodID *BKDReader$IntersectState::mids$ = NULL;
          jfieldID *BKDReader$IntersectState::fids$ = NULL;
          bool BKDReader$IntersectState::live$ = false;

          jclass BKDReader$IntersectState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDReader$IntersectState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9b617607d47955fb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/bkd/BKDConfig;Lorg/apache/lucene/index/PointValues$IntersectVisitor;Lorg/apache/lucene/util/bkd/BKDReader$IndexTree;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_index] = env->getFieldID(cls, "index", "Lorg/apache/lucene/util/bkd/BKDReader$IndexTree;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDReader$IntersectState::BKDReader$IntersectState(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::bkd::BKDConfig & a1, const ::org::apache::lucene::index::PointValues$IntersectVisitor & a2, const ::org::apache::lucene::util::bkd::BKDReader$IndexTree & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b617607d47955fb, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::util::bkd::BKDReader$IndexTree BKDReader$IntersectState::_get_index() const
          {
            return ::org::apache::lucene::util::bkd::BKDReader$IndexTree(env->getObjectField(this$, fids$[fid_index]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDReader$IntersectState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDReader$IntersectState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDReader$IntersectState_init_(t_BKDReader$IntersectState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDReader$IntersectState_get__index(t_BKDReader$IntersectState *self, void *data);

          static PyGetSetDef t_BKDReader$IntersectState__fields_[] = {
            DECLARE_GET_FIELD(t_BKDReader$IntersectState, index),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BKDReader$IntersectState__methods_[] = {
            DECLARE_METHOD(t_BKDReader$IntersectState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDReader$IntersectState, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDReader$IntersectState)[] = {
            { Py_tp_methods, t_BKDReader$IntersectState__methods_ },
            { Py_tp_init, (void *) t_BKDReader$IntersectState_init_ },
            { Py_tp_getset, t_BKDReader$IntersectState__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDReader$IntersectState)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDReader$IntersectState, t_BKDReader$IntersectState, BKDReader$IntersectState);

          void t_BKDReader$IntersectState::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDReader$IntersectState), &PY_TYPE_DEF(BKDReader$IntersectState), module, "BKDReader$IntersectState", 0);
          }

          void t_BKDReader$IntersectState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IntersectState), "class_", make_descriptor(BKDReader$IntersectState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IntersectState), "wrapfn_", make_descriptor(t_BKDReader$IntersectState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IntersectState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BKDReader$IntersectState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDReader$IntersectState::initializeClass, 1)))
              return NULL;
            return t_BKDReader$IntersectState::wrap_Object(BKDReader$IntersectState(((t_BKDReader$IntersectState *) arg)->object.this$));
          }
          static PyObject *t_BKDReader$IntersectState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDReader$IntersectState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDReader$IntersectState_init_(t_BKDReader$IntersectState *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::bkd::BKDConfig a1((jobject) NULL);
            ::org::apache::lucene::index::PointValues$IntersectVisitor a2((jobject) NULL);
            ::org::apache::lucene::util::bkd::BKDReader$IndexTree a3((jobject) NULL);
            BKDReader$IntersectState object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, ::org::apache::lucene::util::bkd::BKDReader$IndexTree::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BKDReader$IntersectState(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDReader$IntersectState_get__index(t_BKDReader$IntersectState *self, void *data)
          {
            ::org::apache::lucene::util::bkd::BKDReader$IndexTree value((jobject) NULL);
            OBJ_CALL(value = self->object._get_index());
            return ::org::apache::lucene::util::bkd::t_BKDReader$IndexTree::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter.h"
#include "java/util/Map.h"
#include "java/util/function/Predicate.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/search/uhighlight/PassageFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/uhighlight/PassageScorer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *UnifiedHighlighter::class$ = NULL;
          jmethodID *UnifiedHighlighter::mids$ = NULL;
          bool UnifiedHighlighter::live$ = false;
          jint UnifiedHighlighter::DEFAULT_CACHE_CHARS_THRESHOLD = (jint) 0;
          jint UnifiedHighlighter::DEFAULT_MAX_LENGTH = (jint) 0;

          jclass UnifiedHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/UnifiedHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_81f6fb272181ea72] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getCacheFieldValCharsThreshold_9972fcc56b44e79d] = env->getMethodID(cls, "getCacheFieldValCharsThreshold", "()I");
              mids$[mid_getIndexAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getIndexAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getIndexSearcher_7ca5beb9bbb661b0] = env->getMethodID(cls, "getIndexSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_getMaxLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxLength", "()I");
              mids$[mid_highlight_6bd14f6bda1494e3] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/TopDocs;)[Ljava/lang/String;");
              mids$[mid_highlight_0ec5884c6beb3414] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/TopDocs;I)[Ljava/lang/String;");
              mids$[mid_highlightFields_20cbddb8bf01ab13] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/TopDocs;)Ljava/util/Map;");
              mids$[mid_highlightFields_59d33a15610cf080] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;[I[I)Ljava/util/Map;");
              mids$[mid_highlightFields_62e611f688b901d4] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/TopDocs;[I)Ljava/util/Map;");
              mids$[mid_highlightWithoutSearcher_c87c1c019e371dfd] = env->getMethodID(cls, "highlightWithoutSearcher", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Ljava/lang/String;I)Ljava/lang/Object;");
              mids$[mid_setBreakIterator_265134f84a6cf8b4] = env->getMethodID(cls, "setBreakIterator", "(Ljava/util/function/Supplier;)V");
              mids$[mid_setCacheFieldValCharsThreshold_040c4cd0390c5aff] = env->getMethodID(cls, "setCacheFieldValCharsThreshold", "(I)V");
              mids$[mid_setFieldMatcher_73508244675106b3] = env->getMethodID(cls, "setFieldMatcher", "(Ljava/util/function/Predicate;)V");
              mids$[mid_setFormatter_bc06c42b01a35bad] = env->getMethodID(cls, "setFormatter", "(Lorg/apache/lucene/search/uhighlight/PassageFormatter;)V");
              mids$[mid_setHandleMultiTermQuery_9d72768e8fdce2b7] = env->getMethodID(cls, "setHandleMultiTermQuery", "(Z)V");
              mids$[mid_setHighlightPhrasesStrictly_9d72768e8fdce2b7] = env->getMethodID(cls, "setHighlightPhrasesStrictly", "(Z)V");
              mids$[mid_setMaxLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxLength", "(I)V");
              mids$[mid_setMaxNoHighlightPassages_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxNoHighlightPassages", "(I)V");
              mids$[mid_setScorer_8ddc98fc773b0cd1] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/uhighlight/PassageScorer;)V");
              mids$[mid_extractTerms_d340999c07f4ea79] = env->getStaticMethodID(cls, "extractTerms", "(Lorg/apache/lucene/search/Query;)Ljava/util/Set;");
              mids$[mid_getScorer_49ee7ab054942154] = env->getMethodID(cls, "getScorer", "(Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/PassageScorer;");
              mids$[mid_getFieldInfo_07fc3b437c3bb7b3] = env->getMethodID(cls, "getFieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
              mids$[mid_getAutomata_838245e257d1f6af] = env->getMethodID(cls, "getAutomata", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Ljava/util/Set;)[Lorg/apache/lucene/search/uhighlight/LabelledCharArrayMatcher;");
              mids$[mid_getFormatter_c4f262ac4042760f] = env->getMethodID(cls, "getFormatter", "(Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/PassageFormatter;");
              mids$[mid_getPhraseHelper_99cb52db65ee3cc3] = env->getMethodID(cls, "getPhraseHelper", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Ljava/util/Set;)Lorg/apache/lucene/search/uhighlight/PhraseHelper;");
              mids$[mid_getOffsetSource_4e354603e57d21a7] = env->getMethodID(cls, "getOffsetSource", "(Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getFieldMatcher_e2b780f53e9b5377] = env->getMethodID(cls, "getFieldMatcher", "(Ljava/lang/String;)Ljava/util/function/Predicate;");
              mids$[mid_hasUnrecognizedQuery_fa91bca9102830ef] = env->getMethodID(cls, "hasUnrecognizedQuery", "(Ljava/util/function/Predicate;Lorg/apache/lucene/search/Query;)Z");
              mids$[mid_highlightFieldsAsObjects_59d33a15610cf080] = env->getMethodID(cls, "highlightFieldsAsObjects", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;[I[I)Ljava/util/Map;");
              mids$[mid_getFieldHighlighter_b6bb10c4e32feedc] = env->getMethodID(cls, "getFieldHighlighter", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Ljava/util/Set;I)Lorg/apache/lucene/search/uhighlight/FieldHighlighter;");
              mids$[mid_getHighlightComponents_bb8ca0b3946e98fd] = env->getMethodID(cls, "getHighlightComponents", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Ljava/util/Set;)Lorg/apache/lucene/search/uhighlight/UHComponents;");
              mids$[mid_filterExtractedTerms_b2f698df792db6f2] = env->getStaticMethodID(cls, "filterExtractedTerms", "(Ljava/util/function/Predicate;Ljava/util/Set;)[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getOptimizedOffsetSource_162afde29b2c3c38] = env->getMethodID(cls, "getOptimizedOffsetSource", "(Lorg/apache/lucene/search/uhighlight/UHComponents;)Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetStrategy_0abd4d4103c42a31] = env->getMethodID(cls, "getOffsetStrategy", "(Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;Lorg/apache/lucene/search/uhighlight/UHComponents;)Lorg/apache/lucene/search/uhighlight/FieldOffsetStrategy;");
              mids$[mid_requiresRewrite_518701d8823ff693] = env->getMethodID(cls, "requiresRewrite", "(Lorg/apache/lucene/search/spans/SpanQuery;)Ljava/lang/Boolean;");
              mids$[mid_preSpanQueryRewrite_9f53d4df54581388] = env->getMethodID(cls, "preSpanQueryRewrite", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");
              mids$[mid_loadFieldValues_2c0d72f11bab5690] = env->getMethodID(cls, "loadFieldValues", "([Ljava/lang/String;Lorg/apache/lucene/search/DocIdSetIterator;I)Ljava/util/List;");
              mids$[mid_newLimitedStoredFieldsVisitor_589999ffb1b30f65] = env->getMethodID(cls, "newLimitedStoredFieldsVisitor", "([Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$LimitedStoredFieldVisitor;");
              mids$[mid_shouldHandleMultiTermQuery_145b2d0af0c06b93] = env->getMethodID(cls, "shouldHandleMultiTermQuery", "(Ljava/lang/String;)Z");
              mids$[mid_shouldHighlightPhrasesStrictly_145b2d0af0c06b93] = env->getMethodID(cls, "shouldHighlightPhrasesStrictly", "(Ljava/lang/String;)Z");
              mids$[mid_shouldPreferPassageRelevancyOverSpeed_145b2d0af0c06b93] = env->getMethodID(cls, "shouldPreferPassageRelevancyOverSpeed", "(Ljava/lang/String;)Z");
              mids$[mid_getBreakIterator_e41a8764f71d3100] = env->getMethodID(cls, "getBreakIterator", "(Ljava/lang/String;)Ljava/text/BreakIterator;");
              mids$[mid_getMaxNoHighlightPassages_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getMaxNoHighlightPassages", "(Ljava/lang/String;)I");
              mids$[mid_getFlags_010d311a5fdbda7b] = env->getMethodID(cls, "getFlags", "(Ljava/lang/String;)Ljava/util/Set;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_CACHE_CHARS_THRESHOLD = env->getStaticIntField(cls, "DEFAULT_CACHE_CHARS_THRESHOLD");
              DEFAULT_MAX_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnifiedHighlighter::UnifiedHighlighter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_81f6fb272181ea72, a0.this$, a1.this$)) {}

          jint UnifiedHighlighter::getCacheFieldValCharsThreshold() const
          {
            return env->callIntMethod(this$, mids$[mid_getCacheFieldValCharsThreshold_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::analysis::Analyzer UnifiedHighlighter::getIndexAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getIndexAnalyzer_75a99b097bd64493]));
          }

          ::org::apache::lucene::search::IndexSearcher UnifiedHighlighter::getIndexSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_getIndexSearcher_7ca5beb9bbb661b0]));
          }

          jint UnifiedHighlighter::getMaxLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxLength_9972fcc56b44e79d]);
          }

          JArray< ::java::lang::String > UnifiedHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::TopDocs & a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_6bd14f6bda1494e3], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > UnifiedHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::TopDocs & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_0ec5884c6beb3414], a0.this$, a1.this$, a2.this$, a3));
          }

          ::java::util::Map UnifiedHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::TopDocs & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_20cbddb8bf01ab13], a0.this$, a1.this$, a2.this$));
          }

          ::java::util::Map UnifiedHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const JArray< jint > & a2, const JArray< jint > & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_59d33a15610cf080], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::util::Map UnifiedHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::TopDocs & a2, const JArray< jint > & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_62e611f688b901d4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::Object UnifiedHighlighter::highlightWithoutSearcher(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::java::lang::String & a2, jint a3) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_highlightWithoutSearcher_c87c1c019e371dfd], a0.this$, a1.this$, a2.this$, a3));
          }

          void UnifiedHighlighter::setBreakIterator(const ::java::util::function::Supplier & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBreakIterator_265134f84a6cf8b4], a0.this$);
          }

          void UnifiedHighlighter::setCacheFieldValCharsThreshold(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCacheFieldValCharsThreshold_040c4cd0390c5aff], a0);
          }

          void UnifiedHighlighter::setFieldMatcher(const ::java::util::function::Predicate & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldMatcher_73508244675106b3], a0.this$);
          }

          void UnifiedHighlighter::setFormatter(const ::org::apache::lucene::search::uhighlight::PassageFormatter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFormatter_bc06c42b01a35bad], a0.this$);
          }

          void UnifiedHighlighter::setHandleMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setHandleMultiTermQuery_9d72768e8fdce2b7], a0);
          }

          void UnifiedHighlighter::setHighlightPhrasesStrictly(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setHighlightPhrasesStrictly_9d72768e8fdce2b7], a0);
          }

          void UnifiedHighlighter::setMaxLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxLength_040c4cd0390c5aff], a0);
          }

          void UnifiedHighlighter::setMaxNoHighlightPassages(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNoHighlightPassages_040c4cd0390c5aff], a0);
          }

          void UnifiedHighlighter::setScorer(const ::org::apache::lucene::search::uhighlight::PassageScorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8ddc98fc773b0cd1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_UnifiedHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnifiedHighlighter_init_(t_UnifiedHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnifiedHighlighter_getCacheFieldValCharsThreshold(t_UnifiedHighlighter *self);
          static PyObject *t_UnifiedHighlighter_getIndexAnalyzer(t_UnifiedHighlighter *self);
          static PyObject *t_UnifiedHighlighter_getIndexSearcher(t_UnifiedHighlighter *self);
          static PyObject *t_UnifiedHighlighter_getMaxLength(t_UnifiedHighlighter *self);
          static PyObject *t_UnifiedHighlighter_highlight(t_UnifiedHighlighter *self, PyObject *args);
          static PyObject *t_UnifiedHighlighter_highlightFields(t_UnifiedHighlighter *self, PyObject *args);
          static PyObject *t_UnifiedHighlighter_highlightWithoutSearcher(t_UnifiedHighlighter *self, PyObject *args);
          static PyObject *t_UnifiedHighlighter_setBreakIterator(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setCacheFieldValCharsThreshold(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setFieldMatcher(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setFormatter(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setHandleMultiTermQuery(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setHighlightPhrasesStrictly(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setMaxLength(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setMaxNoHighlightPassages(t_UnifiedHighlighter *self, PyObject *arg);
          static PyObject *t_UnifiedHighlighter_setScorer(t_UnifiedHighlighter *self, PyObject *arg);
          static int t_UnifiedHighlighter_set__breakIterator(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static PyObject *t_UnifiedHighlighter_get__cacheFieldValCharsThreshold(t_UnifiedHighlighter *self, void *data);
          static int t_UnifiedHighlighter_set__cacheFieldValCharsThreshold(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__fieldMatcher(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__formatter(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__handleMultiTermQuery(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__highlightPhrasesStrictly(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static PyObject *t_UnifiedHighlighter_get__indexAnalyzer(t_UnifiedHighlighter *self, void *data);
          static PyObject *t_UnifiedHighlighter_get__indexSearcher(t_UnifiedHighlighter *self, void *data);
          static PyObject *t_UnifiedHighlighter_get__maxLength(t_UnifiedHighlighter *self, void *data);
          static int t_UnifiedHighlighter_set__maxLength(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__maxNoHighlightPassages(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static int t_UnifiedHighlighter_set__scorer(t_UnifiedHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_UnifiedHighlighter__fields_[] = {
            DECLARE_SET_FIELD(t_UnifiedHighlighter, breakIterator),
            DECLARE_GETSET_FIELD(t_UnifiedHighlighter, cacheFieldValCharsThreshold),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, fieldMatcher),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, formatter),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, handleMultiTermQuery),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, highlightPhrasesStrictly),
            DECLARE_GET_FIELD(t_UnifiedHighlighter, indexAnalyzer),
            DECLARE_GET_FIELD(t_UnifiedHighlighter, indexSearcher),
            DECLARE_GETSET_FIELD(t_UnifiedHighlighter, maxLength),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, maxNoHighlightPassages),
            DECLARE_SET_FIELD(t_UnifiedHighlighter, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UnifiedHighlighter__methods_[] = {
            DECLARE_METHOD(t_UnifiedHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter, getCacheFieldValCharsThreshold, METH_NOARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, getIndexAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, getIndexSearcher, METH_NOARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, getMaxLength, METH_NOARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, highlight, METH_VARARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, highlightFields, METH_VARARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, highlightWithoutSearcher, METH_VARARGS),
            DECLARE_METHOD(t_UnifiedHighlighter, setBreakIterator, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setCacheFieldValCharsThreshold, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setFieldMatcher, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setFormatter, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setHandleMultiTermQuery, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setHighlightPhrasesStrictly, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setMaxLength, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setMaxNoHighlightPassages, METH_O),
            DECLARE_METHOD(t_UnifiedHighlighter, setScorer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnifiedHighlighter)[] = {
            { Py_tp_methods, t_UnifiedHighlighter__methods_ },
            { Py_tp_init, (void *) t_UnifiedHighlighter_init_ },
            { Py_tp_getset, t_UnifiedHighlighter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnifiedHighlighter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UnifiedHighlighter, t_UnifiedHighlighter, UnifiedHighlighter);

          void t_UnifiedHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(UnifiedHighlighter), &PY_TYPE_DEF(UnifiedHighlighter), module, "UnifiedHighlighter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "HighlightFlag", make_descriptor(&PY_TYPE_DEF(UnifiedHighlighter$HighlightFlag)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "OffsetSource", make_descriptor(&PY_TYPE_DEF(UnifiedHighlighter$OffsetSource)));
          }

          void t_UnifiedHighlighter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "class_", make_descriptor(UnifiedHighlighter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "wrapfn_", make_descriptor(t_UnifiedHighlighter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "boxfn_", make_descriptor(boxObject));
            env->getClass(UnifiedHighlighter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "DEFAULT_CACHE_CHARS_THRESHOLD", make_descriptor(UnifiedHighlighter::DEFAULT_CACHE_CHARS_THRESHOLD));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter), "DEFAULT_MAX_LENGTH", make_descriptor(UnifiedHighlighter::DEFAULT_MAX_LENGTH));
          }

          static PyObject *t_UnifiedHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnifiedHighlighter::initializeClass, 1)))
              return NULL;
            return t_UnifiedHighlighter::wrap_Object(UnifiedHighlighter(((t_UnifiedHighlighter *) arg)->object.this$));
          }
          static PyObject *t_UnifiedHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnifiedHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnifiedHighlighter_init_(t_UnifiedHighlighter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            UnifiedHighlighter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = UnifiedHighlighter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnifiedHighlighter_getCacheFieldValCharsThreshold(t_UnifiedHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCacheFieldValCharsThreshold());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UnifiedHighlighter_getIndexAnalyzer(t_UnifiedHighlighter *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_UnifiedHighlighter_getIndexSearcher(t_UnifiedHighlighter *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_UnifiedHighlighter_getMaxLength(t_UnifiedHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UnifiedHighlighter_highlight(t_UnifiedHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a2((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlight", args);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_highlightFields(t_UnifiedHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                JArray< jint > a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[sk[I[I", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFields", args);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_highlightWithoutSearcher(t_UnifiedHighlighter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sksI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.highlightWithoutSearcher(a0, a1, a2, a3));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightWithoutSearcher", args);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setBreakIterator(t_UnifiedHighlighter *self, PyObject *arg)
          {
            ::java::util::function::Supplier a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::function::Supplier::initializeClass, &a0, &p0, ::java::util::function::t_Supplier::parameters_))
            {
              OBJ_CALL(self->object.setBreakIterator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBreakIterator", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setCacheFieldValCharsThreshold(t_UnifiedHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setCacheFieldValCharsThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCacheFieldValCharsThreshold", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setFieldMatcher(t_UnifiedHighlighter *self, PyObject *arg)
          {
            ::java::util::function::Predicate a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::function::Predicate::initializeClass, &a0, &p0, ::java::util::function::t_Predicate::parameters_))
            {
              OBJ_CALL(self->object.setFieldMatcher(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldMatcher", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setFormatter(t_UnifiedHighlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::uhighlight::PassageFormatter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::uhighlight::PassageFormatter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFormatter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFormatter", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setHandleMultiTermQuery(t_UnifiedHighlighter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setHandleMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setHandleMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setHighlightPhrasesStrictly(t_UnifiedHighlighter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setHighlightPhrasesStrictly(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setHighlightPhrasesStrictly", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setMaxLength(t_UnifiedHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxLength", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setMaxNoHighlightPassages(t_UnifiedHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNoHighlightPassages(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNoHighlightPassages", arg);
            return NULL;
          }

          static PyObject *t_UnifiedHighlighter_setScorer(t_UnifiedHighlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::uhighlight::PassageScorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::uhighlight::PassageScorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
            return NULL;
          }

          static int t_UnifiedHighlighter_set__breakIterator(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::function::Supplier value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::function::Supplier::initializeClass, &value))
              {
                INT_CALL(self->object.setBreakIterator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "breakIterator", arg);
            return -1;
          }

          static PyObject *t_UnifiedHighlighter_get__cacheFieldValCharsThreshold(t_UnifiedHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCacheFieldValCharsThreshold());
            return PyLong_FromLong((long) value);
          }
          static int t_UnifiedHighlighter_set__cacheFieldValCharsThreshold(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setCacheFieldValCharsThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "cacheFieldValCharsThreshold", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__fieldMatcher(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::function::Predicate value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::function::Predicate::initializeClass, &value))
              {
                INT_CALL(self->object.setFieldMatcher(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldMatcher", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__formatter(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::uhighlight::PassageFormatter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::uhighlight::PassageFormatter::initializeClass, &value))
              {
                INT_CALL(self->object.setFormatter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "formatter", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__handleMultiTermQuery(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setHandleMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "handleMultiTermQuery", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__highlightPhrasesStrictly(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setHighlightPhrasesStrictly(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "highlightPhrasesStrictly", arg);
            return -1;
          }

          static PyObject *t_UnifiedHighlighter_get__indexAnalyzer(t_UnifiedHighlighter *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }

          static PyObject *t_UnifiedHighlighter_get__indexSearcher(t_UnifiedHighlighter *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_UnifiedHighlighter_get__maxLength(t_UnifiedHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxLength());
            return PyLong_FromLong((long) value);
          }
          static int t_UnifiedHighlighter_set__maxLength(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxLength", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__maxNoHighlightPassages(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNoHighlightPassages(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNoHighlightPassages", arg);
            return -1;
          }

          static int t_UnifiedHighlighter_set__scorer(t_UnifiedHighlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::uhighlight::PassageScorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::uhighlight::PassageScorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/Completion84PostingsFormat.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *Completion84PostingsFormat::class$ = NULL;
            jmethodID *Completion84PostingsFormat::mids$ = NULL;
            bool Completion84PostingsFormat::live$ = false;

            jclass Completion84PostingsFormat::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/Completion84PostingsFormat");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_de3d093607610286] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;)V");
                mids$[mid_delegatePostingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "delegatePostingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Completion84PostingsFormat::Completion84PostingsFormat() : ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            Completion84PostingsFormat::Completion84PostingsFormat(const ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode & a0) : ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_de3d093607610286, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_Completion84PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Completion84PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Completion84PostingsFormat_init_(t_Completion84PostingsFormat *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_Completion84PostingsFormat__methods_[] = {
              DECLARE_METHOD(t_Completion84PostingsFormat, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Completion84PostingsFormat, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Completion84PostingsFormat)[] = {
              { Py_tp_methods, t_Completion84PostingsFormat__methods_ },
              { Py_tp_init, (void *) t_Completion84PostingsFormat_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Completion84PostingsFormat)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::CompletionPostingsFormat),
              NULL
            };

            DEFINE_TYPE(Completion84PostingsFormat, t_Completion84PostingsFormat, Completion84PostingsFormat);

            void t_Completion84PostingsFormat::install(PyObject *module)
            {
              installType(&PY_TYPE(Completion84PostingsFormat), &PY_TYPE_DEF(Completion84PostingsFormat), module, "Completion84PostingsFormat", 0);
            }

            void t_Completion84PostingsFormat::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion84PostingsFormat), "class_", make_descriptor(Completion84PostingsFormat::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion84PostingsFormat), "wrapfn_", make_descriptor(t_Completion84PostingsFormat::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion84PostingsFormat), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Completion84PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Completion84PostingsFormat::initializeClass, 1)))
                return NULL;
              return t_Completion84PostingsFormat::wrap_Object(Completion84PostingsFormat(((t_Completion84PostingsFormat *) arg)->object.this$));
            }
            static PyObject *t_Completion84PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Completion84PostingsFormat::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Completion84PostingsFormat_init_(t_Completion84PostingsFormat *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Completion84PostingsFormat object((jobject) NULL);

                  INT_CALL(object = Completion84PostingsFormat());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode a0((jobject) NULL);
                  PyTypeObject **p0;
                  Completion84PostingsFormat object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::initializeClass, &a0, &p0, ::org::apache::lucene::search::suggest::document::t_CompletionPostingsFormat$FSTLoadMode::parameters_))
                  {
                    INT_CALL(object = Completion84PostingsFormat(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemmer::class$ = NULL;
          jmethodID *PortugueseStemmer::mids$ = NULL;
          bool PortugueseStemmer::live$ = false;

          jclass PortugueseStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemmer::PortugueseStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint PortugueseStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseStemmer)[] = {
            { Py_tp_methods, t_PortugueseStemmer__methods_ },
            { Py_tp_init, (void *) t_PortugueseStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseStemmer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::pt::RSLPStemmerBase),
            NULL
          };

          DEFINE_TYPE(PortugueseStemmer, t_PortugueseStemmer, PortugueseStemmer);

          void t_PortugueseStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemmer), &PY_TYPE_DEF(PortugueseStemmer), module, "PortugueseStemmer", 0);
          }

          void t_PortugueseStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LabelToOrdinal::class$ = NULL;
            jmethodID *LabelToOrdinal::mids$ = NULL;
            bool LabelToOrdinal::live$ = false;
            jint LabelToOrdinal::INVALID_ORDINAL = (jint) 0;

            jclass LabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addLabel_f12d98a9d2a6ce17] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getMaxOrdinal_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxOrdinal", "()I");
                mids$[mid_getNextOrdinal_9972fcc56b44e79d] = env->getMethodID(cls, "getNextOrdinal", "()I");
                mids$[mid_getOrdinal_1e6795f28098d13d] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LabelToOrdinal::LabelToOrdinal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void LabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_f12d98a9d2a6ce17], a0.this$, a1);
            }

            jint LabelToOrdinal::getMaxOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxOrdinal_9972fcc56b44e79d]);
            }

            jint LabelToOrdinal::getNextOrdinal() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextOrdinal_9972fcc56b44e79d]);
            }

            jint LabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_1e6795f28098d13d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args);
            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self);
            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg);
            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data);
            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data);
            static PyGetSetDef t_LabelToOrdinal__fields_[] = {
              DECLARE_GET_FIELD(t_LabelToOrdinal, maxOrdinal),
              DECLARE_GET_FIELD(t_LabelToOrdinal, nextOrdinal),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_LabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getMaxOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getNextOrdinal, METH_NOARGS),
              DECLARE_METHOD(t_LabelToOrdinal, getOrdinal, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LabelToOrdinal)[] = {
              { Py_tp_methods, t_LabelToOrdinal__methods_ },
              { Py_tp_init, (void *) t_LabelToOrdinal_init_ },
              { Py_tp_getset, t_LabelToOrdinal__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LabelToOrdinal)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(LabelToOrdinal, t_LabelToOrdinal, LabelToOrdinal);

            void t_LabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(LabelToOrdinal), &PY_TYPE_DEF(LabelToOrdinal), module, "LabelToOrdinal", 0);
            }

            void t_LabelToOrdinal::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LabelToOrdinal), "class_", make_descriptor(LabelToOrdinal::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LabelToOrdinal), "wrapfn_", make_descriptor(t_LabelToOrdinal::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LabelToOrdinal), "boxfn_", make_descriptor(boxObject));
              env->getClass(LabelToOrdinal::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(LabelToOrdinal), "INVALID_ORDINAL", make_descriptor(LabelToOrdinal::INVALID_ORDINAL));
            }

            static PyObject *t_LabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_LabelToOrdinal::wrap_Object(LabelToOrdinal(((t_LabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_LabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LabelToOrdinal_init_(t_LabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              LabelToOrdinal object((jobject) NULL);

              INT_CALL(object = LabelToOrdinal());
              self->object = object;

              return 0;
            }

            static PyObject *t_LabelToOrdinal_addLabel(t_LabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_getMaxOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxOrdinal());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getNextOrdinal(t_LabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextOrdinal());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_LabelToOrdinal_getOrdinal(t_LabelToOrdinal *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getOrdinal", arg);
              return NULL;
            }

            static PyObject *t_LabelToOrdinal_get__maxOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxOrdinal());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_LabelToOrdinal_get__nextOrdinal(t_LabelToOrdinal *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextOrdinal());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RefCount.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RefCount::class$ = NULL;
        jmethodID *RefCount::mids$ = NULL;
        bool RefCount::live$ = false;

        jclass RefCount::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RefCount");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d20f626183f72f7d] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_decRef_f2cc1bce94666404] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_get_d6bcd06f3102c4d9] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_getRefCount_9972fcc56b44e79d] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_incRef_f2cc1bce94666404] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_release_f2cc1bce94666404] = env->getMethodID(cls, "release", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RefCount::RefCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d20f626183f72f7d, a0.this$)) {}

        void RefCount::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_f2cc1bce94666404]);
        }

        ::java::lang::Object RefCount::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_d6bcd06f3102c4d9]));
        }

        jint RefCount::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_9972fcc56b44e79d]);
        }

        void RefCount::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args);
        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RefCount_decRef(t_RefCount *self);
        static PyObject *t_RefCount_get(t_RefCount *self);
        static PyObject *t_RefCount_getRefCount(t_RefCount *self);
        static PyObject *t_RefCount_incRef(t_RefCount *self);
        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data);
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data);
        static PyGetSetDef t_RefCount__fields_[] = {
          DECLARE_GET_FIELD(t_RefCount, refCount),
          DECLARE_GET_FIELD(t_RefCount, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RefCount__methods_[] = {
          DECLARE_METHOD(t_RefCount, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RefCount, of_, METH_VARARGS),
          DECLARE_METHOD(t_RefCount, decRef, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, get, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_RefCount, incRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RefCount)[] = {
          { Py_tp_methods, t_RefCount__methods_ },
          { Py_tp_init, (void *) t_RefCount_init_ },
          { Py_tp_getset, t_RefCount__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RefCount)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RefCount, t_RefCount, RefCount);
        PyObject *t_RefCount::wrap_Object(const RefCount& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RefCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RefCount::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RefCount *self = (t_RefCount *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RefCount::install(PyObject *module)
        {
          installType(&PY_TYPE(RefCount), &PY_TYPE_DEF(RefCount), module, "RefCount", 0);
        }

        void t_RefCount::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RefCount), "class_", make_descriptor(RefCount::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RefCount), "wrapfn_", make_descriptor(t_RefCount::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RefCount), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RefCount_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RefCount::initializeClass, 1)))
            return NULL;
          return t_RefCount::wrap_Object(RefCount(((t_RefCount *) arg)->object.this$));
        }
        static PyObject *t_RefCount_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RefCount::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RefCount_of_(t_RefCount *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RefCount_init_(t_RefCount *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          RefCount object((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            INT_CALL(object = RefCount(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RefCount_decRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_RefCount_get(t_RefCount *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_RefCount_getRefCount(t_RefCount *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RefCount_incRef(t_RefCount *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }
        static PyObject *t_RefCount_get__parameters_(t_RefCount *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RefCount_get__refCount(t_RefCount *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldNormStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldNormStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldNormStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldNormStatus::live$ = false;

        jclass CheckIndex$Status$FieldNormStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldNormStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldNormStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldNormStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldNormStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldNormStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldNormStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldNormStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$FieldNormStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$FieldNormStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$FieldNormStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$FieldNormStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$FieldNormStatus, t_CheckIndex$Status$FieldNormStatus, CheckIndex$Status$FieldNormStatus);

        void t_CheckIndex$Status$FieldNormStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldNormStatus), &PY_TYPE_DEF(CheckIndex$Status$FieldNormStatus), module, "CheckIndex$Status$FieldNormStatus", 0);
        }

        void t_CheckIndex$Status$FieldNormStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldNormStatus), "class_", make_descriptor(CheckIndex$Status$FieldNormStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldNormStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldNormStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldNormStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldNormStatus::wrap_Object(CheckIndex$Status$FieldNormStatus(((t_CheckIndex$Status$FieldNormStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextFieldInfosFormat::class$ = NULL;
          jmethodID *SimpleTextFieldInfosFormat::mids$ = NULL;
          bool SimpleTextFieldInfosFormat::live$ = false;

          jclass SimpleTextFieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesType_d990a73d022b8e2b] = env->getMethodID(cls, "docValuesType", "(Ljava/lang/String;)Lorg/apache/lucene/index/DocValuesType;");
              mids$[mid_read_1706310ddb242d67] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");
              mids$[mid_write_226745c1985cb50a] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextFieldInfosFormat::SimpleTextFieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::DocValuesType SimpleTextFieldInfosFormat::docValuesType(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::DocValuesType(env->callObjectMethod(this$, mids$[mid_docValuesType_d990a73d022b8e2b], a0.this$));
          }

          ::org::apache::lucene::index::FieldInfos SimpleTextFieldInfosFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_1706310ddb242d67], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void SimpleTextFieldInfosFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_write_226745c1985cb50a], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextFieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextFieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextFieldInfosFormat_init_(t_SimpleTextFieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextFieldInfosFormat_docValuesType(t_SimpleTextFieldInfosFormat *self, PyObject *arg);
          static PyObject *t_SimpleTextFieldInfosFormat_read(t_SimpleTextFieldInfosFormat *self, PyObject *args);
          static PyObject *t_SimpleTextFieldInfosFormat_write(t_SimpleTextFieldInfosFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextFieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextFieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextFieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextFieldInfosFormat, docValuesType, METH_O),
            DECLARE_METHOD(t_SimpleTextFieldInfosFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextFieldInfosFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextFieldInfosFormat)[] = {
            { Py_tp_methods, t_SimpleTextFieldInfosFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextFieldInfosFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextFieldInfosFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldInfosFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextFieldInfosFormat, t_SimpleTextFieldInfosFormat, SimpleTextFieldInfosFormat);

          void t_SimpleTextFieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextFieldInfosFormat), &PY_TYPE_DEF(SimpleTextFieldInfosFormat), module, "SimpleTextFieldInfosFormat", 0);
          }

          void t_SimpleTextFieldInfosFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextFieldInfosFormat), "class_", make_descriptor(SimpleTextFieldInfosFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextFieldInfosFormat), "wrapfn_", make_descriptor(t_SimpleTextFieldInfosFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextFieldInfosFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextFieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextFieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextFieldInfosFormat::wrap_Object(SimpleTextFieldInfosFormat(((t_SimpleTextFieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextFieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextFieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextFieldInfosFormat_init_(t_SimpleTextFieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextFieldInfosFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextFieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextFieldInfosFormat_docValuesType(t_SimpleTextFieldInfosFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::DocValuesType result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.docValuesType(a0));
              return ::org::apache::lucene::index::t_DocValuesType::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "docValuesType", arg);
            return NULL;
          }

          static PyObject *t_SimpleTextFieldInfosFormat_read(t_SimpleTextFieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextFieldInfosFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_SimpleTextFieldInfosFormat_write(t_SimpleTextFieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextFieldInfosFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter$SimpleRateLimiter::class$ = NULL;
        jmethodID *RateLimiter$SimpleRateLimiter::mids$ = NULL;
        bool RateLimiter$SimpleRateLimiter::live$ = false;

        jclass RateLimiter$SimpleRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter$SimpleRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3c435f10a3b1e038] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_getMBPerSec_8c74b787998ce4bc] = env->getMethodID(cls, "getMBPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_d711eecdc469624a] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMBPerSec_3c435f10a3b1e038] = env->getMethodID(cls, "setMBPerSec", "(D)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter$SimpleRateLimiter::RateLimiter$SimpleRateLimiter(jdouble a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_3c435f10a3b1e038, a0)) {}

        jdouble RateLimiter$SimpleRateLimiter::getMBPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMBPerSec_8c74b787998ce4bc]);
        }

        jlong RateLimiter$SimpleRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f]);
        }

        jlong RateLimiter$SimpleRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_d711eecdc469624a], a0);
        }

        void RateLimiter$SimpleRateLimiter::setMBPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMBPerSec_3c435f10a3b1e038], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_setMBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mBPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static int t_RateLimiter$SimpleRateLimiter_set__mBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter$SimpleRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter$SimpleRateLimiter, mBPerSec),
          DECLARE_GET_FIELD(t_RateLimiter$SimpleRateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter$SimpleRateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, setMBPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RateLimiter$SimpleRateLimiter)[] = {
          { Py_tp_methods, t_RateLimiter$SimpleRateLimiter__methods_ },
          { Py_tp_init, (void *) t_RateLimiter$SimpleRateLimiter_init_ },
          { Py_tp_getset, t_RateLimiter$SimpleRateLimiter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RateLimiter$SimpleRateLimiter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::RateLimiter),
          NULL
        };

        DEFINE_TYPE(RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter, RateLimiter$SimpleRateLimiter);

        void t_RateLimiter$SimpleRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter$SimpleRateLimiter), &PY_TYPE_DEF(RateLimiter$SimpleRateLimiter), module, "RateLimiter$SimpleRateLimiter", 0);
        }

        void t_RateLimiter$SimpleRateLimiter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter$SimpleRateLimiter), "class_", make_descriptor(RateLimiter$SimpleRateLimiter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter$SimpleRateLimiter), "wrapfn_", make_descriptor(t_RateLimiter$SimpleRateLimiter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter$SimpleRateLimiter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter$SimpleRateLimiter::wrap_Object(RateLimiter$SimpleRateLimiter(((t_RateLimiter$SimpleRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          RateLimiter$SimpleRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = RateLimiter$SimpleRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMBPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMBPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_setMBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMBPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "setMBPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mBPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMBPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter$SimpleRateLimiter_set__mBPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMBPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mBPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene86/Lucene86Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {

          ::java::lang::Class *Lucene86Codec::class$ = NULL;
          jmethodID *Lucene86Codec::mids$ = NULL;
          bool Lucene86Codec::live$ = false;

          jclass Lucene86Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene86/Lucene86Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6fcfbdc0d15e68b8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;)V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_6b92af620136a934] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_62d8049c839a109a] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene86Codec::Lucene86Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene86Codec::Lucene86Codec(const ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode & a0) : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_6fcfbdc0d15e68b8, a0.this$)) {}

          ::org::apache::lucene::codecs::CompoundFormat Lucene86Codec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene86Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene86Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene86Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_6b92af620136a934], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene86Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_62d8049c839a109a], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene86Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene86Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat Lucene86Codec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene86Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene86Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene86Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene86Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {
          static PyObject *t_Lucene86Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene86Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene86Codec_init_(t_Lucene86Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene86Codec_compoundFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_docValuesFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_fieldInfosFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_getDocValuesFormatForField(t_Lucene86Codec *self, PyObject *arg);
          static PyObject *t_Lucene86Codec_getPostingsFormatForField(t_Lucene86Codec *self, PyObject *arg);
          static PyObject *t_Lucene86Codec_liveDocsFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_normsFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_pointsFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_postingsFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_segmentInfoFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_storedFieldsFormat(t_Lucene86Codec *self, PyObject *args);
          static PyObject *t_Lucene86Codec_termVectorsFormat(t_Lucene86Codec *self, PyObject *args);

          static PyMethodDef t_Lucene86Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene86Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86Codec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene86Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene86Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene86Codec)[] = {
            { Py_tp_methods, t_Lucene86Codec__methods_ },
            { Py_tp_init, (void *) t_Lucene86Codec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene86Codec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(Lucene86Codec, t_Lucene86Codec, Lucene86Codec);

          void t_Lucene86Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene86Codec), &PY_TYPE_DEF(Lucene86Codec), module, "Lucene86Codec", 0);
          }

          void t_Lucene86Codec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86Codec), "class_", make_descriptor(Lucene86Codec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86Codec), "wrapfn_", make_descriptor(t_Lucene86Codec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86Codec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene86Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene86Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene86Codec::wrap_Object(Lucene86Codec(((t_Lucene86Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene86Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene86Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene86Codec_init_(t_Lucene86Codec *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene86Codec object((jobject) NULL);

                INT_CALL(object = Lucene86Codec());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene86Codec object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene50::t_Lucene50StoredFieldsFormat$Mode::parameters_))
                {
                  INT_CALL(object = Lucene86Codec(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene86Codec_compoundFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_docValuesFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_fieldInfosFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_getDocValuesFormatForField(t_Lucene86Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene86Codec_getPostingsFormatForField(t_Lucene86Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene86Codec_liveDocsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_normsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_pointsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_postingsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_segmentInfoFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_storedFieldsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene86Codec_termVectorsFormat(t_Lucene86Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MultiPhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *MultiPhraseQueryNodeBuilder::mids$ = NULL;
              bool MultiPhraseQueryNodeBuilder::live$ = false;

              jclass MultiPhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_eb271355bc1b2869] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MultiPhraseQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNodeBuilder::MultiPhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_eb271355bc1b2869], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MultiPhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MultiPhraseQueryNodeBuilder)[] = {
                { Py_tp_methods, t_MultiPhraseQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_MultiPhraseQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MultiPhraseQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder, MultiPhraseQueryNodeBuilder);

              void t_MultiPhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNodeBuilder), &PY_TYPE_DEF(MultiPhraseQueryNodeBuilder), module, "MultiPhraseQueryNodeBuilder", 0);
              }

              void t_MultiPhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNodeBuilder), "class_", make_descriptor(MultiPhraseQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNodeBuilder), "wrapfn_", make_descriptor(t_MultiPhraseQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNodeBuilder::wrap_Object(MultiPhraseQueryNodeBuilder(((t_MultiPhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizer::class$ = NULL;
          jmethodID *WikipediaTokenizer::mids$ = NULL;
          bool WikipediaTokenizer::live$ = false;
          jint WikipediaTokenizer::ACRONYM_ID = (jint) 0;
          jint WikipediaTokenizer::ALPHANUM_ID = (jint) 0;
          jint WikipediaTokenizer::APOSTROPHE_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD = NULL;
          jint WikipediaTokenizer::BOLD_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD_ITALICS = NULL;
          jint WikipediaTokenizer::BOLD_ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::BOTH = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CATEGORY = NULL;
          jint WikipediaTokenizer::CATEGORY_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CITATION = NULL;
          jint WikipediaTokenizer::CITATION_ID = (jint) 0;
          jint WikipediaTokenizer::CJ_ID = (jint) 0;
          jint WikipediaTokenizer::COMPANY_ID = (jint) 0;
          jint WikipediaTokenizer::EMAIL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK_URL = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_URL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::HEADING = NULL;
          jint WikipediaTokenizer::HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::HOST_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::INTERNAL_LINK = NULL;
          jint WikipediaTokenizer::INTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::ITALICS = NULL;
          jint WikipediaTokenizer::ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::NUM_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::SUB_HEADING = NULL;
          jint WikipediaTokenizer::SUB_HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::TOKENS_ONLY = (jint) 0;
          JArray< ::java::lang::String > *WikipediaTokenizer::TOKEN_TYPES = NULL;
          jint WikipediaTokenizer::UNTOKENIZED_ONLY = (jint) 0;
          jint WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG = (jint) 0;

          jclass WikipediaTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d503e4aa074a3bd8] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_init$_eca10dfa1c3e8573] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;ILjava/util/Set;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ACRONYM_ID = env->getStaticIntField(cls, "ACRONYM_ID");
              ALPHANUM_ID = env->getStaticIntField(cls, "ALPHANUM_ID");
              APOSTROPHE_ID = env->getStaticIntField(cls, "APOSTROPHE_ID");
              BOLD = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD", "Ljava/lang/String;"));
              BOLD_ID = env->getStaticIntField(cls, "BOLD_ID");
              BOLD_ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD_ITALICS", "Ljava/lang/String;"));
              BOLD_ITALICS_ID = env->getStaticIntField(cls, "BOLD_ITALICS_ID");
              BOTH = env->getStaticIntField(cls, "BOTH");
              CATEGORY = new ::java::lang::String(env->getStaticObjectField(cls, "CATEGORY", "Ljava/lang/String;"));
              CATEGORY_ID = env->getStaticIntField(cls, "CATEGORY_ID");
              CITATION = new ::java::lang::String(env->getStaticObjectField(cls, "CITATION", "Ljava/lang/String;"));
              CITATION_ID = env->getStaticIntField(cls, "CITATION_ID");
              CJ_ID = env->getStaticIntField(cls, "CJ_ID");
              COMPANY_ID = env->getStaticIntField(cls, "COMPANY_ID");
              EMAIL_ID = env->getStaticIntField(cls, "EMAIL_ID");
              EXTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK", "Ljava/lang/String;"));
              EXTERNAL_LINK_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_ID");
              EXTERNAL_LINK_URL = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK_URL", "Ljava/lang/String;"));
              EXTERNAL_LINK_URL_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_URL_ID");
              HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "HEADING", "Ljava/lang/String;"));
              HEADING_ID = env->getStaticIntField(cls, "HEADING_ID");
              HOST_ID = env->getStaticIntField(cls, "HOST_ID");
              INTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_LINK", "Ljava/lang/String;"));
              INTERNAL_LINK_ID = env->getStaticIntField(cls, "INTERNAL_LINK_ID");
              ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "ITALICS", "Ljava/lang/String;"));
              ITALICS_ID = env->getStaticIntField(cls, "ITALICS_ID");
              NUM_ID = env->getStaticIntField(cls, "NUM_ID");
              SUB_HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "SUB_HEADING", "Ljava/lang/String;"));
              SUB_HEADING_ID = env->getStaticIntField(cls, "SUB_HEADING_ID");
              TOKENS_ONLY = env->getStaticIntField(cls, "TOKENS_ONLY");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              UNTOKENIZED_ONLY = env->getStaticIntField(cls, "UNTOKENIZED_ONLY");
              UNTOKENIZED_TOKEN_FLAG = env->getStaticIntField(cls, "UNTOKENIZED_TOKEN_FLAG");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizer::WikipediaTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          WikipediaTokenizer::WikipediaTokenizer(jint a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_d503e4aa074a3bd8, a0, a1.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_eca10dfa1c3e8573, a0.this$, a1, a2.this$)) {}

          void WikipediaTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void WikipediaTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean WikipediaTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void WikipediaTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizer__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WikipediaTokenizer)[] = {
            { Py_tp_methods, t_WikipediaTokenizer__methods_ },
            { Py_tp_init, (void *) t_WikipediaTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WikipediaTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(WikipediaTokenizer, t_WikipediaTokenizer, WikipediaTokenizer);

          void t_WikipediaTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizer), &PY_TYPE_DEF(WikipediaTokenizer), module, "WikipediaTokenizer", 0);
          }

          void t_WikipediaTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "class_", make_descriptor(WikipediaTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "wrapfn_", make_descriptor(t_WikipediaTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "ACRONYM_ID", make_descriptor(WikipediaTokenizer::ACRONYM_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "ALPHANUM_ID", make_descriptor(WikipediaTokenizer::ALPHANUM_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "APOSTROPHE_ID", make_descriptor(WikipediaTokenizer::APOSTROPHE_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "BOLD", make_descriptor(j2p(*WikipediaTokenizer::BOLD)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "BOLD_ID", make_descriptor(WikipediaTokenizer::BOLD_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "BOLD_ITALICS", make_descriptor(j2p(*WikipediaTokenizer::BOLD_ITALICS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "BOLD_ITALICS_ID", make_descriptor(WikipediaTokenizer::BOLD_ITALICS_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "BOTH", make_descriptor(WikipediaTokenizer::BOTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "CATEGORY", make_descriptor(j2p(*WikipediaTokenizer::CATEGORY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "CATEGORY_ID", make_descriptor(WikipediaTokenizer::CATEGORY_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "CITATION", make_descriptor(j2p(*WikipediaTokenizer::CITATION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "CITATION_ID", make_descriptor(WikipediaTokenizer::CITATION_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "CJ_ID", make_descriptor(WikipediaTokenizer::CJ_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "COMPANY_ID", make_descriptor(WikipediaTokenizer::COMPANY_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "EMAIL_ID", make_descriptor(WikipediaTokenizer::EMAIL_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "EXTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "EXTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "EXTERNAL_LINK_URL", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK_URL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "EXTERNAL_LINK_URL_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_URL_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "HEADING", make_descriptor(j2p(*WikipediaTokenizer::HEADING)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "HEADING_ID", make_descriptor(WikipediaTokenizer::HEADING_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "HOST_ID", make_descriptor(WikipediaTokenizer::HOST_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "INTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::INTERNAL_LINK)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "INTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::INTERNAL_LINK_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "ITALICS", make_descriptor(j2p(*WikipediaTokenizer::ITALICS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "ITALICS_ID", make_descriptor(WikipediaTokenizer::ITALICS_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "NUM_ID", make_descriptor(WikipediaTokenizer::NUM_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "SUB_HEADING", make_descriptor(j2p(*WikipediaTokenizer::SUB_HEADING)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "SUB_HEADING_ID", make_descriptor(WikipediaTokenizer::SUB_HEADING_ID));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "TOKENS_ONLY", make_descriptor(WikipediaTokenizer::TOKENS_ONLY));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "TOKEN_TYPES", make_descriptor(JArray<jstring>(WikipediaTokenizer::TOKEN_TYPES->this$).wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "UNTOKENIZED_ONLY", make_descriptor(WikipediaTokenizer::UNTOKENIZED_ONLY));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizer), "UNTOKENIZED_TOKEN_FLAG", make_descriptor(WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG));
          }

          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizer::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizer::wrap_Object(WikipediaTokenizer(((t_WikipediaTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WikipediaTokenizer object((jobject) NULL);

                INT_CALL(object = WikipediaTokenizer());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WikipediaTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WikipediaTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(WikipediaTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WikipediaTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValuedFloatFieldSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValuedFloatFieldSource::class$ = NULL;
            jmethodID *MultiValuedFloatFieldSource::mids$ = NULL;
            bool MultiValuedFloatFieldSource::live$ = false;

            jclass MultiValuedFloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValuedFloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_eb65f30ff755fcc7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortedNumericSelector$Type;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValuedFloatFieldSource::MultiValuedFloatFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1) : ::org::apache::lucene::queries::function::valuesource::FloatFieldSource(env->newObject(initializeClass, &mids$, mid_init$_eb65f30ff755fcc7, a0.this$, a1.this$)) {}

            ::java::lang::String MultiValuedFloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiValuedFloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField MultiValuedFloatFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            jint MultiValuedFloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValuedFloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValuedFloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValuedFloatFieldSource_init_(t_MultiValuedFloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValuedFloatFieldSource_description(t_MultiValuedFloatFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedFloatFieldSource_equals(t_MultiValuedFloatFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedFloatFieldSource_getSortField(t_MultiValuedFloatFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedFloatFieldSource_hashCode(t_MultiValuedFloatFieldSource *self, PyObject *args);

            static PyMethodDef t_MultiValuedFloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedFloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiValuedFloatFieldSource)[] = {
              { Py_tp_methods, t_MultiValuedFloatFieldSource__methods_ },
              { Py_tp_init, (void *) t_MultiValuedFloatFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiValuedFloatFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FloatFieldSource),
              NULL
            };

            DEFINE_TYPE(MultiValuedFloatFieldSource, t_MultiValuedFloatFieldSource, MultiValuedFloatFieldSource);

            void t_MultiValuedFloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValuedFloatFieldSource), &PY_TYPE_DEF(MultiValuedFloatFieldSource), module, "MultiValuedFloatFieldSource", 0);
            }

            void t_MultiValuedFloatFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedFloatFieldSource), "class_", make_descriptor(MultiValuedFloatFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedFloatFieldSource), "wrapfn_", make_descriptor(t_MultiValuedFloatFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedFloatFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValuedFloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValuedFloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_MultiValuedFloatFieldSource::wrap_Object(MultiValuedFloatFieldSource(((t_MultiValuedFloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValuedFloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValuedFloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValuedFloatFieldSource_init_(t_MultiValuedFloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
              PyTypeObject **p1;
              MultiValuedFloatFieldSource object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = MultiValuedFloatFieldSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiValuedFloatFieldSource_description(t_MultiValuedFloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiValuedFloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiValuedFloatFieldSource_equals(t_MultiValuedFloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiValuedFloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiValuedFloatFieldSource_getSortField(t_MultiValuedFloatFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiValuedFloatFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_MultiValuedFloatFieldSource_hashCode(t_MultiValuedFloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiValuedFloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharArrayMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/CharArrayMap.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/CharArrayMap$EntrySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharArrayMap::class$ = NULL;
        jmethodID *CharArrayMap::mids$ = NULL;
        bool CharArrayMap::live$ = false;

        jclass CharArrayMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharArrayMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8f283cdbda5c964] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_init$_f2949932cebbb77f] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Z)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_containsKey_2cd6b83cb18fe093] = env->getMethodID(cls, "containsKey", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_containsKey_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
            mids$[mid_containsKey_4c2a9c7f32a6ad26] = env->getMethodID(cls, "containsKey", "([CII)Z");
            mids$[mid_copy_88eeed32f715c127] = env->getStaticMethodID(cls, "copy", "(Ljava/util/Map;)Lorg/apache/lucene/analysis/CharArrayMap;");
            mids$[mid_emptyMap_360b031d826aaf33] = env->getStaticMethodID(cls, "emptyMap", "()Lorg/apache/lucene/analysis/CharArrayMap;");
            mids$[mid_entrySet_1d5b236bebb8dcd6] = env->getMethodID(cls, "entrySet", "()Lorg/apache/lucene/analysis/CharArrayMap$EntrySet;");
            mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
            mids$[mid_get_e5ae0f8c04795fa9] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_get_6c211a5648c8aecb] = env->getMethodID(cls, "get", "([CII)Ljava/lang/Object;");
            mids$[mid_keySet_7aec8e69a9807ca1] = env->getMethodID(cls, "keySet", "()Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_put_ffc1f734610880bf] = env->getMethodID(cls, "put", "([CLjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_put_fad6cebff83150fd] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_put_b1bfcab6305554e2] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_put_128a89bbc17a8b69] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_remove_e5ae0f8c04795fa9] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unmodifiableMap_43d1481483396c0f] = env->getStaticMethodID(cls, "unmodifiableMap", "(Lorg/apache/lucene/analysis/CharArrayMap;)Lorg/apache/lucene/analysis/CharArrayMap;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharArrayMap::CharArrayMap(jint a0, jboolean a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b8f283cdbda5c964, a0, a1)) {}

        CharArrayMap::CharArrayMap(const ::java::util::Map & a0, jboolean a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_f2949932cebbb77f, a0.this$, a1)) {}

        void CharArrayMap::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jboolean CharArrayMap::containsKey(const ::java::lang::CharSequence & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_2cd6b83cb18fe093], a0.this$);
        }

        jboolean CharArrayMap::containsKey(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_8b72f2dcdde6fd1d], a0.this$);
        }

        jboolean CharArrayMap::containsKey(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_4c2a9c7f32a6ad26], a0.this$, a1, a2);
        }

        CharArrayMap CharArrayMap::copy(const ::java::util::Map & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_88eeed32f715c127], a0.this$));
        }

        CharArrayMap CharArrayMap::emptyMap()
        {
          jclass cls = env->getClass(initializeClass);
          return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_360b031d826aaf33]));
        }

        ::org::apache::lucene::analysis::CharArrayMap$EntrySet CharArrayMap::entrySet() const
        {
          return ::org::apache::lucene::analysis::CharArrayMap$EntrySet(env->callObjectMethod(this$, mids$[mid_entrySet_1d5b236bebb8dcd6]));
        }

        ::java::lang::Object CharArrayMap::get(const ::java::lang::CharSequence & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
        }

        ::java::lang::Object CharArrayMap::get(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_e5ae0f8c04795fa9], a0.this$));
        }

        ::java::lang::Object CharArrayMap::get(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_6c211a5648c8aecb], a0.this$, a1, a2));
        }

        ::org::apache::lucene::analysis::CharArraySet CharArrayMap::keySet() const
        {
          return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_keySet_7aec8e69a9807ca1]));
        }

        ::java::lang::Object CharArrayMap::put(const JArray< jchar > & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_ffc1f734610880bf], a0.this$, a1.this$));
        }

        ::java::lang::Object CharArrayMap::put(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_fad6cebff83150fd], a0.this$, a1.this$));
        }

        ::java::lang::Object CharArrayMap::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_b1bfcab6305554e2], a0.this$, a1.this$));
        }

        ::java::lang::Object CharArrayMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_128a89bbc17a8b69], a0.this$, a1.this$));
        }

        ::java::lang::Object CharArrayMap::remove(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_e5ae0f8c04795fa9], a0.this$));
        }

        jint CharArrayMap::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::java::lang::String CharArrayMap::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        CharArrayMap CharArrayMap::unmodifiableMap(const CharArrayMap & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_43d1481483396c0f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args);
        static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type);
        static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args);
        static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data);
        static PyGetSetDef t_CharArrayMap__fields_[] = {
          DECLARE_GET_FIELD(t_CharArrayMap, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharArrayMap__methods_[] = {
          DECLARE_METHOD(t_CharArrayMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap, of_, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, clear, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, containsKey, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, copy, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap, emptyMap, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap, entrySet, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, get, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, keySet, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, put, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, remove, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, size, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, toString, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap, unmodifiableMap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharArrayMap)[] = {
          { Py_tp_methods, t_CharArrayMap__methods_ },
          { Py_tp_init, (void *) t_CharArrayMap_init_ },
          { Py_tp_getset, t_CharArrayMap__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharArrayMap)[] = {
          &PY_TYPE_DEF(::java::util::AbstractMap),
          NULL
        };

        DEFINE_TYPE(CharArrayMap, t_CharArrayMap, CharArrayMap);
        PyObject *t_CharArrayMap::wrap_Object(const CharArrayMap& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap *self = (t_CharArrayMap *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CharArrayMap::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap *self = (t_CharArrayMap *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CharArrayMap::install(PyObject *module)
        {
          installType(&PY_TYPE(CharArrayMap), &PY_TYPE_DEF(CharArrayMap), module, "CharArrayMap", 0);
        }

        void t_CharArrayMap::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap), "class_", make_descriptor(CharArrayMap::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap), "wrapfn_", make_descriptor(t_CharArrayMap::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharArrayMap::initializeClass, 1)))
            return NULL;
          return t_CharArrayMap::wrap_Object(CharArrayMap(((t_CharArrayMap *) arg)->object.this$));
        }
        static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharArrayMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              CharArrayMap object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = CharArrayMap(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              CharArrayMap object((jobject) NULL);

              if (!parseArgs(args, "KZ", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = CharArrayMap(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.containsKey(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.containsKey(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.containsKey(a0, a1, a2));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "containsKey", args, 2);
        }

        static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          CharArrayMap result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharArrayMap::copy(a0));
            return t_CharArrayMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "copy", arg);
          return NULL;
        }

        static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type)
        {
          CharArrayMap result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::analysis::CharArrayMap::emptyMap());
          return t_CharArrayMap::wrap_Object(result);
        }

        static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::CharArrayMap$EntrySet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.entrySet());
            return ::org::apache::lucene::analysis::t_CharArrayMap$EntrySet::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "entrySet", args, 2);
        }

        static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.get(a0, a1, a2));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.keySet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "keySet", args, 2);
        }

        static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "[CO", self->parameters[0], &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "sO", self->parameters[0], &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), self->parameters[0], &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "oO", self->parameters[0], &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "put", args, 2);
        }

        static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CharArrayMap), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg)
        {
          CharArrayMap a0((jobject) NULL);
          PyTypeObject **p0;
          CharArrayMap result((jobject) NULL);

          if (!parseArg(arg, "K", CharArrayMap::initializeClass, &a0, &p0, t_CharArrayMap::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharArrayMap::unmodifiableMap(a0));
            return t_CharArrayMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unmodifiableMap", arg);
          return NULL;
        }
        static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect::class$ = NULL;
          jmethodID *AfterEffect::mids$ = NULL;
          bool AfterEffect::live$ = false;

          jclass AfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_9724c62abce55cf4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981] = env->getMethodID(cls, "scoreTimes1pTfn", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect::AfterEffect() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation AfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_9724c62abce55cf4], a0.this$, a1));
          }

          jdouble AfterEffect::scoreTimes1pTfn(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String AfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect_scoreTimes1pTfn(t_AfterEffect *self, PyObject *arg);
          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect, scoreTimes1pTfn, METH_O),
            DECLARE_METHOD(t_AfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AfterEffect)[] = {
            { Py_tp_methods, t_AfterEffect__methods_ },
            { Py_tp_init, (void *) t_AfterEffect_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AfterEffect)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AfterEffect, t_AfterEffect, AfterEffect);

          void t_AfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect), &PY_TYPE_DEF(AfterEffect), module, "AfterEffect", 0);
          }

          void t_AfterEffect::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffect), "class_", make_descriptor(AfterEffect::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffect), "wrapfn_", make_descriptor(t_AfterEffect::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffect), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect::wrap_Object(AfterEffect(((t_AfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect_init_(t_AfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect_explain(t_AfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_AfterEffect_scoreTimes1pTfn(t_AfterEffect *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.scoreTimes1pTfn(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "scoreTimes1pTfn", arg);
            return NULL;
          }

          static PyObject *t_AfterEffect_toString(t_AfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler::class$ = NULL;
              jmethodID *StandardQueryConfigHandler::mids$ = NULL;
              bool StandardQueryConfigHandler::live$ = false;

              jclass StandardQueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler::StandardQueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryConfigHandler)[] = {
                { Py_tp_methods, t_StandardQueryConfigHandler__methods_ },
                { Py_tp_init, (void *) t_StandardQueryConfigHandler_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryConfigHandler)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler),
                NULL
              };

              DEFINE_TYPE(StandardQueryConfigHandler, t_StandardQueryConfigHandler, StandardQueryConfigHandler);

              void t_StandardQueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler), &PY_TYPE_DEF(StandardQueryConfigHandler), module, "StandardQueryConfigHandler", 0);
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler), "Operator", make_descriptor(&PY_TYPE_DEF(StandardQueryConfigHandler$Operator)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler), "ConfigurationKeys", make_descriptor(&PY_TYPE_DEF(StandardQueryConfigHandler$ConfigurationKeys)));
              }

              void t_StandardQueryConfigHandler::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler), "class_", make_descriptor(StandardQueryConfigHandler::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler), "wrapfn_", make_descriptor(t_StandardQueryConfigHandler::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler::wrap_Object(StandardQueryConfigHandler(((t_StandardQueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler_init_(t_StandardQueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadHelper::class$ = NULL;
          jmethodID *PayloadHelper::mids$ = NULL;
          bool PayloadHelper::live$ = false;

          jclass PayloadHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_decodeFloat_294f94628b07c96d] = env->getStaticMethodID(cls, "decodeFloat", "([B)F");
              mids$[mid_decodeFloat_2431569bab1a7ba7] = env->getStaticMethodID(cls, "decodeFloat", "([BI)F");
              mids$[mid_decodeInt_7cdc0fb0850d95a0] = env->getStaticMethodID(cls, "decodeInt", "([BI)I");
              mids$[mid_encodeFloat_a069e3c989eaf648] = env->getStaticMethodID(cls, "encodeFloat", "(F)[B");
              mids$[mid_encodeFloat_e0d63b67e3969044] = env->getStaticMethodID(cls, "encodeFloat", "(F[BI)[B");
              mids$[mid_encodeInt_81fae1e0e2d0070b] = env->getStaticMethodID(cls, "encodeInt", "(I)[B");
              mids$[mid_encodeInt_4f1a8b36495fc9b0] = env->getStaticMethodID(cls, "encodeInt", "(I[BI)[B");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadHelper::PayloadHelper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_294f94628b07c96d], a0.this$);
          }

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_2431569bab1a7ba7], a0.this$, a1);
          }

          jint PayloadHelper::decodeInt(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decodeInt_7cdc0fb0850d95a0], a0.this$, a1);
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_a069e3c989eaf648], a0));
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_e0d63b67e3969044], a0, a1.this$, a2));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_81fae1e0e2d0070b], a0));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_4f1a8b36495fc9b0], a0, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PayloadHelper__methods_[] = {
            DECLARE_METHOD(t_PayloadHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeInt, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadHelper)[] = {
            { Py_tp_methods, t_PayloadHelper__methods_ },
            { Py_tp_init, (void *) t_PayloadHelper_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadHelper)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PayloadHelper, t_PayloadHelper, PayloadHelper);

          void t_PayloadHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadHelper), &PY_TYPE_DEF(PayloadHelper), module, "PayloadHelper", 0);
          }

          void t_PayloadHelper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadHelper), "class_", make_descriptor(PayloadHelper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadHelper), "wrapfn_", make_descriptor(t_PayloadHelper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadHelper), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadHelper::initializeClass, 1)))
              return NULL;
            return t_PayloadHelper::wrap_Object(PayloadHelper(((t_PayloadHelper *) arg)->object.this$));
          }
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds)
          {
            PayloadHelper object((jobject) NULL);

            INT_CALL(object = PayloadHelper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jbyte > a0((jobject) NULL);
                jfloat result;

                if (!parseArgs(args, "[B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                jfloat result;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError(type, "decodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeInt(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decodeInt", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jfloat a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeInt", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/ClassicSimilarity.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *ClassicSimilarity::class$ = NULL;
          jmethodID *ClassicSimilarity::mids$ = NULL;
          bool ClassicSimilarity::live$ = false;

          jclass ClassicSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/ClassicSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_idf_f850d9cfe8a8e47f] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_d7ff9aaf392c6db9] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_384f078ef4b8f931] = env->getMethodID(cls, "lengthNorm", "(I)F");
              mids$[mid_tf_8c8518d25218b9c5] = env->getMethodID(cls, "tf", "(F)F");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicSimilarity::ClassicSimilarity() : ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat ClassicSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_f850d9cfe8a8e47f], a0, a1);
          }

          ::org::apache::lucene::search::Explanation ClassicSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_d7ff9aaf392c6db9], a0.this$, a1.this$));
          }

          jfloat ClassicSimilarity::lengthNorm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_384f078ef4b8f931], a0);
          }

          jfloat ClassicSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_8c8518d25218b9c5], a0);
          }

          ::java::lang::String ClassicSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_ClassicSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicSimilarity_init_(t_ClassicSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicSimilarity_idf(t_ClassicSimilarity *self, PyObject *args);
          static PyObject *t_ClassicSimilarity_idfExplain(t_ClassicSimilarity *self, PyObject *args);
          static PyObject *t_ClassicSimilarity_lengthNorm(t_ClassicSimilarity *self, PyObject *args);
          static PyObject *t_ClassicSimilarity_tf(t_ClassicSimilarity *self, PyObject *args);
          static PyObject *t_ClassicSimilarity_toString(t_ClassicSimilarity *self, PyObject *args);

          static PyMethodDef t_ClassicSimilarity__methods_[] = {
            DECLARE_METHOD(t_ClassicSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_ClassicSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_ClassicSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_ClassicSimilarity, tf, METH_VARARGS),
            DECLARE_METHOD(t_ClassicSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicSimilarity)[] = {
            { Py_tp_methods, t_ClassicSimilarity__methods_ },
            { Py_tp_init, (void *) t_ClassicSimilarity_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::TFIDFSimilarity),
            NULL
          };

          DEFINE_TYPE(ClassicSimilarity, t_ClassicSimilarity, ClassicSimilarity);

          void t_ClassicSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicSimilarity), &PY_TYPE_DEF(ClassicSimilarity), module, "ClassicSimilarity", 0);
          }

          void t_ClassicSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicSimilarity), "class_", make_descriptor(ClassicSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicSimilarity), "wrapfn_", make_descriptor(t_ClassicSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicSimilarity::initializeClass, 1)))
              return NULL;
            return t_ClassicSimilarity::wrap_Object(ClassicSimilarity(((t_ClassicSimilarity *) arg)->object.this$));
          }
          static PyObject *t_ClassicSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicSimilarity_init_(t_ClassicSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ClassicSimilarity object((jobject) NULL);

            INT_CALL(object = ClassicSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_ClassicSimilarity_idf(t_ClassicSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ClassicSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_ClassicSimilarity_idfExplain(t_ClassicSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ClassicSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_ClassicSimilarity_lengthNorm(t_ClassicSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ClassicSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_ClassicSimilarity_tf(t_ClassicSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ClassicSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static PyObject *t_ClassicSimilarity_toString(t_ClassicSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(ClassicSimilarity), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingIntBlockAllocator::class$ = NULL;
        jmethodID *RecyclingIntBlockAllocator::mids$ = NULL;
        bool RecyclingIntBlockAllocator::live$ = false;
        jint RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingIntBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingIntBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_d5caaeae1d724489] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_1e143afe1894d213] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getIntBlock_d2c45ef07a322466] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_maxBufferedBlocks_9972fcc56b44e79d] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_9972fcc56b44e79d] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleIntBlocks_8cce81c663fcf6f9] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d5caaeae1d724489, a0, a1, a2.this$)) {}

        jlong RecyclingIntBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_2e5ae9edcb9b072f]);
        }

        jint RecyclingIntBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_1e143afe1894d213], a0);
        }

        JArray< jint > RecyclingIntBlockAllocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_d2c45ef07a322466]));
        }

        jint RecyclingIntBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_9972fcc56b44e79d]);
        }

        jint RecyclingIntBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_9972fcc56b44e79d]);
        }

        void RecyclingIntBlockAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_8cce81c663fcf6f9], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingIntBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingIntBlockAllocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingIntBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, getIntBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RecyclingIntBlockAllocator)[] = {
          { Py_tp_methods, t_RecyclingIntBlockAllocator__methods_ },
          { Py_tp_init, (void *) t_RecyclingIntBlockAllocator_init_ },
          { Py_tp_getset, t_RecyclingIntBlockAllocator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RecyclingIntBlockAllocator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::IntBlockPool$Allocator),
          NULL
        };

        DEFINE_TYPE(RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator, RecyclingIntBlockAllocator);

        void t_RecyclingIntBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingIntBlockAllocator), &PY_TYPE_DEF(RecyclingIntBlockAllocator), module, "RecyclingIntBlockAllocator", 0);
        }

        void t_RecyclingIntBlockAllocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingIntBlockAllocator), "class_", make_descriptor(RecyclingIntBlockAllocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingIntBlockAllocator), "wrapfn_", make_descriptor(t_RecyclingIntBlockAllocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingIntBlockAllocator), "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingIntBlockAllocator::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingIntBlockAllocator), "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingIntBlockAllocator::wrap_Object(RecyclingIntBlockAllocator(((t_RecyclingIntBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingIntBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingIntBlockAllocator());
              self->object = object;
              break;
            }
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIntBlock());
            return result.wrap();
          }

          return callSuper(PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "getIntBlock", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/FixedShingleFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *FixedShingleFilter::class$ = NULL;
          jmethodID *FixedShingleFilter::mids$ = NULL;
          bool FixedShingleFilter::live$ = false;

          jclass FixedShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/FixedShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_aae66bd81c02df0d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILjava/lang/String;Ljava/lang/String;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedShingleFilter::FixedShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::GraphTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          FixedShingleFilter::FixedShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::org::apache::lucene::analysis::GraphTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_aae66bd81c02df0d, a0.this$, a1, a2.this$, a3.this$)) {}

          jboolean FixedShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_FixedShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedShingleFilter_init_(t_FixedShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixedShingleFilter_incrementToken(t_FixedShingleFilter *self, PyObject *args);

          static PyMethodDef t_FixedShingleFilter__methods_[] = {
            DECLARE_METHOD(t_FixedShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedShingleFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixedShingleFilter)[] = {
            { Py_tp_methods, t_FixedShingleFilter__methods_ },
            { Py_tp_init, (void *) t_FixedShingleFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixedShingleFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::GraphTokenFilter),
            NULL
          };

          DEFINE_TYPE(FixedShingleFilter, t_FixedShingleFilter, FixedShingleFilter);

          void t_FixedShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedShingleFilter), &PY_TYPE_DEF(FixedShingleFilter), module, "FixedShingleFilter", 0);
          }

          void t_FixedShingleFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilter), "class_", make_descriptor(FixedShingleFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilter), "wrapfn_", make_descriptor(t_FixedShingleFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedShingleFilter::initializeClass, 1)))
              return NULL;
            return t_FixedShingleFilter::wrap_Object(FixedShingleFilter(((t_FixedShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_FixedShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedShingleFilter_init_(t_FixedShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                FixedShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FixedShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                FixedShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kIss", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FixedShingleFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixedShingleFilter_incrementToken(t_FixedShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FixedShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BlendedTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BlendedTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *BlendedTermQuery$RewriteMethod::mids$ = NULL;
        bool BlendedTermQuery$RewriteMethod::live$ = false;

        jclass BlendedTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BlendedTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_rewrite_1e167f3b9bc63b74] = env->getMethodID(cls, "rewrite", "([Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Query BlendedTermQuery$RewriteMethod::rewrite(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_1e167f3b9bc63b74], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BlendedTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery$RewriteMethod_rewrite(t_BlendedTermQuery$RewriteMethod *self, PyObject *arg);

        static PyMethodDef t_BlendedTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_BlendedTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$RewriteMethod, rewrite, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlendedTermQuery$RewriteMethod)[] = {
          { Py_tp_methods, t_BlendedTermQuery$RewriteMethod__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlendedTermQuery$RewriteMethod)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BlendedTermQuery$RewriteMethod, t_BlendedTermQuery$RewriteMethod, BlendedTermQuery$RewriteMethod);

        void t_BlendedTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(BlendedTermQuery$RewriteMethod), &PY_TYPE_DEF(BlendedTermQuery$RewriteMethod), module, "BlendedTermQuery$RewriteMethod", 0);
        }

        void t_BlendedTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$RewriteMethod), "class_", make_descriptor(BlendedTermQuery$RewriteMethod::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$RewriteMethod), "wrapfn_", make_descriptor(t_BlendedTermQuery$RewriteMethod::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$RewriteMethod), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlendedTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlendedTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_BlendedTermQuery$RewriteMethod::wrap_Object(BlendedTermQuery$RewriteMethod(((t_BlendedTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_BlendedTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlendedTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlendedTermQuery$RewriteMethod_rewrite(t_BlendedTermQuery$RewriteMethod *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat$IntBlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat$IntBlockTermState.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50PostingsFormat$IntBlockTermState::class$ = NULL;
          jmethodID *Lucene50PostingsFormat$IntBlockTermState::mids$ = NULL;
          jfieldID *Lucene50PostingsFormat$IntBlockTermState::fids$ = NULL;
          bool Lucene50PostingsFormat$IntBlockTermState::live$ = false;

          jclass Lucene50PostingsFormat$IntBlockTermState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat$IntBlockTermState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_920af9bb2f7a63c6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene50/Lucene50PostingsFormat$IntBlockTermState;");
              mids$[mid_copyFrom_4291efa1cd29ac2a] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_docStartFP] = env->getFieldID(cls, "docStartFP", "J");
              fids$[fid_lastPosBlockOffset] = env->getFieldID(cls, "lastPosBlockOffset", "J");
              fids$[fid_payStartFP] = env->getFieldID(cls, "payStartFP", "J");
              fids$[fid_posStartFP] = env->getFieldID(cls, "posStartFP", "J");
              fids$[fid_singletonDocID] = env->getFieldID(cls, "singletonDocID", "I");
              fids$[fid_skipOffset] = env->getFieldID(cls, "skipOffset", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50PostingsFormat$IntBlockTermState::Lucene50PostingsFormat$IntBlockTermState() : ::org::apache::lucene::codecs::BlockTermState(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene50PostingsFormat$IntBlockTermState Lucene50PostingsFormat$IntBlockTermState::clone() const
          {
            return Lucene50PostingsFormat$IntBlockTermState(env->callObjectMethod(this$, mids$[mid_clone_920af9bb2f7a63c6]));
          }

          void Lucene50PostingsFormat$IntBlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyFrom_4291efa1cd29ac2a], a0.this$);
          }

          ::java::lang::String Lucene50PostingsFormat$IntBlockTermState::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong Lucene50PostingsFormat$IntBlockTermState::_get_docStartFP() const
          {
            return env->getLongField(this$, fids$[fid_docStartFP]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_docStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_docStartFP], a0);
          }

          jlong Lucene50PostingsFormat$IntBlockTermState::_get_lastPosBlockOffset() const
          {
            return env->getLongField(this$, fids$[fid_lastPosBlockOffset]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_lastPosBlockOffset(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_lastPosBlockOffset], a0);
          }

          jlong Lucene50PostingsFormat$IntBlockTermState::_get_payStartFP() const
          {
            return env->getLongField(this$, fids$[fid_payStartFP]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_payStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_payStartFP], a0);
          }

          jlong Lucene50PostingsFormat$IntBlockTermState::_get_posStartFP() const
          {
            return env->getLongField(this$, fids$[fid_posStartFP]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_posStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_posStartFP], a0);
          }

          jint Lucene50PostingsFormat$IntBlockTermState::_get_singletonDocID() const
          {
            return env->getIntField(this$, fids$[fid_singletonDocID]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_singletonDocID(jint a0) const
          {
            env->setIntField(this$, fids$[fid_singletonDocID], a0);
          }

          jlong Lucene50PostingsFormat$IntBlockTermState::_get_skipOffset() const
          {
            return env->getLongField(this$, fids$[fid_skipOffset]);
          }

          void Lucene50PostingsFormat$IntBlockTermState::_set_skipOffset(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_skipOffset], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50PostingsFormat$IntBlockTermState_init_(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_clone(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_copyFrom(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_toString(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__docStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__docStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__lastPosBlockOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__lastPosBlockOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__payStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__payStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__posStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__posStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__singletonDocID(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__singletonDocID(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__skipOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__skipOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);

          static PyGetSetDef t_Lucene50PostingsFormat$IntBlockTermState__fields_[] = {
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, docStartFP),
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, lastPosBlockOffset),
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, payStartFP),
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, posStartFP),
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, singletonDocID),
            DECLARE_GETSET_FIELD(t_Lucene50PostingsFormat$IntBlockTermState, skipOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene50PostingsFormat$IntBlockTermState__methods_[] = {
            DECLARE_METHOD(t_Lucene50PostingsFormat$IntBlockTermState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsFormat$IntBlockTermState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsFormat$IntBlockTermState, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsFormat$IntBlockTermState, copyFrom, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsFormat$IntBlockTermState, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50PostingsFormat$IntBlockTermState)[] = {
            { Py_tp_methods, t_Lucene50PostingsFormat$IntBlockTermState__methods_ },
            { Py_tp_init, (void *) t_Lucene50PostingsFormat$IntBlockTermState_init_ },
            { Py_tp_getset, t_Lucene50PostingsFormat$IntBlockTermState__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50PostingsFormat$IntBlockTermState)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::BlockTermState),
            NULL
          };

          DEFINE_TYPE(Lucene50PostingsFormat$IntBlockTermState, t_Lucene50PostingsFormat$IntBlockTermState, Lucene50PostingsFormat$IntBlockTermState);

          void t_Lucene50PostingsFormat$IntBlockTermState::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), &PY_TYPE_DEF(Lucene50PostingsFormat$IntBlockTermState), module, "Lucene50PostingsFormat$IntBlockTermState", 0);
          }

          void t_Lucene50PostingsFormat$IntBlockTermState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), "class_", make_descriptor(Lucene50PostingsFormat$IntBlockTermState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), "wrapfn_", make_descriptor(t_Lucene50PostingsFormat$IntBlockTermState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50PostingsFormat$IntBlockTermState::initializeClass, 1)))
              return NULL;
            return t_Lucene50PostingsFormat$IntBlockTermState::wrap_Object(Lucene50PostingsFormat$IntBlockTermState(((t_Lucene50PostingsFormat$IntBlockTermState *) arg)->object.this$));
          }
          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50PostingsFormat$IntBlockTermState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50PostingsFormat$IntBlockTermState_init_(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args, PyObject *kwds)
          {
            Lucene50PostingsFormat$IntBlockTermState object((jobject) NULL);

            INT_CALL(object = Lucene50PostingsFormat$IntBlockTermState());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_clone(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            Lucene50PostingsFormat$IntBlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene50PostingsFormat$IntBlockTermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_copyFrom(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyFrom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), (PyObject *) self, "copyFrom", args, 2);
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_toString(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat$IntBlockTermState), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__docStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_docStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__docStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_docStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "docStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__lastPosBlockOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_lastPosBlockOffset());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__lastPosBlockOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_lastPosBlockOffset(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "lastPosBlockOffset", arg);
            return -1;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__payStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_payStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__payStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_payStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "payStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__posStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_posStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__posStartFP(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_posStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "posStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__singletonDocID(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_singletonDocID());
            return PyLong_FromLong((long) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__singletonDocID(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_singletonDocID(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "singletonDocID", arg);
            return -1;
          }

          static PyObject *t_Lucene50PostingsFormat$IntBlockTermState_get__skipOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_skipOffset());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene50PostingsFormat$IntBlockTermState_set__skipOffset(t_Lucene50PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_skipOffset(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "skipOffset", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm$MatchingTermVisitor::class$ = NULL;
            jmethodID *SimpleTerm$MatchingTermVisitor::mids$ = NULL;
            bool SimpleTerm$MatchingTermVisitor::live$ = false;

            jclass SimpleTerm$MatchingTermVisitor::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor");

                mids$ = new jmethodID[max_mid];
                mids$[mid_visitMatchingTerm_32784f9c0ee449e6] = env->getMethodID(cls, "visitMatchingTerm", "(Lorg/apache/lucene/index/Term;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void SimpleTerm$MatchingTermVisitor::visitMatchingTerm(const ::org::apache::lucene::index::Term & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerm_32784f9c0ee449e6], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg);

            static PyMethodDef t_SimpleTerm$MatchingTermVisitor__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, visitMatchingTerm, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SimpleTerm$MatchingTermVisitor)[] = {
              { Py_tp_methods, t_SimpleTerm$MatchingTermVisitor__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SimpleTerm$MatchingTermVisitor)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(SimpleTerm$MatchingTermVisitor, t_SimpleTerm$MatchingTermVisitor, SimpleTerm$MatchingTermVisitor);

            void t_SimpleTerm$MatchingTermVisitor::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm$MatchingTermVisitor), &PY_TYPE_DEF(SimpleTerm$MatchingTermVisitor), module, "SimpleTerm$MatchingTermVisitor", 0);
            }

            void t_SimpleTerm$MatchingTermVisitor::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm$MatchingTermVisitor), "class_", make_descriptor(SimpleTerm$MatchingTermVisitor::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm$MatchingTermVisitor), "wrapfn_", make_descriptor(t_SimpleTerm$MatchingTermVisitor::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm$MatchingTermVisitor), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm$MatchingTermVisitor::wrap_Object(SimpleTerm$MatchingTermVisitor(((t_SimpleTerm$MatchingTermVisitor *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visitMatchingTerm(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerm", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *ComposedQuery::class$ = NULL;
            jmethodID *ComposedQuery::mids$ = NULL;
            bool ComposedQuery::live$ = false;

            jclass ComposedQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/ComposedQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3e5aa525cb56d41] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_getNrSubQueries_9972fcc56b44e79d] = env->getMethodID(cls, "getNrSubQueries", "()I");
                mids$[mid_getOperatorName_db9b55ba01e03e4b] = env->getMethodID(cls, "getOperatorName", "()Ljava/lang/String;");
                mids$[mid_getSubQueriesIterator_233a192dadb0917d] = env->getMethodID(cls, "getSubQueriesIterator", "()Ljava/util/Iterator;");
                mids$[mid_getSubQuery_c6a8d10d287a9d09] = env->getMethodID(cls, "getSubQuery", "(I)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isOperatorInfix_8454bd5aa23fd11e] = env->getMethodID(cls, "isOperatorInfix", "()Z");
                mids$[mid_makeLuceneSubQueriesField_817b703da32439ca] = env->getMethodID(cls, "makeLuceneSubQueriesField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_recompose_d03990be0130160d] = env->getMethodID(cls, "recompose", "(Ljava/util/List;)V");
                mids$[mid_getPrefixSeparator_db9b55ba01e03e4b] = env->getMethodID(cls, "getPrefixSeparator", "()Ljava/lang/String;");
                mids$[mid_getBracketOpen_db9b55ba01e03e4b] = env->getMethodID(cls, "getBracketOpen", "()Ljava/lang/String;");
                mids$[mid_getBracketClose_db9b55ba01e03e4b] = env->getMethodID(cls, "getBracketClose", "()Ljava/lang/String;");
                mids$[mid_infixToString_90aa63c10985f260] = env->getMethodID(cls, "infixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_prefixToString_90aa63c10985f260] = env->getMethodID(cls, "prefixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComposedQuery::ComposedQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_f3e5aa525cb56d41, a0.this$, a1, a2.this$)) {}

            jint ComposedQuery::getNrSubQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrSubQueries_9972fcc56b44e79d]);
            }

            ::java::lang::String ComposedQuery::getOperatorName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOperatorName_db9b55ba01e03e4b]));
            }

            ::java::util::Iterator ComposedQuery::getSubQueriesIterator() const
            {
              return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getSubQueriesIterator_233a192dadb0917d]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery ComposedQuery::getSubQuery(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_getSubQuery_c6a8d10d287a9d09], a0));
            }

            jboolean ComposedQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e]);
            }

            jboolean ComposedQuery::isOperatorInfix() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isOperatorInfix_8454bd5aa23fd11e]);
            }

            ::java::util::List ComposedQuery::makeLuceneSubQueriesField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_makeLuceneSubQueriesField_817b703da32439ca], a0.this$, a1.this$));
            }

            ::java::lang::String ComposedQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg);
            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data);
            static PyGetSetDef t_ComposedQuery__fields_[] = {
              DECLARE_GET_FIELD(t_ComposedQuery, fieldsSubQueryAcceptable),
              DECLARE_GET_FIELD(t_ComposedQuery, nrSubQueries),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorInfix),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorName),
              DECLARE_GET_FIELD(t_ComposedQuery, subQueriesIterator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ComposedQuery__methods_[] = {
              DECLARE_METHOD(t_ComposedQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, getNrSubQueries, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getOperatorName, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQueriesIterator, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQuery, METH_O),
              DECLARE_METHOD(t_ComposedQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, isOperatorInfix, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, makeLuceneSubQueriesField, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ComposedQuery)[] = {
              { Py_tp_methods, t_ComposedQuery__methods_ },
              { Py_tp_init, (void *) t_ComposedQuery_init_ },
              { Py_tp_getset, t_ComposedQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ComposedQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SrndQuery),
              NULL
            };

            DEFINE_TYPE(ComposedQuery, t_ComposedQuery, ComposedQuery);

            void t_ComposedQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ComposedQuery), &PY_TYPE_DEF(ComposedQuery), module, "ComposedQuery", 0);
            }

            void t_ComposedQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComposedQuery), "class_", make_descriptor(ComposedQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComposedQuery), "wrapfn_", make_descriptor(t_ComposedQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComposedQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComposedQuery::initializeClass, 1)))
                return NULL;
              return t_ComposedQuery::wrap_Object(ComposedQuery(((t_ComposedQuery *) arg)->object.this$));
            }
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComposedQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              ComposedQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = ComposedQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrSubQueries());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getOperatorName());
              return j2p(result);
            }

            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self)
            {
              ::java::util::Iterator result((jobject) NULL);
              OBJ_CALL(result = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getSubQuery(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSubQuery", arg);
              return NULL;
            }

            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ComposedQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isOperatorInfix());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneSubQueriesField(a0, a1));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Query));
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneSubQueriesField", args);
              return NULL;
            }

            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(ComposedQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrSubQueries());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isOperatorInfix());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getOperatorName());
              return j2p(value);
            }

            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data)
            {
              ::java::util::Iterator value((jobject) NULL);
              OBJ_CALL(value = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
