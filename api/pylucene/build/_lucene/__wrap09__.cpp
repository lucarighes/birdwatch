#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$ExpressionContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$ExpressionContext.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$ExpressionContext::class$ = NULL;
          jmethodID *JavascriptParser$ExpressionContext::mids$ = NULL;
          bool JavascriptParser$ExpressionContext::live$ = false;

          jclass JavascriptParser$ExpressionContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$ExpressionContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0c6ee6fa39ffeab1] = env->getMethodID(cls, "<init>", "(Lorg/antlr/v4/runtime/ParserRuleContext;I)V");
              mids$[mid_copyFrom_5b630188893587b5] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_getRuleIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getRuleIndex", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$ExpressionContext::JavascriptParser$ExpressionContext() : ::org::antlr::v4::runtime::ParserRuleContext(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          JavascriptParser$ExpressionContext::JavascriptParser$ExpressionContext(const ::org::antlr::v4::runtime::ParserRuleContext & a0, jint a1) : ::org::antlr::v4::runtime::ParserRuleContext(env->newObject(initializeClass, &mids$, mid_init$_0c6ee6fa39ffeab1, a0.this$, a1)) {}

          void JavascriptParser$ExpressionContext::copyFrom(const JavascriptParser$ExpressionContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyFrom_5b630188893587b5], a0.this$);
          }

          jint JavascriptParser$ExpressionContext::getRuleIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getRuleIndex_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$ExpressionContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ExpressionContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ExpressionContext_of_(t_JavascriptParser$ExpressionContext *self, PyObject *args);
          static int t_JavascriptParser$ExpressionContext_init_(t_JavascriptParser$ExpressionContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$ExpressionContext_copyFrom(t_JavascriptParser$ExpressionContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$ExpressionContext_getRuleIndex(t_JavascriptParser$ExpressionContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$ExpressionContext_get__ruleIndex(t_JavascriptParser$ExpressionContext *self, void *data);
          static PyObject *t_JavascriptParser$ExpressionContext_get__parameters_(t_JavascriptParser$ExpressionContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$ExpressionContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$ExpressionContext, ruleIndex),
            DECLARE_GET_FIELD(t_JavascriptParser$ExpressionContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$ExpressionContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$ExpressionContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ExpressionContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ExpressionContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$ExpressionContext, copyFrom, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$ExpressionContext, getRuleIndex, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$ExpressionContext)[] = {
            { Py_tp_methods, t_JavascriptParser$ExpressionContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$ExpressionContext_init_ },
            { Py_tp_getset, t_JavascriptParser$ExpressionContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$ExpressionContext)[] = {
            &PY_TYPE_DEF(::org::antlr::v4::runtime::ParserRuleContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$ExpressionContext, t_JavascriptParser$ExpressionContext, JavascriptParser$ExpressionContext);
          PyObject *t_JavascriptParser$ExpressionContext::wrap_Object(const JavascriptParser$ExpressionContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ExpressionContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ExpressionContext *self = (t_JavascriptParser$ExpressionContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$ExpressionContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ExpressionContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ExpressionContext *self = (t_JavascriptParser$ExpressionContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$ExpressionContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$ExpressionContext), &PY_TYPE_DEF(JavascriptParser$ExpressionContext), module, "JavascriptParser$ExpressionContext", 0);
          }

          void t_JavascriptParser$ExpressionContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExpressionContext), "class_", make_descriptor(JavascriptParser$ExpressionContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExpressionContext), "wrapfn_", make_descriptor(t_JavascriptParser$ExpressionContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExpressionContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$ExpressionContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$ExpressionContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$ExpressionContext::wrap_Object(JavascriptParser$ExpressionContext(((t_JavascriptParser$ExpressionContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$ExpressionContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$ExpressionContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$ExpressionContext_of_(t_JavascriptParser$ExpressionContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$ExpressionContext_init_(t_JavascriptParser$ExpressionContext *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JavascriptParser$ExpressionContext object((jobject) NULL);

                INT_CALL(object = JavascriptParser$ExpressionContext());
                self->object = object;
                self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
                self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
                break;
              }
             case 2:
              {
                ::org::antlr::v4::runtime::ParserRuleContext a0((jobject) NULL);
                jint a1;
                JavascriptParser$ExpressionContext object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::antlr::v4::runtime::ParserRuleContext::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = JavascriptParser$ExpressionContext(a0, a1));
                  self->object = object;
                  self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
                  self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$ExpressionContext_copyFrom(t_JavascriptParser$ExpressionContext *self, PyObject *args)
          {
            JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, t_JavascriptParser$ExpressionContext::parameters_))
            {
              OBJ_CALL(self->object.copyFrom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(JavascriptParser$ExpressionContext), (PyObject *) self, "copyFrom", args, 2);
          }

          static PyObject *t_JavascriptParser$ExpressionContext_getRuleIndex(t_JavascriptParser$ExpressionContext *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getRuleIndex());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(JavascriptParser$ExpressionContext), (PyObject *) self, "getRuleIndex", args, 2);
          }
          static PyObject *t_JavascriptParser$ExpressionContext_get__parameters_(t_JavascriptParser$ExpressionContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_JavascriptParser$ExpressionContext_get__ruleIndex(t_JavascriptParser$ExpressionContext *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRuleIndex());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *Lucene84PostingsWriter::class$ = NULL;
          jmethodID *Lucene84PostingsWriter::mids$ = NULL;
          bool Lucene84PostingsWriter::live$ = false;

          jclass Lucene84PostingsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a108448a3f706d50] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_addPosition_4abb6de9b756bb6a] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_encodeTerm_f62bffe9c51f545a] = env->getMethodID(cls, "encodeTerm", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_finishDoc_f2cc1bce94666404] = env->getMethodID(cls, "finishDoc", "()V");
              mids$[mid_finishTerm_e796bc0c61819518] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_init_4c065b7dbc1107da] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_newTermState_8880b3d74c257bd4] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState;");
              mids$[mid_setField_747195a1c5ce5890] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)V");
              mids$[mid_startDoc_438c62480c481c65] = env->getMethodID(cls, "startDoc", "(II)V");
              mids$[mid_startTerm_9dac957b1f5708ab] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/index/NumericDocValues;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene84PostingsWriter::Lucene84PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PushPostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a108448a3f706d50, a0.this$)) {}

          void Lucene84PostingsWriter::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_4abb6de9b756bb6a], a0, a1.this$, a2, a3);
          }

          void Lucene84PostingsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void Lucene84PostingsWriter::encodeTerm(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2, jboolean a3) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeTerm_f62bffe9c51f545a], a0.this$, a1.this$, a2.this$, a3);
          }

          void Lucene84PostingsWriter::finishDoc() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDoc_f2cc1bce94666404]);
          }

          void Lucene84PostingsWriter::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_e796bc0c61819518], a0.this$);
          }

          void Lucene84PostingsWriter::init(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::index::SegmentWriteState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_4c065b7dbc1107da], a0.this$, a1.this$);
          }

          ::org::apache::lucene::codecs::lucene84::Lucene84PostingsFormat$IntBlockTermState Lucene84PostingsWriter::newTermState() const
          {
            return ::org::apache::lucene::codecs::lucene84::Lucene84PostingsFormat$IntBlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_8880b3d74c257bd4]));
          }

          void Lucene84PostingsWriter::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setField_747195a1c5ce5890], a0.this$);
          }

          void Lucene84PostingsWriter::startDoc(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startDoc_438c62480c481c65], a0, a1);
          }

          void Lucene84PostingsWriter::startTerm(const ::org::apache::lucene::index::NumericDocValues & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_9dac957b1f5708ab], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_Lucene84PostingsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene84PostingsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene84PostingsWriter_init_(t_Lucene84PostingsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene84PostingsWriter_addPosition(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_close(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_encodeTerm(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_finishDoc(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_finishTerm(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_init(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_newTermState(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_setField(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_startDoc(t_Lucene84PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene84PostingsWriter_startTerm(t_Lucene84PostingsWriter *self, PyObject *args);
          static int t_Lucene84PostingsWriter_set__field(t_Lucene84PostingsWriter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Lucene84PostingsWriter__fields_[] = {
            DECLARE_SET_FIELD(t_Lucene84PostingsWriter, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene84PostingsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene84PostingsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, encodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, finishDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, setField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, startDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene84PostingsWriter)[] = {
            { Py_tp_methods, t_Lucene84PostingsWriter__methods_ },
            { Py_tp_init, (void *) t_Lucene84PostingsWriter_init_ },
            { Py_tp_getset, t_Lucene84PostingsWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene84PostingsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PushPostingsWriterBase),
            NULL
          };

          DEFINE_TYPE(Lucene84PostingsWriter, t_Lucene84PostingsWriter, Lucene84PostingsWriter);

          void t_Lucene84PostingsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene84PostingsWriter), &PY_TYPE_DEF(Lucene84PostingsWriter), module, "Lucene84PostingsWriter", 0);
          }

          void t_Lucene84PostingsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsWriter), "class_", make_descriptor(Lucene84PostingsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsWriter), "wrapfn_", make_descriptor(t_Lucene84PostingsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene84PostingsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene84PostingsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene84PostingsWriter::wrap_Object(Lucene84PostingsWriter(((t_Lucene84PostingsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene84PostingsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene84PostingsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene84PostingsWriter_init_(t_Lucene84PostingsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            Lucene84PostingsWriter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              INT_CALL(object = Lucene84PostingsWriter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene84PostingsWriter_addPosition(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_close(t_Lucene84PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_encodeTerm(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);
            jboolean a3;

            if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "encodeTerm", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_finishDoc(t_Lucene84PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDoc());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "finishDoc", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_finishTerm(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.finishTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_init(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_newTermState(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::lucene84::Lucene84PostingsFormat$IntBlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::lucene84::t_Lucene84PostingsFormat$IntBlockTermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_setField(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setField(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "setField", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_startDoc(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.startDoc(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "startDoc", args, 2);
          }

          static PyObject *t_Lucene84PostingsWriter_startTerm(t_Lucene84PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::NumericDocValues::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static int t_Lucene84PostingsWriter_set__field(t_Lucene84PostingsWriter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
              {
                INT_CALL(self->object.setField(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "field", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliStemFilter::class$ = NULL;
          jmethodID *BengaliStemFilter::mids$ = NULL;
          bool BengaliStemFilter::live$ = false;

          jclass BengaliStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliStemFilter::BengaliStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean BengaliStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliStemFilter_init_(t_BengaliStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliStemFilter_incrementToken(t_BengaliStemFilter *self, PyObject *args);

          static PyMethodDef t_BengaliStemFilter__methods_[] = {
            DECLARE_METHOD(t_BengaliStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliStemFilter)[] = {
            { Py_tp_methods, t_BengaliStemFilter__methods_ },
            { Py_tp_init, (void *) t_BengaliStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(BengaliStemFilter, t_BengaliStemFilter, BengaliStemFilter);

          void t_BengaliStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliStemFilter), &PY_TYPE_DEF(BengaliStemFilter), module, "BengaliStemFilter", 0);
          }

          void t_BengaliStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilter), "class_", make_descriptor(BengaliStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilter), "wrapfn_", make_descriptor(t_BengaliStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BengaliStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliStemFilter::initializeClass, 1)))
              return NULL;
            return t_BengaliStemFilter::wrap_Object(BengaliStemFilter(((t_BengaliStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BengaliStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliStemFilter_init_(t_BengaliStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BengaliStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BengaliStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BengaliStemFilter_incrementToken(t_BengaliStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BengaliStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ScoreMode::class$ = NULL;
          jmethodID *ScoreMode::mids$ = NULL;
          bool ScoreMode::live$ = false;
          ScoreMode *ScoreMode::Avg = NULL;
          ScoreMode *ScoreMode::Max = NULL;
          ScoreMode *ScoreMode::Min = NULL;
          ScoreMode *ScoreMode::None = NULL;
          ScoreMode *ScoreMode::Total = NULL;

          jclass ScoreMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ScoreMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_b785bb024a5e5d24] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/ScoreMode;");
              mids$[mid_values_b57cf5ca72de0db7] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/ScoreMode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              Avg = new ScoreMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Max = new ScoreMode(env->getStaticObjectField(cls, "Max", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Min = new ScoreMode(env->getStaticObjectField(cls, "Min", "Lorg/apache/lucene/search/join/ScoreMode;"));
              None = new ScoreMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Total = new ScoreMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/join/ScoreMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b785bb024a5e5d24], a0.this$));
          }

          JArray< ScoreMode > ScoreMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_b57cf5ca72de0db7]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_ScoreMode_values(PyTypeObject *type);
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
          static PyGetSetDef t_ScoreMode__fields_[] = {
            DECLARE_GET_FIELD(t_ScoreMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ScoreMode__methods_[] = {
            DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScoreMode)[] = {
            { Py_tp_methods, t_ScoreMode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_ScoreMode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScoreMode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(ScoreMode, t_ScoreMode, ScoreMode);
          PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ScoreMode::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreMode), &PY_TYPE_DEF(ScoreMode), module, "ScoreMode", 0);
          }

          void t_ScoreMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "class_", make_descriptor(ScoreMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "boxfn_", make_descriptor(boxObject));
            env->getClass(ScoreMode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "Avg", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Avg)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "Max", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Max)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "Min", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Min)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "None", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::None)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "Total", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Total)));
          }

          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
              return NULL;
            return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
          }
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ScoreMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::valueOf(a0));
              return t_ScoreMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_ScoreMode_values(PyTypeObject *type)
          {
            JArray< ScoreMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::values());
            return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
          }
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$ClosedListener.h"
#include "org/apache/lucene/index/IndexReader$CacheKey.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$ClosedListener::class$ = NULL;
        jmethodID *IndexReader$ClosedListener::mids$ = NULL;
        bool IndexReader$ClosedListener::live$ = false;

        jclass IndexReader$ClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$ClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_c5f144062e12bc8f] = env->getMethodID(cls, "onClose", "(Lorg/apache/lucene/index/IndexReader$CacheKey;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$ClosedListener::onClose(const ::org::apache::lucene::index::IndexReader$CacheKey & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_c5f144062e12bc8f], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$ClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$ClosedListener_onClose(t_IndexReader$ClosedListener *self, PyObject *arg);

        static PyMethodDef t_IndexReader$ClosedListener__methods_[] = {
          DECLARE_METHOD(t_IndexReader$ClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$ClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexReader$ClosedListener)[] = {
          { Py_tp_methods, t_IndexReader$ClosedListener__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexReader$ClosedListener)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexReader$ClosedListener, t_IndexReader$ClosedListener, IndexReader$ClosedListener);

        void t_IndexReader$ClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$ClosedListener), &PY_TYPE_DEF(IndexReader$ClosedListener), module, "IndexReader$ClosedListener", 0);
        }

        void t_IndexReader$ClosedListener::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$ClosedListener), "class_", make_descriptor(IndexReader$ClosedListener::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$ClosedListener), "wrapfn_", make_descriptor(t_IndexReader$ClosedListener::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$ClosedListener), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$ClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$ClosedListener::initializeClass, 1)))
            return NULL;
          return t_IndexReader$ClosedListener::wrap_Object(IndexReader$ClosedListener(((t_IndexReader$ClosedListener *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$ClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$ClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$ClosedListener_onClose(t_IndexReader$ClosedListener *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$CacheKey a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$CacheKey::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessor::class$ = NULL;
              jmethodID *QueryNodeProcessor::mids$ = NULL;
              bool QueryNodeProcessor::live$ = false;

              jclass QueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getQueryConfigHandler_04fdb47806be47b9] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_ae2484f2d8820041] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_04fdb47806be47b9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }

              void QueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_ae2484f2d8820041], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self);
              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data);
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNodeProcessor)[] = {
                { Py_tp_methods, t_QueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_QueryNodeProcessor__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNodeProcessor, t_QueryNodeProcessor, QueryNodeProcessor);

              void t_QueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessor), &PY_TYPE_DEF(QueryNodeProcessor), module, "QueryNodeProcessor", 0);
              }

              void t_QueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessor), "class_", make_descriptor(QueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessor), "wrapfn_", make_descriptor(t_QueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessor::wrap_Object(QueryNodeProcessor(((t_QueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeProcessor_getQueryConfigHandler(t_QueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessor_process(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_setQueryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessor_get__queryConfigHandler(t_QueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessor_set__queryConfigHandler(t_QueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterLeafCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterLeafCollector::class$ = NULL;
        jmethodID *FilterLeafCollector::mids$ = NULL;
        bool FilterLeafCollector::live$ = false;

        jclass FilterLeafCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterLeafCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ecd966a57601cc44] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/LeafCollector;)V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafCollector::FilterLeafCollector(const ::org::apache::lucene::search::LeafCollector & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ecd966a57601cc44, a0.this$)) {}

        void FilterLeafCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        void FilterLeafCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }

        ::java::lang::String FilterLeafCollector::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterLeafCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafCollector_init_(t_FilterLeafCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafCollector_collect(t_FilterLeafCollector *self, PyObject *arg);
        static PyObject *t_FilterLeafCollector_setScorer(t_FilterLeafCollector *self, PyObject *arg);
        static PyObject *t_FilterLeafCollector_toString(t_FilterLeafCollector *self, PyObject *args);
        static int t_FilterLeafCollector_set__scorer(t_FilterLeafCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FilterLeafCollector__fields_[] = {
          DECLARE_SET_FIELD(t_FilterLeafCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterLeafCollector__methods_[] = {
          DECLARE_METHOD(t_FilterLeafCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafCollector, collect, METH_O),
          DECLARE_METHOD(t_FilterLeafCollector, setScorer, METH_O),
          DECLARE_METHOD(t_FilterLeafCollector, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafCollector)[] = {
          { Py_tp_methods, t_FilterLeafCollector__methods_ },
          { Py_tp_init, (void *) t_FilterLeafCollector_init_ },
          { Py_tp_getset, t_FilterLeafCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FilterLeafCollector, t_FilterLeafCollector, FilterLeafCollector);

        void t_FilterLeafCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafCollector), &PY_TYPE_DEF(FilterLeafCollector), module, "FilterLeafCollector", 0);
        }

        void t_FilterLeafCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafCollector), "class_", make_descriptor(FilterLeafCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafCollector), "wrapfn_", make_descriptor(t_FilterLeafCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafCollector::initializeClass, 1)))
            return NULL;
          return t_FilterLeafCollector::wrap_Object(FilterLeafCollector(((t_FilterLeafCollector *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafCollector_init_(t_FilterLeafCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::LeafCollector a0((jobject) NULL);
          FilterLeafCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::LeafCollector::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafCollector_collect(t_FilterLeafCollector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_FilterLeafCollector_setScorer(t_FilterLeafCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FilterLeafCollector_toString(t_FilterLeafCollector *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FilterLeafCollector), (PyObject *) self, "toString", args, 2);
        }

        static int t_FilterLeafCollector_set__scorer(t_FilterLeafCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstValueSource::class$ = NULL;
            jmethodID *ConstValueSource::mids$ = NULL;
            bool ConstValueSource::live$ = false;

            jclass ConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_8454bd5aa23fd11e] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_8c74b787998ce4bc] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_58aec2b64dff50c8] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_9972fcc56b44e79d] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_f5813404cc5e3a1e] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstValueSource::ConstValueSource(jfloat a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

            ::java::lang::String ConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean ConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jboolean ConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_8454bd5aa23fd11e]);
            }

            jdouble ConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_8c74b787998ce4bc]);
            }

            jfloat ConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_58aec2b64dff50c8]);
            }

            jint ConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_9972fcc56b44e79d]);
            }

            jlong ConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_2e5ae9edcb9b072f]);
            }

            ::java::lang::Number ConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_f5813404cc5e3a1e]));
            }

            ::org::apache::lucene::queries::function::FunctionValues ConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint ConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data);
            static PyGetSetDef t_ConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstValueSource, bool),
              DECLARE_GET_FIELD(t_ConstValueSource, double),
              DECLARE_GET_FIELD(t_ConstValueSource, float),
              DECLARE_GET_FIELD(t_ConstValueSource, int),
              DECLARE_GET_FIELD(t_ConstValueSource, long),
              DECLARE_GET_FIELD(t_ConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstValueSource__methods_[] = {
              DECLARE_METHOD(t_ConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ConstValueSource)[] = {
              { Py_tp_methods, t_ConstValueSource__methods_ },
              { Py_tp_init, (void *) t_ConstValueSource_init_ },
              { Py_tp_getset, t_ConstValueSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ConstValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::ConstNumberSource),
              NULL
            };

            DEFINE_TYPE(ConstValueSource, t_ConstValueSource, ConstValueSource);

            void t_ConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstValueSource), &PY_TYPE_DEF(ConstValueSource), module, "ConstValueSource", 0);
            }

            void t_ConstValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstValueSource), "class_", make_descriptor(ConstValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstValueSource), "wrapfn_", make_descriptor(t_ConstValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstValueSource::initializeClass, 1)))
                return NULL;
              return t_ConstValueSource::wrap_Object(ConstValueSource(((t_ConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jfloat a0;
              ConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = ConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AllGroupHeadsCollector.h"
#include "org/apache/lucene/search/grouping/AllGroupHeadsCollector.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AllGroupHeadsCollector::class$ = NULL;
          jmethodID *AllGroupHeadsCollector::mids$ = NULL;
          bool AllGroupHeadsCollector::live$ = false;

          jclass AllGroupHeadsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AllGroupHeadsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_groupHeadsSize_9972fcc56b44e79d] = env->getMethodID(cls, "groupHeadsSize", "()I");
              mids$[mid_newCollector_004bf68e76751d00] = env->getStaticMethodID(cls, "newCollector", "(Lorg/apache/lucene/search/grouping/GroupSelector;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/AllGroupHeadsCollector;");
              mids$[mid_retrieveGroupHeads_d2c45ef07a322466] = env->getMethodID(cls, "retrieveGroupHeads", "()[I");
              mids$[mid_retrieveGroupHeads_8a4ea7ed4cff6942] = env->getMethodID(cls, "retrieveGroupHeads", "(I)Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_getCollectedGroupHeads_d4dfbf7a26ff41df] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");
              mids$[mid_newGroupHead_592fb517c001b35b] = env->getMethodID(cls, "newGroupHead", "(ILjava/lang/Object;Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/Scorable;)Lorg/apache/lucene/search/grouping/AllGroupHeadsCollector$GroupHead;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void AllGroupHeadsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
          }

          jint AllGroupHeadsCollector::groupHeadsSize() const
          {
            return env->callIntMethod(this$, mids$[mid_groupHeadsSize_9972fcc56b44e79d]);
          }

          AllGroupHeadsCollector AllGroupHeadsCollector::newCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0, const ::org::apache::lucene::search::Sort & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return AllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_newCollector_004bf68e76751d00], a0.this$, a1.this$));
          }

          JArray< jint > AllGroupHeadsCollector::retrieveGroupHeads() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_d2c45ef07a322466]));
          }

          ::org::apache::lucene::util::FixedBitSet AllGroupHeadsCollector::retrieveGroupHeads(jint a0) const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_8a4ea7ed4cff6942], a0));
          }

          ::org::apache::lucene::search::ScoreMode AllGroupHeadsCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void AllGroupHeadsCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AllGroupHeadsCollector$GroupHead.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupHeadsCollector_of_(t_AllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector_collect(t_AllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector_groupHeadsSize(t_AllGroupHeadsCollector *self);
          static PyObject *t_AllGroupHeadsCollector_newCollector(PyTypeObject *type, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector_retrieveGroupHeads(t_AllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector_scoreMode(t_AllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector_setScorer(t_AllGroupHeadsCollector *self, PyObject *args);
          static int t_AllGroupHeadsCollector_set__scorer(t_AllGroupHeadsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AllGroupHeadsCollector_get__parameters_(t_AllGroupHeadsCollector *self, void *data);
          static PyGetSetDef t_AllGroupHeadsCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AllGroupHeadsCollector, scorer),
            DECLARE_GET_FIELD(t_AllGroupHeadsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AllGroupHeadsCollector__methods_[] = {
            DECLARE_METHOD(t_AllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, groupHeadsSize, METH_NOARGS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, newCollector, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, retrieveGroupHeads, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupHeadsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AllGroupHeadsCollector)[] = {
            { Py_tp_methods, t_AllGroupHeadsCollector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_AllGroupHeadsCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AllGroupHeadsCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(AllGroupHeadsCollector, t_AllGroupHeadsCollector, AllGroupHeadsCollector);
          PyObject *t_AllGroupHeadsCollector::wrap_Object(const AllGroupHeadsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupHeadsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupHeadsCollector *self = (t_AllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupHeadsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupHeadsCollector *self = (t_AllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AllGroupHeadsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AllGroupHeadsCollector), &PY_TYPE_DEF(AllGroupHeadsCollector), module, "AllGroupHeadsCollector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector), "GroupHead", make_descriptor(&PY_TYPE_DEF(AllGroupHeadsCollector$GroupHead)));
          }

          void t_AllGroupHeadsCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector), "class_", make_descriptor(AllGroupHeadsCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector), "wrapfn_", make_descriptor(t_AllGroupHeadsCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AllGroupHeadsCollector::initializeClass, 1)))
              return NULL;
            return t_AllGroupHeadsCollector::wrap_Object(AllGroupHeadsCollector(((t_AllGroupHeadsCollector *) arg)->object.this$));
          }
          static PyObject *t_AllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AllGroupHeadsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AllGroupHeadsCollector_of_(t_AllGroupHeadsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AllGroupHeadsCollector_collect(t_AllGroupHeadsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(AllGroupHeadsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AllGroupHeadsCollector_groupHeadsSize(t_AllGroupHeadsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.groupHeadsSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_AllGroupHeadsCollector_newCollector(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            AllGroupHeadsCollector result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::AllGroupHeadsCollector::newCollector(a0, a1));
              return t_AllGroupHeadsCollector::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newCollector", args);
            return NULL;
          }

          static PyObject *t_AllGroupHeadsCollector_retrieveGroupHeads(t_AllGroupHeadsCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< jint > result((jobject) NULL);
                OBJ_CALL(result = self->object.retrieveGroupHeads());
                return result.wrap();
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveGroupHeads(a0));
                  return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveGroupHeads", args);
            return NULL;
          }

          static PyObject *t_AllGroupHeadsCollector_scoreMode(t_AllGroupHeadsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(AllGroupHeadsCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_AllGroupHeadsCollector_setScorer(t_AllGroupHeadsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(AllGroupHeadsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AllGroupHeadsCollector_get__parameters_(t_AllGroupHeadsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AllGroupHeadsCollector_set__scorer(t_AllGroupHeadsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CharacterRunAutomaton::class$ = NULL;
          jmethodID *CharacterRunAutomaton::mids$ = NULL;
          bool CharacterRunAutomaton::live$ = false;

          jclass CharacterRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CharacterRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_df17a55ceec53376] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;I)V");
              mids$[mid_run_145b2d0af0c06b93] = env->getMethodID(cls, "run", "(Ljava/lang/String;)Z");
              mids$[mid_run_4c2a9c7f32a6ad26] = env->getMethodID(cls, "run", "([CII)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_df17a55ceec53376, a0.this$, a1)) {}

          jboolean CharacterRunAutomaton::run(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_145b2d0af0c06b93], a0.this$);
          }

          jboolean CharacterRunAutomaton::run(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_4c2a9c7f32a6ad26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args);

          static PyMethodDef t_CharacterRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_CharacterRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharacterRunAutomaton)[] = {
            { Py_tp_methods, t_CharacterRunAutomaton__methods_ },
            { Py_tp_init, (void *) t_CharacterRunAutomaton_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharacterRunAutomaton)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::automaton::RunAutomaton),
            NULL
          };

          DEFINE_TYPE(CharacterRunAutomaton, t_CharacterRunAutomaton, CharacterRunAutomaton);

          void t_CharacterRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterRunAutomaton), &PY_TYPE_DEF(CharacterRunAutomaton), module, "CharacterRunAutomaton", 0);
          }

          void t_CharacterRunAutomaton::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterRunAutomaton), "class_", make_descriptor(CharacterRunAutomaton::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterRunAutomaton), "wrapfn_", make_descriptor(t_CharacterRunAutomaton::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterRunAutomaton), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_CharacterRunAutomaton::wrap_Object(CharacterRunAutomaton(((t_CharacterRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CharacterRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CharacterRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                CharacterRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CharacterRunAutomaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.run(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.run(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Gener.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Gener::class$ = NULL;
      jmethodID *Gener::mids$ = NULL;
      bool Gener::live$ = false;

      jclass Gener::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Gener");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_eat_1ee9b33b558f700e] = env->getMethodID(cls, "eat", "(Lorg/egothor/stemmer/Row;[I)Z");
          mids$[mid_optimize_76214b7d9a62d571] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Gener::Gener() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      jboolean Gener::eat(const ::org::egothor::stemmer::Row & a0, const JArray< jint > & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_eat_1ee9b33b558f700e], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Gener::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_76214b7d9a62d571], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args);
      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args);

      static PyMethodDef t_Gener__methods_[] = {
        DECLARE_METHOD(t_Gener, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Gener, eat, METH_VARARGS),
        DECLARE_METHOD(t_Gener, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Gener)[] = {
        { Py_tp_methods, t_Gener__methods_ },
        { Py_tp_init, (void *) t_Gener_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Gener)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::Reduce),
        NULL
      };

      DEFINE_TYPE(Gener, t_Gener, Gener);

      void t_Gener::install(PyObject *module)
      {
        installType(&PY_TYPE(Gener), &PY_TYPE_DEF(Gener), module, "Gener", 0);
      }

      void t_Gener::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Gener), "class_", make_descriptor(Gener::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Gener), "wrapfn_", make_descriptor(t_Gener::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Gener), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Gener_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Gener::initializeClass, 1)))
          return NULL;
        return t_Gener::wrap_Object(Gener(((t_Gener *) arg)->object.this$));
      }
      static PyObject *t_Gener_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Gener::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Gener_init_(t_Gener *self, PyObject *args, PyObject *kwds)
      {
        Gener object((jobject) NULL);

        INT_CALL(object = Gener());
        self->object = object;

        return 0;
      }

      static PyObject *t_Gener_eat(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        JArray< jint > a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "k[I", ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.eat(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "eat", args);
        return NULL;
      }

      static PyObject *t_Gener_optimize(t_Gener *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(PY_TYPE(Gener), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker::class$ = NULL;
          jmethodID *WordBreakSpellChecker::mids$ = NULL;
          bool WordBreakSpellChecker::live$ = false;
          ::org::apache::lucene::index::Term *WordBreakSpellChecker::SEPARATOR_TERM = NULL;

          jclass WordBreakSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getMaxChanges_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxChanges", "()I");
              mids$[mid_getMaxCombineWordLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxCombineWordLength", "()I");
              mids$[mid_getMaxEvaluations_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxEvaluations", "()I");
              mids$[mid_getMinBreakWordLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMinBreakWordLength", "()I");
              mids$[mid_getMinSuggestionFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getMinSuggestionFrequency", "()I");
              mids$[mid_setMaxChanges_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxChanges", "(I)V");
              mids$[mid_setMaxCombineWordLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxCombineWordLength", "(I)V");
              mids$[mid_setMaxEvaluations_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxEvaluations", "(I)V");
              mids$[mid_setMinBreakWordLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMinBreakWordLength", "(I)V");
              mids$[mid_setMinSuggestionFrequency_040c4cd0390c5aff] = env->getMethodID(cls, "setMinSuggestionFrequency", "(I)V");
              mids$[mid_suggestWordBreaks_4d67f834f87a2229] = env->getMethodID(cls, "suggestWordBreaks", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)[[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestWordCombinations_90dce80bc4f5daa1] = env->getMethodID(cls, "suggestWordCombinations", "([Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/CombineSuggestion;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SEPARATOR_TERM = new ::org::apache::lucene::index::Term(env->getStaticObjectField(cls, "SEPARATOR_TERM", "Lorg/apache/lucene/index/Term;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker::WordBreakSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint WordBreakSpellChecker::getMaxChanges() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxChanges_9972fcc56b44e79d]);
          }

          jint WordBreakSpellChecker::getMaxCombineWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxCombineWordLength_9972fcc56b44e79d]);
          }

          jint WordBreakSpellChecker::getMaxEvaluations() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEvaluations_9972fcc56b44e79d]);
          }

          jint WordBreakSpellChecker::getMinBreakWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinBreakWordLength_9972fcc56b44e79d]);
          }

          jint WordBreakSpellChecker::getMinSuggestionFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinSuggestionFrequency_9972fcc56b44e79d]);
          }

          void WordBreakSpellChecker::setMaxChanges(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxChanges_040c4cd0390c5aff], a0);
          }

          void WordBreakSpellChecker::setMaxCombineWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxCombineWordLength_040c4cd0390c5aff], a0);
          }

          void WordBreakSpellChecker::setMaxEvaluations(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEvaluations_040c4cd0390c5aff], a0);
          }

          void WordBreakSpellChecker::setMinBreakWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinBreakWordLength_040c4cd0390c5aff], a0);
          }

          void WordBreakSpellChecker::setMinSuggestionFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinSuggestionFrequency_040c4cd0390c5aff], a0);
          }

          JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > WordBreakSpellChecker::suggestWordBreaks(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, const ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod & a4) const
          {
            return JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > >(env->callObjectMethod(this$, mids$[mid_suggestWordBreaks_4d67f834f87a2229], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::org::apache::lucene::search::spell::CombineSuggestion > WordBreakSpellChecker::suggestWordCombinations(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::CombineSuggestion >(env->callObjectMethod(this$, mids$[mid_suggestWordCombinations_90dce80bc4f5daa1], a0.this$, a1, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_WordBreakSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxChanges),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxCombineWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxEvaluations),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minBreakWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minSuggestionFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxChanges, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxCombineWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxEvaluations, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinBreakWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinSuggestionFrequency, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxChanges, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxCombineWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxEvaluations, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinBreakWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinSuggestionFrequency, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordBreaks, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordCombinations, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordBreakSpellChecker)[] = {
            { Py_tp_methods, t_WordBreakSpellChecker__methods_ },
            { Py_tp_init, (void *) t_WordBreakSpellChecker_init_ },
            { Py_tp_getset, t_WordBreakSpellChecker__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordBreakSpellChecker)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(WordBreakSpellChecker, t_WordBreakSpellChecker, WordBreakSpellChecker);

          void t_WordBreakSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker), &PY_TYPE_DEF(WordBreakSpellChecker), module, "WordBreakSpellChecker", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker), "BreakSuggestionSortMethod", make_descriptor(&PY_TYPE_DEF(WordBreakSpellChecker$BreakSuggestionSortMethod)));
          }

          void t_WordBreakSpellChecker::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker), "class_", make_descriptor(WordBreakSpellChecker::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker), "wrapfn_", make_descriptor(t_WordBreakSpellChecker::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker), "SEPARATOR_TERM", make_descriptor(::org::apache::lucene::index::t_Term::wrap_Object(*WordBreakSpellChecker::SEPARATOR_TERM)));
          }

          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker::wrap_Object(WordBreakSpellChecker(((t_WordBreakSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            WordBreakSpellChecker object((jobject) NULL);

            INT_CALL(object = WordBreakSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxChanges());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxCombineWordLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEvaluations());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinBreakWordLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinSuggestionFrequency());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxChanges(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxChanges", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxCombineWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxCombineWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEvaluations(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEvaluations", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinBreakWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinBreakWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinSuggestionFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinSuggestionFrequency", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod a4((jobject) NULL);
            PyTypeObject **p4;
            JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > result((jobject) NULL);

            if (!parseArgs(args, "kIkKK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4, &p4, ::org::apache::lucene::search::spell::t_WordBreakSpellChecker$BreakSuggestionSortMethod::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordBreaks(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(NULL);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordBreaks", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::org::apache::lucene::search::spell::CombineSuggestion > result((jobject) NULL);

            if (!parseArgs(args, "[kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordCombinations(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_CombineSuggestion::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordCombinations", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxChanges());
            return PyLong_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxChanges(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxChanges", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxCombineWordLength());
            return PyLong_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxCombineWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxCombineWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEvaluations());
            return PyLong_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEvaluations(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEvaluations", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinBreakWordLength());
            return PyLong_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinBreakWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minBreakWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinSuggestionFrequency());
            return PyLong_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinSuggestionFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minSuggestionFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceCharFilterFactory::mids$ = NULL;
          bool PatternReplaceCharFilterFactory::live$ = false;
          ::java::lang::String *PatternReplaceCharFilterFactory::NAME = NULL;

          jclass PatternReplaceCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilterFactory::PatternReplaceCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::java::io::Reader PatternReplaceCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          ::java::io::Reader PatternReplaceCharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args);
          static PyObject *t_PatternReplaceCharFilterFactory_normalize(t_PatternReplaceCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternReplaceCharFilterFactory)[] = {
            { Py_tp_methods, t_PatternReplaceCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PatternReplaceCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternReplaceCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory, PatternReplaceCharFilterFactory);

          void t_PatternReplaceCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilterFactory), &PY_TYPE_DEF(PatternReplaceCharFilterFactory), module, "PatternReplaceCharFilterFactory", 0);
          }

          void t_PatternReplaceCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilterFactory), "class_", make_descriptor(PatternReplaceCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilterFactory), "wrapfn_", make_descriptor(t_PatternReplaceCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilterFactory), "NAME", make_descriptor(j2p(*PatternReplaceCharFilterFactory::NAME)));
          }

          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilterFactory::wrap_Object(PatternReplaceCharFilterFactory(((t_PatternReplaceCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PatternReplaceCharFilterFactory_normalize(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermQueryBuilder::class$ = NULL;
            jmethodID *TermQueryBuilder::mids$ = NULL;
            bool TermQueryBuilder::live$ = false;

            jclass TermQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermQueryBuilder::TermQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TermQueryBuilder)[] = {
              { Py_tp_methods, t_TermQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_TermQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TermQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TermQueryBuilder, t_TermQueryBuilder, TermQueryBuilder);

            void t_TermQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermQueryBuilder), &PY_TYPE_DEF(TermQueryBuilder), module, "TermQueryBuilder", 0);
            }

            void t_TermQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermQueryBuilder), "class_", make_descriptor(TermQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermQueryBuilder), "wrapfn_", make_descriptor(t_TermQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermQueryBuilder::wrap_Object(TermQueryBuilder(((t_TermQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              TermQueryBuilder object((jobject) NULL);

              INT_CALL(object = TermQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SloppyMath.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SloppyMath::class$ = NULL;
        jmethodID *SloppyMath::mids$ = NULL;
        bool SloppyMath::live$ = false;
        jdouble SloppyMath::TO_DEGREES = (jdouble) 0;
        jdouble SloppyMath::TO_RADIANS = (jdouble) 0;

        jclass SloppyMath::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SloppyMath");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_asin_d089f34703408a66] = env->getStaticMethodID(cls, "asin", "(D)D");
            mids$[mid_cos_d089f34703408a66] = env->getStaticMethodID(cls, "cos", "(D)D");
            mids$[mid_haversinKilometers_5578764cae66f7fc] = env->getStaticMethodID(cls, "haversinKilometers", "(DDDD)D");
            mids$[mid_haversinMeters_d089f34703408a66] = env->getStaticMethodID(cls, "haversinMeters", "(D)D");
            mids$[mid_haversinMeters_5578764cae66f7fc] = env->getStaticMethodID(cls, "haversinMeters", "(DDDD)D");
            mids$[mid_haversinSortKey_5578764cae66f7fc] = env->getStaticMethodID(cls, "haversinSortKey", "(DDDD)D");
            mids$[mid_toDegrees_d089f34703408a66] = env->getStaticMethodID(cls, "toDegrees", "(D)D");
            mids$[mid_toRadians_d089f34703408a66] = env->getStaticMethodID(cls, "toRadians", "(D)D");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TO_DEGREES = env->getStaticDoubleField(cls, "TO_DEGREES");
            TO_RADIANS = env->getStaticDoubleField(cls, "TO_RADIANS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SloppyMath::SloppyMath() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jdouble SloppyMath::asin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asin_d089f34703408a66], a0);
        }

        jdouble SloppyMath::cos(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_cos_d089f34703408a66], a0);
        }

        jdouble SloppyMath::haversinKilometers(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversinKilometers_5578764cae66f7fc], a0, a1, a2, a3);
        }

        jdouble SloppyMath::haversinMeters(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversinMeters_d089f34703408a66], a0);
        }

        jdouble SloppyMath::haversinMeters(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversinMeters_5578764cae66f7fc], a0, a1, a2, a3);
        }

        jdouble SloppyMath::haversinSortKey(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversinSortKey_5578764cae66f7fc], a0, a1, a2, a3);
        }

        jdouble SloppyMath::toDegrees(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_toDegrees_d089f34703408a66], a0);
        }

        jdouble SloppyMath::toRadians(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_toRadians_d089f34703408a66], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_haversinKilometers(PyTypeObject *type, PyObject *args);
        static PyObject *t_SloppyMath_haversinMeters(PyTypeObject *type, PyObject *args);
        static PyObject *t_SloppyMath_haversinSortKey(PyTypeObject *type, PyObject *args);
        static PyObject *t_SloppyMath_toDegrees(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_toRadians(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SloppyMath__methods_[] = {
          DECLARE_METHOD(t_SloppyMath, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, asin, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, cos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversinKilometers, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversinMeters, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversinSortKey, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, toDegrees, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, toRadians, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SloppyMath)[] = {
          { Py_tp_methods, t_SloppyMath__methods_ },
          { Py_tp_init, (void *) t_SloppyMath_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SloppyMath)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SloppyMath, t_SloppyMath, SloppyMath);

        void t_SloppyMath::install(PyObject *module)
        {
          installType(&PY_TYPE(SloppyMath), &PY_TYPE_DEF(SloppyMath), module, "SloppyMath", 0);
        }

        void t_SloppyMath::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SloppyMath), "class_", make_descriptor(SloppyMath::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SloppyMath), "wrapfn_", make_descriptor(t_SloppyMath::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SloppyMath), "boxfn_", make_descriptor(boxObject));
          env->getClass(SloppyMath::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SloppyMath), "TO_DEGREES", make_descriptor(SloppyMath::TO_DEGREES));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SloppyMath), "TO_RADIANS", make_descriptor(SloppyMath::TO_RADIANS));
        }

        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SloppyMath::initializeClass, 1)))
            return NULL;
          return t_SloppyMath::wrap_Object(SloppyMath(((t_SloppyMath *) arg)->object.this$));
        }
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SloppyMath::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds)
        {
          SloppyMath object((jobject) NULL);

          INT_CALL(object = SloppyMath());
          self->object = object;

          return 0;
        }

        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::asin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asin", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::cos(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "cos", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversinKilometers(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversinKilometers(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversinKilometers", args);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversinMeters(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jdouble a0;
              jdouble result;

              if (!parseArgs(args, "D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversinMeters(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
            break;
           case 4:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble result;

              if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversinMeters(a0, a1, a2, a3));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError(type, "haversinMeters", args);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversinSortKey(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversinSortKey(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversinSortKey", args);
          return NULL;
        }

        static PyObject *t_SloppyMath_toDegrees(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::toDegrees(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "toDegrees", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_toRadians(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::toRadians(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "toRadians", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LiveIndexWriterConfig::class$ = NULL;
        jmethodID *LiveIndexWriterConfig::mids$ = NULL;
        bool LiveIndexWriterConfig::live$ = false;

        jclass LiveIndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LiveIndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_a302ebac25c26553] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getCommitOnClose_8454bd5aa23fd11e] = env->getMethodID(cls, "getCommitOnClose", "()Z");
            mids$[mid_getIndexCommit_4abaa8d830d8ecf1] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d] = env->getMethodID(cls, "getIndexCreatedVersionMajor", "()I");
            mids$[mid_getIndexDeletionPolicy_625a1301ba76cda9] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getIndexSort_f58d0196b42aaee4] = env->getMethodID(cls, "getIndexSort", "()Lorg/apache/lucene/search/Sort;");
            mids$[mid_getIndexSortFields_7dcf4034c6d1a92a] = env->getMethodID(cls, "getIndexSortFields", "()Ljava/util/Set;");
            mids$[mid_getInfoStream_05a6766ae71db614] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getLeafSorter_beb0414e0ec1de00] = env->getMethodID(cls, "getLeafSorter", "()Ljava/util/Comparator;");
            mids$[mid_getMaxBufferedDocs_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxFullFlushMergeWaitMillis_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMaxFullFlushMergeWaitMillis", "()J");
            mids$[mid_getMergePolicy_7169dd5a863dd2a6] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_5b8711e0a4a13251] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_ec20118a8af94b4b] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_0d3fdc98e044bb89] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_9972fcc56b44e79d] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_8454bd5aa23fd11e] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getSimilarity_35e3c46e8ea97897] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getSoftDeletesField_db9b55ba01e03e4b] = env->getMethodID(cls, "getSoftDeletesField", "()Ljava/lang/String;");
            mids$[mid_getUseCompoundFile_8454bd5aa23fd11e] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_isCheckPendingFlushOnUpdate_8454bd5aa23fd11e] = env->getMethodID(cls, "isCheckPendingFlushOnUpdate", "()Z");
            mids$[mid_setCheckPendingFlushUpdate_1cdee334d24391e1] = env->getMethodID(cls, "setCheckPendingFlushUpdate", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_9186928ca837d49b] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergePolicy_41adb590d7054121] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_08367819d772a219] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_211daae2a264b809] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setUseCompoundFile_1cdee334d24391e1] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::Analyzer LiveIndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
        }

        ::org::apache::lucene::codecs::Codec LiveIndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_a302ebac25c26553]));
        }

        jboolean LiveIndexWriterConfig::getCommitOnClose() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCommitOnClose_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::IndexCommit LiveIndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_4abaa8d830d8ecf1]));
        }

        jint LiveIndexWriterConfig::getIndexCreatedVersionMajor() const
        {
          return env->callIntMethod(this$, mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::IndexDeletionPolicy LiveIndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_625a1301ba76cda9]));
        }

        ::org::apache::lucene::search::Sort LiveIndexWriterConfig::getIndexSort() const
        {
          return ::org::apache::lucene::search::Sort(env->callObjectMethod(this$, mids$[mid_getIndexSort_f58d0196b42aaee4]));
        }

        ::java::util::Set LiveIndexWriterConfig::getIndexSortFields() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIndexSortFields_7dcf4034c6d1a92a]));
        }

        ::org::apache::lucene::util::InfoStream LiveIndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_05a6766ae71db614]));
        }

        ::java::util::Comparator LiveIndexWriterConfig::getLeafSorter() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getLeafSorter_beb0414e0ec1de00]));
        }

        jint LiveIndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_9972fcc56b44e79d]);
        }

        jlong LiveIndexWriterConfig::getMaxFullFlushMergeWaitMillis() const
        {
          return env->callLongMethod(this$, mids$[mid_getMaxFullFlushMergeWaitMillis_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::MergePolicy LiveIndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_7169dd5a863dd2a6]));
        }

        ::org::apache::lucene::index::MergeScheduler LiveIndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_5b8711e0a4a13251]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer LiveIndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_ec20118a8af94b4b]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode LiveIndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_0d3fdc98e044bb89]));
        }

        jdouble LiveIndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_8c74b787998ce4bc]);
        }

        jint LiveIndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_9972fcc56b44e79d]);
        }

        jboolean LiveIndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::search::similarities::Similarity LiveIndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_35e3c46e8ea97897]));
        }

        ::java::lang::String LiveIndexWriterConfig::getSoftDeletesField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSoftDeletesField_db9b55ba01e03e4b]));
        }

        jboolean LiveIndexWriterConfig::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_8454bd5aa23fd11e]);
        }

        jboolean LiveIndexWriterConfig::isCheckPendingFlushOnUpdate() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCheckPendingFlushOnUpdate_8454bd5aa23fd11e]);
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setCheckPendingFlushUpdate(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckPendingFlushUpdate_1cdee334d24391e1], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_9186928ca837d49b], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_41adb590d7054121], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_08367819d772a219], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_211daae2a264b809], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_1cdee334d24391e1], a0));
        }

        ::java::lang::String LiveIndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCommitOnClose(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCreatedVersionMajor(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexSort(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexSortFields(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getLeafSorter(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxFullFlushMergeWaitMillis(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSoftDeletesField(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_isCheckPendingFlushOnUpdate(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_setCheckPendingFlushUpdate(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args);
        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__checkPendingFlushOnUpdate(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__checkPendingFlushUpdate(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__commitOnClose(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCreatedVersionMajor(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexSort(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexSortFields(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__leafSorter(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxFullFlushMergeWaitMillis(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__softDeletesField(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_LiveIndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, analyzer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, checkPendingFlushOnUpdate),
          DECLARE_SET_FIELD(t_LiveIndexWriterConfig, checkPendingFlushUpdate),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, codec),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, commitOnClose),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCommit),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCreatedVersionMajor),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexDeletionPolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexSort),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexSortFields),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, infoStream),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, leafSorter),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDocs),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, maxFullFlushMergeWaitMillis),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergePolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, readerPooling),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, similarity),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, softDeletesField),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, useCompoundFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveIndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_LiveIndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCommitOnClose, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCreatedVersionMajor, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexDeletionPolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexSort, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexSortFields, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getLeafSorter, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDocs, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxFullFlushMergeWaitMillis, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergePolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergeScheduler, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergedSegmentWarmer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getOpenMode, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMBufferSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMPerThreadHardLimitMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderPooling, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSoftDeletesField, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, isCheckPendingFlushOnUpdate, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setCheckPendingFlushUpdate, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDocs, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergePolicy, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergedSegmentWarmer, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setRAMBufferSizeMB, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setUseCompoundFile, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LiveIndexWriterConfig)[] = {
          { Py_tp_methods, t_LiveIndexWriterConfig__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_LiveIndexWriterConfig__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LiveIndexWriterConfig)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LiveIndexWriterConfig, t_LiveIndexWriterConfig, LiveIndexWriterConfig);

        void t_LiveIndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveIndexWriterConfig), &PY_TYPE_DEF(LiveIndexWriterConfig), module, "LiveIndexWriterConfig", 0);
        }

        void t_LiveIndexWriterConfig::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveIndexWriterConfig), "class_", make_descriptor(LiveIndexWriterConfig::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveIndexWriterConfig), "wrapfn_", make_descriptor(t_LiveIndexWriterConfig::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveIndexWriterConfig), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveIndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_LiveIndexWriterConfig::wrap_Object(LiveIndexWriterConfig(((t_LiveIndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveIndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCommitOnClose(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCommitOnClose());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCreatedVersionMajor(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexSort(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::Sort result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexSortFields(t_LiveIndexWriterConfig *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexSortFields());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getLeafSorter(t_LiveIndexWriterConfig *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getLeafSorter());
          return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(LeafReader));
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxFullFlushMergeWaitMillis(t_LiveIndexWriterConfig *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMaxFullFlushMergeWaitMillis());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);
          OBJ_CALL(result = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReaderPooling());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSoftDeletesField(t_LiveIndexWriterConfig *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSoftDeletesField());
          return j2p(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_isCheckPendingFlushOnUpdate(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCheckPendingFlushOnUpdate());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_setCheckPendingFlushUpdate(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckPendingFlushUpdate(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCheckPendingFlushUpdate", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDocs", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergePolicy", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergedSegmentWarmer", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jdouble a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMBufferSizeMB", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setUseCompoundFile", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LiveIndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__checkPendingFlushOnUpdate(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCheckPendingFlushOnUpdate());
          Py_RETURN_BOOL(value);
        }

        static int t_LiveIndexWriterConfig_set__checkPendingFlushUpdate(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckPendingFlushUpdate(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkPendingFlushUpdate", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__commitOnClose(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCommitOnClose());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCreatedVersionMajor(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexSort(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::Sort value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexSortFields(t_LiveIndexWriterConfig *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSortFields());
          return ::java::util::t_Set::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__leafSorter(t_LiveIndexWriterConfig *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getLeafSorter());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyLong_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxFullFlushMergeWaitMillis(t_LiveIndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMaxFullFlushMergeWaitMillis());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergePolicy(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__softDeletesField(t_LiveIndexWriterConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSoftDeletesField());
          return j2p(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShapeField$QueryRelation::class$ = NULL;
        jmethodID *ShapeField$QueryRelation::mids$ = NULL;
        bool ShapeField$QueryRelation::live$ = false;
        ShapeField$QueryRelation *ShapeField$QueryRelation::CONTAINS = NULL;
        ShapeField$QueryRelation *ShapeField$QueryRelation::DISJOINT = NULL;
        ShapeField$QueryRelation *ShapeField$QueryRelation::INTERSECTS = NULL;
        ShapeField$QueryRelation *ShapeField$QueryRelation::WITHIN = NULL;

        jclass ShapeField$QueryRelation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShapeField$QueryRelation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_093a116239c2823e] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/ShapeField$QueryRelation;");
            mids$[mid_values_ac5645c1b62a01ce] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/ShapeField$QueryRelation;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CONTAINS = new ShapeField$QueryRelation(env->getStaticObjectField(cls, "CONTAINS", "Lorg/apache/lucene/document/ShapeField$QueryRelation;"));
            DISJOINT = new ShapeField$QueryRelation(env->getStaticObjectField(cls, "DISJOINT", "Lorg/apache/lucene/document/ShapeField$QueryRelation;"));
            INTERSECTS = new ShapeField$QueryRelation(env->getStaticObjectField(cls, "INTERSECTS", "Lorg/apache/lucene/document/ShapeField$QueryRelation;"));
            WITHIN = new ShapeField$QueryRelation(env->getStaticObjectField(cls, "WITHIN", "Lorg/apache/lucene/document/ShapeField$QueryRelation;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShapeField$QueryRelation ShapeField$QueryRelation::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ShapeField$QueryRelation(env->callStaticObjectMethod(cls, mids$[mid_valueOf_093a116239c2823e], a0.this$));
        }

        JArray< ShapeField$QueryRelation > ShapeField$QueryRelation::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ShapeField$QueryRelation >(env->callStaticObjectMethod(cls, mids$[mid_values_ac5645c1b62a01ce]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShapeField$QueryRelation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$QueryRelation_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$QueryRelation_of_(t_ShapeField$QueryRelation *self, PyObject *args);
        static PyObject *t_ShapeField$QueryRelation_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_ShapeField$QueryRelation_values(PyTypeObject *type);
        static PyObject *t_ShapeField$QueryRelation_get__parameters_(t_ShapeField$QueryRelation *self, void *data);
        static PyGetSetDef t_ShapeField$QueryRelation__fields_[] = {
          DECLARE_GET_FIELD(t_ShapeField$QueryRelation, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShapeField$QueryRelation__methods_[] = {
          DECLARE_METHOD(t_ShapeField$QueryRelation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$QueryRelation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$QueryRelation, of_, METH_VARARGS),
          DECLARE_METHOD(t_ShapeField$QueryRelation, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$QueryRelation, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ShapeField$QueryRelation)[] = {
          { Py_tp_methods, t_ShapeField$QueryRelation__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ShapeField$QueryRelation__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ShapeField$QueryRelation)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(ShapeField$QueryRelation, t_ShapeField$QueryRelation, ShapeField$QueryRelation);
        PyObject *t_ShapeField$QueryRelation::wrap_Object(const ShapeField$QueryRelation& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ShapeField$QueryRelation::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ShapeField$QueryRelation *self = (t_ShapeField$QueryRelation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ShapeField$QueryRelation::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ShapeField$QueryRelation::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ShapeField$QueryRelation *self = (t_ShapeField$QueryRelation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ShapeField$QueryRelation::install(PyObject *module)
        {
          installType(&PY_TYPE(ShapeField$QueryRelation), &PY_TYPE_DEF(ShapeField$QueryRelation), module, "ShapeField$QueryRelation", 0);
        }

        void t_ShapeField$QueryRelation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "class_", make_descriptor(ShapeField$QueryRelation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "wrapfn_", make_descriptor(t_ShapeField$QueryRelation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "boxfn_", make_descriptor(boxObject));
          env->getClass(ShapeField$QueryRelation::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "CONTAINS", make_descriptor(t_ShapeField$QueryRelation::wrap_Object(*ShapeField$QueryRelation::CONTAINS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "DISJOINT", make_descriptor(t_ShapeField$QueryRelation::wrap_Object(*ShapeField$QueryRelation::DISJOINT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "INTERSECTS", make_descriptor(t_ShapeField$QueryRelation::wrap_Object(*ShapeField$QueryRelation::INTERSECTS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$QueryRelation), "WITHIN", make_descriptor(t_ShapeField$QueryRelation::wrap_Object(*ShapeField$QueryRelation::WITHIN)));
        }

        static PyObject *t_ShapeField$QueryRelation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShapeField$QueryRelation::initializeClass, 1)))
            return NULL;
          return t_ShapeField$QueryRelation::wrap_Object(ShapeField$QueryRelation(((t_ShapeField$QueryRelation *) arg)->object.this$));
        }
        static PyObject *t_ShapeField$QueryRelation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShapeField$QueryRelation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ShapeField$QueryRelation_of_(t_ShapeField$QueryRelation *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ShapeField$QueryRelation_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ShapeField$QueryRelation result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::ShapeField$QueryRelation::valueOf(a0));
            return t_ShapeField$QueryRelation::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_ShapeField$QueryRelation_values(PyTypeObject *type)
        {
          JArray< ShapeField$QueryRelation > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::ShapeField$QueryRelation::values());
          return JArray<jobject>(result.this$).wrap(t_ShapeField$QueryRelation::wrap_jobject);
        }
        static PyObject *t_ShapeField$QueryRelation_get__parameters_(t_ShapeField$QueryRelation *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DanishStemmer::class$ = NULL;
        jmethodID *DanishStemmer::mids$ = NULL;
        bool DanishStemmer::live$ = false;

        jclass DanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DanishStemmer::DanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean DanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint DanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean DanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args);

        static PyMethodDef t_DanishStemmer__methods_[] = {
          DECLARE_METHOD(t_DanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DanishStemmer)[] = {
          { Py_tp_methods, t_DanishStemmer__methods_ },
          { Py_tp_init, (void *) t_DanishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DanishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(DanishStemmer, t_DanishStemmer, DanishStemmer);

        void t_DanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DanishStemmer), &PY_TYPE_DEF(DanishStemmer), module, "DanishStemmer", 0);
        }

        void t_DanishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DanishStemmer), "class_", make_descriptor(DanishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DanishStemmer), "wrapfn_", make_descriptor(t_DanishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DanishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DanishStemmer::initializeClass, 1)))
            return NULL;
          return t_DanishStemmer::wrap_Object(DanishStemmer(((t_DanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          DanishStemmer object((jobject) NULL);

          INT_CALL(object = DanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/da/DanishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {

          ::java::lang::Class *DanishAnalyzer::class$ = NULL;
          jmethodID *DanishAnalyzer::mids$ = NULL;
          bool DanishAnalyzer::live$ = false;
          ::java::lang::String *DanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/da/DanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DanishAnalyzer::DanishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet DanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {
          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data);
          static PyGetSetDef t_DanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DanishAnalyzer)[] = {
            { Py_tp_methods, t_DanishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_DanishAnalyzer_init_ },
            { Py_tp_getset, t_DanishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DanishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(DanishAnalyzer, t_DanishAnalyzer, DanishAnalyzer);

          void t_DanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DanishAnalyzer), &PY_TYPE_DEF(DanishAnalyzer), module, "DanishAnalyzer", 0);
          }

          void t_DanishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DanishAnalyzer), "class_", make_descriptor(DanishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DanishAnalyzer), "wrapfn_", make_descriptor(t_DanishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DanishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(DanishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DanishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DanishAnalyzer::wrap_Object(DanishAnalyzer(((t_DanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DanishAnalyzer object((jobject) NULL);

                INT_CALL(object = DanishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::da::DanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Error.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Error::class$ = NULL;
    jmethodID *Error::mids$ = NULL;
    bool Error::live$ = false;

    jclass Error::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Error");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Error::Error() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    Error::Error(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Error::Error(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Error__methods_[] = {
      DECLARE_METHOD(t_Error, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Error, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Error)[] = {
      { Py_tp_methods, t_Error__methods_ },
      { Py_tp_init, (void *) t_Error_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Error)[] = {
      &PY_TYPE_DEF(::java::lang::Throwable),
      NULL
    };

    DEFINE_TYPE(Error, t_Error, Error);

    void t_Error::install(PyObject *module)
    {
      installType(&PY_TYPE(Error), &PY_TYPE_DEF(Error), module, "Error", 0);
    }

    void t_Error::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Error), "class_", make_descriptor(Error::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Error), "wrapfn_", make_descriptor(t_Error::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Error), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Error::initializeClass, 1)))
        return NULL;
      return t_Error::wrap_Object(Error(((t_Error *) arg)->object.this$));
    }
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Error::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Error object((jobject) NULL);

          INT_CALL(object = Error());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Error(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/DoubleRangeFactory.h"
#include "org/apache/lucene/search/grouping/DoubleRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *DoubleRangeFactory::class$ = NULL;
          jmethodID *DoubleRangeFactory::mids$ = NULL;
          bool DoubleRangeFactory::live$ = false;

          jclass DoubleRangeFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/DoubleRangeFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2a4b7af5c9ed138c] = env->getMethodID(cls, "<init>", "(DDD)V");
              mids$[mid_getRange_9720df14ffaa4bc8] = env->getMethodID(cls, "getRange", "(DLorg/apache/lucene/search/grouping/DoubleRange;)Lorg/apache/lucene/search/grouping/DoubleRange;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFactory::DoubleRangeFactory(jdouble a0, jdouble a1, jdouble a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2a4b7af5c9ed138c, a0, a1, a2)) {}

          ::org::apache::lucene::search::grouping::DoubleRange DoubleRangeFactory::getRange(jdouble a0, const ::org::apache::lucene::search::grouping::DoubleRange & a1) const
          {
            return ::org::apache::lucene::search::grouping::DoubleRange(env->callObjectMethod(this$, mids$[mid_getRange_9720df14ffaa4bc8], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_DoubleRangeFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFactory_init_(t_DoubleRangeFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRangeFactory_getRange(t_DoubleRangeFactory *self, PyObject *args);

          static PyMethodDef t_DoubleRangeFactory__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFactory, getRange, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleRangeFactory)[] = {
            { Py_tp_methods, t_DoubleRangeFactory__methods_ },
            { Py_tp_init, (void *) t_DoubleRangeFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleRangeFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DoubleRangeFactory, t_DoubleRangeFactory, DoubleRangeFactory);

          void t_DoubleRangeFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFactory), &PY_TYPE_DEF(DoubleRangeFactory), module, "DoubleRangeFactory", 0);
          }

          void t_DoubleRangeFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFactory), "class_", make_descriptor(DoubleRangeFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFactory), "wrapfn_", make_descriptor(t_DoubleRangeFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFactory::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFactory::wrap_Object(DoubleRangeFactory(((t_DoubleRangeFactory *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFactory_init_(t_DoubleRangeFactory *self, PyObject *args, PyObject *kwds)
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            DoubleRangeFactory object((jobject) NULL);

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              INT_CALL(object = DoubleRangeFactory(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRangeFactory_getRange(t_DoubleRangeFactory *self, PyObject *args)
          {
            jdouble a0;
            ::org::apache::lucene::search::grouping::DoubleRange a1((jobject) NULL);
            ::org::apache::lucene::search::grouping::DoubleRange result((jobject) NULL);

            if (!parseArgs(args, "Dk", ::org::apache::lucene::search::grouping::DoubleRange::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getRange(a0, a1));
              return ::org::apache::lucene::search::grouping::t_DoubleRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRange", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *WildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *WildcardQueryNodeBuilder::mids$ = NULL;
              bool WildcardQueryNodeBuilder::live$ = false;

              jclass WildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ec04377c1ad992be] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/WildcardQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeBuilder::WildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::WildcardQuery WildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::WildcardQuery(env->callObjectMethod(this$, mids$[mid_build_ec04377c1ad992be], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_WildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(WildcardQueryNodeBuilder)[] = {
                { Py_tp_methods, t_WildcardQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_WildcardQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(WildcardQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder, WildcardQueryNodeBuilder);

              void t_WildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeBuilder), &PY_TYPE_DEF(WildcardQueryNodeBuilder), module, "WildcardQueryNodeBuilder", 0);
              }

              void t_WildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeBuilder), "class_", make_descriptor(WildcardQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeBuilder), "wrapfn_", make_descriptor(t_WildcardQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeBuilder::wrap_Object(WildcardQueryNodeBuilder(((t_WildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::WildcardQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_WildcardQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYCircle.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYCircle::class$ = NULL;
        jmethodID *XYCircle::mids$ = NULL;
        bool XYCircle::live$ = false;

        jclass XYCircle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYCircle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf4403e82386af32] = env->getMethodID(cls, "<init>", "(FFF)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getRadius_58aec2b64dff50c8] = env->getMethodID(cls, "getRadius", "()F");
            mids$[mid_getX_58aec2b64dff50c8] = env->getMethodID(cls, "getX", "()F");
            mids$[mid_getY_58aec2b64dff50c8] = env->getMethodID(cls, "getY", "()F");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYCircle::XYCircle(jfloat a0, jfloat a1, jfloat a2) : ::org::apache::lucene::geo::XYGeometry(env->newObject(initializeClass, &mids$, mid_init$_cf4403e82386af32, a0, a1, a2)) {}

        jboolean XYCircle::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jfloat XYCircle::getRadius() const
        {
          return env->callFloatMethod(this$, mids$[mid_getRadius_58aec2b64dff50c8]);
        }

        jfloat XYCircle::getX() const
        {
          return env->callFloatMethod(this$, mids$[mid_getX_58aec2b64dff50c8]);
        }

        jfloat XYCircle::getY() const
        {
          return env->callFloatMethod(this$, mids$[mid_getY_58aec2b64dff50c8]);
        }

        jint XYCircle::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String XYCircle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYCircle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYCircle_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYCircle_init_(t_XYCircle *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYCircle_equals(t_XYCircle *self, PyObject *args);
        static PyObject *t_XYCircle_getRadius(t_XYCircle *self);
        static PyObject *t_XYCircle_getX(t_XYCircle *self);
        static PyObject *t_XYCircle_getY(t_XYCircle *self);
        static PyObject *t_XYCircle_hashCode(t_XYCircle *self, PyObject *args);
        static PyObject *t_XYCircle_toString(t_XYCircle *self, PyObject *args);
        static PyObject *t_XYCircle_get__radius(t_XYCircle *self, void *data);
        static PyObject *t_XYCircle_get__x(t_XYCircle *self, void *data);
        static PyObject *t_XYCircle_get__y(t_XYCircle *self, void *data);
        static PyGetSetDef t_XYCircle__fields_[] = {
          DECLARE_GET_FIELD(t_XYCircle, radius),
          DECLARE_GET_FIELD(t_XYCircle, x),
          DECLARE_GET_FIELD(t_XYCircle, y),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_XYCircle__methods_[] = {
          DECLARE_METHOD(t_XYCircle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYCircle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYCircle, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYCircle, getRadius, METH_NOARGS),
          DECLARE_METHOD(t_XYCircle, getX, METH_NOARGS),
          DECLARE_METHOD(t_XYCircle, getY, METH_NOARGS),
          DECLARE_METHOD(t_XYCircle, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYCircle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYCircle)[] = {
          { Py_tp_methods, t_XYCircle__methods_ },
          { Py_tp_init, (void *) t_XYCircle_init_ },
          { Py_tp_getset, t_XYCircle__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYCircle)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::XYGeometry),
          NULL
        };

        DEFINE_TYPE(XYCircle, t_XYCircle, XYCircle);

        void t_XYCircle::install(PyObject *module)
        {
          installType(&PY_TYPE(XYCircle), &PY_TYPE_DEF(XYCircle), module, "XYCircle", 0);
        }

        void t_XYCircle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYCircle), "class_", make_descriptor(XYCircle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYCircle), "wrapfn_", make_descriptor(t_XYCircle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYCircle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYCircle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYCircle::initializeClass, 1)))
            return NULL;
          return t_XYCircle::wrap_Object(XYCircle(((t_XYCircle *) arg)->object.this$));
        }
        static PyObject *t_XYCircle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYCircle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYCircle_init_(t_XYCircle *self, PyObject *args, PyObject *kwds)
        {
          jfloat a0;
          jfloat a1;
          jfloat a2;
          XYCircle object((jobject) NULL);

          if (!parseArgs(args, "FFF", &a0, &a1, &a2))
          {
            INT_CALL(object = XYCircle(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYCircle_equals(t_XYCircle *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYCircle), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYCircle_getRadius(t_XYCircle *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getRadius());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_XYCircle_getX(t_XYCircle *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getX());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_XYCircle_getY(t_XYCircle *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getY());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_XYCircle_hashCode(t_XYCircle *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYCircle), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYCircle_toString(t_XYCircle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYCircle), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYCircle_get__radius(t_XYCircle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getRadius());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYCircle_get__x(t_XYCircle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYCircle_get__y(t_XYCircle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getY());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntTaxonomyFacets::class$ = NULL;
          jmethodID *IntTaxonomyFacets::mids$ = NULL;
          bool IntTaxonomyFacets::live$ = false;

          jclass IntTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_f2cc1bce94666404] = env->getMethodID(cls, "rollup", "()V");
              mids$[mid_useHashTable_d8ab24307ac62b3e] = env->getMethodID(cls, "useHashTable", "(Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Z");
              mids$[mid_increment_438c62480c481c65] = env->getMethodID(cls, "increment", "(II)V");
              mids$[mid_increment_040c4cd0390c5aff] = env->getMethodID(cls, "increment", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number IntTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult IntTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args);
          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_IntTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_IntTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_IntTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntTaxonomyFacets)[] = {
            { Py_tp_methods, t_IntTaxonomyFacets__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntTaxonomyFacets)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::TaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(IntTaxonomyFacets, t_IntTaxonomyFacets, IntTaxonomyFacets);

          void t_IntTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(IntTaxonomyFacets), &PY_TYPE_DEF(IntTaxonomyFacets), module, "IntTaxonomyFacets", 0);
          }

          void t_IntTaxonomyFacets::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntTaxonomyFacets), "class_", make_descriptor(IntTaxonomyFacets::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntTaxonomyFacets), "wrapfn_", make_descriptor(t_IntTaxonomyFacets::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntTaxonomyFacets), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_IntTaxonomyFacets::wrap_Object(IntTaxonomyFacets(((t_IntTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_IntTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntTaxonomyFacets_getSpecificValue(t_IntTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_IntTaxonomyFacets_getTopChildren(t_IntTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishAnalyzer::class$ = NULL;
          jmethodID *SpanishAnalyzer::mids$ = NULL;
          bool SpanishAnalyzer::live$ = false;
          ::java::lang::String *SpanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SpanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishAnalyzer::SpanishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet SpanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data);
          static PyGetSetDef t_SpanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SpanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishAnalyzer)[] = {
            { Py_tp_methods, t_SpanishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_SpanishAnalyzer_init_ },
            { Py_tp_getset, t_SpanishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(SpanishAnalyzer, t_SpanishAnalyzer, SpanishAnalyzer);

          void t_SpanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishAnalyzer), &PY_TYPE_DEF(SpanishAnalyzer), module, "SpanishAnalyzer", 0);
          }

          void t_SpanishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishAnalyzer), "class_", make_descriptor(SpanishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishAnalyzer), "wrapfn_", make_descriptor(t_SpanishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SpanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SpanishAnalyzer::wrap_Object(SpanishAnalyzer(((t_SpanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SpanishAnalyzer object((jobject) NULL);

                INT_CALL(object = SpanishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::es::SpanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/nio/file/Paths.h"
#include "java/nio/file/Path.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace nio {
    namespace file {

      ::java::lang::Class *Paths::class$ = NULL;
      jmethodID *Paths::mids$ = NULL;
      bool Paths::live$ = false;

      jclass Paths::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/nio/file/Paths");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_561e2076b428372b] = env->getStaticMethodID(cls, "get", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::nio::file::Path Paths::get(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_get_561e2076b428372b], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace nio {
    namespace file {
      static PyObject *t_Paths_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Paths_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Paths_get(PyTypeObject *type, PyObject *args);

      static PyMethodDef t_Paths__methods_[] = {
        DECLARE_METHOD(t_Paths, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Paths, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Paths, get, METH_VARARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Paths)[] = {
        { Py_tp_methods, t_Paths__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Paths)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Paths, t_Paths, Paths);

      void t_Paths::install(PyObject *module)
      {
        installType(&PY_TYPE(Paths), &PY_TYPE_DEF(Paths), module, "Paths", 0);
      }

      void t_Paths::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Paths), "class_", make_descriptor(Paths::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Paths), "wrapfn_", make_descriptor(t_Paths::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Paths), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Paths_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Paths::initializeClass, 1)))
          return NULL;
        return t_Paths::wrap_Object(Paths(((t_Paths *) arg)->object.this$));
      }
      static PyObject *t_Paths_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Paths::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Paths_get(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        JArray< ::java::lang::String > a1((jobject) NULL);
        ::java::nio::file::Path result((jobject) NULL);

        if (!parseArgs(args, "s[s", &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Paths::get(a0, a1));
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "get", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *BoolDocValues::class$ = NULL;
            jmethodID *BoolDocValues::mids$ = NULL;
            bool BoolDocValues::live$ = false;

            jclass BoolDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/BoolDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolDocValues::BoolDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jboolean BoolDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            jbyte BoolDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
            }

            jdouble BoolDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
            }

            jfloat BoolDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller BoolDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint BoolDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
            }

            jlong BoolDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
            }

            ::java::lang::Object BoolDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jshort BoolDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
            }

            ::java::lang::String BoolDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String BoolDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data);
            static PyGetSetDef t_BoolDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_BoolDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BoolDocValues__methods_[] = {
              DECLARE_METHOD(t_BoolDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BoolDocValues)[] = {
              { Py_tp_methods, t_BoolDocValues__methods_ },
              { Py_tp_init, (void *) t_BoolDocValues_init_ },
              { Py_tp_getset, t_BoolDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BoolDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(BoolDocValues, t_BoolDocValues, BoolDocValues);

            void t_BoolDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolDocValues), &PY_TYPE_DEF(BoolDocValues), module, "BoolDocValues", 0);
            }

            void t_BoolDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolDocValues), "class_", make_descriptor(BoolDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolDocValues), "wrapfn_", make_descriptor(t_BoolDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoolDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolDocValues::initializeClass, 1)))
                return NULL;
              return t_BoolDocValues::wrap_Object(BoolDocValues(((t_BoolDocValues *) arg)->object.this$));
            }
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              BoolDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = BoolDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(BoolDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/InetAddressPoint.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *InetAddressPoint::class$ = NULL;
        jmethodID *InetAddressPoint::mids$ = NULL;
        bool InetAddressPoint::live$ = false;
        jint InetAddressPoint::BYTES = (jint) 0;

        jclass InetAddressPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/InetAddressPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void InetAddressPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        ::java::lang::String InetAddressPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_InetAddressPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InetAddressPoint_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InetAddressPoint_setBytesValue(t_InetAddressPoint *self, PyObject *args);
        static PyObject *t_InetAddressPoint_toString(t_InetAddressPoint *self, PyObject *args);
        static int t_InetAddressPoint_set__bytesValue(t_InetAddressPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_InetAddressPoint__fields_[] = {
          DECLARE_SET_FIELD(t_InetAddressPoint, bytesValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InetAddressPoint__methods_[] = {
          DECLARE_METHOD(t_InetAddressPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InetAddressPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InetAddressPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_InetAddressPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(InetAddressPoint)[] = {
          { Py_tp_methods, t_InetAddressPoint__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_InetAddressPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(InetAddressPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(InetAddressPoint, t_InetAddressPoint, InetAddressPoint);

        void t_InetAddressPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(InetAddressPoint), &PY_TYPE_DEF(InetAddressPoint), module, "InetAddressPoint", 0);
        }

        void t_InetAddressPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressPoint), "class_", make_descriptor(InetAddressPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressPoint), "wrapfn_", make_descriptor(t_InetAddressPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressPoint), "boxfn_", make_descriptor(boxObject));
          env->getClass(InetAddressPoint::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressPoint), "BYTES", make_descriptor(InetAddressPoint::BYTES));
        }

        static PyObject *t_InetAddressPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InetAddressPoint::initializeClass, 1)))
            return NULL;
          return t_InetAddressPoint::wrap_Object(InetAddressPoint(((t_InetAddressPoint *) arg)->object.this$));
        }
        static PyObject *t_InetAddressPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InetAddressPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_InetAddressPoint_setBytesValue(t_InetAddressPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(InetAddressPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_InetAddressPoint_toString(t_InetAddressPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(InetAddressPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_InetAddressPoint_set__bytesValue(t_InetAddressPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder$ScoreComparator::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder$ScoreComparator::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder$ScoreComparator::live$ = false;

          jclass ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_3ab19bc9ded6c6d0] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder$ScoreComparator::ScoreOrderFragmentsBuilder$ScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint ScoreOrderFragmentsBuilder$ScoreComparator::compare(const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a0, const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_3ab19bc9ded6c6d0], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScoreOrderFragmentsBuilder$ScoreComparator)[] = {
            { Py_tp_methods, t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_ },
            { Py_tp_init, (void *) t_ScoreOrderFragmentsBuilder$ScoreComparator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScoreOrderFragmentsBuilder$ScoreComparator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator, ScoreOrderFragmentsBuilder$ScoreComparator);

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), &PY_TYPE_DEF(ScoreOrderFragmentsBuilder$ScoreComparator), module, "ScoreOrderFragmentsBuilder$ScoreComparator", 0);
          }

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), "class_", make_descriptor(ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_Object(ScoreOrderFragmentsBuilder$ScoreComparator(((t_ScoreOrderFragmentsBuilder$ScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            ScoreOrderFragmentsBuilder$ScoreComparator object((jobject) NULL);

            INT_CALL(object = ScoreOrderFragmentsBuilder$ScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a0((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CoreParser.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CoreParser::class$ = NULL;
          jmethodID *CoreParser::mids$ = NULL;
          bool CoreParser::live$ = false;

          jclass CoreParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CoreParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d79fd8049d19a29e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addQueryBuilder_af2b25e035a80d26] = env->getMethodID(cls, "addQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_addSpanBuilder_d2478634f7897389] = env->getMethodID(cls, "addSpanBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");
              mids$[mid_addSpanQueryBuilder_d2478634f7897389] = env->getMethodID(cls, "addSpanQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");
              mids$[mid_parse_92111d215ff8820e] = env->getMethodID(cls, "parse", "(Ljava/io/InputStream;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getErrorHandler_a7f247a550b1b419] = env->getMethodID(cls, "getErrorHandler", "()Lorg/xml/sax/ErrorHandler;");
              mids$[mid_getEntityResolver_d8fabcfaa2d23008] = env->getMethodID(cls, "getEntityResolver", "()Lorg/xml/sax/EntityResolver;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CoreParser::CoreParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d79fd8049d19a29e, a0.this$, a1.this$)) {}

          CoreParser::CoreParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}

          void CoreParser::addQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryBuilder_af2b25e035a80d26], a0.this$, a1.this$);
          }

          void CoreParser::addSpanBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addSpanBuilder_d2478634f7897389], a0.this$, a1.this$);
          }

          void CoreParser::addSpanQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addSpanQueryBuilder_d2478634f7897389], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query CoreParser::parse(const ::java::io::InputStream & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_92111d215ff8820e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addSpanBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addSpanQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg);

          static PyMethodDef t_CoreParser__methods_[] = {
            DECLARE_METHOD(t_CoreParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, addQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addSpanBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addSpanQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CoreParser)[] = {
            { Py_tp_methods, t_CoreParser__methods_ },
            { Py_tp_init, (void *) t_CoreParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CoreParser)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CoreParser, t_CoreParser, CoreParser);

          void t_CoreParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CoreParser), &PY_TYPE_DEF(CoreParser), module, "CoreParser", 0);
          }

          void t_CoreParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CoreParser), "class_", make_descriptor(CoreParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CoreParser), "wrapfn_", make_descriptor(t_CoreParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CoreParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CoreParser::initializeClass, 1)))
              return NULL;
            return t_CoreParser::wrap_Object(CoreParser(((t_CoreParser *) arg)->object.this$));
          }
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CoreParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addSpanBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addSpanBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSpanBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addSpanQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addSpanQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSpanQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Component2D.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "org/apache/lucene/geo/Component2D$WithinRelation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Component2D::class$ = NULL;
        jmethodID *Component2D::mids$ = NULL;
        bool Component2D::live$ = false;

        jclass Component2D::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Component2D");

            mids$ = new jmethodID[max_mid];
            mids$[mid_contains_c5da2349848862f7] = env->getMethodID(cls, "contains", "(DD)Z");
            mids$[mid_containsLine_490d58c41f66a94c] = env->getMethodID(cls, "containsLine", "(DDDD)Z");
            mids$[mid_containsLine_d68abb61fe1c2fa4] = env->getMethodID(cls, "containsLine", "(DDDDDDDD)Z");
            mids$[mid_containsPoint_c4e087cb1201d3d4] = env->getStaticMethodID(cls, "containsPoint", "(DDDDDD)Z");
            mids$[mid_containsTriangle_c4e087cb1201d3d4] = env->getMethodID(cls, "containsTriangle", "(DDDDDD)Z");
            mids$[mid_containsTriangle_ac6ecbf4107b80ff] = env->getMethodID(cls, "containsTriangle", "(DDDDDDDDDD)Z");
            mids$[mid_disjoint_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "disjoint", "(DDDDDDDD)Z");
            mids$[mid_getMaxX_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxX", "()D");
            mids$[mid_getMaxY_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxY", "()D");
            mids$[mid_getMinX_8c74b787998ce4bc] = env->getMethodID(cls, "getMinX", "()D");
            mids$[mid_getMinY_8c74b787998ce4bc] = env->getMethodID(cls, "getMinY", "()D");
            mids$[mid_intersectsLine_490d58c41f66a94c] = env->getMethodID(cls, "intersectsLine", "(DDDD)Z");
            mids$[mid_intersectsLine_d68abb61fe1c2fa4] = env->getMethodID(cls, "intersectsLine", "(DDDDDDDD)Z");
            mids$[mid_intersectsTriangle_c4e087cb1201d3d4] = env->getMethodID(cls, "intersectsTriangle", "(DDDDDD)Z");
            mids$[mid_intersectsTriangle_ac6ecbf4107b80ff] = env->getMethodID(cls, "intersectsTriangle", "(DDDDDDDDDD)Z");
            mids$[mid_pointInTriangle_a1a5b5918cc33dd3] = env->getStaticMethodID(cls, "pointInTriangle", "(DDDDDDDDDDDD)Z");
            mids$[mid_relate_0325fa8b50a50d2b] = env->getMethodID(cls, "relate", "(DDDD)Lorg/apache/lucene/index/PointValues$Relation;");
            mids$[mid_within_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "within", "(DDDDDDDD)Z");
            mids$[mid_withinLine_423ee5a7474e9a1b] = env->getMethodID(cls, "withinLine", "(DDZDD)Lorg/apache/lucene/geo/Component2D$WithinRelation;");
            mids$[mid_withinLine_9d1683957e79a4ae] = env->getMethodID(cls, "withinLine", "(DDDDDDZDD)Lorg/apache/lucene/geo/Component2D$WithinRelation;");
            mids$[mid_withinPoint_c29194da566ddf92] = env->getMethodID(cls, "withinPoint", "(DD)Lorg/apache/lucene/geo/Component2D$WithinRelation;");
            mids$[mid_withinTriangle_41c692351edcf15d] = env->getMethodID(cls, "withinTriangle", "(DDZDDZDDZ)Lorg/apache/lucene/geo/Component2D$WithinRelation;");
            mids$[mid_withinTriangle_6d97262238ccd495] = env->getMethodID(cls, "withinTriangle", "(DDDDDDZDDZDDZ)Lorg/apache/lucene/geo/Component2D$WithinRelation;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Component2D::contains(jdouble a0, jdouble a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_contains_c5da2349848862f7], a0, a1);
        }

        jboolean Component2D::containsLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsLine_490d58c41f66a94c], a0, a1, a2, a3);
        }

        jboolean Component2D::containsLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsLine_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jboolean Component2D::containsPoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_containsPoint_c4e087cb1201d3d4], a0, a1, a2, a3, a4, a5);
        }

        jboolean Component2D::containsTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsTriangle_c4e087cb1201d3d4], a0, a1, a2, a3, a4, a5);
        }

        jboolean Component2D::containsTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7, jdouble a8, jdouble a9) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsTriangle_ac6ecbf4107b80ff], a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
        }

        jboolean Component2D::disjoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jdouble Component2D::getMaxX() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxX_8c74b787998ce4bc]);
        }

        jdouble Component2D::getMaxY() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxY_8c74b787998ce4bc]);
        }

        jdouble Component2D::getMinX() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinX_8c74b787998ce4bc]);
        }

        jdouble Component2D::getMinY() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinY_8c74b787998ce4bc]);
        }

        jboolean Component2D::intersectsLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersectsLine_490d58c41f66a94c], a0, a1, a2, a3);
        }

        jboolean Component2D::intersectsLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersectsLine_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jboolean Component2D::intersectsTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersectsTriangle_c4e087cb1201d3d4], a0, a1, a2, a3, a4, a5);
        }

        jboolean Component2D::intersectsTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7, jdouble a8, jdouble a9) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersectsTriangle_ac6ecbf4107b80ff], a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
        }

        jboolean Component2D::pointInTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7, jdouble a8, jdouble a9, jdouble a10, jdouble a11)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_pointInTriangle_a1a5b5918cc33dd3], a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        }

        ::org::apache::lucene::index::PointValues$Relation Component2D::relate(jdouble a0, jdouble a1, jdouble a2, jdouble a3) const
        {
          return ::org::apache::lucene::index::PointValues$Relation(env->callObjectMethod(this$, mids$[mid_relate_0325fa8b50a50d2b], a0, a1, a2, a3));
        }

        jboolean Component2D::within(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_within_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        ::org::apache::lucene::geo::Component2D$WithinRelation Component2D::withinLine(jdouble a0, jdouble a1, jboolean a2, jdouble a3, jdouble a4) const
        {
          return ::org::apache::lucene::geo::Component2D$WithinRelation(env->callObjectMethod(this$, mids$[mid_withinLine_423ee5a7474e9a1b], a0, a1, a2, a3, a4));
        }

        ::org::apache::lucene::geo::Component2D$WithinRelation Component2D::withinLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jboolean a6, jdouble a7, jdouble a8) const
        {
          return ::org::apache::lucene::geo::Component2D$WithinRelation(env->callObjectMethod(this$, mids$[mid_withinLine_9d1683957e79a4ae], a0, a1, a2, a3, a4, a5, a6, a7, a8));
        }

        ::org::apache::lucene::geo::Component2D$WithinRelation Component2D::withinPoint(jdouble a0, jdouble a1) const
        {
          return ::org::apache::lucene::geo::Component2D$WithinRelation(env->callObjectMethod(this$, mids$[mid_withinPoint_c29194da566ddf92], a0, a1));
        }

        ::org::apache::lucene::geo::Component2D$WithinRelation Component2D::withinTriangle(jdouble a0, jdouble a1, jboolean a2, jdouble a3, jdouble a4, jboolean a5, jdouble a6, jdouble a7, jboolean a8) const
        {
          return ::org::apache::lucene::geo::Component2D$WithinRelation(env->callObjectMethod(this$, mids$[mid_withinTriangle_41c692351edcf15d], a0, a1, a2, a3, a4, a5, a6, a7, a8));
        }

        ::org::apache::lucene::geo::Component2D$WithinRelation Component2D::withinTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jboolean a6, jdouble a7, jdouble a8, jboolean a9, jdouble a10, jdouble a11, jboolean a12) const
        {
          return ::org::apache::lucene::geo::Component2D$WithinRelation(env->callObjectMethod(this$, mids$[mid_withinTriangle_6d97262238ccd495], a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Component2D_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Component2D_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Component2D_contains(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_containsLine(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_containsPoint(PyTypeObject *type, PyObject *args);
        static PyObject *t_Component2D_containsTriangle(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_disjoint(PyTypeObject *type, PyObject *args);
        static PyObject *t_Component2D_getMaxX(t_Component2D *self);
        static PyObject *t_Component2D_getMaxY(t_Component2D *self);
        static PyObject *t_Component2D_getMinX(t_Component2D *self);
        static PyObject *t_Component2D_getMinY(t_Component2D *self);
        static PyObject *t_Component2D_intersectsLine(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_intersectsTriangle(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_pointInTriangle(PyTypeObject *type, PyObject *args);
        static PyObject *t_Component2D_relate(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_within(PyTypeObject *type, PyObject *args);
        static PyObject *t_Component2D_withinLine(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_withinPoint(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_withinTriangle(t_Component2D *self, PyObject *args);
        static PyObject *t_Component2D_get__maxX(t_Component2D *self, void *data);
        static PyObject *t_Component2D_get__maxY(t_Component2D *self, void *data);
        static PyObject *t_Component2D_get__minX(t_Component2D *self, void *data);
        static PyObject *t_Component2D_get__minY(t_Component2D *self, void *data);
        static PyGetSetDef t_Component2D__fields_[] = {
          DECLARE_GET_FIELD(t_Component2D, maxX),
          DECLARE_GET_FIELD(t_Component2D, maxY),
          DECLARE_GET_FIELD(t_Component2D, minX),
          DECLARE_GET_FIELD(t_Component2D, minY),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Component2D__methods_[] = {
          DECLARE_METHOD(t_Component2D, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Component2D, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Component2D, contains, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, containsLine, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, containsPoint, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Component2D, containsTriangle, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, disjoint, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Component2D, getMaxX, METH_NOARGS),
          DECLARE_METHOD(t_Component2D, getMaxY, METH_NOARGS),
          DECLARE_METHOD(t_Component2D, getMinX, METH_NOARGS),
          DECLARE_METHOD(t_Component2D, getMinY, METH_NOARGS),
          DECLARE_METHOD(t_Component2D, intersectsLine, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, intersectsTriangle, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, pointInTriangle, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Component2D, relate, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, within, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Component2D, withinLine, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, withinPoint, METH_VARARGS),
          DECLARE_METHOD(t_Component2D, withinTriangle, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Component2D)[] = {
          { Py_tp_methods, t_Component2D__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Component2D__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Component2D)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Component2D, t_Component2D, Component2D);

        void t_Component2D::install(PyObject *module)
        {
          installType(&PY_TYPE(Component2D), &PY_TYPE_DEF(Component2D), module, "Component2D", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D), "WithinRelation", make_descriptor(&PY_TYPE_DEF(Component2D$WithinRelation)));
        }

        void t_Component2D::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D), "class_", make_descriptor(Component2D::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D), "wrapfn_", make_descriptor(t_Component2D::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Component2D_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Component2D::initializeClass, 1)))
            return NULL;
          return t_Component2D::wrap_Object(Component2D(((t_Component2D *) arg)->object.this$));
        }
        static PyObject *t_Component2D_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Component2D::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Component2D_contains(t_Component2D *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jboolean result;

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            OBJ_CALL(result = self->object.contains(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "contains", args);
          return NULL;
        }

        static PyObject *t_Component2D_containsLine(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jboolean result;

              if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.containsLine(a0, a1, a2, a3));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 8:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jdouble a6;
              jdouble a7;
              jboolean result;

              if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = self->object.containsLine(a0, a1, a2, a3, a4, a5, a6, a7));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "containsLine", args);
          return NULL;
        }

        static PyObject *t_Component2D_containsPoint(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jboolean result;

          if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Component2D::containsPoint(a0, a1, a2, a3, a4, a5));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "containsPoint", args);
          return NULL;
        }

        static PyObject *t_Component2D_containsTriangle(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jboolean result;

              if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.containsTriangle(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 10:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jdouble a6;
              jdouble a7;
              jdouble a8;
              jdouble a9;
              jboolean result;

              if (!parseArgs(args, "DDDDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
              {
                OBJ_CALL(result = self->object.containsTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "containsTriangle", args);
          return NULL;
        }

        static PyObject *t_Component2D_disjoint(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Component2D::disjoint(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "disjoint", args);
          return NULL;
        }

        static PyObject *t_Component2D_getMaxX(t_Component2D *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxX());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Component2D_getMaxY(t_Component2D *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxY());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Component2D_getMinX(t_Component2D *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinX());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Component2D_getMinY(t_Component2D *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinY());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Component2D_intersectsLine(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jboolean result;

              if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.intersectsLine(a0, a1, a2, a3));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 8:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jdouble a6;
              jdouble a7;
              jboolean result;

              if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                OBJ_CALL(result = self->object.intersectsLine(a0, a1, a2, a3, a4, a5, a6, a7));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "intersectsLine", args);
          return NULL;
        }

        static PyObject *t_Component2D_intersectsTriangle(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jboolean result;

              if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.intersectsTriangle(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 10:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jdouble a6;
              jdouble a7;
              jdouble a8;
              jdouble a9;
              jboolean result;

              if (!parseArgs(args, "DDDDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
              {
                OBJ_CALL(result = self->object.intersectsTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "intersectsTriangle", args);
          return NULL;
        }

        static PyObject *t_Component2D_pointInTriangle(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jdouble a8;
          jdouble a9;
          jdouble a10;
          jdouble a11;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Component2D::pointInTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "pointInTriangle", args);
          return NULL;
        }

        static PyObject *t_Component2D_relate(t_Component2D *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          ::org::apache::lucene::index::PointValues$Relation result((jobject) NULL);

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.relate(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_PointValues$Relation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "relate", args);
          return NULL;
        }

        static PyObject *t_Component2D_within(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Component2D::within(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "within", args);
          return NULL;
        }

        static PyObject *t_Component2D_withinLine(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              jdouble a0;
              jdouble a1;
              jboolean a2;
              jdouble a3;
              jdouble a4;
              ::org::apache::lucene::geo::Component2D$WithinRelation result((jobject) NULL);

              if (!parseArgs(args, "DDZDD", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.withinLine(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::geo::t_Component2D$WithinRelation::wrap_Object(result);
              }
            }
            break;
           case 9:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jboolean a6;
              jdouble a7;
              jdouble a8;
              ::org::apache::lucene::geo::Component2D$WithinRelation result((jobject) NULL);

              if (!parseArgs(args, "DDDDDDZDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = self->object.withinLine(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::geo::t_Component2D$WithinRelation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "withinLine", args);
          return NULL;
        }

        static PyObject *t_Component2D_withinPoint(t_Component2D *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          ::org::apache::lucene::geo::Component2D$WithinRelation result((jobject) NULL);

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            OBJ_CALL(result = self->object.withinPoint(a0, a1));
            return ::org::apache::lucene::geo::t_Component2D$WithinRelation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "withinPoint", args);
          return NULL;
        }

        static PyObject *t_Component2D_withinTriangle(t_Component2D *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 9:
            {
              jdouble a0;
              jdouble a1;
              jboolean a2;
              jdouble a3;
              jdouble a4;
              jboolean a5;
              jdouble a6;
              jdouble a7;
              jboolean a8;
              ::org::apache::lucene::geo::Component2D$WithinRelation result((jobject) NULL);

              if (!parseArgs(args, "DDZDDZDDZ", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                OBJ_CALL(result = self->object.withinTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                return ::org::apache::lucene::geo::t_Component2D$WithinRelation::wrap_Object(result);
              }
            }
            break;
           case 13:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;
              jdouble a3;
              jdouble a4;
              jdouble a5;
              jboolean a6;
              jdouble a7;
              jdouble a8;
              jboolean a9;
              jdouble a10;
              jdouble a11;
              jboolean a12;
              ::org::apache::lucene::geo::Component2D$WithinRelation result((jobject) NULL);

              if (!parseArgs(args, "DDDDDDZDDZDDZ", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12))
              {
                OBJ_CALL(result = self->object.withinTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));
                return ::org::apache::lucene::geo::t_Component2D$WithinRelation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "withinTriangle", args);
          return NULL;
        }

        static PyObject *t_Component2D_get__maxX(t_Component2D *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Component2D_get__maxY(t_Component2D *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Component2D_get__minX(t_Component2D *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Component2D_get__minY(t_Component2D *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinY());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/FieldHighlighter.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "org/apache/lucene/search/uhighlight/FieldOffsetStrategy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/search/uhighlight/PassageFormatter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/uhighlight/PassageScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *FieldHighlighter::class$ = NULL;
          jmethodID *FieldHighlighter::mids$ = NULL;
          bool FieldHighlighter::live$ = false;

          jclass FieldHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/FieldHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8bc2f2e0d0e31571] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/uhighlight/FieldOffsetStrategy;Ljava/text/BreakIterator;Lorg/apache/lucene/search/uhighlight/PassageScorer;IILorg/apache/lucene/search/uhighlight/PassageFormatter;)V");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_highlightFieldForDoc_b6c1aec9d04a72c9] = env->getMethodID(cls, "highlightFieldForDoc", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Ljava/lang/Object;");
              mids$[mid_getSummaryPassagesNoHighlight_783961f79914f7c3] = env->getMethodID(cls, "getSummaryPassagesNoHighlight", "(I)[Lorg/apache/lucene/search/uhighlight/Passage;");
              mids$[mid_highlightOffsetsEnums_820f63260317c545] = env->getMethodID(cls, "highlightOffsetsEnums", "(Lorg/apache/lucene/search/uhighlight/OffsetsEnum;)[Lorg/apache/lucene/search/uhighlight/Passage;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldHighlighter::FieldHighlighter(const ::java::lang::String & a0, const ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy & a1, const ::java::text::BreakIterator & a2, const ::org::apache::lucene::search::uhighlight::PassageScorer & a3, jint a4, jint a5, const ::org::apache::lucene::search::uhighlight::PassageFormatter & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8bc2f2e0d0e31571, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String FieldHighlighter::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource FieldHighlighter::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::java::lang::Object FieldHighlighter::highlightFieldForDoc(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_highlightFieldForDoc_b6c1aec9d04a72c9], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_FieldHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldHighlighter_init_(t_FieldHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldHighlighter_getField(t_FieldHighlighter *self);
          static PyObject *t_FieldHighlighter_getOffsetSource(t_FieldHighlighter *self);
          static PyObject *t_FieldHighlighter_highlightFieldForDoc(t_FieldHighlighter *self, PyObject *args);
          static PyObject *t_FieldHighlighter_get__field(t_FieldHighlighter *self, void *data);
          static PyObject *t_FieldHighlighter_get__offsetSource(t_FieldHighlighter *self, void *data);
          static PyGetSetDef t_FieldHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FieldHighlighter, field),
            DECLARE_GET_FIELD(t_FieldHighlighter, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldHighlighter__methods_[] = {
            DECLARE_METHOD(t_FieldHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldHighlighter, getField, METH_NOARGS),
            DECLARE_METHOD(t_FieldHighlighter, getOffsetSource, METH_NOARGS),
            DECLARE_METHOD(t_FieldHighlighter, highlightFieldForDoc, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldHighlighter)[] = {
            { Py_tp_methods, t_FieldHighlighter__methods_ },
            { Py_tp_init, (void *) t_FieldHighlighter_init_ },
            { Py_tp_getset, t_FieldHighlighter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldHighlighter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldHighlighter, t_FieldHighlighter, FieldHighlighter);

          void t_FieldHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldHighlighter), &PY_TYPE_DEF(FieldHighlighter), module, "FieldHighlighter", 0);
          }

          void t_FieldHighlighter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldHighlighter), "class_", make_descriptor(FieldHighlighter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldHighlighter), "wrapfn_", make_descriptor(t_FieldHighlighter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldHighlighter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldHighlighter::initializeClass, 1)))
              return NULL;
            return t_FieldHighlighter::wrap_Object(FieldHighlighter(((t_FieldHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FieldHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldHighlighter_init_(t_FieldHighlighter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy a1((jobject) NULL);
            ::java::text::BreakIterator a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::PassageScorer a3((jobject) NULL);
            jint a4;
            jint a5;
            ::org::apache::lucene::search::uhighlight::PassageFormatter a6((jobject) NULL);
            FieldHighlighter object((jobject) NULL);

            if (!parseArgs(args, "skkkIIk", ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy::initializeClass, ::java::text::BreakIterator::initializeClass, ::org::apache::lucene::search::uhighlight::PassageScorer::initializeClass, ::org::apache::lucene::search::uhighlight::PassageFormatter::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = FieldHighlighter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldHighlighter_getField(t_FieldHighlighter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_FieldHighlighter_getOffsetSource(t_FieldHighlighter *self)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
          }

          static PyObject *t_FieldHighlighter_highlightFieldForDoc(t_FieldHighlighter *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.highlightFieldForDoc(a0, a1, a2));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFieldForDoc", args);
            return NULL;
          }

          static PyObject *t_FieldHighlighter_get__field(t_FieldHighlighter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldHighlighter_get__offsetSource(t_FieldHighlighter *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector$GroupedFacetResult.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupFacetCollector::class$ = NULL;
          jmethodID *GroupFacetCollector::mids$ = NULL;
          bool GroupFacetCollector::live$ = false;

          jclass GroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_mergeSegmentResults_180ae65d6c996119] = env->getMethodID(cls, "mergeSegmentResults", "(IIZ)Lorg/apache/lucene/search/grouping/GroupFacetCollector$GroupedFacetResult;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_createSegmentResult_9f86444865654d4e] = env->getMethodID(cls, "createSegmentResult", "()Lorg/apache/lucene/search/grouping/GroupFacetCollector$SegmentResult;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::grouping::GroupFacetCollector$GroupedFacetResult GroupFacetCollector::mergeSegmentResults(jint a0, jint a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::grouping::GroupFacetCollector$GroupedFacetResult(env->callObjectMethod(this$, mids$[mid_mergeSegmentResults_180ae65d6c996119], a0, a1, a2));
          }

          ::org::apache::lucene::search::ScoreMode GroupFacetCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void GroupFacetCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector$FacetEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupFacetCollector_mergeSegmentResults(t_GroupFacetCollector *self, PyObject *args);
          static PyObject *t_GroupFacetCollector_scoreMode(t_GroupFacetCollector *self, PyObject *args);
          static PyObject *t_GroupFacetCollector_setScorer(t_GroupFacetCollector *self, PyObject *args);
          static int t_GroupFacetCollector_set__scorer(t_GroupFacetCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupFacetCollector__fields_[] = {
            DECLARE_SET_FIELD(t_GroupFacetCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_GroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector, mergeSegmentResults, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupFacetCollector)[] = {
            { Py_tp_methods, t_GroupFacetCollector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_GroupFacetCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupFacetCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(GroupFacetCollector, t_GroupFacetCollector, GroupFacetCollector);

          void t_GroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupFacetCollector), &PY_TYPE_DEF(GroupFacetCollector), module, "GroupFacetCollector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector), "FacetEntry", make_descriptor(&PY_TYPE_DEF(GroupFacetCollector$FacetEntry)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector), "GroupedFacetResult", make_descriptor(&PY_TYPE_DEF(GroupFacetCollector$GroupedFacetResult)));
          }

          void t_GroupFacetCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector), "class_", make_descriptor(GroupFacetCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector), "wrapfn_", make_descriptor(t_GroupFacetCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_GroupFacetCollector::wrap_Object(GroupFacetCollector(((t_GroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_GroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupFacetCollector_mergeSegmentResults(t_GroupFacetCollector *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::grouping::GroupFacetCollector$GroupedFacetResult result((jobject) NULL);

            if (!parseArgs(args, "IIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.mergeSegmentResults(a0, a1, a2));
              return ::org::apache::lucene::search::grouping::t_GroupFacetCollector$GroupedFacetResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "mergeSegmentResults", args);
            return NULL;
          }

          static PyObject *t_GroupFacetCollector_scoreMode(t_GroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GroupFacetCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_GroupFacetCollector_setScorer(t_GroupFacetCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GroupFacetCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_GroupFacetCollector_set__scorer(t_GroupFacetCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LeafReaderContext::class$ = NULL;
        jmethodID *LeafReaderContext::mids$ = NULL;
        jfieldID *LeafReaderContext::fids$ = NULL;
        bool LeafReaderContext::live$ = false;

        jclass LeafReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LeafReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_49ec78390f08338a] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_49ec78390f08338a] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_8d1e1130d298ee34] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/LeafReader;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "I");
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List LeafReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_49ec78390f08338a]));
        }

        ::java::util::List LeafReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_49ec78390f08338a]));
        }

        ::org::apache::lucene::index::LeafReader LeafReaderContext::reader() const
        {
          return ::org::apache::lucene::index::LeafReader(env->callObjectMethod(this$, mids$[mid_reader_8d1e1130d298ee34]));
        }

        ::java::lang::String LeafReaderContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint LeafReaderContext::_get_docBase() const
        {
          return env->getIntField(this$, fids$[fid_docBase]);
        }

        jint LeafReaderContext::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LeafReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafReaderContext_children(t_LeafReaderContext *self, PyObject *args);
        static PyObject *t_LeafReaderContext_leaves(t_LeafReaderContext *self, PyObject *args);
        static PyObject *t_LeafReaderContext_reader(t_LeafReaderContext *self, PyObject *args);
        static PyObject *t_LeafReaderContext_toString(t_LeafReaderContext *self, PyObject *args);
        static PyObject *t_LeafReaderContext_get__docBase(t_LeafReaderContext *self, void *data);
        static PyObject *t_LeafReaderContext_get__ord(t_LeafReaderContext *self, void *data);

        static PyGetSetDef t_LeafReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_LeafReaderContext, docBase),
          DECLARE_GET_FIELD(t_LeafReaderContext, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafReaderContext__methods_[] = {
          DECLARE_METHOD(t_LeafReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_LeafReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_LeafReaderContext, reader, METH_VARARGS),
          DECLARE_METHOD(t_LeafReaderContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafReaderContext)[] = {
          { Py_tp_methods, t_LeafReaderContext__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_LeafReaderContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafReaderContext)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexReaderContext),
          NULL
        };

        DEFINE_TYPE(LeafReaderContext, t_LeafReaderContext, LeafReaderContext);

        void t_LeafReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafReaderContext), &PY_TYPE_DEF(LeafReaderContext), module, "LeafReaderContext", 0);
        }

        void t_LeafReaderContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReaderContext), "class_", make_descriptor(LeafReaderContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReaderContext), "wrapfn_", make_descriptor(t_LeafReaderContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReaderContext), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafReaderContext::initializeClass, 1)))
            return NULL;
          return t_LeafReaderContext::wrap_Object(LeafReaderContext(((t_LeafReaderContext *) arg)->object.this$));
        }
        static PyObject *t_LeafReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LeafReaderContext_children(t_LeafReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(PY_TYPE(LeafReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_LeafReaderContext_leaves(t_LeafReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(LeafReaderContext));
          }

          return callSuper(PY_TYPE(LeafReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_LeafReaderContext_reader(t_LeafReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_LeafReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LeafReaderContext), (PyObject *) self, "reader", args, 2);
        }

        static PyObject *t_LeafReaderContext_toString(t_LeafReaderContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LeafReaderContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LeafReaderContext_get__docBase(t_LeafReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBase());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_LeafReaderContext_get__ord(t_LeafReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilter::class$ = NULL;
          jmethodID *TrimFilter::mids$ = NULL;
          bool TrimFilter::live$ = false;

          jclass TrimFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilter::TrimFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean TrimFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args);

          static PyMethodDef t_TrimFilter__methods_[] = {
            DECLARE_METHOD(t_TrimFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TrimFilter)[] = {
            { Py_tp_methods, t_TrimFilter__methods_ },
            { Py_tp_init, (void *) t_TrimFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TrimFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TrimFilter, t_TrimFilter, TrimFilter);

          void t_TrimFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilter), &PY_TYPE_DEF(TrimFilter), module, "TrimFilter", 0);
          }

          void t_TrimFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilter), "class_", make_descriptor(TrimFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilter), "wrapfn_", make_descriptor(t_TrimFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilter::initializeClass, 1)))
              return NULL;
            return t_TrimFilter::wrap_Object(TrimFilter(((t_TrimFilter *) arg)->object.this$));
          }
          static PyObject *t_TrimFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilter_init_(t_TrimFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TrimFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TrimFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilter_incrementToken(t_TrimFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TrimFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilterFactory::class$ = NULL;
          jmethodID *StemmerOverrideFilterFactory::mids$ = NULL;
          bool StemmerOverrideFilterFactory::live$ = false;
          ::java::lang::String *StemmerOverrideFilterFactory::NAME = NULL;

          jclass StemmerOverrideFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilterFactory::StemmerOverrideFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StemmerOverrideFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void StemmerOverrideFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          jboolean StemmerOverrideFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self);
          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StemmerOverrideFilterFactory)[] = {
            { Py_tp_methods, t_StemmerOverrideFilterFactory__methods_ },
            { Py_tp_init, (void *) t_StemmerOverrideFilterFactory_init_ },
            { Py_tp_getset, t_StemmerOverrideFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StemmerOverrideFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory, StemmerOverrideFilterFactory);

          void t_StemmerOverrideFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilterFactory), &PY_TYPE_DEF(StemmerOverrideFilterFactory), module, "StemmerOverrideFilterFactory", 0);
          }

          void t_StemmerOverrideFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilterFactory), "class_", make_descriptor(StemmerOverrideFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilterFactory), "wrapfn_", make_descriptor(t_StemmerOverrideFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(StemmerOverrideFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilterFactory), "NAME", make_descriptor(j2p(*StemmerOverrideFilterFactory::NAME)));
          }

          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilterFactory::wrap_Object(StemmerOverrideFilterFactory(((t_StemmerOverrideFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StemmerOverrideFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StemmerOverrideFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(StemmerOverrideFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery$Builder.h"
#include "org/apache/lucene/search/spans/SpanNearQuery$Builder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery$Builder::class$ = NULL;
          jmethodID *SpanNearQuery$Builder::mids$ = NULL;
          bool SpanNearQuery$Builder::live$ = false;

          jclass SpanNearQuery$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b1180807b87ba737] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_addClause_17f5eb5291567d5d] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/spans/SpanQuery;)Lorg/apache/lucene/search/spans/SpanNearQuery$Builder;");
              mids$[mid_addGap_239bad5a0d549be6] = env->getMethodID(cls, "addGap", "(I)Lorg/apache/lucene/search/spans/SpanNearQuery$Builder;");
              mids$[mid_build_92e878070ffb4724] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/spans/SpanNearQuery;");
              mids$[mid_setSlop_239bad5a0d549be6] = env->getMethodID(cls, "setSlop", "(I)Lorg/apache/lucene/search/spans/SpanNearQuery$Builder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery$Builder::SpanNearQuery$Builder(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b1180807b87ba737, a0.this$, a1)) {}

          SpanNearQuery$Builder SpanNearQuery$Builder::addClause(const ::org::apache::lucene::search::spans::SpanQuery & a0) const
          {
            return SpanNearQuery$Builder(env->callObjectMethod(this$, mids$[mid_addClause_17f5eb5291567d5d], a0.this$));
          }

          SpanNearQuery$Builder SpanNearQuery$Builder::addGap(jint a0) const
          {
            return SpanNearQuery$Builder(env->callObjectMethod(this$, mids$[mid_addGap_239bad5a0d549be6], a0));
          }

          ::org::apache::lucene::search::spans::SpanNearQuery SpanNearQuery$Builder::build() const
          {
            return ::org::apache::lucene::search::spans::SpanNearQuery(env->callObjectMethod(this$, mids$[mid_build_92e878070ffb4724]));
          }

          SpanNearQuery$Builder SpanNearQuery$Builder::setSlop(jint a0) const
          {
            return SpanNearQuery$Builder(env->callObjectMethod(this$, mids$[mid_setSlop_239bad5a0d549be6], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery$Builder_init_(t_SpanNearQuery$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery$Builder_addClause(t_SpanNearQuery$Builder *self, PyObject *arg);
          static PyObject *t_SpanNearQuery$Builder_addGap(t_SpanNearQuery$Builder *self, PyObject *arg);
          static PyObject *t_SpanNearQuery$Builder_build(t_SpanNearQuery$Builder *self);
          static PyObject *t_SpanNearQuery$Builder_setSlop(t_SpanNearQuery$Builder *self, PyObject *arg);
          static int t_SpanNearQuery$Builder_set__slop(t_SpanNearQuery$Builder *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpanNearQuery$Builder__fields_[] = {
            DECLARE_SET_FIELD(t_SpanNearQuery$Builder, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery$Builder__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery$Builder, addClause, METH_O),
            DECLARE_METHOD(t_SpanNearQuery$Builder, addGap, METH_O),
            DECLARE_METHOD(t_SpanNearQuery$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery$Builder, setSlop, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanNearQuery$Builder)[] = {
            { Py_tp_methods, t_SpanNearQuery$Builder__methods_ },
            { Py_tp_init, (void *) t_SpanNearQuery$Builder_init_ },
            { Py_tp_getset, t_SpanNearQuery$Builder__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanNearQuery$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SpanNearQuery$Builder, t_SpanNearQuery$Builder, SpanNearQuery$Builder);

          void t_SpanNearQuery$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery$Builder), &PY_TYPE_DEF(SpanNearQuery$Builder), module, "SpanNearQuery$Builder", 0);
          }

          void t_SpanNearQuery$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$Builder), "class_", make_descriptor(SpanNearQuery$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$Builder), "wrapfn_", make_descriptor(t_SpanNearQuery$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery$Builder::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery$Builder::wrap_Object(SpanNearQuery$Builder(((t_SpanNearQuery$Builder *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery$Builder_init_(t_SpanNearQuery$Builder *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;
            SpanNearQuery$Builder object((jobject) NULL);

            if (!parseArgs(args, "sZ", &a0, &a1))
            {
              INT_CALL(object = SpanNearQuery$Builder(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery$Builder_addClause(t_SpanNearQuery$Builder *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanNearQuery$Builder result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addClause(a0));
              return t_SpanNearQuery$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addClause", arg);
            return NULL;
          }

          static PyObject *t_SpanNearQuery$Builder_addGap(t_SpanNearQuery$Builder *self, PyObject *arg)
          {
            jint a0;
            SpanNearQuery$Builder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.addGap(a0));
              return t_SpanNearQuery$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addGap", arg);
            return NULL;
          }

          static PyObject *t_SpanNearQuery$Builder_build(t_SpanNearQuery$Builder *self)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::search::spans::t_SpanNearQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNearQuery$Builder_setSlop(t_SpanNearQuery$Builder *self, PyObject *arg)
          {
            jint a0;
            SpanNearQuery$Builder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setSlop(a0));
              return t_SpanNearQuery$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
            return NULL;
          }

          static int t_SpanNearQuery$Builder_set__slop(t_SpanNearQuery$Builder *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "slop", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesFieldExistsQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesFieldExistsQuery::class$ = NULL;
        jmethodID *DocValuesFieldExistsQuery::mids$ = NULL;
        bool DocValuesFieldExistsQuery::live$ = false;

        jclass DocValuesFieldExistsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesFieldExistsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocValuesDocIdSetIterator_b55c641563610133] = env->getStaticMethodID(cls, "getDocValuesDocIdSetIterator", "(Ljava/lang/String;Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesFieldExistsQuery::DocValuesFieldExistsQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::org::apache::lucene::search::Weight DocValuesFieldExistsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean DocValuesFieldExistsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocValuesFieldExistsQuery::getDocValuesDocIdSetIterator(const ::java::lang::String & a0, const ::org::apache::lucene::index::LeafReader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_getDocValuesDocIdSetIterator_b55c641563610133], a0.this$, a1.this$));
        }

        ::java::lang::String DocValuesFieldExistsQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        jint DocValuesFieldExistsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String DocValuesFieldExistsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void DocValuesFieldExistsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesFieldExistsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFieldExistsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocValuesFieldExistsQuery_init_(t_DocValuesFieldExistsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesFieldExistsQuery_createWeight(t_DocValuesFieldExistsQuery *self, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_equals(t_DocValuesFieldExistsQuery *self, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_getDocValuesDocIdSetIterator(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_getField(t_DocValuesFieldExistsQuery *self);
        static PyObject *t_DocValuesFieldExistsQuery_hashCode(t_DocValuesFieldExistsQuery *self, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_toString(t_DocValuesFieldExistsQuery *self, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_visit(t_DocValuesFieldExistsQuery *self, PyObject *args);
        static PyObject *t_DocValuesFieldExistsQuery_get__field(t_DocValuesFieldExistsQuery *self, void *data);
        static PyGetSetDef t_DocValuesFieldExistsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFieldExistsQuery, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFieldExistsQuery__methods_[] = {
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, getDocValuesDocIdSetIterator, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesFieldExistsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesFieldExistsQuery)[] = {
          { Py_tp_methods, t_DocValuesFieldExistsQuery__methods_ },
          { Py_tp_init, (void *) t_DocValuesFieldExistsQuery_init_ },
          { Py_tp_getset, t_DocValuesFieldExistsQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesFieldExistsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(DocValuesFieldExistsQuery, t_DocValuesFieldExistsQuery, DocValuesFieldExistsQuery);

        void t_DocValuesFieldExistsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFieldExistsQuery), &PY_TYPE_DEF(DocValuesFieldExistsQuery), module, "DocValuesFieldExistsQuery", 0);
        }

        void t_DocValuesFieldExistsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFieldExistsQuery), "class_", make_descriptor(DocValuesFieldExistsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFieldExistsQuery), "wrapfn_", make_descriptor(t_DocValuesFieldExistsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFieldExistsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFieldExistsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFieldExistsQuery::initializeClass, 1)))
            return NULL;
          return t_DocValuesFieldExistsQuery::wrap_Object(DocValuesFieldExistsQuery(((t_DocValuesFieldExistsQuery *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFieldExistsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFieldExistsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocValuesFieldExistsQuery_init_(t_DocValuesFieldExistsQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFieldExistsQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DocValuesFieldExistsQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesFieldExistsQuery_createWeight(t_DocValuesFieldExistsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesFieldExistsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DocValuesFieldExistsQuery_equals(t_DocValuesFieldExistsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DocValuesFieldExistsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocValuesFieldExistsQuery_getDocValuesDocIdSetIterator(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::LeafReader a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocValuesFieldExistsQuery::getDocValuesDocIdSetIterator(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocValuesDocIdSetIterator", args);
          return NULL;
        }

        static PyObject *t_DocValuesFieldExistsQuery_getField(t_DocValuesFieldExistsQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_DocValuesFieldExistsQuery_hashCode(t_DocValuesFieldExistsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DocValuesFieldExistsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocValuesFieldExistsQuery_toString(t_DocValuesFieldExistsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(DocValuesFieldExistsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFieldExistsQuery_visit(t_DocValuesFieldExistsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocValuesFieldExistsQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_DocValuesFieldExistsQuery_get__field(t_DocValuesFieldExistsQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseReadingFormFilterFactory::class$ = NULL;
          jmethodID *JapaneseReadingFormFilterFactory::mids$ = NULL;
          bool JapaneseReadingFormFilterFactory::live$ = false;
          ::java::lang::String *JapaneseReadingFormFilterFactory::NAME = NULL;

          jclass JapaneseReadingFormFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseReadingFormFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseReadingFormFilterFactory::JapaneseReadingFormFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream JapaneseReadingFormFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseReadingFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseReadingFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseReadingFormFilterFactory_init_(t_JapaneseReadingFormFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseReadingFormFilterFactory_create(t_JapaneseReadingFormFilterFactory *self, PyObject *args);

          static PyMethodDef t_JapaneseReadingFormFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseReadingFormFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseReadingFormFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseReadingFormFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseReadingFormFilterFactory)[] = {
            { Py_tp_methods, t_JapaneseReadingFormFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseReadingFormFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseReadingFormFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseReadingFormFilterFactory, t_JapaneseReadingFormFilterFactory, JapaneseReadingFormFilterFactory);

          void t_JapaneseReadingFormFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseReadingFormFilterFactory), &PY_TYPE_DEF(JapaneseReadingFormFilterFactory), module, "JapaneseReadingFormFilterFactory", 0);
          }

          void t_JapaneseReadingFormFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilterFactory), "class_", make_descriptor(JapaneseReadingFormFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilterFactory), "wrapfn_", make_descriptor(t_JapaneseReadingFormFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseReadingFormFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilterFactory), "NAME", make_descriptor(j2p(*JapaneseReadingFormFilterFactory::NAME)));
          }

          static PyObject *t_JapaneseReadingFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseReadingFormFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseReadingFormFilterFactory::wrap_Object(JapaneseReadingFormFilterFactory(((t_JapaneseReadingFormFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseReadingFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseReadingFormFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseReadingFormFilterFactory_init_(t_JapaneseReadingFormFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseReadingFormFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseReadingFormFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseReadingFormFilterFactory_create(t_JapaneseReadingFormFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseReadingFormFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BwxorContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BwxorContext::class$ = NULL;
          jmethodID *JavascriptParser$BwxorContext::mids$ = NULL;
          bool JavascriptParser$BwxorContext::live$ = false;

          jclass JavascriptParser$BwxorContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BwxorContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BwxorContext::JavascriptParser$BwxorContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BwxorContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BwxorContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BwxorContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwxorContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwxorContext_of_(t_JavascriptParser$BwxorContext *self, PyObject *args);
          static int t_JavascriptParser$BwxorContext_init_(t_JavascriptParser$BwxorContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BwxorContext_expression(t_JavascriptParser$BwxorContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BwxorContext_get__parameters_(t_JavascriptParser$BwxorContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BwxorContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BwxorContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BwxorContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BwxorContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwxorContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwxorContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BwxorContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BwxorContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BwxorContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BwxorContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BwxorContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BwxorContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BwxorContext, t_JavascriptParser$BwxorContext, JavascriptParser$BwxorContext);
          PyObject *t_JavascriptParser$BwxorContext::wrap_Object(const JavascriptParser$BwxorContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwxorContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwxorContext *self = (t_JavascriptParser$BwxorContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BwxorContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwxorContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwxorContext *self = (t_JavascriptParser$BwxorContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BwxorContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BwxorContext), &PY_TYPE_DEF(JavascriptParser$BwxorContext), module, "JavascriptParser$BwxorContext", 0);
          }

          void t_JavascriptParser$BwxorContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwxorContext), "class_", make_descriptor(JavascriptParser$BwxorContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwxorContext), "wrapfn_", make_descriptor(t_JavascriptParser$BwxorContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwxorContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BwxorContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BwxorContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BwxorContext::wrap_Object(JavascriptParser$BwxorContext(((t_JavascriptParser$BwxorContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BwxorContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BwxorContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BwxorContext_of_(t_JavascriptParser$BwxorContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BwxorContext_init_(t_JavascriptParser$BwxorContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BwxorContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BwxorContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BwxorContext_expression(t_JavascriptParser$BwxorContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BwxorContext_get__parameters_(t_JavascriptParser$BwxorContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsReaderBase::class$ = NULL;
        jmethodID *PostingsReaderBase::mids$ = NULL;
        bool PostingsReaderBase::live$ = false;

        jclass PostingsReaderBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsReaderBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decodeTerm_96c712031f56c3ca] = env->getMethodID(cls, "decodeTerm", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_impacts_c827249ad6105c32] = env->getMethodID(cls, "impacts", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_init_80eb712663869aa2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/index/SegmentReadState;)V");
            mids$[mid_newTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_postings_07f95f4d18ad7976] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsReaderBase::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void PostingsReaderBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void PostingsReaderBase::decodeTerm(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_decodeTerm_96c712031f56c3ca], a0.this$, a1.this$, a2.this$, a3);
        }

        ::org::apache::lucene::index::ImpactsEnum PostingsReaderBase::impacts(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, jint a2) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_c827249ad6105c32], a0.this$, a1.this$, a2));
        }

        void PostingsReaderBase::init(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::index::SegmentReadState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_80eb712663869aa2], a0.this$, a1.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsReaderBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_ec21239f6d5a0c5b]));
        }

        ::org::apache::lucene::index::PostingsEnum PostingsReaderBase::postings(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::index::PostingsEnum & a2, jint a3) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_07f95f4d18ad7976], a0.this$, a1.this$, a2.this$, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_impacts(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_postings(t_PostingsReaderBase *self, PyObject *args);

        static PyMethodDef t_PostingsReaderBase__methods_[] = {
          DECLARE_METHOD(t_PostingsReaderBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, decodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, impacts, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, init, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, postings, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PostingsReaderBase)[] = {
          { Py_tp_methods, t_PostingsReaderBase__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PostingsReaderBase)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PostingsReaderBase, t_PostingsReaderBase, PostingsReaderBase);

        void t_PostingsReaderBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsReaderBase), &PY_TYPE_DEF(PostingsReaderBase), module, "PostingsReaderBase", 0);
        }

        void t_PostingsReaderBase::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsReaderBase), "class_", make_descriptor(PostingsReaderBase::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsReaderBase), "wrapfn_", make_descriptor(t_PostingsReaderBase::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsReaderBase), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsReaderBase::initializeClass, 1)))
            return NULL;
          return t_PostingsReaderBase::wrap_Object(PostingsReaderBase(((t_PostingsReaderBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsReaderBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);
          jboolean a3;

          if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_impacts(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.impacts(a0, a1, a2));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "impacts", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PostingsReaderBase_postings(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::index::PostingsEnum a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.postings(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postings", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/memory/DirectDocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {

          ::java::lang::Class *DirectDocValuesFormat::class$ = NULL;
          jmethodID *DirectDocValuesFormat::mids$ = NULL;
          bool DirectDocValuesFormat::live$ = false;
          jint DirectDocValuesFormat::MAX_SORTED_SET_ORDS = (jint) 0;
          jint DirectDocValuesFormat::MAX_TOTAL_BYTES_LENGTH = (jint) 0;

          jclass DirectDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/memory/DirectDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_4d0d89459a33e411] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_4fca71c324f605dc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_SORTED_SET_ORDS = env->getStaticIntField(cls, "MAX_SORTED_SET_ORDS");
              MAX_TOTAL_BYTES_LENGTH = env->getStaticIntField(cls, "MAX_TOTAL_BYTES_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectDocValuesFormat::DirectDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer DirectDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_4d0d89459a33e411], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer DirectDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_4fca71c324f605dc], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {
          static PyObject *t_DirectDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectDocValuesFormat_init_(t_DirectDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectDocValuesFormat_fieldsConsumer(t_DirectDocValuesFormat *self, PyObject *args);
          static PyObject *t_DirectDocValuesFormat_fieldsProducer(t_DirectDocValuesFormat *self, PyObject *args);

          static PyMethodDef t_DirectDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_DirectDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_DirectDocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectDocValuesFormat)[] = {
            { Py_tp_methods, t_DirectDocValuesFormat__methods_ },
            { Py_tp_init, (void *) t_DirectDocValuesFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectDocValuesFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::DocValuesFormat),
            NULL
          };

          DEFINE_TYPE(DirectDocValuesFormat, t_DirectDocValuesFormat, DirectDocValuesFormat);

          void t_DirectDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectDocValuesFormat), &PY_TYPE_DEF(DirectDocValuesFormat), module, "DirectDocValuesFormat", 0);
          }

          void t_DirectDocValuesFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectDocValuesFormat), "class_", make_descriptor(DirectDocValuesFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectDocValuesFormat), "wrapfn_", make_descriptor(t_DirectDocValuesFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectDocValuesFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectDocValuesFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectDocValuesFormat), "MAX_SORTED_SET_ORDS", make_descriptor(DirectDocValuesFormat::MAX_SORTED_SET_ORDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectDocValuesFormat), "MAX_TOTAL_BYTES_LENGTH", make_descriptor(DirectDocValuesFormat::MAX_TOTAL_BYTES_LENGTH));
          }

          static PyObject *t_DirectDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_DirectDocValuesFormat::wrap_Object(DirectDocValuesFormat(((t_DirectDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_DirectDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectDocValuesFormat_init_(t_DirectDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            DirectDocValuesFormat object((jobject) NULL);

            INT_CALL(object = DirectDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectDocValuesFormat_fieldsConsumer(t_DirectDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DirectDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_DirectDocValuesFormat_fieldsProducer(t_DirectDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DirectDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *FuzzyLikeThisQuery::class$ = NULL;
          jmethodID *FuzzyLikeThisQuery::mids$ = NULL;
          bool FuzzyLikeThisQuery::live$ = false;

          jclass FuzzyLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_60979da64a006878] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_9fc9c55693028477] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;FI)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIgnoreTF_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreTF", "()Z");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setIgnoreTF_9d72768e8fdce2b7] = env->getMethodID(cls, "setIgnoreTF", "(Z)V");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzyLikeThisQuery::FuzzyLikeThisQuery(jint a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_60979da64a006878, a0, a1.this$)) {}

          void FuzzyLikeThisQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_9fc9c55693028477], a0.this$, a1.this$, a2, a3);
          }

          jboolean FuzzyLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FuzzyLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean FuzzyLikeThisQuery::isIgnoreTF() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreTF_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::search::Query FuzzyLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          void FuzzyLikeThisQuery::setIgnoreTF(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setIgnoreTF_9d72768e8fdce2b7], a0);
          }

          ::java::lang::String FuzzyLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FuzzyLikeThisQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self);
          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_visit(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data);
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_FuzzyLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_FuzzyLikeThisQuery, ignoreTF),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzyLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_FuzzyLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, isIgnoreTF, METH_NOARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, setIgnoreTF, METH_O),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FuzzyLikeThisQuery)[] = {
            { Py_tp_methods, t_FuzzyLikeThisQuery__methods_ },
            { Py_tp_init, (void *) t_FuzzyLikeThisQuery_init_ },
            { Py_tp_getset, t_FuzzyLikeThisQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FuzzyLikeThisQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(FuzzyLikeThisQuery, t_FuzzyLikeThisQuery, FuzzyLikeThisQuery);

          void t_FuzzyLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzyLikeThisQuery), &PY_TYPE_DEF(FuzzyLikeThisQuery), module, "FuzzyLikeThisQuery", 0);
          }

          void t_FuzzyLikeThisQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQuery), "class_", make_descriptor(FuzzyLikeThisQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQuery), "wrapfn_", make_descriptor(t_FuzzyLikeThisQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzyLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_FuzzyLikeThisQuery::wrap_Object(FuzzyLikeThisQuery(((t_FuzzyLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzyLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            FuzzyLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FuzzyLikeThisQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            jint a3;

            if (!parseArgs(args, "ssFI", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addTerms(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreTF());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setIgnoreTF(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setIgnoreTF", arg);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_visit(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreTF());
            Py_RETURN_BOOL(value);
          }
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIgnoreTF(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "ignoreTF", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIterator.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OffsetsEnum$OfMatchesIterator::class$ = NULL;
          jmethodID *OffsetsEnum$OfMatchesIterator::mids$ = NULL;
          bool OffsetsEnum$OfMatchesIterator::live$ = false;

          jclass OffsetsEnum$OfMatchesIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_68e351299f5d03ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MatchesIterator;Ljava/util/function/Supplier;)V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_nextPosition_8454bd5aa23fd11e] = env->getMethodID(cls, "nextPosition", "()Z");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetsEnum$OfMatchesIterator::OffsetsEnum$OfMatchesIterator(const ::org::apache::lucene::search::MatchesIterator & a0, const ::java::util::function::Supplier & a1) : ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->newObject(initializeClass, &mids$, mid_init$_68e351299f5d03ba, a0.this$, a1.this$)) {}

          jint OffsetsEnum$OfMatchesIterator::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jint OffsetsEnum$OfMatchesIterator::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef OffsetsEnum$OfMatchesIterator::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jboolean OffsetsEnum$OfMatchesIterator::nextPosition() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nextPosition_8454bd5aa23fd11e]);
          }

          jint OffsetsEnum$OfMatchesIterator::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OffsetsEnum$OfMatchesIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetsEnum$OfMatchesIterator_init_(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_endOffset(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_freq(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_getTerm(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_nextPosition(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_startOffset(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIterator_get__term(t_OffsetsEnum$OfMatchesIterator *self, void *data);
          static PyGetSetDef t_OffsetsEnum$OfMatchesIterator__fields_[] = {
            DECLARE_GET_FIELD(t_OffsetsEnum$OfMatchesIterator, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffsetsEnum$OfMatchesIterator__methods_[] = {
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, endOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, freq, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, getTerm, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, nextPosition, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIterator, startOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetsEnum$OfMatchesIterator)[] = {
            { Py_tp_methods, t_OffsetsEnum$OfMatchesIterator__methods_ },
            { Py_tp_init, (void *) t_OffsetsEnum$OfMatchesIterator_init_ },
            { Py_tp_getset, t_OffsetsEnum$OfMatchesIterator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetsEnum$OfMatchesIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::OffsetsEnum),
            NULL
          };

          DEFINE_TYPE(OffsetsEnum$OfMatchesIterator, t_OffsetsEnum$OfMatchesIterator, OffsetsEnum$OfMatchesIterator);

          void t_OffsetsEnum$OfMatchesIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetsEnum$OfMatchesIterator), &PY_TYPE_DEF(OffsetsEnum$OfMatchesIterator), module, "OffsetsEnum$OfMatchesIterator", 0);
          }

          void t_OffsetsEnum$OfMatchesIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIterator), "class_", make_descriptor(OffsetsEnum$OfMatchesIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIterator), "wrapfn_", make_descriptor(t_OffsetsEnum$OfMatchesIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetsEnum$OfMatchesIterator::initializeClass, 1)))
              return NULL;
            return t_OffsetsEnum$OfMatchesIterator::wrap_Object(OffsetsEnum$OfMatchesIterator(((t_OffsetsEnum$OfMatchesIterator *) arg)->object.this$));
          }
          static PyObject *t_OffsetsEnum$OfMatchesIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetsEnum$OfMatchesIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetsEnum$OfMatchesIterator_init_(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MatchesIterator a0((jobject) NULL);
            ::java::util::function::Supplier a1((jobject) NULL);
            PyTypeObject **p1;
            OffsetsEnum$OfMatchesIterator object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::MatchesIterator::initializeClass, ::java::util::function::Supplier::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Supplier::parameters_))
            {
              INT_CALL(object = OffsetsEnum$OfMatchesIterator(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_endOffset(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIterator), (PyObject *) self, "endOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_freq(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIterator), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_getTerm(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIterator), (PyObject *) self, "getTerm", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_nextPosition(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextPosition());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIterator), (PyObject *) self, "nextPosition", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_startOffset(t_OffsetsEnum$OfMatchesIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIterator), (PyObject *) self, "startOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIterator_get__term(t_OffsetsEnum$OfMatchesIterator *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanContainingQuery$SpanContainingWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/search/spans/SpanContainingQuery.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanContainingQuery$SpanContainingWeight::class$ = NULL;
          jmethodID *SpanContainingQuery$SpanContainingWeight::mids$ = NULL;
          bool SpanContainingQuery$SpanContainingWeight::live$ = false;

          jclass SpanContainingQuery$SpanContainingWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanContainingQuery$SpanContainingWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_92acb82a86ed74ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanContainingQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;F)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanContainingQuery$SpanContainingWeight::SpanContainingQuery$SpanContainingWeight(const ::org::apache::lucene::search::spans::SpanContainingQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::org::apache::lucene::search::spans::SpanWeight & a3, const ::org::apache::lucene::search::spans::SpanWeight & a4, jfloat a5) : ::org::apache::lucene::search::spans::SpanContainQuery$SpanContainWeight(env->newObject(initializeClass, &mids$, mid_init$_92acb82a86ed74ed, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5)) {}

          ::org::apache::lucene::search::spans::Spans SpanContainingQuery$SpanContainingWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanContainingQuery$SpanContainingWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanContainingQuery$SpanContainingWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanContainingQuery$SpanContainingWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanContainingQuery$SpanContainingWeight_init_(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanContainingQuery$SpanContainingWeight_getSpans(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args);
          static PyObject *t_SpanContainingQuery$SpanContainingWeight_isCacheable(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args);

          static PyMethodDef t_SpanContainingQuery$SpanContainingWeight__methods_[] = {
            DECLARE_METHOD(t_SpanContainingQuery$SpanContainingWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainingQuery$SpanContainingWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainingQuery$SpanContainingWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainingQuery$SpanContainingWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanContainingQuery$SpanContainingWeight)[] = {
            { Py_tp_methods, t_SpanContainingQuery$SpanContainingWeight__methods_ },
            { Py_tp_init, (void *) t_SpanContainingQuery$SpanContainingWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanContainingQuery$SpanContainingWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanContainQuery$SpanContainWeight),
            NULL
          };

          DEFINE_TYPE(SpanContainingQuery$SpanContainingWeight, t_SpanContainingQuery$SpanContainingWeight, SpanContainingQuery$SpanContainingWeight);

          void t_SpanContainingQuery$SpanContainingWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanContainingQuery$SpanContainingWeight), &PY_TYPE_DEF(SpanContainingQuery$SpanContainingWeight), module, "SpanContainingQuery$SpanContainingWeight", 0);
          }

          void t_SpanContainingQuery$SpanContainingWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery$SpanContainingWeight), "class_", make_descriptor(SpanContainingQuery$SpanContainingWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery$SpanContainingWeight), "wrapfn_", make_descriptor(t_SpanContainingQuery$SpanContainingWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery$SpanContainingWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanContainingQuery$SpanContainingWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanContainingQuery$SpanContainingWeight::initializeClass, 1)))
              return NULL;
            return t_SpanContainingQuery$SpanContainingWeight::wrap_Object(SpanContainingQuery$SpanContainingWeight(((t_SpanContainingQuery$SpanContainingWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanContainingQuery$SpanContainingWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanContainingQuery$SpanContainingWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanContainingQuery$SpanContainingWeight_init_(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanContainingQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::SpanWeight a3((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight a4((jobject) NULL);
            jfloat a5;
            SpanContainingQuery$SpanContainingWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKkkF", ::org::apache::lucene::search::spans::SpanContainingQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &a4, &a5))
            {
              INT_CALL(object = SpanContainingQuery$SpanContainingWeight(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanContainingQuery$SpanContainingWeight_getSpans(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanContainingQuery$SpanContainingWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanContainingQuery$SpanContainingWeight_isCacheable(t_SpanContainingQuery$SpanContainingWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanContainingQuery$SpanContainingWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ImpactsDISI.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ImpactsSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ImpactsDISI::class$ = NULL;
        jmethodID *ImpactsDISI::mids$ = NULL;
        bool ImpactsDISI::live$ = false;

        jclass ImpactsDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ImpactsDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6bcada475ee35b7c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/index/ImpactsSource;Lorg/apache/lucene/search/similarities/Similarity$SimScorer;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceShallow_1e143afe1894d213] = env->getMethodID(cls, "advanceShallow", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinCompetitiveScore", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ImpactsDISI::ImpactsDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, const ::org::apache::lucene::index::ImpactsSource & a1, const ::org::apache::lucene::search::similarities::Similarity$SimScorer & a2) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_6bcada475ee35b7c, a0.this$, a1.this$, a2.this$)) {}

        jint ImpactsDISI::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jint ImpactsDISI::advanceShallow(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advanceShallow_1e143afe1894d213], a0);
        }

        jlong ImpactsDISI::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint ImpactsDISI::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jfloat ImpactsDISI::getMaxScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
        }

        jint ImpactsDISI::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        void ImpactsDISI::setMinCompetitiveScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ImpactsDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ImpactsDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ImpactsDISI_init_(t_ImpactsDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ImpactsDISI_advance(t_ImpactsDISI *self, PyObject *args);
        static PyObject *t_ImpactsDISI_advanceShallow(t_ImpactsDISI *self, PyObject *arg);
        static PyObject *t_ImpactsDISI_cost(t_ImpactsDISI *self, PyObject *args);
        static PyObject *t_ImpactsDISI_docID(t_ImpactsDISI *self, PyObject *args);
        static PyObject *t_ImpactsDISI_getMaxScore(t_ImpactsDISI *self, PyObject *arg);
        static PyObject *t_ImpactsDISI_nextDoc(t_ImpactsDISI *self, PyObject *args);
        static PyObject *t_ImpactsDISI_setMinCompetitiveScore(t_ImpactsDISI *self, PyObject *arg);
        static int t_ImpactsDISI_set__minCompetitiveScore(t_ImpactsDISI *self, PyObject *arg, void *data);
        static PyGetSetDef t_ImpactsDISI__fields_[] = {
          DECLARE_SET_FIELD(t_ImpactsDISI, minCompetitiveScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ImpactsDISI__methods_[] = {
          DECLARE_METHOD(t_ImpactsDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ImpactsDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ImpactsDISI, advance, METH_VARARGS),
          DECLARE_METHOD(t_ImpactsDISI, advanceShallow, METH_O),
          DECLARE_METHOD(t_ImpactsDISI, cost, METH_VARARGS),
          DECLARE_METHOD(t_ImpactsDISI, docID, METH_VARARGS),
          DECLARE_METHOD(t_ImpactsDISI, getMaxScore, METH_O),
          DECLARE_METHOD(t_ImpactsDISI, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_ImpactsDISI, setMinCompetitiveScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ImpactsDISI)[] = {
          { Py_tp_methods, t_ImpactsDISI__methods_ },
          { Py_tp_init, (void *) t_ImpactsDISI_init_ },
          { Py_tp_getset, t_ImpactsDISI__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ImpactsDISI)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(ImpactsDISI, t_ImpactsDISI, ImpactsDISI);

        void t_ImpactsDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(ImpactsDISI), &PY_TYPE_DEF(ImpactsDISI), module, "ImpactsDISI", 0);
        }

        void t_ImpactsDISI::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsDISI), "class_", make_descriptor(ImpactsDISI::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsDISI), "wrapfn_", make_descriptor(t_ImpactsDISI::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsDISI), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ImpactsDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ImpactsDISI::initializeClass, 1)))
            return NULL;
          return t_ImpactsDISI::wrap_Object(ImpactsDISI(((t_ImpactsDISI *) arg)->object.this$));
        }
        static PyObject *t_ImpactsDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ImpactsDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ImpactsDISI_init_(t_ImpactsDISI *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          ::org::apache::lucene::index::ImpactsSource a1((jobject) NULL);
          ::org::apache::lucene::search::similarities::Similarity$SimScorer a2((jobject) NULL);
          ImpactsDISI object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, ::org::apache::lucene::index::ImpactsSource::initializeClass, ::org::apache::lucene::search::similarities::Similarity$SimScorer::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = ImpactsDISI(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ImpactsDISI_advance(t_ImpactsDISI *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ImpactsDISI), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_ImpactsDISI_advanceShallow(t_ImpactsDISI *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceShallow(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advanceShallow", arg);
          return NULL;
        }

        static PyObject *t_ImpactsDISI_cost(t_ImpactsDISI *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ImpactsDISI), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_ImpactsDISI_docID(t_ImpactsDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ImpactsDISI), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_ImpactsDISI_getMaxScore(t_ImpactsDISI *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMaxScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxScore", arg);
          return NULL;
        }

        static PyObject *t_ImpactsDISI_nextDoc(t_ImpactsDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ImpactsDISI), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_ImpactsDISI_setMinCompetitiveScore(t_ImpactsDISI *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMinCompetitiveScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinCompetitiveScore", arg);
          return NULL;
        }

        static int t_ImpactsDISI_set__minCompetitiveScore(t_ImpactsDISI *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMinCompetitiveScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minCompetitiveScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthCharFilterFactory::class$ = NULL;
          jmethodID *CJKWidthCharFilterFactory::mids$ = NULL;
          bool CJKWidthCharFilterFactory::live$ = false;
          ::java::lang::String *CJKWidthCharFilterFactory::NAME = NULL;

          jclass CJKWidthCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthCharFilterFactory::CJKWidthCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::java::io::Reader CJKWidthCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          ::java::io::Reader CJKWidthCharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthCharFilterFactory_init_(t_CJKWidthCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthCharFilterFactory_create(t_CJKWidthCharFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthCharFilterFactory_normalize(t_CJKWidthCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKWidthCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthCharFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKWidthCharFilterFactory)[] = {
            { Py_tp_methods, t_CJKWidthCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CJKWidthCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKWidthCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(CJKWidthCharFilterFactory, t_CJKWidthCharFilterFactory, CJKWidthCharFilterFactory);

          void t_CJKWidthCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthCharFilterFactory), &PY_TYPE_DEF(CJKWidthCharFilterFactory), module, "CJKWidthCharFilterFactory", 0);
          }

          void t_CJKWidthCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilterFactory), "class_", make_descriptor(CJKWidthCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilterFactory), "wrapfn_", make_descriptor(t_CJKWidthCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKWidthCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthCharFilterFactory), "NAME", make_descriptor(j2p(*CJKWidthCharFilterFactory::NAME)));
          }

          static PyObject *t_CJKWidthCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthCharFilterFactory::wrap_Object(CJKWidthCharFilterFactory(((t_CJKWidthCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthCharFilterFactory_init_(t_CJKWidthCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthCharFilterFactory_create(t_CJKWidthCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CJKWidthCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthCharFilterFactory_normalize(t_CJKWidthCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CJKWidthCharFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/IntersectBlockReader.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *IntersectBlockReader::class$ = NULL;
          jmethodID *IntersectBlockReader::mids$ = NULL;
          bool IntersectBlockReader::live$ = false;

          jclass IntersectBlockReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/IntersectBlockReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_nextBlock_8454bd5aa23fd11e] = env->getMethodID(cls, "nextBlock", "()Z");
              mids$[mid_nextTermInBlockMatching_7af2ea2e37ce82b8] = env->getMethodID(cls, "nextTermInBlockMatching", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_endsWithCommonSuffix_5dd9ded580db9fa3] = env->getMethodID(cls, "endsWithCommonSuffix", "([BI)Z");
              mids$[mid_getMinTermLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMinTermLength", "()I");
              mids$[mid_seekFirstBlock_8454bd5aa23fd11e] = env->getMethodID(cls, "seekFirstBlock", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef IntersectBlockReader::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IntersectBlockReader::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
          }

          jboolean IntersectBlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
          }

          void IntersectBlockReader::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
          }

          void IntersectBlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_IntersectBlockReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntersectBlockReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntersectBlockReader_next(t_IntersectBlockReader *self, PyObject *args);
          static PyObject *t_IntersectBlockReader_seekCeil(t_IntersectBlockReader *self, PyObject *args);
          static PyObject *t_IntersectBlockReader_seekExact(t_IntersectBlockReader *self, PyObject *args);

          static PyMethodDef t_IntersectBlockReader__methods_[] = {
            DECLARE_METHOD(t_IntersectBlockReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntersectBlockReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntersectBlockReader, next, METH_VARARGS),
            DECLARE_METHOD(t_IntersectBlockReader, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IntersectBlockReader, seekExact, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntersectBlockReader)[] = {
            { Py_tp_methods, t_IntersectBlockReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_IntersectBlockReader *)) get_next< t_IntersectBlockReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntersectBlockReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::BlockReader),
            NULL
          };

          DEFINE_TYPE(IntersectBlockReader, t_IntersectBlockReader, IntersectBlockReader);

          void t_IntersectBlockReader::install(PyObject *module)
          {
            installType(&PY_TYPE(IntersectBlockReader), &PY_TYPE_DEF(IntersectBlockReader), module, "IntersectBlockReader", 0);
          }

          void t_IntersectBlockReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntersectBlockReader), "class_", make_descriptor(IntersectBlockReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntersectBlockReader), "wrapfn_", make_descriptor(t_IntersectBlockReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntersectBlockReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntersectBlockReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntersectBlockReader::initializeClass, 1)))
              return NULL;
            return t_IntersectBlockReader::wrap_Object(IntersectBlockReader(((t_IntersectBlockReader *) arg)->object.this$));
          }
          static PyObject *t_IntersectBlockReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntersectBlockReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntersectBlockReader_next(t_IntersectBlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntersectBlockReader), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IntersectBlockReader_seekCeil(t_IntersectBlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntersectBlockReader), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IntersectBlockReader_seekExact(t_IntersectBlockReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(PY_TYPE(IntersectBlockReader), (PyObject *) self, "seekExact", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchAllDocsQueryNode::class$ = NULL;
              jmethodID *MatchAllDocsQueryNode::mids$ = NULL;
              bool MatchAllDocsQueryNode::live$ = false;

              jclass MatchAllDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b93dc4d26070c0bd] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/MatchAllDocsQueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNode::MatchAllDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              MatchAllDocsQueryNode MatchAllDocsQueryNode::cloneTree() const
              {
                return MatchAllDocsQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b93dc4d26070c0bd]));
              }

              ::java::lang::CharSequence MatchAllDocsQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String MatchAllDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args);
              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchAllDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MatchAllDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MatchAllDocsQueryNode)[] = {
                { Py_tp_methods, t_MatchAllDocsQueryNode__methods_ },
                { Py_tp_init, (void *) t_MatchAllDocsQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MatchAllDocsQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(MatchAllDocsQueryNode, t_MatchAllDocsQueryNode, MatchAllDocsQueryNode);

              void t_MatchAllDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNode), &PY_TYPE_DEF(MatchAllDocsQueryNode), module, "MatchAllDocsQueryNode", 0);
              }

              void t_MatchAllDocsQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNode), "class_", make_descriptor(MatchAllDocsQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNode), "wrapfn_", make_descriptor(t_MatchAllDocsQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNode::wrap_Object(MatchAllDocsQueryNode(((t_MatchAllDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNode_init_(t_MatchAllDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNode_cloneTree(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                MatchAllDocsQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_MatchAllDocsQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toQueryString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MatchAllDocsQueryNode_toString(t_MatchAllDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(MatchAllDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine$Serializer.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockHeader.h"
#include "org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STBlockLine$Serializer::class$ = NULL;
            jmethodID *STBlockLine$Serializer::mids$ = NULL;
            bool STBlockLine$Serializer::live$ = false;

            jclass STBlockLine$Serializer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine$Serializer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_readFieldIds_c6499b82420c7c5f] = env->getMethodID(cls, "readFieldIds", "(Lorg/apache/lucene/store/DataInput;I)[I");
                mids$[mid_readFieldTermStatesMap_f550dbd900cba577] = env->getMethodID(cls, "readFieldTermStatesMap", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;Lorg/apache/lucene/index/FieldInfos;Ljava/util/Map;)V");
                mids$[mid_readTermStateForField_f152748129351191] = env->getMethodID(cls, "readTermStateForField", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/codecs/BlockTermState;)Lorg/apache/lucene/codecs/BlockTermState;");
                mids$[mid_writeLineTermStates_17b7f72605c0ec99] = env->getMethodID(cls, "writeLineTermStates", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine;Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STBlockLine$Serializer::STBlockLine$Serializer() : ::org::apache::lucene::codecs::uniformsplit::BlockLine$Serializer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            JArray< jint > STBlockLine$Serializer::readFieldIds(const ::org::apache::lucene::store::DataInput & a0, jint a1) const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_readFieldIds_c6499b82420c7c5f], a0.this$, a1));
            }

            void STBlockLine$Serializer::readFieldTermStatesMap(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockHeader & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::java::util::Map & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_readFieldTermStatesMap_f550dbd900cba577], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
            }

            ::org::apache::lucene::codecs::BlockTermState STBlockLine$Serializer::readTermStateForField(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer & a2, const ::org::apache::lucene::codecs::uniformsplit::BlockHeader & a3, const ::org::apache::lucene::index::FieldInfos & a4, const ::org::apache::lucene::codecs::BlockTermState & a5) const
            {
              return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_readTermStateForField_f152748129351191], a0, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$));
            }

            void STBlockLine$Serializer::writeLineTermStates(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::sharedterms::STBlockLine & a1, const ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_writeLineTermStates_17b7f72605c0ec99], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STBlockLine$Serializer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STBlockLine$Serializer_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STBlockLine$Serializer_init_(t_STBlockLine$Serializer *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STBlockLine$Serializer_readFieldIds(t_STBlockLine$Serializer *self, PyObject *args);
            static PyObject *t_STBlockLine$Serializer_readFieldTermStatesMap(t_STBlockLine$Serializer *self, PyObject *args);
            static PyObject *t_STBlockLine$Serializer_readTermStateForField(t_STBlockLine$Serializer *self, PyObject *args);
            static PyObject *t_STBlockLine$Serializer_writeLineTermStates(t_STBlockLine$Serializer *self, PyObject *args);

            static PyMethodDef t_STBlockLine$Serializer__methods_[] = {
              DECLARE_METHOD(t_STBlockLine$Serializer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockLine$Serializer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockLine$Serializer, readFieldIds, METH_VARARGS),
              DECLARE_METHOD(t_STBlockLine$Serializer, readFieldTermStatesMap, METH_VARARGS),
              DECLARE_METHOD(t_STBlockLine$Serializer, readTermStateForField, METH_VARARGS),
              DECLARE_METHOD(t_STBlockLine$Serializer, writeLineTermStates, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STBlockLine$Serializer)[] = {
              { Py_tp_methods, t_STBlockLine$Serializer__methods_ },
              { Py_tp_init, (void *) t_STBlockLine$Serializer_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STBlockLine$Serializer)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::BlockLine$Serializer),
              NULL
            };

            DEFINE_TYPE(STBlockLine$Serializer, t_STBlockLine$Serializer, STBlockLine$Serializer);

            void t_STBlockLine$Serializer::install(PyObject *module)
            {
              installType(&PY_TYPE(STBlockLine$Serializer), &PY_TYPE_DEF(STBlockLine$Serializer), module, "STBlockLine$Serializer", 0);
            }

            void t_STBlockLine$Serializer::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine$Serializer), "class_", make_descriptor(STBlockLine$Serializer::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine$Serializer), "wrapfn_", make_descriptor(t_STBlockLine$Serializer::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine$Serializer), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STBlockLine$Serializer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STBlockLine$Serializer::initializeClass, 1)))
                return NULL;
              return t_STBlockLine$Serializer::wrap_Object(STBlockLine$Serializer(((t_STBlockLine$Serializer *) arg)->object.this$));
            }
            static PyObject *t_STBlockLine$Serializer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STBlockLine$Serializer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STBlockLine$Serializer_init_(t_STBlockLine$Serializer *self, PyObject *args, PyObject *kwds)
            {
              STBlockLine$Serializer object((jobject) NULL);

              INT_CALL(object = STBlockLine$Serializer());
              self->object = object;

              return 0;
            }

            static PyObject *t_STBlockLine$Serializer_readFieldIds(t_STBlockLine$Serializer *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.readFieldIds(a0, a1));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "readFieldIds", args);
              return NULL;
            }

            static PyObject *t_STBlockLine$Serializer_readFieldTermStatesMap(t_STBlockLine$Serializer *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer a1((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockHeader a2((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
              ::java::util::Map a4((jobject) NULL);
              PyTypeObject **p4;

              if (!parseArgs(args, "kkkkK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockHeader::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.readFieldTermStatesMap(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "readFieldTermStatesMap", args);
              return NULL;
            }

            static PyObject *t_STBlockLine$Serializer_readTermStateForField(t_STBlockLine$Serializer *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::store::DataInput a1((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer a2((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockHeader a3((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a4((jobject) NULL);
              ::org::apache::lucene::codecs::BlockTermState a5((jobject) NULL);
              ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

              if (!parseArgs(args, "Ikkkkk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockHeader::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.readTermStateForField(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "readTermStateForField", args);
              return NULL;
            }

            static PyObject *t_STBlockLine$Serializer_writeLineTermStates(t_STBlockLine$Serializer *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::sharedterms::STBlockLine a1((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::sharedterms::STBlockLine::initializeClass, ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeLineTermStates(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "writeLineTermStates", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Exception::class$ = NULL;
    jmethodID *Exception::mids$ = NULL;
    bool Exception::live$ = false;

    jclass Exception::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Exception");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Exception__methods_[] = {
      DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Exception)[] = {
      { Py_tp_methods, t_Exception__methods_ },
      { Py_tp_init, (void *) t_Exception_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Exception)[] = {
      &PY_TYPE_DEF(::java::lang::Throwable),
      NULL
    };

    DEFINE_TYPE(Exception, t_Exception, Exception);

    void t_Exception::install(PyObject *module)
    {
      installType(&PY_TYPE(Exception), &PY_TYPE_DEF(Exception), module, "Exception", 0);
    }

    void t_Exception::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Exception), "class_", make_descriptor(Exception::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Exception), "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Exception), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
        return NULL;
      return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
    }
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Exception::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Exception object((jobject) NULL);

          INT_CALL(object = Exception());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Exception(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreScorer::class$ = NULL;
        jmethodID *ConstantScoreScorer::mids$ = NULL;
        bool ConstantScoreScorer::live$ = false;

        jclass ConstantScoreScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_25e5c5ba5465d59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Weight;FLorg/apache/lucene/search/ScoreMode;Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_init$_08a5a2c5834c5277] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Weight;FLorg/apache/lucene/search/ScoreMode;Lorg/apache/lucene/search/TwoPhaseIterator;)V");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinCompetitiveScore", "(F)V");
            mids$[mid_twoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "twoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreScorer::ConstantScoreScorer(const ::org::apache::lucene::search::Weight & a0, jfloat a1, const ::org::apache::lucene::search::ScoreMode & a2, const ::org::apache::lucene::search::DocIdSetIterator & a3) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_25e5c5ba5465d59e, a0.this$, a1, a2.this$, a3.this$)) {}

        ConstantScoreScorer::ConstantScoreScorer(const ::org::apache::lucene::search::Weight & a0, jfloat a1, const ::org::apache::lucene::search::ScoreMode & a2, const ::org::apache::lucene::search::TwoPhaseIterator & a3) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_08a5a2c5834c5277, a0.this$, a1, a2.this$, a3.this$)) {}

        jint ConstantScoreScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jfloat ConstantScoreScorer::getMaxScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::search::DocIdSetIterator ConstantScoreScorer::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jfloat ConstantScoreScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        void ConstantScoreScorer::setMinCompetitiveScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a], a0);
        }

        ::org::apache::lucene::search::TwoPhaseIterator ConstantScoreScorer::twoPhaseIterator() const
        {
          return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_twoPhaseIterator_6458a12a224a1c8a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreScorer_init_(t_ConstantScoreScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreScorer_docID(t_ConstantScoreScorer *self, PyObject *args);
        static PyObject *t_ConstantScoreScorer_getMaxScore(t_ConstantScoreScorer *self, PyObject *args);
        static PyObject *t_ConstantScoreScorer_iterator(t_ConstantScoreScorer *self, PyObject *args);
        static PyObject *t_ConstantScoreScorer_score(t_ConstantScoreScorer *self, PyObject *args);
        static PyObject *t_ConstantScoreScorer_setMinCompetitiveScore(t_ConstantScoreScorer *self, PyObject *args);
        static PyObject *t_ConstantScoreScorer_twoPhaseIterator(t_ConstantScoreScorer *self, PyObject *args);
        static int t_ConstantScoreScorer_set__minCompetitiveScore(t_ConstantScoreScorer *self, PyObject *arg, void *data);
        static PyGetSetDef t_ConstantScoreScorer__fields_[] = {
          DECLARE_SET_FIELD(t_ConstantScoreScorer, minCompetitiveScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreScorer__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreScorer, getMaxScore, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreScorer, iterator, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreScorer, setMinCompetitiveScore, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreScorer, twoPhaseIterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ConstantScoreScorer)[] = {
          { Py_tp_methods, t_ConstantScoreScorer__methods_ },
          { Py_tp_init, (void *) t_ConstantScoreScorer_init_ },
          { Py_tp_getset, t_ConstantScoreScorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ConstantScoreScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorer),
          NULL
        };

        DEFINE_TYPE(ConstantScoreScorer, t_ConstantScoreScorer, ConstantScoreScorer);

        void t_ConstantScoreScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreScorer), &PY_TYPE_DEF(ConstantScoreScorer), module, "ConstantScoreScorer", 0);
        }

        void t_ConstantScoreScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreScorer), "class_", make_descriptor(ConstantScoreScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreScorer), "wrapfn_", make_descriptor(t_ConstantScoreScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreScorer::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreScorer::wrap_Object(ConstantScoreScorer(((t_ConstantScoreScorer *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreScorer_init_(t_ConstantScoreScorer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::search::ScoreMode a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::DocIdSetIterator a3((jobject) NULL);
              ConstantScoreScorer object((jobject) NULL);

              if (!parseArgs(args, "kFKk", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a3))
              {
                INT_CALL(object = ConstantScoreScorer(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::search::ScoreMode a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::TwoPhaseIterator a3((jobject) NULL);
              ConstantScoreScorer object((jobject) NULL);

              if (!parseArgs(args, "kFKk", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, ::org::apache::lucene::search::TwoPhaseIterator::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a3))
              {
                INT_CALL(object = ConstantScoreScorer(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreScorer_docID(t_ConstantScoreScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_ConstantScoreScorer_getMaxScore(t_ConstantScoreScorer *self, PyObject *args)
        {
          jint a0;
          jfloat result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMaxScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "getMaxScore", args, 2);
        }

        static PyObject *t_ConstantScoreScorer_iterator(t_ConstantScoreScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_ConstantScoreScorer_score(t_ConstantScoreScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ConstantScoreScorer_setMinCompetitiveScore(t_ConstantScoreScorer *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setMinCompetitiveScore(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "setMinCompetitiveScore", args, 2);
        }

        static PyObject *t_ConstantScoreScorer_twoPhaseIterator(t_ConstantScoreScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.twoPhaseIterator());
            return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConstantScoreScorer), (PyObject *) self, "twoPhaseIterator", args, 2);
        }

        static int t_ConstantScoreScorer_set__minCompetitiveScore(t_ConstantScoreScorer *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMinCompetitiveScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minCompetitiveScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STMergingBlockReader.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STMergingBlockReader::class$ = NULL;
            jmethodID *STMergingBlockReader::mids$ = NULL;
            bool STMergingBlockReader::live$ = false;

            jclass STMergingBlockReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STMergingBlockReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_091726feda784e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier;Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Lorg/apache/lucene/index/FieldInfos;)V");
                mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_postings_d68d14f154b8a983] = env->getMethodID(cls, "postings", "(Ljava/lang/String;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
                mids$[mid_readFieldTermStatesMap_408bd889ee3beae5] = env->getMethodID(cls, "readFieldTermStatesMap", "(Ljava/util/Map;)V");
                mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
                mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
                mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
                mids$[mid_readTermStateIfNotRead_ec21239f6d5a0c5b] = env->getMethodID(cls, "readTermStateIfNotRead", "()Lorg/apache/lucene/codecs/BlockTermState;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STMergingBlockReader::STMergingBlockReader(const ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier & a0, const ::org::apache::lucene::store::IndexInput & a1, const ::org::apache::lucene::codecs::PostingsReaderBase & a2, const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a3, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a4, const ::org::apache::lucene::index::FieldInfos & a5) : ::org::apache::lucene::codecs::uniformsplit::sharedterms::STBlockReader(env->newObject(initializeClass, &mids$, mid_init$_091726feda784e90, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$)) {}

            ::org::apache::lucene::util::BytesRef STMergingBlockReader::next() const
            {
              return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
            }

            ::org::apache::lucene::index::PostingsEnum STMergingBlockReader::postings(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::index::PostingsEnum & a2, jint a3) const
            {
              return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_d68d14f154b8a983], a0.this$, a1.this$, a2.this$, a3));
            }

            void STMergingBlockReader::readFieldTermStatesMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_readFieldTermStatesMap_408bd889ee3beae5], a0.this$);
            }

            ::org::apache::lucene::index::TermsEnum$SeekStatus STMergingBlockReader::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
            }

            jboolean STMergingBlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
            }

            void STMergingBlockReader::seekExact(jlong a0) const
            {
              env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
            }

            void STMergingBlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STMergingBlockReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STMergingBlockReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STMergingBlockReader_init_(t_STMergingBlockReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STMergingBlockReader_next(t_STMergingBlockReader *self, PyObject *args);
            static PyObject *t_STMergingBlockReader_postings(t_STMergingBlockReader *self, PyObject *args);
            static PyObject *t_STMergingBlockReader_readFieldTermStatesMap(t_STMergingBlockReader *self, PyObject *arg);
            static PyObject *t_STMergingBlockReader_seekCeil(t_STMergingBlockReader *self, PyObject *args);
            static PyObject *t_STMergingBlockReader_seekExact(t_STMergingBlockReader *self, PyObject *args);

            static PyMethodDef t_STMergingBlockReader__methods_[] = {
              DECLARE_METHOD(t_STMergingBlockReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STMergingBlockReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STMergingBlockReader, next, METH_VARARGS),
              DECLARE_METHOD(t_STMergingBlockReader, postings, METH_VARARGS),
              DECLARE_METHOD(t_STMergingBlockReader, readFieldTermStatesMap, METH_O),
              DECLARE_METHOD(t_STMergingBlockReader, seekCeil, METH_VARARGS),
              DECLARE_METHOD(t_STMergingBlockReader, seekExact, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STMergingBlockReader)[] = {
              { Py_tp_methods, t_STMergingBlockReader__methods_ },
              { Py_tp_init, (void *) t_STMergingBlockReader_init_ },
              { Py_tp_iter, (void *) PyObject_SelfIter },
              { Py_tp_iternext, (void *) ((PyObject *(*)(t_STMergingBlockReader *)) get_next< t_STMergingBlockReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STMergingBlockReader)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::sharedterms::STBlockReader),
              NULL
            };

            DEFINE_TYPE(STMergingBlockReader, t_STMergingBlockReader, STMergingBlockReader);

            void t_STMergingBlockReader::install(PyObject *module)
            {
              installType(&PY_TYPE(STMergingBlockReader), &PY_TYPE_DEF(STMergingBlockReader), module, "STMergingBlockReader", 0);
            }

            void t_STMergingBlockReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingBlockReader), "class_", make_descriptor(STMergingBlockReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingBlockReader), "wrapfn_", make_descriptor(t_STMergingBlockReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingBlockReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STMergingBlockReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STMergingBlockReader::initializeClass, 1)))
                return NULL;
              return t_STMergingBlockReader::wrap_Object(STMergingBlockReader(((t_STMergingBlockReader *) arg)->object.this$));
            }
            static PyObject *t_STMergingBlockReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STMergingBlockReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STMergingBlockReader_init_(t_STMergingBlockReader *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier a0((jobject) NULL);
              ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
              ::org::apache::lucene::codecs::PostingsReaderBase a2((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a3((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a4((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a5((jobject) NULL);
              STMergingBlockReader object((jobject) NULL);

              if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = STMergingBlockReader(a0, a1, a2, a3, a4, a5));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STMergingBlockReader_next(t_STMergingBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.next());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingBlockReader), (PyObject *) self, "next", args, 2);
            }

            static PyObject *t_STMergingBlockReader_postings(t_STMergingBlockReader *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
              ::org::apache::lucene::index::PostingsEnum a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "skkI", ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.postings(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingBlockReader), (PyObject *) self, "postings", args, 2);
            }

            static PyObject *t_STMergingBlockReader_readFieldTermStatesMap(t_STMergingBlockReader *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.readFieldTermStatesMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "readFieldTermStatesMap", arg);
              return NULL;
            }

            static PyObject *t_STMergingBlockReader_seekCeil(t_STMergingBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekCeil(a0));
                return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingBlockReader), (PyObject *) self, "seekCeil", args, 2);
            }

            static PyObject *t_STMergingBlockReader_seekExact(t_STMergingBlockReader *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.seekExact(a0));
                    Py_RETURN_BOOL(result);
                  }
                }
                {
                  jlong a0;

                  if (!parseArgs(args, "J", &a0))
                  {
                    OBJ_CALL(self->object.seekExact(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                  ::org::apache::lucene::index::TermState a1((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.seekExact(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(PY_TYPE(STMergingBlockReader), (PyObject *) self, "seekExact", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/util/CharTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/function/IntPredicate.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharTokenizer::class$ = NULL;
          jmethodID *CharTokenizer::mids$ = NULL;
          bool CharTokenizer::live$ = false;
          jint CharTokenizer::DEFAULT_MAX_WORD_LEN = (jint) 0;

          jclass CharTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_init$_541d20dfedf4268e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_fromSeparatorCharPredicate_77d0d46ed616c4c8] = env->getStaticMethodID(cls, "fromSeparatorCharPredicate", "(Ljava/util/function/IntPredicate;)Lorg/apache/lucene/analysis/util/CharTokenizer;");
              mids$[mid_fromSeparatorCharPredicate_88589fc9717d1efa] = env->getStaticMethodID(cls, "fromSeparatorCharPredicate", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/util/function/IntPredicate;)Lorg/apache/lucene/analysis/util/CharTokenizer;");
              mids$[mid_fromTokenCharPredicate_77d0d46ed616c4c8] = env->getStaticMethodID(cls, "fromTokenCharPredicate", "(Ljava/util/function/IntPredicate;)Lorg/apache/lucene/analysis/util/CharTokenizer;");
              mids$[mid_fromTokenCharPredicate_88589fc9717d1efa] = env->getStaticMethodID(cls, "fromTokenCharPredicate", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/util/function/IntPredicate;)Lorg/apache/lucene/analysis/util/CharTokenizer;");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_a1d30e1ee40c89a2] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_WORD_LEN = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LEN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTokenizer::CharTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          CharTokenizer::CharTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_541d20dfedf4268e, a0.this$, a1)) {}

          void CharTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          CharTokenizer CharTokenizer::fromSeparatorCharPredicate(const ::java::util::function::IntPredicate & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharTokenizer(env->callStaticObjectMethod(cls, mids$[mid_fromSeparatorCharPredicate_77d0d46ed616c4c8], a0.this$));
          }

          CharTokenizer CharTokenizer::fromSeparatorCharPredicate(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::util::function::IntPredicate & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharTokenizer(env->callStaticObjectMethod(cls, mids$[mid_fromSeparatorCharPredicate_88589fc9717d1efa], a0.this$, a1.this$));
          }

          CharTokenizer CharTokenizer::fromTokenCharPredicate(const ::java::util::function::IntPredicate & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharTokenizer(env->callStaticObjectMethod(cls, mids$[mid_fromTokenCharPredicate_77d0d46ed616c4c8], a0.this$));
          }

          CharTokenizer CharTokenizer::fromTokenCharPredicate(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::util::function::IntPredicate & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharTokenizer(env->callStaticObjectMethod(cls, mids$[mid_fromTokenCharPredicate_88589fc9717d1efa], a0.this$, a1.this$));
          }

          jboolean CharTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void CharTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_fromSeparatorCharPredicate(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharTokenizer_fromTokenCharPredicate(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args);
          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args);

          static PyMethodDef t_CharTokenizer__methods_[] = {
            DECLARE_METHOD(t_CharTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, fromSeparatorCharPredicate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, fromTokenCharPredicate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CharTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharTokenizer)[] = {
            { Py_tp_methods, t_CharTokenizer__methods_ },
            { Py_tp_init, (void *) t_CharTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(CharTokenizer, t_CharTokenizer, CharTokenizer);

          void t_CharTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTokenizer), &PY_TYPE_DEF(CharTokenizer), module, "CharTokenizer", 0);
          }

          void t_CharTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTokenizer), "class_", make_descriptor(CharTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTokenizer), "wrapfn_", make_descriptor(t_CharTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(CharTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTokenizer), "DEFAULT_MAX_WORD_LEN", make_descriptor(CharTokenizer::DEFAULT_MAX_WORD_LEN));
          }

          static PyObject *t_CharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTokenizer::initializeClass, 1)))
              return NULL;
            return t_CharTokenizer::wrap_Object(CharTokenizer(((t_CharTokenizer *) arg)->object.this$));
          }
          static PyObject *t_CharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTokenizer_init_(t_CharTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CharTokenizer object((jobject) NULL);

                INT_CALL(object = CharTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = CharTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                CharTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CharTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharTokenizer_end(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_CharTokenizer_fromSeparatorCharPredicate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::function::IntPredicate a0((jobject) NULL);
                CharTokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::util::function::IntPredicate::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharTokenizer::fromSeparatorCharPredicate(a0));
                  return t_CharTokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::util::function::IntPredicate a1((jobject) NULL);
                CharTokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::util::function::IntPredicate::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharTokenizer::fromSeparatorCharPredicate(a0, a1));
                  return t_CharTokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "fromSeparatorCharPredicate", args);
            return NULL;
          }

          static PyObject *t_CharTokenizer_fromTokenCharPredicate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::function::IntPredicate a0((jobject) NULL);
                CharTokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::util::function::IntPredicate::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharTokenizer::fromTokenCharPredicate(a0));
                  return t_CharTokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::util::function::IntPredicate a1((jobject) NULL);
                CharTokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::util::function::IntPredicate::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharTokenizer::fromTokenCharPredicate(a0, a1));
                  return t_CharTokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "fromTokenCharPredicate", args);
            return NULL;
          }

          static PyObject *t_CharTokenizer_incrementToken(t_CharTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CharTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CharTokenizer_reset(t_CharTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/NumericComparator$NumericLeafComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/comparators/NumericComparator.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *NumericComparator$NumericLeafComparator::class$ = NULL;
          jmethodID *NumericComparator$NumericLeafComparator::mids$ = NULL;
          bool NumericComparator$NumericLeafComparator::live$ = false;

          jclass NumericComparator$NumericLeafComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/NumericComparator$NumericLeafComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7d2e0454df1c323] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/comparators/NumericComparator;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_competitiveIterator_173d81d7b8f93882] = env->getMethodID(cls, "competitiveIterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setHitsThresholdReached_f2cc1bce94666404] = env->getMethodID(cls, "setHitsThresholdReached", "()V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_getNumericDocValues_efa05bfa9b424876] = env->getMethodID(cls, "getNumericDocValues", "(Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_encodeTop_9ffdf271836656c4] = env->getMethodID(cls, "encodeTop", "([B)V");
              mids$[mid_encodeBottom_9ffdf271836656c4] = env->getMethodID(cls, "encodeBottom", "([B)V");
              mids$[mid_isMissingValueCompetitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isMissingValueCompetitive", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericComparator$NumericLeafComparator::NumericComparator$NumericLeafComparator(const ::org::apache::lucene::search::comparators::NumericComparator & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e7d2e0454df1c323, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::DocIdSetIterator NumericComparator$NumericLeafComparator::competitiveIterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_competitiveIterator_173d81d7b8f93882]));
          }

          void NumericComparator$NumericLeafComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
          }

          void NumericComparator$NumericLeafComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
          }

          void NumericComparator$NumericLeafComparator::setHitsThresholdReached() const
          {
            env->callVoidMethod(this$, mids$[mid_setHitsThresholdReached_f2cc1bce94666404]);
          }

          void NumericComparator$NumericLeafComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_NumericComparator$NumericLeafComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericComparator$NumericLeafComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericComparator$NumericLeafComparator_of_(t_NumericComparator$NumericLeafComparator *self, PyObject *args);
          static int t_NumericComparator$NumericLeafComparator_init_(t_NumericComparator$NumericLeafComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericComparator$NumericLeafComparator_competitiveIterator(t_NumericComparator$NumericLeafComparator *self);
          static PyObject *t_NumericComparator$NumericLeafComparator_copy(t_NumericComparator$NumericLeafComparator *self, PyObject *args);
          static PyObject *t_NumericComparator$NumericLeafComparator_setBottom(t_NumericComparator$NumericLeafComparator *self, PyObject *arg);
          static PyObject *t_NumericComparator$NumericLeafComparator_setHitsThresholdReached(t_NumericComparator$NumericLeafComparator *self);
          static PyObject *t_NumericComparator$NumericLeafComparator_setScorer(t_NumericComparator$NumericLeafComparator *self, PyObject *arg);
          static int t_NumericComparator$NumericLeafComparator_set__bottom(t_NumericComparator$NumericLeafComparator *self, PyObject *arg, void *data);
          static int t_NumericComparator$NumericLeafComparator_set__scorer(t_NumericComparator$NumericLeafComparator *self, PyObject *arg, void *data);
          static PyObject *t_NumericComparator$NumericLeafComparator_get__parameters_(t_NumericComparator$NumericLeafComparator *self, void *data);
          static PyGetSetDef t_NumericComparator$NumericLeafComparator__fields_[] = {
            DECLARE_SET_FIELD(t_NumericComparator$NumericLeafComparator, bottom),
            DECLARE_SET_FIELD(t_NumericComparator$NumericLeafComparator, scorer),
            DECLARE_GET_FIELD(t_NumericComparator$NumericLeafComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NumericComparator$NumericLeafComparator__methods_[] = {
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, competitiveIterator, METH_NOARGS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, setBottom, METH_O),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, setHitsThresholdReached, METH_NOARGS),
            DECLARE_METHOD(t_NumericComparator$NumericLeafComparator, setScorer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NumericComparator$NumericLeafComparator)[] = {
            { Py_tp_methods, t_NumericComparator$NumericLeafComparator__methods_ },
            { Py_tp_init, (void *) t_NumericComparator$NumericLeafComparator_init_ },
            { Py_tp_getset, t_NumericComparator$NumericLeafComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NumericComparator$NumericLeafComparator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NumericComparator$NumericLeafComparator, t_NumericComparator$NumericLeafComparator, NumericComparator$NumericLeafComparator);
          PyObject *t_NumericComparator$NumericLeafComparator::wrap_Object(const NumericComparator$NumericLeafComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NumericComparator$NumericLeafComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NumericComparator$NumericLeafComparator *self = (t_NumericComparator$NumericLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NumericComparator$NumericLeafComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NumericComparator$NumericLeafComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NumericComparator$NumericLeafComparator *self = (t_NumericComparator$NumericLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NumericComparator$NumericLeafComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericComparator$NumericLeafComparator), &PY_TYPE_DEF(NumericComparator$NumericLeafComparator), module, "NumericComparator$NumericLeafComparator", 0);
          }

          void t_NumericComparator$NumericLeafComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator$NumericLeafComparator), "class_", make_descriptor(NumericComparator$NumericLeafComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator$NumericLeafComparator), "wrapfn_", make_descriptor(t_NumericComparator$NumericLeafComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator$NumericLeafComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericComparator$NumericLeafComparator::initializeClass, 1)))
              return NULL;
            return t_NumericComparator$NumericLeafComparator::wrap_Object(NumericComparator$NumericLeafComparator(((t_NumericComparator$NumericLeafComparator *) arg)->object.this$));
          }
          static PyObject *t_NumericComparator$NumericLeafComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericComparator$NumericLeafComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_of_(t_NumericComparator$NumericLeafComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_NumericComparator$NumericLeafComparator_init_(t_NumericComparator$NumericLeafComparator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::comparators::NumericComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            NumericComparator$NumericLeafComparator object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::comparators::NumericComparator::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::org::apache::lucene::search::comparators::t_NumericComparator::parameters_, &a1))
            {
              INT_CALL(object = NumericComparator$NumericLeafComparator(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_competitiveIterator(t_NumericComparator$NumericLeafComparator *self)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.competitiveIterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_copy(t_NumericComparator$NumericLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", args);
            return NULL;
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_setBottom(t_NumericComparator$NumericLeafComparator *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
            return NULL;
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_setHitsThresholdReached(t_NumericComparator$NumericLeafComparator *self)
          {
            OBJ_CALL(self->object.setHitsThresholdReached());
            Py_RETURN_NONE;
          }

          static PyObject *t_NumericComparator$NumericLeafComparator_setScorer(t_NumericComparator$NumericLeafComparator *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
            return NULL;
          }
          static PyObject *t_NumericComparator$NumericLeafComparator_get__parameters_(t_NumericComparator$NumericLeafComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_NumericComparator$NumericLeafComparator_set__bottom(t_NumericComparator$NumericLeafComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_NumericComparator$NumericLeafComparator_set__scorer(t_NumericComparator$NumericLeafComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BM25Similarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BM25Similarity::class$ = NULL;
          jmethodID *BM25Similarity::mids$ = NULL;
          bool BM25Similarity::live$ = false;

          jclass BM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5a9245193073da7b] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_getB_58aec2b64dff50c8] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_58aec2b64dff50c8] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_idfExplain_a65c9ef6c8dde9e4] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_d7ff9aaf392c6db9] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_f850d9cfe8a8e47f] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_avgFieldLength_4a638050489d339d] = env->getMethodID(cls, "avgFieldLength", "(Lorg/apache/lucene/search/CollectionStatistics;)F");
              mids$[mid_scorePayload_3a38a999339f77c9] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BM25Similarity::BM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BM25Similarity::BM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_5a9245193073da7b, a0, a1)) {}

          jlong BM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          jfloat BM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_58aec2b64dff50c8]);
          }

          jboolean BM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e]);
          }

          jfloat BM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_a65c9ef6c8dde9e4], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_d7ff9aaf392c6db9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BM25Similarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }

          void BM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7], a0);
          }

          ::java::lang::String BM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_scorer(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg);
          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data);
          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data);
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data);
          static PyGetSetDef t_BM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_BM25Similarity, b),
            DECLARE_GETSET_FIELD(t_BM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_BM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BM25Similarity__methods_[] = {
            DECLARE_METHOD(t_BM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, scorer, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_BM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BM25Similarity)[] = {
            { Py_tp_methods, t_BM25Similarity__methods_ },
            { Py_tp_init, (void *) t_BM25Similarity_init_ },
            { Py_tp_getset, t_BM25Similarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BM25Similarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(BM25Similarity, t_BM25Similarity, BM25Similarity);

          void t_BM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BM25Similarity), &PY_TYPE_DEF(BM25Similarity), module, "BM25Similarity", 0);
          }

          void t_BM25Similarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BM25Similarity), "class_", make_descriptor(BM25Similarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BM25Similarity), "wrapfn_", make_descriptor(t_BM25Similarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BM25Similarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BM25Similarity::initializeClass, 1)))
              return NULL;
            return t_BM25Similarity::wrap_Object(BM25Similarity(((t_BM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BM25Similarity object((jobject) NULL);

                INT_CALL(object = BM25Similarity());
                self->object = object;
                break;
              }
             case 2:
              {
                jfloat a0;
                jfloat a1;
                BM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = BM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_BM25Similarity_scorer(t_BM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BM25Similarity), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MapOfSets::class$ = NULL;
        jmethodID *MapOfSets::mids$ = NULL;
        bool MapOfSets::live$ = false;

        jclass MapOfSets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MapOfSets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_getMap_1c3426541413a55d] = env->getMethodID(cls, "getMap", "()Ljava/util/Map;");
            mids$[mid_put_9dae63203ae747af] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_putAll_db8dec43882075f5] = env->getMethodID(cls, "putAll", "(Ljava/lang/Object;Ljava/util/Collection;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MapOfSets::MapOfSets(const ::java::util::Map & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

        ::java::util::Map MapOfSets::getMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getMap_1c3426541413a55d]));
        }

        jint MapOfSets::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_put_9dae63203ae747af], a0.this$, a1.this$);
        }

        jint MapOfSets::putAll(const ::java::lang::Object & a0, const ::java::util::Collection & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_putAll_db8dec43882075f5], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args);
        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self);
        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data);
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data);
        static PyGetSetDef t_MapOfSets__fields_[] = {
          DECLARE_GET_FIELD(t_MapOfSets, map),
          DECLARE_GET_FIELD(t_MapOfSets, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MapOfSets__methods_[] = {
          DECLARE_METHOD(t_MapOfSets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, of_, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, getMap, METH_NOARGS),
          DECLARE_METHOD(t_MapOfSets, put, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, putAll, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MapOfSets)[] = {
          { Py_tp_methods, t_MapOfSets__methods_ },
          { Py_tp_init, (void *) t_MapOfSets_init_ },
          { Py_tp_getset, t_MapOfSets__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MapOfSets)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MapOfSets, t_MapOfSets, MapOfSets);
        PyObject *t_MapOfSets::wrap_Object(const MapOfSets& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_MapOfSets::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_MapOfSets::install(PyObject *module)
        {
          installType(&PY_TYPE(MapOfSets), &PY_TYPE_DEF(MapOfSets), module, "MapOfSets", 0);
        }

        void t_MapOfSets::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MapOfSets), "class_", make_descriptor(MapOfSets::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MapOfSets), "wrapfn_", make_descriptor(t_MapOfSets::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MapOfSets), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MapOfSets::initializeClass, 1)))
            return NULL;
          return t_MapOfSets::wrap_Object(MapOfSets(((t_MapOfSets *) arg)->object.this$));
        }
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MapOfSets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          MapOfSets object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = MapOfSets(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;
          jint result;

          if (!parseArgs(args, "OK", self->parameters[0], ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.putAll(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAll", args);
          return NULL;
        }
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Attribute::class$ = NULL;
        jmethodID *Attribute::mids$ = NULL;
        bool Attribute::live$ = false;

        jclass Attribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Attribute");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Attribute__methods_[] = {
          DECLARE_METHOD(t_Attribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Attribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Attribute)[] = {
          { Py_tp_methods, t_Attribute__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Attribute)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Attribute, t_Attribute, Attribute);

        void t_Attribute::install(PyObject *module)
        {
          installType(&PY_TYPE(Attribute), &PY_TYPE_DEF(Attribute), module, "Attribute", 0);
        }

        void t_Attribute::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Attribute), "class_", make_descriptor(Attribute::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Attribute), "wrapfn_", make_descriptor(t_Attribute::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Attribute), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Attribute::initializeClass, 1)))
            return NULL;
          return t_Attribute::wrap_Object(Attribute(((t_Attribute *) arg)->object.this$));
        }
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Attribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *EnglishMinimalStemFilterFactory::mids$ = NULL;
          bool EnglishMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *EnglishMinimalStemFilterFactory::NAME = NULL;

          jclass EnglishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilterFactory::EnglishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_EnglishMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_EnglishMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory, EnglishMinimalStemFilterFactory);

          void t_EnglishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilterFactory), &PY_TYPE_DEF(EnglishMinimalStemFilterFactory), module, "EnglishMinimalStemFilterFactory", 0);
          }

          void t_EnglishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilterFactory), "class_", make_descriptor(EnglishMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_EnglishMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(EnglishMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*EnglishMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilterFactory::wrap_Object(EnglishMinimalStemFilterFactory(((t_EnglishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(EnglishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternParser::class$ = NULL;
            jmethodID *PatternParser::mids$ = NULL;
            bool PatternParser::live$ = false;

            jclass PatternParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_1f59f061a6ad8575] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_characters_d5128be76a214037] = env->getMethodID(cls, "characters", "([CII)V");
                mids$[mid_endElement_f05031826564616f] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_parse_9fd2eb66a64e6f0f] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)V");
                mids$[mid_setConsumer_1f59f061a6ad8575] = env->getMethodID(cls, "setConsumer", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_getPattern_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_normalizeException_aab6f133523584bb] = env->getMethodID(cls, "normalizeException", "(Ljava/util/ArrayList;)Ljava/util/ArrayList;");
                mids$[mid_getExceptionWord_d81fcb5f822c6a41] = env->getMethodID(cls, "getExceptionWord", "(Ljava/util/ArrayList;)Ljava/lang/String;");
                mids$[mid_getInterletterValues_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getInterletterValues", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_readToken_4bbc3008cb9ba18f] = env->getMethodID(cls, "readToken", "(Ljava/lang/StringBuilder;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PatternParser::PatternParser() : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            PatternParser::PatternParser(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_1f59f061a6ad8575, a0.this$)) {}

            void PatternParser::characters(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_characters_d5128be76a214037], a0.this$, a1, a2);
            }

            void PatternParser::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_endElement_f05031826564616f], a0.this$, a1.this$, a2.this$);
            }

            void PatternParser::parse(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_9fd2eb66a64e6f0f], a0.this$);
            }

            void PatternParser::setConsumer(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setConsumer_1f59f061a6ad8575], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *arg);
            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg);
            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_PatternParser__fields_[] = {
              DECLARE_SET_FIELD(t_PatternParser, consumer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PatternParser__methods_[] = {
              DECLARE_METHOD(t_PatternParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, characters, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, endElement, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, parse, METH_O),
              DECLARE_METHOD(t_PatternParser, setConsumer, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PatternParser)[] = {
              { Py_tp_methods, t_PatternParser__methods_ },
              { Py_tp_init, (void *) t_PatternParser_init_ },
              { Py_tp_getset, t_PatternParser__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PatternParser)[] = {
              &PY_TYPE_DEF(::org::xml::sax::helpers::DefaultHandler),
              NULL
            };

            DEFINE_TYPE(PatternParser, t_PatternParser, PatternParser);

            void t_PatternParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternParser), &PY_TYPE_DEF(PatternParser), module, "PatternParser", 0);
            }

            void t_PatternParser::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternParser), "class_", make_descriptor(PatternParser::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternParser), "wrapfn_", make_descriptor(t_PatternParser::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternParser), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternParser::initializeClass, 1)))
                return NULL;
              return t_PatternParser::wrap_Object(PatternParser(((t_PatternParser *) arg)->object.this$));
            }
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PatternParser object((jobject) NULL);

                  INT_CALL(object = PatternParser());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);
                  PatternParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
                  {
                    INT_CALL(object = PatternParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.characters(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PatternParser), (PyObject *) self, "characters", args, 2);
            }

            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "sss", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.endElement(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PatternParser), (PyObject *) self, "endElement", args, 2);
            }

            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.parse(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "parse", arg);
              return NULL;
            }

            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setConsumer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setConsumer", arg);
              return NULL;
            }

            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &value))
                {
                  INT_CALL(self->object.setConsumer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "consumer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedWriter::class$ = NULL;
          jmethodID *BlockPackedWriter::mids$ = NULL;
          bool BlockPackedWriter::live$ = false;

          jclass BlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_18f961b5c3a68dc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedWriter::BlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_18f961b5c3a68dc0, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_BlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockPackedWriter)[] = {
            { Py_tp_methods, t_BlockPackedWriter__methods_ },
            { Py_tp_init, (void *) t_BlockPackedWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockPackedWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::AbstractBlockPackedWriter),
            NULL
          };

          DEFINE_TYPE(BlockPackedWriter, t_BlockPackedWriter, BlockPackedWriter);

          void t_BlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedWriter), &PY_TYPE_DEF(BlockPackedWriter), module, "BlockPackedWriter", 0);
          }

          void t_BlockPackedWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedWriter), "class_", make_descriptor(BlockPackedWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedWriter), "wrapfn_", make_descriptor(t_BlockPackedWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_BlockPackedWriter::wrap_Object(BlockPackedWriter(((t_BlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedWriter_init_(t_BlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            BlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/Completion50PostingsFormat.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *Completion50PostingsFormat::class$ = NULL;
            jmethodID *Completion50PostingsFormat::mids$ = NULL;
            bool Completion50PostingsFormat::live$ = false;

            jclass Completion50PostingsFormat::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/Completion50PostingsFormat");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_de3d093607610286] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;)V");
                mids$[mid_delegatePostingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "delegatePostingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Completion50PostingsFormat::Completion50PostingsFormat() : ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            Completion50PostingsFormat::Completion50PostingsFormat(const ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode & a0) : ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_de3d093607610286, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_Completion50PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Completion50PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Completion50PostingsFormat_init_(t_Completion50PostingsFormat *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_Completion50PostingsFormat__methods_[] = {
              DECLARE_METHOD(t_Completion50PostingsFormat, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Completion50PostingsFormat, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Completion50PostingsFormat)[] = {
              { Py_tp_methods, t_Completion50PostingsFormat__methods_ },
              { Py_tp_init, (void *) t_Completion50PostingsFormat_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Completion50PostingsFormat)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::CompletionPostingsFormat),
              NULL
            };

            DEFINE_TYPE(Completion50PostingsFormat, t_Completion50PostingsFormat, Completion50PostingsFormat);

            void t_Completion50PostingsFormat::install(PyObject *module)
            {
              installType(&PY_TYPE(Completion50PostingsFormat), &PY_TYPE_DEF(Completion50PostingsFormat), module, "Completion50PostingsFormat", 0);
            }

            void t_Completion50PostingsFormat::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion50PostingsFormat), "class_", make_descriptor(Completion50PostingsFormat::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion50PostingsFormat), "wrapfn_", make_descriptor(t_Completion50PostingsFormat::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Completion50PostingsFormat), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Completion50PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Completion50PostingsFormat::initializeClass, 1)))
                return NULL;
              return t_Completion50PostingsFormat::wrap_Object(Completion50PostingsFormat(((t_Completion50PostingsFormat *) arg)->object.this$));
            }
            static PyObject *t_Completion50PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Completion50PostingsFormat::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Completion50PostingsFormat_init_(t_Completion50PostingsFormat *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Completion50PostingsFormat object((jobject) NULL);

                  INT_CALL(object = Completion50PostingsFormat());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode a0((jobject) NULL);
                  PyTypeObject **p0;
                  Completion50PostingsFormat object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::initializeClass, &a0, &p0, ::org::apache::lucene::search::suggest::document::t_CompletionPostingsFormat$FSTLoadMode::parameters_))
                  {
                    INT_CALL(object = Completion50PostingsFormat(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemmer::class$ = NULL;
          jmethodID *GalicianMinimalStemmer::mids$ = NULL;
          bool GalicianMinimalStemmer::live$ = false;

          jclass GalicianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemmer::GalicianMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint GalicianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianMinimalStemmer)[] = {
            { Py_tp_methods, t_GalicianMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_GalicianMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianMinimalStemmer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::pt::RSLPStemmerBase),
            NULL
          };

          DEFINE_TYPE(GalicianMinimalStemmer, t_GalicianMinimalStemmer, GalicianMinimalStemmer);

          void t_GalicianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemmer), &PY_TYPE_DEF(GalicianMinimalStemmer), module, "GalicianMinimalStemmer", 0);
          }

          void t_GalicianMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemmer), "class_", make_descriptor(GalicianMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemmer), "wrapfn_", make_descriptor(t_GalicianMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemmer::wrap_Object(GalicianMinimalStemmer(((t_GalicianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GalicianMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseTokenizerFactory::class$ = NULL;
          jmethodID *JapaneseTokenizerFactory::mids$ = NULL;
          bool JapaneseTokenizerFactory::live$ = false;
          ::java::lang::String *JapaneseTokenizerFactory::NAME = NULL;

          jclass JapaneseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_61ce2f1c25d71553] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/ja/JapaneseTokenizer;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseTokenizerFactory::JapaneseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::ja::JapaneseTokenizer JapaneseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::ja::JapaneseTokenizer(env->callObjectMethod(this$, mids$[mid_create_61ce2f1c25d71553], a0.this$));
          }

          void JapaneseTokenizerFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseTokenizerFactory_init_(t_JapaneseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseTokenizerFactory_create(t_JapaneseTokenizerFactory *self, PyObject *args);
          static PyObject *t_JapaneseTokenizerFactory_inform(t_JapaneseTokenizerFactory *self, PyObject *arg);

          static PyMethodDef t_JapaneseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizerFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseTokenizerFactory)[] = {
            { Py_tp_methods, t_JapaneseTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseTokenizerFactory, t_JapaneseTokenizerFactory, JapaneseTokenizerFactory);

          void t_JapaneseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseTokenizerFactory), &PY_TYPE_DEF(JapaneseTokenizerFactory), module, "JapaneseTokenizerFactory", 0);
          }

          void t_JapaneseTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizerFactory), "class_", make_descriptor(JapaneseTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizerFactory), "wrapfn_", make_descriptor(t_JapaneseTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizerFactory), "NAME", make_descriptor(j2p(*JapaneseTokenizerFactory::NAME)));
          }

          static PyObject *t_JapaneseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseTokenizerFactory::wrap_Object(JapaneseTokenizerFactory(((t_JapaneseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseTokenizerFactory_init_(t_JapaneseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseTokenizerFactory_create(t_JapaneseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::ja::JapaneseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_JapaneseTokenizerFactory_inform(t_JapaneseTokenizerFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractCollection::class$ = NULL;
    jmethodID *AbstractCollection::mids$ = NULL;
    bool AbstractCollection::live$ = false;

    jclass AbstractCollection::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

        mids$ = new jmethodID[max_mid];
        mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_15d9cc2398c22637] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_containsAll_15d9cc2398c22637] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_removeAll_15d9cc2398c22637] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
        mids$[mid_retainAll_15d9cc2398c22637] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
        mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toArray_6becf78ffd87a9bc] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
        mids$[mid_toArray_609b05756010dc5d] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_15d9cc2398c22637], a0.this$);
    }

    void AbstractCollection::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsAll_15d9cc2398c22637], a0.this$);
    }

    jboolean AbstractCollection::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    ::java::util::Iterator AbstractCollection::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
    }

    jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_15d9cc2398c22637], a0.this$);
    }

    jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_retainAll_15d9cc2398c22637], a0.this$);
    }

    jint AbstractCollection::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_6becf78ffd87a9bc]));
    }

    JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_609b05756010dc5d], a0.this$));
    }

    ::java::lang::String AbstractCollection::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
    static PyGetSetDef t_AbstractCollection__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractCollection, empty),
      DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractCollection__methods_[] = {
      DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, add, METH_O),
      DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
      DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
      DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
      DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
      DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };
    static int t_AbstractCollection_size_seq_(t_AbstractCollection *self);

    static PyType_Slot PY_TYPE_SLOTS(AbstractCollection)[] = {
      { Py_tp_methods, t_AbstractCollection__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_AbstractCollection__fields_ },
      { Py_tp_iter, (void *) ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >) },
      { Py_tp_iternext, (void *) 0 },
      { Py_sq_length, (void *) t_AbstractCollection_size_seq_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(AbstractCollection)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(AbstractCollection, t_AbstractCollection, AbstractCollection);
    PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractCollection::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractCollection *self = (t_AbstractCollection *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractCollection::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractCollection), &PY_TYPE_DEF(AbstractCollection), module, "AbstractCollection", 0);
    }

    void t_AbstractCollection::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractCollection), "class_", make_descriptor(AbstractCollection::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractCollection), "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractCollection), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
        return NULL;
      return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
    }
    static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractCollection::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "add", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "addAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.containsAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.retainAll(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< ::java::lang::Object > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArray());
          return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        break;
       case 1:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toArray", args);
      return NULL;
    }

    static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }

    static int t_AbstractCollection_size_seq_(t_AbstractCollection *self)
    {
      jint len;
      INT_CALL(len = self->object.size());
      return (int) len;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$SortedNumericDocValuesStats.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$SortedNumericDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$SortedNumericDocValuesStats::mids$ = NULL;
        bool DocValuesStats$SortedNumericDocValuesStats::live$ = false;

        jclass DocValuesStats$SortedNumericDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$SortedNumericDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_mean_8c74b787998ce4bc] = env->getMethodID(cls, "mean", "()D");
            mids$[mid_stdev_8c74b787998ce4bc] = env->getMethodID(cls, "stdev", "()D");
            mids$[mid_sum_f5813404cc5e3a1e] = env->getMethodID(cls, "sum", "()Ljava/lang/Number;");
            mids$[mid_valuesCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "valuesCount", "()J");
            mids$[mid_variance_8c74b787998ce4bc] = env->getMethodID(cls, "variance", "()D");
            mids$[mid_hasValue_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasValue", "(I)Z");
            mids$[mid_init_07cae694a8cf1c6d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble DocValuesStats$SortedNumericDocValuesStats::mean() const
        {
          return env->callDoubleMethod(this$, mids$[mid_mean_8c74b787998ce4bc]);
        }

        jdouble DocValuesStats$SortedNumericDocValuesStats::stdev() const
        {
          return env->callDoubleMethod(this$, mids$[mid_stdev_8c74b787998ce4bc]);
        }

        ::java::lang::Number DocValuesStats$SortedNumericDocValuesStats::sum() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_sum_f5813404cc5e3a1e]));
        }

        jlong DocValuesStats$SortedNumericDocValuesStats::valuesCount() const
        {
          return env->callLongMethod(this$, mids$[mid_valuesCount_2e5ae9edcb9b072f]);
        }

        jdouble DocValuesStats$SortedNumericDocValuesStats::variance() const
        {
          return env->callDoubleMethod(this$, mids$[mid_variance_8c74b787998ce4bc]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_of_(t_DocValuesStats$SortedNumericDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_mean(t_DocValuesStats$SortedNumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_stdev(t_DocValuesStats$SortedNumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_sum(t_DocValuesStats$SortedNumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_valuesCount(t_DocValuesStats$SortedNumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_variance(t_DocValuesStats$SortedNumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_get__parameters_(t_DocValuesStats$SortedNumericDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$SortedNumericDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$SortedNumericDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$SortedNumericDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, mean, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, stdev, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, sum, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, valuesCount, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedNumericDocValuesStats, variance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$SortedNumericDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$SortedNumericDocValuesStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesStats$SortedNumericDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$SortedNumericDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$SortedNumericDocValuesStats, t_DocValuesStats$SortedNumericDocValuesStats, DocValuesStats$SortedNumericDocValuesStats);
        PyObject *t_DocValuesStats$SortedNumericDocValuesStats::wrap_Object(const DocValuesStats$SortedNumericDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedNumericDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedNumericDocValuesStats *self = (t_DocValuesStats$SortedNumericDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$SortedNumericDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedNumericDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedNumericDocValuesStats *self = (t_DocValuesStats$SortedNumericDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$SortedNumericDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$SortedNumericDocValuesStats), &PY_TYPE_DEF(DocValuesStats$SortedNumericDocValuesStats), module, "DocValuesStats$SortedNumericDocValuesStats", 0);
        }

        void t_DocValuesStats$SortedNumericDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedNumericDocValuesStats), "class_", make_descriptor(DocValuesStats$SortedNumericDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedNumericDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$SortedNumericDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedNumericDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$SortedNumericDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$SortedNumericDocValuesStats::wrap_Object(DocValuesStats$SortedNumericDocValuesStats(((t_DocValuesStats$SortedNumericDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$SortedNumericDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_of_(t_DocValuesStats$SortedNumericDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_mean(t_DocValuesStats$SortedNumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.mean());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_stdev(t_DocValuesStats$SortedNumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.stdev());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_sum(t_DocValuesStats$SortedNumericDocValuesStats *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.sum());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_valuesCount(t_DocValuesStats$SortedNumericDocValuesStats *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.valuesCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_variance(t_DocValuesStats$SortedNumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.variance());
          return PyFloat_FromDouble((double) result);
        }
        static PyObject *t_DocValuesStats$SortedNumericDocValuesStats_get__parameters_(t_DocValuesStats$SortedNumericDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DefFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DefFunction::class$ = NULL;
            jmethodID *DefFunction::mids$ = NULL;
            bool DefFunction::live$ = false;

            jclass DefFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DefFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DefFunction::DefFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFunction(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues DefFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args);

            static PyMethodDef t_DefFunction__methods_[] = {
              DECLARE_METHOD(t_DefFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DefFunction)[] = {
              { Py_tp_methods, t_DefFunction__methods_ },
              { Py_tp_init, (void *) t_DefFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DefFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiFunction),
              NULL
            };

            DEFINE_TYPE(DefFunction, t_DefFunction, DefFunction);

            void t_DefFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DefFunction), &PY_TYPE_DEF(DefFunction), module, "DefFunction", 0);
            }

            void t_DefFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DefFunction), "class_", make_descriptor(DefFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DefFunction), "wrapfn_", make_descriptor(t_DefFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DefFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DefFunction::initializeClass, 1)))
                return NULL;
              return t_DefFunction::wrap_Object(DefFunction(((t_DefFunction *) arg)->object.this$));
            }
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DefFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              DefFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = DefFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DefFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/OfflinePointReader.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *OfflinePointReader::class$ = NULL;
          jmethodID *OfflinePointReader::mids$ = NULL;
          bool OfflinePointReader::live$ = false;

          jclass OfflinePointReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/OfflinePointReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c0f49336633b78f7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/BKDConfig;Lorg/apache/lucene/store/Directory;Ljava/lang/String;JJ[B)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_next_8454bd5aa23fd11e] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pointValue_0a50bb6f782eac99] = env->getMethodID(cls, "pointValue", "()Lorg/apache/lucene/util/bkd/PointValue;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OfflinePointReader::OfflinePointReader(const ::org::apache::lucene::util::bkd::BKDConfig & a0, const ::org::apache::lucene::store::Directory & a1, const ::java::lang::String & a2, jlong a3, jlong a4, const JArray< jbyte > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c0f49336633b78f7, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}

          void OfflinePointReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jboolean OfflinePointReader::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::bkd::PointValue OfflinePointReader::pointValue() const
          {
            return ::org::apache::lucene::util::bkd::PointValue(env->callObjectMethod(this$, mids$[mid_pointValue_0a50bb6f782eac99]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_OfflinePointReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OfflinePointReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OfflinePointReader_init_(t_OfflinePointReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OfflinePointReader_close(t_OfflinePointReader *self);
          static PyObject *t_OfflinePointReader_next(t_OfflinePointReader *self);
          static PyObject *t_OfflinePointReader_pointValue(t_OfflinePointReader *self);

          static PyMethodDef t_OfflinePointReader__methods_[] = {
            DECLARE_METHOD(t_OfflinePointReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OfflinePointReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OfflinePointReader, close, METH_NOARGS),
            DECLARE_METHOD(t_OfflinePointReader, next, METH_NOARGS),
            DECLARE_METHOD(t_OfflinePointReader, pointValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OfflinePointReader)[] = {
            { Py_tp_methods, t_OfflinePointReader__methods_ },
            { Py_tp_init, (void *) t_OfflinePointReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OfflinePointReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OfflinePointReader, t_OfflinePointReader, OfflinePointReader);

          void t_OfflinePointReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OfflinePointReader), &PY_TYPE_DEF(OfflinePointReader), module, "OfflinePointReader", 0);
          }

          void t_OfflinePointReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointReader), "class_", make_descriptor(OfflinePointReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointReader), "wrapfn_", make_descriptor(t_OfflinePointReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OfflinePointReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OfflinePointReader::initializeClass, 1)))
              return NULL;
            return t_OfflinePointReader::wrap_Object(OfflinePointReader(((t_OfflinePointReader *) arg)->object.this$));
          }
          static PyObject *t_OfflinePointReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OfflinePointReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OfflinePointReader_init_(t_OfflinePointReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jlong a3;
            jlong a4;
            JArray< jbyte > a5((jobject) NULL);
            OfflinePointReader object((jobject) NULL);

            if (!parseArgs(args, "kksJJ[B", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = OfflinePointReader(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OfflinePointReader_close(t_OfflinePointReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_OfflinePointReader_next(t_OfflinePointReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_OfflinePointReader_pointValue(t_OfflinePointReader *self)
          {
            ::org::apache::lucene::util::bkd::PointValue result((jobject) NULL);
            OBJ_CALL(result = self->object.pointValue());
            return ::org::apache::lucene::util::bkd::t_PointValue::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *TrackingDirectoryWrapper::class$ = NULL;
        jmethodID *TrackingDirectoryWrapper::mids$ = NULL;
        bool TrackingDirectoryWrapper::live$ = false;

        jclass TrackingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/TrackingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_clearCreatedFiles_f2cc1bce94666404] = env->getMethodID(cls, "clearCreatedFiles", "()V");
            mids$[mid_copyFrom_a0726436aec3a466] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_getCreatedFiles_7dcf4034c6d1a92a] = env->getMethodID(cls, "getCreatedFiles", "()Ljava/util/Set;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingDirectoryWrapper::TrackingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        void TrackingDirectoryWrapper::clearCreatedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_clearCreatedFiles_f2cc1bce94666404]);
        }

        void TrackingDirectoryWrapper::copyFrom(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_a0726436aec3a466], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void TrackingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        ::java::util::Set TrackingDirectoryWrapper::getCreatedFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getCreatedFiles_7dcf4034c6d1a92a]));
        }

        void TrackingDirectoryWrapper::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingDirectoryWrapper_clearCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_copyFrom(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createTempOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_rename(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data);
        static PyGetSetDef t_TrackingDirectoryWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingDirectoryWrapper, createdFiles),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_TrackingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, clearCreatedFiles, METH_NOARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, getCreatedFiles, METH_NOARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, rename, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TrackingDirectoryWrapper)[] = {
          { Py_tp_methods, t_TrackingDirectoryWrapper__methods_ },
          { Py_tp_init, (void *) t_TrackingDirectoryWrapper_init_ },
          { Py_tp_getset, t_TrackingDirectoryWrapper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TrackingDirectoryWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FilterDirectory),
          NULL
        };

        DEFINE_TYPE(TrackingDirectoryWrapper, t_TrackingDirectoryWrapper, TrackingDirectoryWrapper);

        void t_TrackingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingDirectoryWrapper), &PY_TYPE_DEF(TrackingDirectoryWrapper), module, "TrackingDirectoryWrapper", 0);
        }

        void t_TrackingDirectoryWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TrackingDirectoryWrapper), "class_", make_descriptor(TrackingDirectoryWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TrackingDirectoryWrapper), "wrapfn_", make_descriptor(t_TrackingDirectoryWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TrackingDirectoryWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_TrackingDirectoryWrapper::wrap_Object(TrackingDirectoryWrapper(((t_TrackingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          TrackingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = TrackingDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingDirectoryWrapper_clearCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          OBJ_CALL(self->object.clearCreatedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_TrackingDirectoryWrapper_copyFrom(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copyFrom(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createTempOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_TrackingDirectoryWrapper_rename(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesFormat::class$ = NULL;
        jmethodID *DocValuesFormat::mids$ = NULL;
        bool DocValuesFormat::live$ = false;

        jclass DocValuesFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableDocValuesFormats_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableDocValuesFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_4d0d89459a33e411] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_fieldsProducer_4fca71c324f605dc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_forName_6b92af620136a934] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadDocValuesFormats_98a876e82795b112] = env->getStaticMethodID(cls, "reloadDocValuesFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set DocValuesFormat::availableDocValuesFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableDocValuesFormats_7dcf4034c6d1a92a]));
        }

        ::org::apache::lucene::codecs::DocValuesConsumer DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_4d0d89459a33e411], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_4fca71c324f605dc], a0.this$));
        }

        DocValuesFormat DocValuesFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_6b92af620136a934], a0.this$));
        }

        ::java::lang::String DocValuesFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        void DocValuesFormat::reloadDocValuesFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadDocValuesFormats_98a876e82795b112], a0.this$);
        }

        ::java::lang::String DocValuesFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type);
        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self);
        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args);
        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data);
        static PyGetSetDef t_DocValuesFormat__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFormat__methods_[] = {
          DECLARE_METHOD(t_DocValuesFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, availableDocValuesFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFormat, reloadDocValuesFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesFormat)[] = {
          { Py_tp_methods, t_DocValuesFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesFormat__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValuesFormat, t_DocValuesFormat, DocValuesFormat);

        void t_DocValuesFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFormat), &PY_TYPE_DEF(DocValuesFormat), module, "DocValuesFormat", 0);
        }

        void t_DocValuesFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFormat), "class_", make_descriptor(DocValuesFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFormat), "wrapfn_", make_descriptor(t_DocValuesFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFormat::initializeClass, 1)))
            return NULL;
          return t_DocValuesFormat::wrap_Object(DocValuesFormat(((t_DocValuesFormat *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::availableDocValuesFormats());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::forName(a0));
            return t_DocValuesFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::DocValuesFormat::reloadDocValuesFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadDocValuesFormats", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DocValuesFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PKIndexSplitter.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PKIndexSplitter::class$ = NULL;
        jmethodID *PKIndexSplitter::mids$ = NULL;
        bool PKIndexSplitter::live$ = false;

        jclass PKIndexSplitter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PKIndexSplitter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7933d0aff3596c51] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_aa2aaa576b8ac589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_0a9e625411962393] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/IndexWriterConfig;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_init$_5debbf787d957c54] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexWriterConfig;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_split_f2cc1bce94666404] = env->getMethodID(cls, "split", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PKIndexSplitter::PKIndexSplitter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, const ::org::apache::lucene::index::Term & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7933d0aff3596c51, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        PKIndexSplitter::PKIndexSplitter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, const ::org::apache::lucene::search::Query & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_aa2aaa576b8ac589, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        PKIndexSplitter::PKIndexSplitter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, const ::org::apache::lucene::index::Term & a3, const ::org::apache::lucene::index::IndexWriterConfig & a4, const ::org::apache::lucene::index::IndexWriterConfig & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0a9e625411962393, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$)) {}

        PKIndexSplitter::PKIndexSplitter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::index::IndexWriterConfig & a4, const ::org::apache::lucene::index::IndexWriterConfig & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5debbf787d957c54, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$)) {}

        void PKIndexSplitter::split() const
        {
          env->callVoidMethod(this$, mids$[mid_split_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PKIndexSplitter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PKIndexSplitter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PKIndexSplitter_init_(t_PKIndexSplitter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PKIndexSplitter_split(t_PKIndexSplitter *self);

        static PyMethodDef t_PKIndexSplitter__methods_[] = {
          DECLARE_METHOD(t_PKIndexSplitter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PKIndexSplitter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PKIndexSplitter, split, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PKIndexSplitter)[] = {
          { Py_tp_methods, t_PKIndexSplitter__methods_ },
          { Py_tp_init, (void *) t_PKIndexSplitter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PKIndexSplitter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PKIndexSplitter, t_PKIndexSplitter, PKIndexSplitter);

        void t_PKIndexSplitter::install(PyObject *module)
        {
          installType(&PY_TYPE(PKIndexSplitter), &PY_TYPE_DEF(PKIndexSplitter), module, "PKIndexSplitter", 0);
        }

        void t_PKIndexSplitter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PKIndexSplitter), "class_", make_descriptor(PKIndexSplitter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PKIndexSplitter), "wrapfn_", make_descriptor(t_PKIndexSplitter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PKIndexSplitter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PKIndexSplitter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PKIndexSplitter::initializeClass, 1)))
            return NULL;
          return t_PKIndexSplitter::wrap_Object(PKIndexSplitter(((t_PKIndexSplitter *) arg)->object.this$));
        }
        static PyObject *t_PKIndexSplitter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PKIndexSplitter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PKIndexSplitter_init_(t_PKIndexSplitter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::store::Directory a2((jobject) NULL);
              ::org::apache::lucene::index::Term a3((jobject) NULL);
              PKIndexSplitter object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = PKIndexSplitter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::store::Directory a2((jobject) NULL);
              ::org::apache::lucene::search::Query a3((jobject) NULL);
              PKIndexSplitter object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = PKIndexSplitter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::store::Directory a2((jobject) NULL);
              ::org::apache::lucene::index::Term a3((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a4((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a5((jobject) NULL);
              PKIndexSplitter object((jobject) NULL);

              if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = PKIndexSplitter(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::store::Directory a2((jobject) NULL);
              ::org::apache::lucene::search::Query a3((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a4((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a5((jobject) NULL);
              PKIndexSplitter object((jobject) NULL);

              if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = PKIndexSplitter(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PKIndexSplitter_split(t_PKIndexSplitter *self)
        {
          OBJ_CALL(self->object.split());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LSBRadixSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LSBRadixSorter::class$ = NULL;
        jmethodID *LSBRadixSorter::mids$ = NULL;
        bool LSBRadixSorter::live$ = false;

        jclass LSBRadixSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LSBRadixSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_52d22eea34ac033a] = env->getMethodID(cls, "sort", "(I[II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LSBRadixSorter::LSBRadixSorter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void LSBRadixSorter::sort(jint a0, const JArray< jint > & a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_52d22eea34ac033a], a0, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LSBRadixSorter_init_(t_LSBRadixSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LSBRadixSorter_sort(t_LSBRadixSorter *self, PyObject *args);

        static PyMethodDef t_LSBRadixSorter__methods_[] = {
          DECLARE_METHOD(t_LSBRadixSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LSBRadixSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LSBRadixSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LSBRadixSorter)[] = {
          { Py_tp_methods, t_LSBRadixSorter__methods_ },
          { Py_tp_init, (void *) t_LSBRadixSorter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LSBRadixSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LSBRadixSorter, t_LSBRadixSorter, LSBRadixSorter);

        void t_LSBRadixSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(LSBRadixSorter), &PY_TYPE_DEF(LSBRadixSorter), module, "LSBRadixSorter", 0);
        }

        void t_LSBRadixSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LSBRadixSorter), "class_", make_descriptor(LSBRadixSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LSBRadixSorter), "wrapfn_", make_descriptor(t_LSBRadixSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LSBRadixSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LSBRadixSorter::initializeClass, 1)))
            return NULL;
          return t_LSBRadixSorter::wrap_Object(LSBRadixSorter(((t_LSBRadixSorter *) arg)->object.this$));
        }
        static PyObject *t_LSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LSBRadixSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LSBRadixSorter_init_(t_LSBRadixSorter *self, PyObject *args, PyObject *kwds)
        {
          LSBRadixSorter object((jobject) NULL);

          INT_CALL(object = LSBRadixSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_LSBRadixSorter_sort(t_LSBRadixSorter *self, PyObject *args)
        {
          jint a0;
          JArray< jint > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "I[II", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.sort(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntaxImpl::class$ = NULL;
              jmethodID *EscapeQuerySyntaxImpl::mids$ = NULL;
              bool EscapeQuerySyntaxImpl::live$ = false;

              jclass EscapeQuerySyntaxImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_discardEscapeChar_270c5f760fd04bfd] = env->getStaticMethodID(cls, "discardEscapeChar", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence;");
                  mids$[mid_escape_a334820900042cef] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntaxImpl::EscapeQuerySyntaxImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence EscapeQuerySyntaxImpl::discardEscapeChar(const ::java::lang::CharSequence & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence(env->callStaticObjectMethod(cls, mids$[mid_discardEscapeChar_270c5f760fd04bfd], a0.this$));
              }

              ::java::lang::CharSequence EscapeQuerySyntaxImpl::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_a334820900042cef], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntaxImpl__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, discardEscapeChar, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(EscapeQuerySyntaxImpl)[] = {
                { Py_tp_methods, t_EscapeQuerySyntaxImpl__methods_ },
                { Py_tp_init, (void *) t_EscapeQuerySyntaxImpl_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(EscapeQuerySyntaxImpl)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl, EscapeQuerySyntaxImpl);

              void t_EscapeQuerySyntaxImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntaxImpl), &PY_TYPE_DEF(EscapeQuerySyntaxImpl), module, "EscapeQuerySyntaxImpl", 0);
              }

              void t_EscapeQuerySyntaxImpl::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntaxImpl), "class_", make_descriptor(EscapeQuerySyntaxImpl::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntaxImpl), "wrapfn_", make_descriptor(t_EscapeQuerySyntaxImpl::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntaxImpl), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntaxImpl::wrap_Object(EscapeQuerySyntaxImpl(((t_EscapeQuerySyntaxImpl *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds)
              {
                EscapeQuerySyntaxImpl object((jobject) NULL);

                INT_CALL(object = EscapeQuerySyntaxImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::EscapeQuerySyntaxImpl::discardEscapeChar(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::util::t_UnescapedCharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "discardEscapeChar", arg);
                return NULL;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", ::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AutomatonTermsEnum.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AutomatonTermsEnum::class$ = NULL;
        jmethodID *AutomatonTermsEnum::mids$ = NULL;
        bool AutomatonTermsEnum::live$ = false;

        jclass AutomatonTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AutomatonTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b52dfcd537ef523d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/automaton/CompiledAutomaton;)V");
            mids$[mid_nextSeekTerm_858d77d551759ace] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_accept_dc5d5822c627e12a] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonTermsEnum::AutomatonTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::automaton::CompiledAutomaton & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b52dfcd537ef523d, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AutomatonTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonTermsEnum_init_(t_AutomatonTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AutomatonTermsEnum__methods_[] = {
          DECLARE_METHOD(t_AutomatonTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AutomatonTermsEnum)[] = {
          { Py_tp_methods, t_AutomatonTermsEnum__methods_ },
          { Py_tp_init, (void *) t_AutomatonTermsEnum_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AutomatonTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilteredTermsEnum),
          NULL
        };

        DEFINE_TYPE(AutomatonTermsEnum, t_AutomatonTermsEnum, AutomatonTermsEnum);

        void t_AutomatonTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonTermsEnum), &PY_TYPE_DEF(AutomatonTermsEnum), module, "AutomatonTermsEnum", 0);
        }

        void t_AutomatonTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonTermsEnum), "class_", make_descriptor(AutomatonTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonTermsEnum), "wrapfn_", make_descriptor(t_AutomatonTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonTermsEnum::initializeClass, 1)))
            return NULL;
          return t_AutomatonTermsEnum::wrap_Object(AutomatonTermsEnum(((t_AutomatonTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_AutomatonTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonTermsEnum_init_(t_AutomatonTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::CompiledAutomaton a1((jobject) NULL);
          AutomatonTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0, &a1))
          {
            INT_CALL(object = AutomatonTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/nio/file/Files.h"
#include "java/util/Map.h"
#include "java/nio/file/DirectoryStream$Filter.h"
#include "java/nio/file/LinkOption.h"
#include "java/nio/file/DirectoryStream.h"
#include "java/lang/String.h"
#include "java/nio/file/FileStore.h"
#include "java/lang/Class.h"
#include "java/nio/file/OpenOption.h"
#include "java/io/BufferedWriter.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/nio/file/Path.h"
#include "java/nio/file/FileVisitor.h"
#include "java/nio/file/FileVisitOption.h"
#include "java/lang/Iterable.h"
#include "java/io/OutputStream.h"
#include "java/util/Set.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/nio/file/CopyOption.h"
#include "java/io/BufferedReader.h"
#include "JArray.h"

namespace java {
  namespace nio {
    namespace file {

      ::java::lang::Class *Files::class$ = NULL;
      jmethodID *Files::mids$ = NULL;
      bool Files::live$ = false;

      jclass Files::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/nio/file/Files");

          mids$ = new jmethodID[max_mid];
          mids$[mid_copy_1ce5fcbaf497c1f4] = env->getStaticMethodID(cls, "copy", "(Ljava/nio/file/Path;Ljava/io/OutputStream;)J");
          mids$[mid_copy_acc2dda8763629b6] = env->getStaticMethodID(cls, "copy", "(Ljava/io/InputStream;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)J");
          mids$[mid_copy_73b793adb2a0959b] = env->getStaticMethodID(cls, "copy", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;");
          mids$[mid_createLink_a007776f4ba96b7d] = env->getStaticMethodID(cls, "createLink", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;");
          mids$[mid_delete_636077fee54d306c] = env->getStaticMethodID(cls, "delete", "(Ljava/nio/file/Path;)V");
          mids$[mid_deleteIfExists_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "deleteIfExists", "(Ljava/nio/file/Path;)Z");
          mids$[mid_exists_b30fba9b49d74698] = env->getStaticMethodID(cls, "exists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z");
          mids$[mid_getAttribute_acf5b9e5774c303c] = env->getStaticMethodID(cls, "getAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;");
          mids$[mid_getFileStore_4291c01fb8c50fb5] = env->getStaticMethodID(cls, "getFileStore", "(Ljava/nio/file/Path;)Ljava/nio/file/FileStore;");
          mids$[mid_isDirectory_b30fba9b49d74698] = env->getStaticMethodID(cls, "isDirectory", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z");
          mids$[mid_isExecutable_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "isExecutable", "(Ljava/nio/file/Path;)Z");
          mids$[mid_isHidden_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "isHidden", "(Ljava/nio/file/Path;)Z");
          mids$[mid_isReadable_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "isReadable", "(Ljava/nio/file/Path;)Z");
          mids$[mid_isRegularFile_b30fba9b49d74698] = env->getStaticMethodID(cls, "isRegularFile", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z");
          mids$[mid_isSameFile_71d92326f774123b] = env->getStaticMethodID(cls, "isSameFile", "(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z");
          mids$[mid_isSymbolicLink_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "isSymbolicLink", "(Ljava/nio/file/Path;)Z");
          mids$[mid_isWritable_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "isWritable", "(Ljava/nio/file/Path;)Z");
          mids$[mid_move_73b793adb2a0959b] = env->getStaticMethodID(cls, "move", "(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;");
          mids$[mid_newBufferedReader_598d43f775b2ea0b] = env->getStaticMethodID(cls, "newBufferedReader", "(Ljava/nio/file/Path;)Ljava/io/BufferedReader;");
          mids$[mid_newBufferedWriter_be11e100b0707ab0] = env->getStaticMethodID(cls, "newBufferedWriter", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;");
          mids$[mid_newDirectoryStream_e463df58c06cb457] = env->getStaticMethodID(cls, "newDirectoryStream", "(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;");
          mids$[mid_newDirectoryStream_3edf1df331543f1e] = env->getStaticMethodID(cls, "newDirectoryStream", "(Ljava/nio/file/Path;Ljava/lang/String;)Ljava/nio/file/DirectoryStream;");
          mids$[mid_newDirectoryStream_c3863fde2759045a] = env->getStaticMethodID(cls, "newDirectoryStream", "(Ljava/nio/file/Path;Ljava/nio/file/DirectoryStream$Filter;)Ljava/nio/file/DirectoryStream;");
          mids$[mid_newInputStream_eae1bbbcf5e0bd31] = env->getStaticMethodID(cls, "newInputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;");
          mids$[mid_newOutputStream_b223ae03e1fc4f19] = env->getStaticMethodID(cls, "newOutputStream", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;");
          mids$[mid_notExists_b30fba9b49d74698] = env->getStaticMethodID(cls, "notExists", "(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z");
          mids$[mid_probeContentType_8ba69a4fe6ea5d1e] = env->getStaticMethodID(cls, "probeContentType", "(Ljava/nio/file/Path;)Ljava/lang/String;");
          mids$[mid_readAllBytes_315a3a3a8cacfd7f] = env->getStaticMethodID(cls, "readAllBytes", "(Ljava/nio/file/Path;)[B");
          mids$[mid_readAllLines_1bf3c5020c10b7f6] = env->getStaticMethodID(cls, "readAllLines", "(Ljava/nio/file/Path;)Ljava/util/List;");
          mids$[mid_readAttributes_f668fccecbbae022] = env->getStaticMethodID(cls, "readAttributes", "(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/util/Map;");
          mids$[mid_readSymbolicLink_0068ab41d9b1e17a] = env->getStaticMethodID(cls, "readSymbolicLink", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
          mids$[mid_setAttribute_98cb7374bfce16b2] = env->getStaticMethodID(cls, "setAttribute", "(Ljava/nio/file/Path;Ljava/lang/String;Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;");
          mids$[mid_size_dfac67e39c9df3b8] = env->getStaticMethodID(cls, "size", "(Ljava/nio/file/Path;)J");
          mids$[mid_walkFileTree_da3584ca971132a7] = env->getStaticMethodID(cls, "walkFileTree", "(Ljava/nio/file/Path;Ljava/nio/file/FileVisitor;)Ljava/nio/file/Path;");
          mids$[mid_walkFileTree_52fe478a9c8f8c64] = env->getStaticMethodID(cls, "walkFileTree", "(Ljava/nio/file/Path;Ljava/util/Set;ILjava/nio/file/FileVisitor;)Ljava/nio/file/Path;");
          mids$[mid_write_4659732dc6d2e040] = env->getStaticMethodID(cls, "write", "(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;");
          mids$[mid_write_14a29a9df82f2216] = env->getStaticMethodID(cls, "write", "(Ljava/nio/file/Path;Ljava/lang/Iterable;[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jlong Files::copy(const ::java::nio::file::Path & a0, const ::java::io::OutputStream & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticLongMethod(cls, mids$[mid_copy_1ce5fcbaf497c1f4], a0.this$, a1.this$);
      }

      jlong Files::copy(const ::java::io::InputStream & a0, const ::java::nio::file::Path & a1, const JArray< ::java::nio::file::CopyOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticLongMethod(cls, mids$[mid_copy_acc2dda8763629b6], a0.this$, a1.this$, a2.this$);
      }

      ::java::nio::file::Path Files::copy(const ::java::nio::file::Path & a0, const ::java::nio::file::Path & a1, const JArray< ::java::nio::file::CopyOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_copy_73b793adb2a0959b], a0.this$, a1.this$, a2.this$));
      }

      ::java::nio::file::Path Files::createLink(const ::java::nio::file::Path & a0, const ::java::nio::file::Path & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_createLink_a007776f4ba96b7d], a0.this$, a1.this$));
      }

      void Files::delete$(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_delete_636077fee54d306c], a0.this$);
      }

      jboolean Files::deleteIfExists(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_deleteIfExists_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Files::exists(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::LinkOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_exists_b30fba9b49d74698], a0.this$, a1.this$);
      }

      ::java::lang::Object Files::getAttribute(const ::java::nio::file::Path & a0, const ::java::lang::String & a1, const JArray< ::java::nio::file::LinkOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_getAttribute_acf5b9e5774c303c], a0.this$, a1.this$, a2.this$));
      }

      ::java::nio::file::FileStore Files::getFileStore(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::FileStore(env->callStaticObjectMethod(cls, mids$[mid_getFileStore_4291c01fb8c50fb5], a0.this$));
      }

      jboolean Files::isDirectory(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::LinkOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isDirectory_b30fba9b49d74698], a0.this$, a1.this$);
      }

      jboolean Files::isExecutable(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isExecutable_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Files::isHidden(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isHidden_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Files::isReadable(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isReadable_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Files::isRegularFile(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::LinkOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isRegularFile_b30fba9b49d74698], a0.this$, a1.this$);
      }

      jboolean Files::isSameFile(const ::java::nio::file::Path & a0, const ::java::nio::file::Path & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isSameFile_71d92326f774123b], a0.this$, a1.this$);
      }

      jboolean Files::isSymbolicLink(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isSymbolicLink_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Files::isWritable(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_isWritable_64eb4236a3fd11dc], a0.this$);
      }

      ::java::nio::file::Path Files::move(const ::java::nio::file::Path & a0, const ::java::nio::file::Path & a1, const JArray< ::java::nio::file::CopyOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_move_73b793adb2a0959b], a0.this$, a1.this$, a2.this$));
      }

      ::java::io::BufferedReader Files::newBufferedReader(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::io::BufferedReader(env->callStaticObjectMethod(cls, mids$[mid_newBufferedReader_598d43f775b2ea0b], a0.this$));
      }

      ::java::io::BufferedWriter Files::newBufferedWriter(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::OpenOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::io::BufferedWriter(env->callStaticObjectMethod(cls, mids$[mid_newBufferedWriter_be11e100b0707ab0], a0.this$, a1.this$));
      }

      ::java::nio::file::DirectoryStream Files::newDirectoryStream(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::DirectoryStream(env->callStaticObjectMethod(cls, mids$[mid_newDirectoryStream_e463df58c06cb457], a0.this$));
      }

      ::java::nio::file::DirectoryStream Files::newDirectoryStream(const ::java::nio::file::Path & a0, const ::java::lang::String & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::DirectoryStream(env->callStaticObjectMethod(cls, mids$[mid_newDirectoryStream_3edf1df331543f1e], a0.this$, a1.this$));
      }

      ::java::nio::file::DirectoryStream Files::newDirectoryStream(const ::java::nio::file::Path & a0, const ::java::nio::file::DirectoryStream$Filter & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::DirectoryStream(env->callStaticObjectMethod(cls, mids$[mid_newDirectoryStream_c3863fde2759045a], a0.this$, a1.this$));
      }

      ::java::io::InputStream Files::newInputStream(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::OpenOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_newInputStream_eae1bbbcf5e0bd31], a0.this$, a1.this$));
      }

      ::java::io::OutputStream Files::newOutputStream(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::OpenOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::io::OutputStream(env->callStaticObjectMethod(cls, mids$[mid_newOutputStream_b223ae03e1fc4f19], a0.this$, a1.this$));
      }

      jboolean Files::notExists(const ::java::nio::file::Path & a0, const JArray< ::java::nio::file::LinkOption > & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticBooleanMethod(cls, mids$[mid_notExists_b30fba9b49d74698], a0.this$, a1.this$);
      }

      ::java::lang::String Files::probeContentType(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_probeContentType_8ba69a4fe6ea5d1e], a0.this$));
      }

      JArray< jbyte > Files::readAllBytes(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_readAllBytes_315a3a3a8cacfd7f], a0.this$));
      }

      ::java::util::List Files::readAllLines(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_readAllLines_1bf3c5020c10b7f6], a0.this$));
      }

      ::java::util::Map Files::readAttributes(const ::java::nio::file::Path & a0, const ::java::lang::String & a1, const JArray< ::java::nio::file::LinkOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_readAttributes_f668fccecbbae022], a0.this$, a1.this$, a2.this$));
      }

      ::java::nio::file::Path Files::readSymbolicLink(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_readSymbolicLink_0068ab41d9b1e17a], a0.this$));
      }

      ::java::nio::file::Path Files::setAttribute(const ::java::nio::file::Path & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2, const JArray< ::java::nio::file::LinkOption > & a3)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_setAttribute_98cb7374bfce16b2], a0.this$, a1.this$, a2.this$, a3.this$));
      }

      jlong Files::size(const ::java::nio::file::Path & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return env->callStaticLongMethod(cls, mids$[mid_size_dfac67e39c9df3b8], a0.this$);
      }

      ::java::nio::file::Path Files::walkFileTree(const ::java::nio::file::Path & a0, const ::java::nio::file::FileVisitor & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_walkFileTree_da3584ca971132a7], a0.this$, a1.this$));
      }

      ::java::nio::file::Path Files::walkFileTree(const ::java::nio::file::Path & a0, const ::java::util::Set & a1, jint a2, const ::java::nio::file::FileVisitor & a3)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_walkFileTree_52fe478a9c8f8c64], a0.this$, a1.this$, a2, a3.this$));
      }

      ::java::nio::file::Path Files::write(const ::java::nio::file::Path & a0, const JArray< jbyte > & a1, const JArray< ::java::nio::file::OpenOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_write_4659732dc6d2e040], a0.this$, a1.this$, a2.this$));
      }

      ::java::nio::file::Path Files::write(const ::java::nio::file::Path & a0, const ::java::lang::Iterable & a1, const JArray< ::java::nio::file::OpenOption > & a2)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::nio::file::Path(env->callStaticObjectMethod(cls, mids$[mid_write_14a29a9df82f2216], a0.this$, a1.this$, a2.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace nio {
    namespace file {
      static PyObject *t_Files_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_copy(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_createLink(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_delete(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_deleteIfExists(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_exists(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_getAttribute(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_getFileStore(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_isDirectory(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_isExecutable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_isHidden(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_isReadable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_isRegularFile(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_isSameFile(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_isSymbolicLink(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_isWritable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_move(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_newBufferedReader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_newBufferedWriter(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_newDirectoryStream(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_newInputStream(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_newOutputStream(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_notExists(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_probeContentType(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_readAllBytes(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_readAllLines(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_readAttributes(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_readSymbolicLink(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_setAttribute(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_size(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Files_walkFileTree(PyTypeObject *type, PyObject *args);
      static PyObject *t_Files_write(PyTypeObject *type, PyObject *args);

      static PyMethodDef t_Files__methods_[] = {
        DECLARE_METHOD(t_Files, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, copy, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, createLink, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, delete, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, deleteIfExists, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, exists, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, getAttribute, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, getFileStore, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, isDirectory, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, isExecutable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, isHidden, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, isReadable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, isRegularFile, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, isSameFile, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, isSymbolicLink, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, isWritable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, move, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, newBufferedReader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, newBufferedWriter, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, newDirectoryStream, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, newInputStream, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, newOutputStream, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, notExists, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, probeContentType, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, readAllBytes, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, readAllLines, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, readAttributes, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, readSymbolicLink, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, setAttribute, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, size, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Files, walkFileTree, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Files, write, METH_VARARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Files)[] = {
        { Py_tp_methods, t_Files__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Files)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Files, t_Files, Files);

      void t_Files::install(PyObject *module)
      {
        installType(&PY_TYPE(Files), &PY_TYPE_DEF(Files), module, "Files", 0);
      }

      void t_Files::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Files), "class_", make_descriptor(Files::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Files), "wrapfn_", make_descriptor(t_Files::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Files), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Files_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Files::initializeClass, 1)))
          return NULL;
        return t_Files::wrap_Object(Files(((t_Files *) arg)->object.this$));
      }
      static PyObject *t_Files_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Files::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Files_copy(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::io::OutputStream a1((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::nio::file::Files::copy(a0, a1));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
          }
          break;
         case 3:
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::java::nio::file::Path a1((jobject) NULL);
            JArray< ::java::nio::file::CopyOption > a2((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "kk[k", ::java::io::InputStream::initializeClass, ::java::nio::file::Path::initializeClass, ::java::nio::file::CopyOption::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::java::nio::file::Files::copy(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
          }
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::nio::file::Path a1((jobject) NULL);
            JArray< ::java::nio::file::CopyOption > a2((jobject) NULL);
            ::java::nio::file::Path result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, ::java::nio::file::CopyOption::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::java::nio::file::Files::copy(a0, a1, a2));
              return ::java::nio::file::t_Path::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "copy", args);
        return NULL;
      }

      static PyObject *t_Files_createLink(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::nio::file::Path a1((jobject) NULL);
        ::java::nio::file::Path result((jobject) NULL);

        if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Files::createLink(a0, a1));
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "createLink", args);
        return NULL;
      }

      static PyObject *t_Files_delete(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(::java::nio::file::Files::delete$(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "delete", arg);
        return NULL;
      }

      static PyObject *t_Files_deleteIfExists(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::deleteIfExists(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "deleteIfExists", arg);
        return NULL;
      }

      static PyObject *t_Files_exists(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a1((jobject) NULL);
        PyTypeObject **p1;
        jboolean result;

        if (!parseArgs(args, "k[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::exists(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "exists", args);
        return NULL;
      }

      static PyObject *t_Files_getAttribute(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a2((jobject) NULL);
        PyTypeObject **p2;
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, "ks[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &a2, &p2, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::getAttribute(a0, a1, a2));
          return ::java::lang::t_Object::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "getAttribute", args);
        return NULL;
      }

      static PyObject *t_Files_getFileStore(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::nio::file::FileStore result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::getFileStore(a0));
          return ::java::nio::file::t_FileStore::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "getFileStore", arg);
        return NULL;
      }

      static PyObject *t_Files_isDirectory(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a1((jobject) NULL);
        PyTypeObject **p1;
        jboolean result;

        if (!parseArgs(args, "k[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isDirectory(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isDirectory", args);
        return NULL;
      }

      static PyObject *t_Files_isExecutable(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isExecutable(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isExecutable", arg);
        return NULL;
      }

      static PyObject *t_Files_isHidden(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isHidden(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isHidden", arg);
        return NULL;
      }

      static PyObject *t_Files_isReadable(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isReadable(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isReadable", arg);
        return NULL;
      }

      static PyObject *t_Files_isRegularFile(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a1((jobject) NULL);
        PyTypeObject **p1;
        jboolean result;

        if (!parseArgs(args, "k[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isRegularFile(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isRegularFile", args);
        return NULL;
      }

      static PyObject *t_Files_isSameFile(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::nio::file::Path a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isSameFile(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isSameFile", args);
        return NULL;
      }

      static PyObject *t_Files_isSymbolicLink(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isSymbolicLink(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isSymbolicLink", arg);
        return NULL;
      }

      static PyObject *t_Files_isWritable(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::isWritable(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "isWritable", arg);
        return NULL;
      }

      static PyObject *t_Files_move(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::nio::file::Path a1((jobject) NULL);
        JArray< ::java::nio::file::CopyOption > a2((jobject) NULL);
        ::java::nio::file::Path result((jobject) NULL);

        if (!parseArgs(args, "kk[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, ::java::nio::file::CopyOption::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = ::java::nio::file::Files::move(a0, a1, a2));
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "move", args);
        return NULL;
      }

      static PyObject *t_Files_newBufferedReader(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::io::BufferedReader result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::newBufferedReader(a0));
          return ::java::io::t_BufferedReader::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "newBufferedReader", arg);
        return NULL;
      }

      static PyObject *t_Files_newBufferedWriter(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::OpenOption > a1((jobject) NULL);
        ::java::io::BufferedWriter result((jobject) NULL);

        if (!parseArgs(args, "k[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::OpenOption::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Files::newBufferedWriter(a0, a1));
          return ::java::io::t_BufferedWriter::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "newBufferedWriter", args);
        return NULL;
      }

      static PyObject *t_Files_newDirectoryStream(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::nio::file::DirectoryStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::nio::file::Files::newDirectoryStream(a0));
              return ::java::nio::file::t_DirectoryStream::wrap_Object(result, ::java::nio::file::PY_TYPE(Path));
            }
          }
          break;
         case 2:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::nio::file::DirectoryStream result((jobject) NULL);

            if (!parseArgs(args, "ks", ::java::nio::file::Path::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::nio::file::Files::newDirectoryStream(a0, a1));
              return ::java::nio::file::t_DirectoryStream::wrap_Object(result, ::java::nio::file::PY_TYPE(Path));
            }
          }
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::nio::file::DirectoryStream$Filter a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::nio::file::DirectoryStream result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::nio::file::Path::initializeClass, ::java::nio::file::DirectoryStream$Filter::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_DirectoryStream$Filter::parameters_))
            {
              OBJ_CALL(result = ::java::nio::file::Files::newDirectoryStream(a0, a1));
              return ::java::nio::file::t_DirectoryStream::wrap_Object(result, ::java::nio::file::PY_TYPE(Path));
            }
          }
        }

        PyErr_SetArgsError(type, "newDirectoryStream", args);
        return NULL;
      }

      static PyObject *t_Files_newInputStream(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::OpenOption > a1((jobject) NULL);
        ::java::io::InputStream result((jobject) NULL);

        if (!parseArgs(args, "k[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::OpenOption::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Files::newInputStream(a0, a1));
          return ::java::io::t_InputStream::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "newInputStream", args);
        return NULL;
      }

      static PyObject *t_Files_newOutputStream(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::OpenOption > a1((jobject) NULL);
        ::java::io::OutputStream result((jobject) NULL);

        if (!parseArgs(args, "k[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::OpenOption::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = ::java::nio::file::Files::newOutputStream(a0, a1));
          return ::java::io::t_OutputStream::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "newOutputStream", args);
        return NULL;
      }

      static PyObject *t_Files_notExists(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a1((jobject) NULL);
        PyTypeObject **p1;
        jboolean result;

        if (!parseArgs(args, "k[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::notExists(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError(type, "notExists", args);
        return NULL;
      }

      static PyObject *t_Files_probeContentType(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::probeContentType(a0));
          return j2p(result);
        }

        PyErr_SetArgsError(type, "probeContentType", arg);
        return NULL;
      }

      static PyObject *t_Files_readAllBytes(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        JArray< jbyte > result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::readAllBytes(a0));
          return result.wrap();
        }

        PyErr_SetArgsError(type, "readAllBytes", arg);
        return NULL;
      }

      static PyObject *t_Files_readAllLines(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::util::List result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::readAllLines(a0));
          return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        PyErr_SetArgsError(type, "readAllLines", arg);
        return NULL;
      }

      static PyObject *t_Files_readAttributes(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a2((jobject) NULL);
        PyTypeObject **p2;
        ::java::util::Map result((jobject) NULL);

        if (!parseArgs(args, "ks[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &a2, &p2, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::readAttributes(a0, a1, a2));
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
        }

        PyErr_SetArgsError(type, "readAttributes", args);
        return NULL;
      }

      static PyObject *t_Files_readSymbolicLink(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::nio::file::Path result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::readSymbolicLink(a0));
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "readSymbolicLink", arg);
        return NULL;
      }

      static PyObject *t_Files_setAttribute(PyTypeObject *type, PyObject *args)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::Object a2((jobject) NULL);
        JArray< ::java::nio::file::LinkOption > a3((jobject) NULL);
        PyTypeObject **p3;
        ::java::nio::file::Path result((jobject) NULL);

        if (!parseArgs(args, "kso[K", ::java::nio::file::Path::initializeClass, ::java::nio::file::LinkOption::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = ::java::nio::file::Files::setAttribute(a0, a1, a2, a3));
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "setAttribute", args);
        return NULL;
      }

      static PyObject *t_Files_size(PyTypeObject *type, PyObject *arg)
      {
        ::java::nio::file::Path a0((jobject) NULL);
        jlong result;

        if (!parseArg(arg, "k", ::java::nio::file::Path::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::nio::file::Files::size(a0));
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        PyErr_SetArgsError(type, "size", arg);
        return NULL;
      }

      static PyObject *t_Files_walkFileTree(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::nio::file::FileVisitor a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::nio::file::Path result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::nio::file::Path::initializeClass, ::java::nio::file::FileVisitor::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_FileVisitor::parameters_))
            {
              OBJ_CALL(result = ::java::nio::file::Files::walkFileTree(a0, a1));
              return ::java::nio::file::t_Path::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            ::java::nio::file::FileVisitor a3((jobject) NULL);
            PyTypeObject **p3;
            ::java::nio::file::Path result((jobject) NULL);

            if (!parseArgs(args, "kKIK", ::java::nio::file::Path::initializeClass, ::java::util::Set::initializeClass, ::java::nio::file::FileVisitor::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &p3, ::java::nio::file::t_FileVisitor::parameters_))
            {
              OBJ_CALL(result = ::java::nio::file::Files::walkFileTree(a0, a1, a2, a3));
              return ::java::nio::file::t_Path::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "walkFileTree", args);
        return NULL;
      }

      static PyObject *t_Files_write(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 3:
          {
            ::java::nio::file::Path a0((jobject) NULL);
            JArray< jbyte > a1((jobject) NULL);
            JArray< ::java::nio::file::OpenOption > a2((jobject) NULL);
            ::java::nio::file::Path result((jobject) NULL);

            if (!parseArgs(args, "k[B[k", ::java::nio::file::Path::initializeClass, ::java::nio::file::OpenOption::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::java::nio::file::Files::write(a0, a1, a2));
              return ::java::nio::file::t_Path::wrap_Object(result);
            }
          }
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::java::lang::Iterable a1((jobject) NULL);
            PyTypeObject **p1;
            JArray< ::java::nio::file::OpenOption > a2((jobject) NULL);
            ::java::nio::file::Path result((jobject) NULL);

            if (!parseArgs(args, "kK[k", ::java::nio::file::Path::initializeClass, ::java::lang::Iterable::initializeClass, ::java::nio::file::OpenOption::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
            {
              OBJ_CALL(result = ::java::nio::file::Files::write(a0, a1, a2));
              return ::java::nio::file::t_Path::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "write", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/FlattenGraphFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *FlattenGraphFilter::class$ = NULL;
          jmethodID *FlattenGraphFilter::mids$ = NULL;
          bool FlattenGraphFilter::live$ = false;

          jclass FlattenGraphFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/FlattenGraphFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxLookaheadUsed_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxLookaheadUsed", "()I");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlattenGraphFilter::FlattenGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          void FlattenGraphFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jint FlattenGraphFilter::getMaxLookaheadUsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxLookaheadUsed_9972fcc56b44e79d]);
          }

          jboolean FlattenGraphFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void FlattenGraphFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_FlattenGraphFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlattenGraphFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlattenGraphFilter_init_(t_FlattenGraphFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlattenGraphFilter_end(t_FlattenGraphFilter *self, PyObject *args);
          static PyObject *t_FlattenGraphFilter_getMaxLookaheadUsed(t_FlattenGraphFilter *self);
          static PyObject *t_FlattenGraphFilter_incrementToken(t_FlattenGraphFilter *self, PyObject *args);
          static PyObject *t_FlattenGraphFilter_reset(t_FlattenGraphFilter *self, PyObject *args);
          static PyObject *t_FlattenGraphFilter_get__maxLookaheadUsed(t_FlattenGraphFilter *self, void *data);
          static PyGetSetDef t_FlattenGraphFilter__fields_[] = {
            DECLARE_GET_FIELD(t_FlattenGraphFilter, maxLookaheadUsed),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlattenGraphFilter__methods_[] = {
            DECLARE_METHOD(t_FlattenGraphFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlattenGraphFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlattenGraphFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FlattenGraphFilter, getMaxLookaheadUsed, METH_NOARGS),
            DECLARE_METHOD(t_FlattenGraphFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FlattenGraphFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FlattenGraphFilter)[] = {
            { Py_tp_methods, t_FlattenGraphFilter__methods_ },
            { Py_tp_init, (void *) t_FlattenGraphFilter_init_ },
            { Py_tp_getset, t_FlattenGraphFilter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FlattenGraphFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FlattenGraphFilter, t_FlattenGraphFilter, FlattenGraphFilter);

          void t_FlattenGraphFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FlattenGraphFilter), &PY_TYPE_DEF(FlattenGraphFilter), module, "FlattenGraphFilter", 0);
          }

          void t_FlattenGraphFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilter), "class_", make_descriptor(FlattenGraphFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilter), "wrapfn_", make_descriptor(t_FlattenGraphFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlattenGraphFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlattenGraphFilter::initializeClass, 1)))
              return NULL;
            return t_FlattenGraphFilter::wrap_Object(FlattenGraphFilter(((t_FlattenGraphFilter *) arg)->object.this$));
          }
          static PyObject *t_FlattenGraphFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlattenGraphFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlattenGraphFilter_init_(t_FlattenGraphFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FlattenGraphFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FlattenGraphFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FlattenGraphFilter_end(t_FlattenGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FlattenGraphFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FlattenGraphFilter_getMaxLookaheadUsed(t_FlattenGraphFilter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxLookaheadUsed());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FlattenGraphFilter_incrementToken(t_FlattenGraphFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FlattenGraphFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FlattenGraphFilter_reset(t_FlattenGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FlattenGraphFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_FlattenGraphFilter_get__maxLookaheadUsed(t_FlattenGraphFilter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxLookaheadUsed());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumTotalTermFreqValueSource::class$ = NULL;
            jmethodID *SumTotalTermFreqValueSource::mids$ = NULL;
            bool SumTotalTermFreqValueSource::live$ = false;

            jclass SumTotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumTotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumTotalTermFreqValueSource::SumTotalTermFreqValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            void SumTotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String SumTotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean SumTotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues SumTotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint SumTotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String SumTotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self);

            static PyMethodDef t_SumTotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SumTotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SumTotalTermFreqValueSource)[] = {
              { Py_tp_methods, t_SumTotalTermFreqValueSource__methods_ },
              { Py_tp_init, (void *) t_SumTotalTermFreqValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SumTotalTermFreqValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(SumTotalTermFreqValueSource, t_SumTotalTermFreqValueSource, SumTotalTermFreqValueSource);

            void t_SumTotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(SumTotalTermFreqValueSource), &PY_TYPE_DEF(SumTotalTermFreqValueSource), module, "SumTotalTermFreqValueSource", 0);
            }

            void t_SumTotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumTotalTermFreqValueSource), "class_", make_descriptor(SumTotalTermFreqValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumTotalTermFreqValueSource), "wrapfn_", make_descriptor(t_SumTotalTermFreqValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumTotalTermFreqValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumTotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_SumTotalTermFreqValueSource::wrap_Object(SumTotalTermFreqValueSource(((t_SumTotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_SumTotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumTotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumTotalTermFreqValueSource_init_(t_SumTotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              SumTotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SumTotalTermFreqValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SumTotalTermFreqValueSource_createWeight(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_description(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_equals(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_getValues(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_hashCode(t_SumTotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(SumTotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SumTotalTermFreqValueSource_name(t_SumTotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsReader::class$ = NULL;
          jmethodID *BlockTreeTermsReader::mids$ = NULL;
          bool BlockTreeTermsReader::live$ = false;
          jint BlockTreeTermsReader::VERSION_COMPRESSED_SUFFIXES = (jint) 0;
          jint BlockTreeTermsReader::VERSION_CURRENT = (jint) 0;
          jint BlockTreeTermsReader::VERSION_META_FILE = (jint) 0;
          jint BlockTreeTermsReader::VERSION_META_LONGS_REMOVED = (jint) 0;
          jint BlockTreeTermsReader::VERSION_START = (jint) 0;

          jclass BlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c81533df697e8cdb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              VERSION_COMPRESSED_SUFFIXES = env->getStaticIntField(cls, "VERSION_COMPRESSED_SUFFIXES");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_META_FILE = env->getStaticIntField(cls, "VERSION_META_FILE");
              VERSION_META_LONGS_REMOVED = env->getStaticIntField(cls, "VERSION_META_LONGS_REMOVED");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsReader::BlockTreeTermsReader(const ::org::apache::lucene::codecs::PostingsReaderBase & a0, const ::org::apache::lucene::index::SegmentReadState & a1) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_c81533df697e8cdb, a0.this$, a1.this$)) {}

          void BlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void BlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection BlockTreeTermsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::util::Iterator BlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong BlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint BlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms BlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }

          ::java::lang::String BlockTreeTermsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_getChildResources(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_toString(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_get__childResources(t_BlockTreeTermsReader *self, void *data);
          static PyGetSetDef t_BlockTreeTermsReader__fields_[] = {
            DECLARE_GET_FIELD(t_BlockTreeTermsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, terms, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockTreeTermsReader)[] = {
            { Py_tp_methods, t_BlockTreeTermsReader__methods_ },
            { Py_tp_init, (void *) t_BlockTreeTermsReader_init_ },
            { Py_tp_getset, t_BlockTreeTermsReader__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_BlockTreeTermsReader *)) get_iterator< t_BlockTreeTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockTreeTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(BlockTreeTermsReader, t_BlockTreeTermsReader, BlockTreeTermsReader);

          void t_BlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsReader), &PY_TYPE_DEF(BlockTreeTermsReader), module, "BlockTreeTermsReader", 0);
          }

          void t_BlockTreeTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "class_", make_descriptor(BlockTreeTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "wrapfn_", make_descriptor(t_BlockTreeTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsReader::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "VERSION_COMPRESSED_SUFFIXES", make_descriptor(BlockTreeTermsReader::VERSION_COMPRESSED_SUFFIXES));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "VERSION_CURRENT", make_descriptor(BlockTreeTermsReader::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "VERSION_META_FILE", make_descriptor(BlockTreeTermsReader::VERSION_META_FILE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "VERSION_META_LONGS_REMOVED", make_descriptor(BlockTreeTermsReader::VERSION_META_LONGS_REMOVED));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsReader), "VERSION_START", make_descriptor(BlockTreeTermsReader::VERSION_START));
          }

          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsReader::wrap_Object(BlockTreeTermsReader(((t_BlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::PostingsReaderBase a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);
            BlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BlockTreeTermsReader(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_getChildResources(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_toString(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_get__childResources(t_BlockTreeTermsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetQuery::class$ = NULL;
        jmethodID *FacetQuery::mids$ = NULL;
        bool FacetQuery::live$ = false;

        jclass FacetQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e15507bf45c25446] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_init$_b4ad911b759a344b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Ljava/lang/String;[Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetQuery::FacetQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::TermQuery(env->newObject(initializeClass, &mids$, mid_init$_e15507bf45c25446, a0.this$, a1.this$)) {}

        FacetQuery::FacetQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::search::TermQuery(env->newObject(initializeClass, &mids$, mid_init$_b4ad911b759a344b, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetQuery_init_(t_FacetQuery *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FacetQuery__methods_[] = {
          DECLARE_METHOD(t_FacetQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetQuery, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetQuery)[] = {
          { Py_tp_methods, t_FacetQuery__methods_ },
          { Py_tp_init, (void *) t_FacetQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TermQuery),
          NULL
        };

        DEFINE_TYPE(FacetQuery, t_FacetQuery, FacetQuery);

        void t_FacetQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetQuery), &PY_TYPE_DEF(FacetQuery), module, "FacetQuery", 0);
        }

        void t_FacetQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetQuery), "class_", make_descriptor(FacetQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetQuery), "wrapfn_", make_descriptor(t_FacetQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetQuery::initializeClass, 1)))
            return NULL;
          return t_FacetQuery::wrap_Object(FacetQuery(((t_FacetQuery *) arg)->object.this$));
        }
        static PyObject *t_FacetQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetQuery_init_(t_FacetQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              FacetQuery object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = FacetQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JArray< ::java::lang::String > a2((jobject) NULL);
              FacetQuery object((jobject) NULL);

              if (!parseArgs(args, "ks[s", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FacetQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "org/apache/lucene/geo/GeoUtils$WindingOrder.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Polygon::class$ = NULL;
        jmethodID *Polygon::mids$ = NULL;
        jfieldID *Polygon::fids$ = NULL;
        bool Polygon::live$ = false;

        jclass Polygon::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Polygon");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f922e0dbd0fab45f] = env->getMethodID(cls, "<init>", "([D[D[Lorg/apache/lucene/geo/Polygon;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fromGeoJSON_c8efb1ff79b608ea] = env->getStaticMethodID(cls, "fromGeoJSON", "(Ljava/lang/String;)[Lorg/apache/lucene/geo/Polygon;");
            mids$[mid_getHoles_b4b94d551f48db6e] = env->getMethodID(cls, "getHoles", "()[Lorg/apache/lucene/geo/Polygon;");
            mids$[mid_getPolyLat_f3ddedc0b6f18620] = env->getMethodID(cls, "getPolyLat", "(I)D");
            mids$[mid_getPolyLats_7f7ead8cd9ac7585] = env->getMethodID(cls, "getPolyLats", "()[D");
            mids$[mid_getPolyLon_f3ddedc0b6f18620] = env->getMethodID(cls, "getPolyLon", "(I)D");
            mids$[mid_getPolyLons_7f7ead8cd9ac7585] = env->getMethodID(cls, "getPolyLons", "()[D");
            mids$[mid_getWindingOrder_a9fa70f6c7b7c217] = env->getMethodID(cls, "getWindingOrder", "()Lorg/apache/lucene/geo/GeoUtils$WindingOrder;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_numHoles_9972fcc56b44e79d] = env->getMethodID(cls, "numHoles", "()I");
            mids$[mid_numPoints_9972fcc56b44e79d] = env->getMethodID(cls, "numPoints", "()I");
            mids$[mid_toGeoJSON_db9b55ba01e03e4b] = env->getMethodID(cls, "toGeoJSON", "()Ljava/lang/String;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verticesToGeoJSON_96b965367492c041] = env->getStaticMethodID(cls, "verticesToGeoJSON", "([D[D)Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxLat] = env->getFieldID(cls, "maxLat", "D");
            fids$[fid_maxLon] = env->getFieldID(cls, "maxLon", "D");
            fids$[fid_minLat] = env->getFieldID(cls, "minLat", "D");
            fids$[fid_minLon] = env->getFieldID(cls, "minLon", "D");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Polygon::Polygon(const JArray< jdouble > & a0, const JArray< jdouble > & a1, const JArray< Polygon > & a2) : ::org::apache::lucene::geo::LatLonGeometry(env->newObject(initializeClass, &mids$, mid_init$_f922e0dbd0fab45f, a0.this$, a1.this$, a2.this$)) {}

        jboolean Polygon::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        JArray< Polygon > Polygon::fromGeoJSON(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Polygon >(env->callStaticObjectMethod(cls, mids$[mid_fromGeoJSON_c8efb1ff79b608ea], a0.this$));
        }

        JArray< Polygon > Polygon::getHoles() const
        {
          return JArray< Polygon >(env->callObjectMethod(this$, mids$[mid_getHoles_b4b94d551f48db6e]));
        }

        jdouble Polygon::getPolyLat(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getPolyLat_f3ddedc0b6f18620], a0);
        }

        JArray< jdouble > Polygon::getPolyLats() const
        {
          return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getPolyLats_7f7ead8cd9ac7585]));
        }

        jdouble Polygon::getPolyLon(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getPolyLon_f3ddedc0b6f18620], a0);
        }

        JArray< jdouble > Polygon::getPolyLons() const
        {
          return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getPolyLons_7f7ead8cd9ac7585]));
        }

        ::org::apache::lucene::geo::GeoUtils$WindingOrder Polygon::getWindingOrder() const
        {
          return ::org::apache::lucene::geo::GeoUtils$WindingOrder(env->callObjectMethod(this$, mids$[mid_getWindingOrder_a9fa70f6c7b7c217]));
        }

        jint Polygon::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint Polygon::numHoles() const
        {
          return env->callIntMethod(this$, mids$[mid_numHoles_9972fcc56b44e79d]);
        }

        jint Polygon::numPoints() const
        {
          return env->callIntMethod(this$, mids$[mid_numPoints_9972fcc56b44e79d]);
        }

        ::java::lang::String Polygon::toGeoJSON() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toGeoJSON_db9b55ba01e03e4b]));
        }

        ::java::lang::String Polygon::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String Polygon::verticesToGeoJSON(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_verticesToGeoJSON_96b965367492c041], a0.this$, a1.this$));
        }

        jdouble Polygon::_get_maxLat() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLat]);
        }

        jdouble Polygon::_get_maxLon() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLon]);
        }

        jdouble Polygon::_get_minLat() const
        {
          return env->getDoubleField(this$, fids$[fid_minLat]);
        }

        jdouble Polygon::_get_minLon() const
        {
          return env->getDoubleField(this$, fids$[fid_minLon]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Polygon_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Polygon_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Polygon_init_(t_Polygon *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Polygon_equals(t_Polygon *self, PyObject *args);
        static PyObject *t_Polygon_fromGeoJSON(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Polygon_getHoles(t_Polygon *self);
        static PyObject *t_Polygon_getPolyLat(t_Polygon *self, PyObject *arg);
        static PyObject *t_Polygon_getPolyLats(t_Polygon *self);
        static PyObject *t_Polygon_getPolyLon(t_Polygon *self, PyObject *arg);
        static PyObject *t_Polygon_getPolyLons(t_Polygon *self);
        static PyObject *t_Polygon_getWindingOrder(t_Polygon *self);
        static PyObject *t_Polygon_hashCode(t_Polygon *self, PyObject *args);
        static PyObject *t_Polygon_numHoles(t_Polygon *self);
        static PyObject *t_Polygon_numPoints(t_Polygon *self);
        static PyObject *t_Polygon_toGeoJSON(t_Polygon *self);
        static PyObject *t_Polygon_toString(t_Polygon *self, PyObject *args);
        static PyObject *t_Polygon_verticesToGeoJSON(PyTypeObject *type, PyObject *args);
        static PyObject *t_Polygon_get__maxLat(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__maxLon(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__minLat(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__minLon(t_Polygon *self, void *data);

        static PyObject *t_Polygon_get__holes(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__polyLats(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__polyLons(t_Polygon *self, void *data);
        static PyObject *t_Polygon_get__windingOrder(t_Polygon *self, void *data);
        static PyGetSetDef t_Polygon__fields_[] = {
          DECLARE_GET_FIELD(t_Polygon, maxLat),
          DECLARE_GET_FIELD(t_Polygon, maxLon),
          DECLARE_GET_FIELD(t_Polygon, minLat),
          DECLARE_GET_FIELD(t_Polygon, minLon),
          DECLARE_GET_FIELD(t_Polygon, holes),
          DECLARE_GET_FIELD(t_Polygon, polyLats),
          DECLARE_GET_FIELD(t_Polygon, polyLons),
          DECLARE_GET_FIELD(t_Polygon, windingOrder),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Polygon__methods_[] = {
          DECLARE_METHOD(t_Polygon, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Polygon, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Polygon, equals, METH_VARARGS),
          DECLARE_METHOD(t_Polygon, fromGeoJSON, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Polygon, getHoles, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, getPolyLat, METH_O),
          DECLARE_METHOD(t_Polygon, getPolyLats, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, getPolyLon, METH_O),
          DECLARE_METHOD(t_Polygon, getPolyLons, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, getWindingOrder, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Polygon, numHoles, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, numPoints, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, toGeoJSON, METH_NOARGS),
          DECLARE_METHOD(t_Polygon, toString, METH_VARARGS),
          DECLARE_METHOD(t_Polygon, verticesToGeoJSON, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Polygon)[] = {
          { Py_tp_methods, t_Polygon__methods_ },
          { Py_tp_init, (void *) t_Polygon_init_ },
          { Py_tp_getset, t_Polygon__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Polygon)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::LatLonGeometry),
          NULL
        };

        DEFINE_TYPE(Polygon, t_Polygon, Polygon);

        void t_Polygon::install(PyObject *module)
        {
          installType(&PY_TYPE(Polygon), &PY_TYPE_DEF(Polygon), module, "Polygon", 0);
        }

        void t_Polygon::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Polygon), "class_", make_descriptor(Polygon::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Polygon), "wrapfn_", make_descriptor(t_Polygon::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Polygon), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Polygon_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Polygon::initializeClass, 1)))
            return NULL;
          return t_Polygon::wrap_Object(Polygon(((t_Polygon *) arg)->object.this$));
        }
        static PyObject *t_Polygon_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Polygon::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Polygon_init_(t_Polygon *self, PyObject *args, PyObject *kwds)
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< Polygon > a2((jobject) NULL);
          Polygon object((jobject) NULL);

          if (!parseArgs(args, "[D[D[k", Polygon::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Polygon(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Polygon_equals(t_Polygon *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Polygon), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Polygon_fromGeoJSON(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< Polygon > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Polygon::fromGeoJSON(a0));
            return JArray<jobject>(result.this$).wrap(t_Polygon::wrap_jobject);
          }

          PyErr_SetArgsError(type, "fromGeoJSON", arg);
          return NULL;
        }

        static PyObject *t_Polygon_getHoles(t_Polygon *self)
        {
          JArray< Polygon > result((jobject) NULL);
          OBJ_CALL(result = self->object.getHoles());
          return JArray<jobject>(result.this$).wrap(t_Polygon::wrap_jobject);
        }

        static PyObject *t_Polygon_getPolyLat(t_Polygon *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getPolyLat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPolyLat", arg);
          return NULL;
        }

        static PyObject *t_Polygon_getPolyLats(t_Polygon *self)
        {
          JArray< jdouble > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPolyLats());
          return result.wrap();
        }

        static PyObject *t_Polygon_getPolyLon(t_Polygon *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getPolyLon(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPolyLon", arg);
          return NULL;
        }

        static PyObject *t_Polygon_getPolyLons(t_Polygon *self)
        {
          JArray< jdouble > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPolyLons());
          return result.wrap();
        }

        static PyObject *t_Polygon_getWindingOrder(t_Polygon *self)
        {
          ::org::apache::lucene::geo::GeoUtils$WindingOrder result((jobject) NULL);
          OBJ_CALL(result = self->object.getWindingOrder());
          return ::org::apache::lucene::geo::t_GeoUtils$WindingOrder::wrap_Object(result);
        }

        static PyObject *t_Polygon_hashCode(t_Polygon *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Polygon), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Polygon_numHoles(t_Polygon *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numHoles());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Polygon_numPoints(t_Polygon *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numPoints());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Polygon_toGeoJSON(t_Polygon *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toGeoJSON());
          return j2p(result);
        }

        static PyObject *t_Polygon_toString(t_Polygon *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Polygon), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Polygon_verticesToGeoJSON(PyTypeObject *type, PyObject *args)
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Polygon::verticesToGeoJSON(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "verticesToGeoJSON", args);
          return NULL;
        }

        static PyObject *t_Polygon_get__maxLat(t_Polygon *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Polygon_get__maxLon(t_Polygon *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Polygon_get__minLat(t_Polygon *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Polygon_get__minLon(t_Polygon *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Polygon_get__holes(t_Polygon *self, void *data)
        {
          JArray< Polygon > value((jobject) NULL);
          OBJ_CALL(value = self->object.getHoles());
          return JArray<jobject>(value.this$).wrap(t_Polygon::wrap_jobject);
        }

        static PyObject *t_Polygon_get__polyLats(t_Polygon *self, void *data)
        {
          JArray< jdouble > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPolyLats());
          return value.wrap();
        }

        static PyObject *t_Polygon_get__polyLons(t_Polygon *self, void *data)
        {
          JArray< jdouble > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPolyLons());
          return value.wrap();
        }

        static PyObject *t_Polygon_get__windingOrder(t_Polygon *self, void *data)
        {
          ::org::apache::lucene::geo::GeoUtils$WindingOrder value((jobject) NULL);
          OBJ_CALL(value = self->object.getWindingOrder());
          return ::org::apache::lucene::geo::t_GeoUtils$WindingOrder::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilterFactory::class$ = NULL;
          jmethodID *TypeTokenFilterFactory::mids$ = NULL;
          bool TypeTokenFilterFactory::live$ = false;
          ::java::lang::String *TypeTokenFilterFactory::NAME = NULL;

          jclass TypeTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopTypes_7dcf4034c6d1a92a] = env->getMethodID(cls, "getStopTypes", "()Ljava/util/Set;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilterFactory::TypeTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::java::util::Set TypeTokenFilterFactory::getStopTypes() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopTypes_7dcf4034c6d1a92a]));
          }

          void TypeTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args);
          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data);
          static PyGetSetDef t_TypeTokenFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, stopTypes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TypeTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, getStopTypes, METH_NOARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeTokenFilterFactory)[] = {
            { Py_tp_methods, t_TypeTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TypeTokenFilterFactory_init_ },
            { Py_tp_getset, t_TypeTokenFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TypeTokenFilterFactory, t_TypeTokenFilterFactory, TypeTokenFilterFactory);

          void t_TypeTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilterFactory), &PY_TYPE_DEF(TypeTokenFilterFactory), module, "TypeTokenFilterFactory", 0);
          }

          void t_TypeTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilterFactory), "class_", make_descriptor(TypeTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilterFactory), "wrapfn_", make_descriptor(t_TypeTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilterFactory), "NAME", make_descriptor(j2p(*TypeTokenFilterFactory::NAME)));
          }

          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilterFactory::wrap_Object(TypeTokenFilterFactory(((t_TypeTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TypeTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilter::class$ = NULL;
            jmethodID *SuggestStopFilter::mids$ = NULL;
            bool SuggestStopFilter::live$ = false;

            jclass SuggestStopFilter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
                mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
                mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilter::SuggestStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

            void SuggestStopFilter::end() const
            {
              env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
            }

            jboolean SuggestStopFilter::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
            }

            void SuggestStopFilter::reset() const
            {
              env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args);

            static PyMethodDef t_SuggestStopFilter__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, end, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, reset, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SuggestStopFilter)[] = {
              { Py_tp_methods, t_SuggestStopFilter__methods_ },
              { Py_tp_init, (void *) t_SuggestStopFilter_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SuggestStopFilter)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
              NULL
            };

            DEFINE_TYPE(SuggestStopFilter, t_SuggestStopFilter, SuggestStopFilter);

            void t_SuggestStopFilter::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilter), &PY_TYPE_DEF(SuggestStopFilter), module, "SuggestStopFilter", 0);
            }

            void t_SuggestStopFilter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilter), "class_", make_descriptor(SuggestStopFilter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilter), "wrapfn_", make_descriptor(t_SuggestStopFilter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilter), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilter::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilter::wrap_Object(SuggestStopFilter(((t_SuggestStopFilter *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              SuggestStopFilter object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
              {
                INT_CALL(object = SuggestStopFilter(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.end());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SuggestStopFilter), (PyObject *) self, "end", args, 2);
            }

            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SuggestStopFilter), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SuggestStopFilter), (PyObject *) self, "reset", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader::class$ = NULL;
          jmethodID *OrdinalsReader::mids$ = NULL;
          bool OrdinalsReader::live$ = false;

          jclass OrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIndexFieldName_db9b55ba01e03e4b] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_ff225b04fcdc6f32] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader::OrdinalsReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::String OrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader OrdinalsReader::getReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_ff225b04fcdc6f32], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self);
          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg);
          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data);
          static PyGetSetDef t_OrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, getIndexFieldName, METH_NOARGS),
            DECLARE_METHOD(t_OrdinalsReader, getReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdinalsReader)[] = {
            { Py_tp_methods, t_OrdinalsReader__methods_ },
            { Py_tp_init, (void *) t_OrdinalsReader_init_ },
            { Py_tp_getset, t_OrdinalsReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdinalsReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OrdinalsReader, t_OrdinalsReader, OrdinalsReader);

          void t_OrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader), &PY_TYPE_DEF(OrdinalsReader), module, "OrdinalsReader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader), "OrdinalsSegmentReader", make_descriptor(&PY_TYPE_DEF(OrdinalsReader$OrdinalsSegmentReader)));
          }

          void t_OrdinalsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader), "class_", make_descriptor(OrdinalsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader), "wrapfn_", make_descriptor(t_OrdinalsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader::wrap_Object(OrdinalsReader(((t_OrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexFieldName());
            return j2p(result);
          }

          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", arg);
            return NULL;
          }

          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *ByteRunAutomaton::class$ = NULL;
          jmethodID *ByteRunAutomaton::mids$ = NULL;
          bool ByteRunAutomaton::live$ = false;

          jclass ByteRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/ByteRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_69d9e1f937392411] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;ZI)V");
              mids$[mid_run_e186e648337accb0] = env->getMethodID(cls, "run", "([BII)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jboolean a1, jint a2) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_69d9e1f937392411, a0.this$, a1, a2)) {}

          jboolean ByteRunAutomaton::run(const JArray< jbyte > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_e186e648337accb0], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args);

          static PyMethodDef t_ByteRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_ByteRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ByteRunAutomaton)[] = {
            { Py_tp_methods, t_ByteRunAutomaton__methods_ },
            { Py_tp_init, (void *) t_ByteRunAutomaton_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ByteRunAutomaton)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::automaton::RunAutomaton),
            NULL
          };

          DEFINE_TYPE(ByteRunAutomaton, t_ByteRunAutomaton, ByteRunAutomaton);

          void t_ByteRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteRunAutomaton), &PY_TYPE_DEF(ByteRunAutomaton), module, "ByteRunAutomaton", 0);
          }

          void t_ByteRunAutomaton::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteRunAutomaton), "class_", make_descriptor(ByteRunAutomaton::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteRunAutomaton), "wrapfn_", make_descriptor(t_ByteRunAutomaton::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteRunAutomaton), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_ByteRunAutomaton::wrap_Object(ByteRunAutomaton(((t_ByteRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = ByteRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kZI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ByteRunAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jboolean result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.run(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValues.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Expression::class$ = NULL;
        jmethodID *Expression::mids$ = NULL;
        jfieldID *Expression::fids$ = NULL;
        bool Expression::live$ = false;

        jclass Expression::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Expression");

            mids$ = new jmethodID[max_mid];
            mids$[mid_evaluate_cb84de2d56b03a82] = env->getMethodID(cls, "evaluate", "([Lorg/apache/lucene/search/DoubleValues;)D");
            mids$[mid_getDoubleValuesSource_2551433874630f5d] = env->getMethodID(cls, "getDoubleValuesSource", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_getRescorer_3dd9b51a95b812b7] = env->getMethodID(cls, "getRescorer", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/Rescorer;");
            mids$[mid_getSortField_fdbbd54eddc086ef] = env->getMethodID(cls, "getSortField", "(Lorg/apache/lucene/expressions/Bindings;Z)Lorg/apache/lucene/search/SortField;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_sourceText] = env->getFieldID(cls, "sourceText", "Ljava/lang/String;");
            fids$[fid_variables] = env->getFieldID(cls, "variables", "[Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble Expression::evaluate(const JArray< ::org::apache::lucene::search::DoubleValues > & a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_evaluate_cb84de2d56b03a82], a0.this$);
        }

        ::org::apache::lucene::search::DoubleValuesSource Expression::getDoubleValuesSource(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_getDoubleValuesSource_2551433874630f5d], a0.this$));
        }

        ::org::apache::lucene::search::Rescorer Expression::getRescorer(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::Rescorer(env->callObjectMethod(this$, mids$[mid_getRescorer_3dd9b51a95b812b7], a0.this$));
        }

        ::org::apache::lucene::search::SortField Expression::getSortField(const ::org::apache::lucene::expressions::Bindings & a0, jboolean a1) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_fdbbd54eddc086ef], a0.this$, a1));
        }

        ::java::lang::String Expression::_get_sourceText() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_sourceText]));
        }

        JArray< ::java::lang::String > Expression::_get_variables() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_variables]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getDoubleValuesSource(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data);
        static PyObject *t_Expression_get__variables(t_Expression *self, void *data);

        static PyGetSetDef t_Expression__fields_[] = {
          DECLARE_GET_FIELD(t_Expression, sourceText),
          DECLARE_GET_FIELD(t_Expression, variables),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Expression__methods_[] = {
          DECLARE_METHOD(t_Expression, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, evaluate, METH_O),
          DECLARE_METHOD(t_Expression, getDoubleValuesSource, METH_O),
          DECLARE_METHOD(t_Expression, getRescorer, METH_O),
          DECLARE_METHOD(t_Expression, getSortField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Expression)[] = {
          { Py_tp_methods, t_Expression__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Expression__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Expression)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Expression, t_Expression, Expression);

        void t_Expression::install(PyObject *module)
        {
          installType(&PY_TYPE(Expression), &PY_TYPE_DEF(Expression), module, "Expression", 0);
        }

        void t_Expression::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Expression), "class_", make_descriptor(Expression::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Expression), "wrapfn_", make_descriptor(t_Expression::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Expression), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Expression::initializeClass, 1)))
            return NULL;
          return t_Expression::wrap_Object(Expression(((t_Expression *) arg)->object.this$));
        }
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Expression::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::DoubleValues > a0((jobject) NULL);
          jdouble result;

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::DoubleValues::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.evaluate(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "evaluate", arg);
          return NULL;
        }

        static PyObject *t_Expression_getDoubleValuesSource(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDoubleValuesSource(a0));
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubleValuesSource", arg);
          return NULL;
        }

        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::Rescorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getRescorer(a0));
            return ::org::apache::lucene::search::t_Rescorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRescorer", arg);
          return NULL;
        }

        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSortField(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", args);
          return NULL;
        }

        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_sourceText());
          return j2p(value);
        }

        static PyObject *t_Expression_get__variables(t_Expression *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_variables());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *DeletedQueryNode::class$ = NULL;
              jmethodID *DeletedQueryNode::mids$ = NULL;
              bool DeletedQueryNode::live$ = false;

              jclass DeletedQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DeletedQueryNode::DeletedQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DeletedQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence DeletedQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String DeletedQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args);

              static PyMethodDef t_DeletedQueryNode__methods_[] = {
                DECLARE_METHOD(t_DeletedQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(DeletedQueryNode)[] = {
                { Py_tp_methods, t_DeletedQueryNode__methods_ },
                { Py_tp_init, (void *) t_DeletedQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(DeletedQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(DeletedQueryNode, t_DeletedQueryNode, DeletedQueryNode);

              void t_DeletedQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(DeletedQueryNode), &PY_TYPE_DEF(DeletedQueryNode), module, "DeletedQueryNode", 0);
              }

              void t_DeletedQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(DeletedQueryNode), "class_", make_descriptor(DeletedQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DeletedQueryNode), "wrapfn_", make_descriptor(t_DeletedQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DeletedQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DeletedQueryNode::initializeClass, 1)))
                  return NULL;
                return t_DeletedQueryNode::wrap_Object(DeletedQueryNode(((t_DeletedQueryNode *) arg)->object.this$));
              }
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DeletedQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds)
              {
                DeletedQueryNode object((jobject) NULL);

                INT_CALL(object = DeletedQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(DeletedQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(DeletedQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(DeletedQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyReader::class$ = NULL;
            jmethodID *DirectoryTaxonomyReader::mids$ = NULL;
            bool DirectoryTaxonomyReader::live$ = false;

            jclass DirectoryTaxonomyReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bcc8d5f7cd01fb8e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
                mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCommitUserData_1c3426541413a55d] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
                mids$[mid_getOrdinal_1e6795f28098d13d] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getParallelTaxonomyArrays_1e0e55a7443a6fd1] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
                mids$[mid_getPath_2f8d8c81610d6b29] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
                mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_setCacheSize_040c4cd0390c5aff] = env->getMethodID(cls, "setCacheSize", "(I)V");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");
                mids$[mid_doOpenIfChanged_780976a7c0adf316] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");
                mids$[mid_openIndexReader_890b80518dc93fd7] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_openIndexReader_f9995f21cd99d467] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_bcc8d5f7cd01fb8e, a0.this$)) {}

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

            ::java::util::Collection DirectoryTaxonomyReader::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            ::java::util::Map DirectoryTaxonomyReader::getCommitUserData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_1c3426541413a55d]));
            }

            jint DirectoryTaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_1e6795f28098d13d], a0.this$);
            }

            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays DirectoryTaxonomyReader::getParallelTaxonomyArrays() const
            {
              return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_1e0e55a7443a6fd1]));
            }

            ::org::apache::lucene::facet::taxonomy::FacetLabel DirectoryTaxonomyReader::getPath(jint a0) const
            {
              return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_2f8d8c81610d6b29], a0));
            }

            jint DirectoryTaxonomyReader::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
            }

            jlong DirectoryTaxonomyReader::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            void DirectoryTaxonomyReader::setCacheSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheSize_040c4cd0390c5aff], a0);
            }

            ::java::lang::String DirectoryTaxonomyReader::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyReader_getChildResources(t_DirectoryTaxonomyReader *self);
            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_ramBytesUsed(t_DirectoryTaxonomyReader *self);
            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args);
            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__childResources(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyReader__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyReader, cacheSize),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, childResources),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, commitUserData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, parallelTaxonomyArrays),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyReader__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getChildResources, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getCommitUserData, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getParallelTaxonomyArrays, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getPath, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getSize, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, setCacheSize, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DirectoryTaxonomyReader)[] = {
              { Py_tp_methods, t_DirectoryTaxonomyReader__methods_ },
              { Py_tp_init, (void *) t_DirectoryTaxonomyReader_init_ },
              { Py_tp_getset, t_DirectoryTaxonomyReader__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DirectoryTaxonomyReader)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::TaxonomyReader),
              NULL
            };

            DEFINE_TYPE(DirectoryTaxonomyReader, t_DirectoryTaxonomyReader, DirectoryTaxonomyReader);

            void t_DirectoryTaxonomyReader::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyReader), &PY_TYPE_DEF(DirectoryTaxonomyReader), module, "DirectoryTaxonomyReader", 0);
            }

            void t_DirectoryTaxonomyReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyReader), "class_", make_descriptor(DirectoryTaxonomyReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyReader), "wrapfn_", make_descriptor(t_DirectoryTaxonomyReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyReader::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyReader::wrap_Object(DirectoryTaxonomyReader(((t_DirectoryTaxonomyReader *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyReader_getChildResources(t_DirectoryTaxonomyReader *self)
            {
              ::java::util::Collection result((jobject) NULL);
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::java::util::Map result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCommitUserData());
                return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getCommitUserData", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
                return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getParallelTaxonomyArrays", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPath(a0));
                return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getPath", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getSize());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getSize", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_ramBytesUsed(t_DirectoryTaxonomyReader *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "toString", args, 2);
            }

            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheSize", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyReader_get__childResources(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitUserData());
              return ::java::util::t_Map::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
              OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
              return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LongValueFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LongValueFacetCounts::class$ = NULL;
        jmethodID *LongValueFacetCounts::mids$ = NULL;
        bool LongValueFacetCounts::live$ = false;

        jclass LongValueFacetCounts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LongValueFacetCounts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7bd73cf623b05f28] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/facet/FacetsCollector;)V");
            mids$[mid_init$_d1ea1d003f96bf06] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;Z)V");
            mids$[mid_init$_872818354d9b2155] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_e565b3e7aa2195c7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_init$_5859ee87a31a9160] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/facet/FacetsCollector;Z)V");
            mids$[mid_getAllChildrenSortByValue_12e6a0c8411f7eef] = env->getMethodID(cls, "getAllChildrenSortByValue", "()Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getTopChildrenSortByCount_7d355569974f274c] = env->getMethodID(cls, "getTopChildrenSortByCount", "(I)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValueFacetCounts::LongValueFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::LongValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_7bd73cf623b05f28, a0.this$, a1.this$, a2.this$)) {}

        LongValueFacetCounts::LongValueFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, jboolean a2) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_d1ea1d003f96bf06, a0.this$, a1.this$, a2)) {}

        LongValueFacetCounts::LongValueFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::LongValuesSource & a1, const ::org::apache::lucene::index::IndexReader & a2) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_872818354d9b2155, a0.this$, a1.this$, a2.this$)) {}

        LongValueFacetCounts::LongValueFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::index::IndexReader & a1, jboolean a2) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_e565b3e7aa2195c7, a0.this$, a1.this$, a2)) {}

        LongValueFacetCounts::LongValueFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::LongValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, jboolean a3) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5859ee87a31a9160, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::facet::FacetResult LongValueFacetCounts::getAllChildrenSortByValue() const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getAllChildrenSortByValue_12e6a0c8411f7eef]));
        }

        ::java::util::List LongValueFacetCounts::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
        }

        ::java::lang::Number LongValueFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult LongValueFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
        }

        ::org::apache::lucene::facet::FacetResult LongValueFacetCounts::getTopChildrenSortByCount(jint a0) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildrenSortByCount_7d355569974f274c], a0));
        }

        ::java::lang::String LongValueFacetCounts::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LongValueFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValueFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValueFacetCounts_init_(t_LongValueFacetCounts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValueFacetCounts_getAllChildrenSortByValue(t_LongValueFacetCounts *self);
        static PyObject *t_LongValueFacetCounts_getAllDims(t_LongValueFacetCounts *self, PyObject *args);
        static PyObject *t_LongValueFacetCounts_getSpecificValue(t_LongValueFacetCounts *self, PyObject *args);
        static PyObject *t_LongValueFacetCounts_getTopChildren(t_LongValueFacetCounts *self, PyObject *args);
        static PyObject *t_LongValueFacetCounts_getTopChildrenSortByCount(t_LongValueFacetCounts *self, PyObject *arg);
        static PyObject *t_LongValueFacetCounts_toString(t_LongValueFacetCounts *self, PyObject *args);
        static PyObject *t_LongValueFacetCounts_get__allChildrenSortByValue(t_LongValueFacetCounts *self, void *data);
        static PyGetSetDef t_LongValueFacetCounts__fields_[] = {
          DECLARE_GET_FIELD(t_LongValueFacetCounts, allChildrenSortByValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongValueFacetCounts__methods_[] = {
          DECLARE_METHOD(t_LongValueFacetCounts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValueFacetCounts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValueFacetCounts, getAllChildrenSortByValue, METH_NOARGS),
          DECLARE_METHOD(t_LongValueFacetCounts, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_LongValueFacetCounts, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_LongValueFacetCounts, getTopChildren, METH_VARARGS),
          DECLARE_METHOD(t_LongValueFacetCounts, getTopChildrenSortByCount, METH_O),
          DECLARE_METHOD(t_LongValueFacetCounts, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongValueFacetCounts)[] = {
          { Py_tp_methods, t_LongValueFacetCounts__methods_ },
          { Py_tp_init, (void *) t_LongValueFacetCounts_init_ },
          { Py_tp_getset, t_LongValueFacetCounts__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongValueFacetCounts)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
          NULL
        };

        DEFINE_TYPE(LongValueFacetCounts, t_LongValueFacetCounts, LongValueFacetCounts);

        void t_LongValueFacetCounts::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValueFacetCounts), &PY_TYPE_DEF(LongValueFacetCounts), module, "LongValueFacetCounts", 0);
        }

        void t_LongValueFacetCounts::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValueFacetCounts), "class_", make_descriptor(LongValueFacetCounts::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValueFacetCounts), "wrapfn_", make_descriptor(t_LongValueFacetCounts::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValueFacetCounts), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongValueFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValueFacetCounts::initializeClass, 1)))
            return NULL;
          return t_LongValueFacetCounts::wrap_Object(LongValueFacetCounts(((t_LongValueFacetCounts *) arg)->object.this$));
        }
        static PyObject *t_LongValueFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValueFacetCounts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValueFacetCounts_init_(t_LongValueFacetCounts *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
              ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
              LongValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongValueFacetCounts(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
              jboolean a2;
              LongValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongValueFacetCounts(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
              ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
              LongValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongValueFacetCounts(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
              jboolean a2;
              LongValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongValueFacetCounts(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
              ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
              jboolean a3;
              LongValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "skkZ", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = LongValueFacetCounts(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongValueFacetCounts_getAllChildrenSortByValue(t_LongValueFacetCounts *self)
        {
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);
          OBJ_CALL(result = self->object.getAllChildrenSortByValue());
          return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
        }

        static PyObject *t_LongValueFacetCounts_getAllDims(t_LongValueFacetCounts *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(PY_TYPE(LongValueFacetCounts), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_LongValueFacetCounts_getSpecificValue(t_LongValueFacetCounts *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LongValueFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_LongValueFacetCounts_getTopChildren(t_LongValueFacetCounts *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LongValueFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
        }

        static PyObject *t_LongValueFacetCounts_getTopChildrenSortByCount(t_LongValueFacetCounts *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTopChildrenSortByCount(a0));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildrenSortByCount", arg);
          return NULL;
        }

        static PyObject *t_LongValueFacetCounts_toString(t_LongValueFacetCounts *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LongValueFacetCounts), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongValueFacetCounts_get__allChildrenSortByValue(t_LongValueFacetCounts *self, void *data)
        {
          ::org::apache::lucene::facet::FacetResult value((jobject) NULL);
          OBJ_CALL(value = self->object.getAllChildrenSortByValue());
          return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$TermIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$TermIterator::class$ = NULL;
        jmethodID *PrefixCodedTerms$TermIterator::mids$ = NULL;
        bool PrefixCodedTerms$TermIterator::live$ = false;

        jclass PrefixCodedTerms$TermIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$TermIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_delGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "delGen", "()J");
            mids$[mid_field_db9b55ba01e03e4b] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong PrefixCodedTerms$TermIterator::delGen() const
        {
          return env->callLongMethod(this$, mids$[mid_delGen_2e5ae9edcb9b072f]);
        }

        ::java::lang::String PrefixCodedTerms$TermIterator::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::util::BytesRef PrefixCodedTerms$TermIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$TermIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$TermIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$TermIterator_delGen(t_PrefixCodedTerms$TermIterator *self);
        static PyObject *t_PrefixCodedTerms$TermIterator_field(t_PrefixCodedTerms$TermIterator *self);
        static PyObject *t_PrefixCodedTerms$TermIterator_next(t_PrefixCodedTerms$TermIterator *self, PyObject *args);

        static PyMethodDef t_PrefixCodedTerms$TermIterator__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$TermIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$TermIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$TermIterator, delGen, METH_NOARGS),
          DECLARE_METHOD(t_PrefixCodedTerms$TermIterator, field, METH_NOARGS),
          DECLARE_METHOD(t_PrefixCodedTerms$TermIterator, next, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PrefixCodedTerms$TermIterator)[] = {
          { Py_tp_methods, t_PrefixCodedTerms$TermIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_PrefixCodedTerms$TermIterator *)) get_next< t_PrefixCodedTerms$TermIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PrefixCodedTerms$TermIterator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FieldTermIterator),
          NULL
        };

        DEFINE_TYPE(PrefixCodedTerms$TermIterator, t_PrefixCodedTerms$TermIterator, PrefixCodedTerms$TermIterator);

        void t_PrefixCodedTerms$TermIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$TermIterator), &PY_TYPE_DEF(PrefixCodedTerms$TermIterator), module, "PrefixCodedTerms$TermIterator", 0);
        }

        void t_PrefixCodedTerms$TermIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$TermIterator), "class_", make_descriptor(PrefixCodedTerms$TermIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$TermIterator), "wrapfn_", make_descriptor(t_PrefixCodedTerms$TermIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$TermIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$TermIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$TermIterator::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$TermIterator::wrap_Object(PrefixCodedTerms$TermIterator(((t_PrefixCodedTerms$TermIterator *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$TermIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$TermIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixCodedTerms$TermIterator_delGen(t_PrefixCodedTerms$TermIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.delGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PrefixCodedTerms$TermIterator_field(t_PrefixCodedTerms$TermIterator *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_PrefixCodedTerms$TermIterator_next(t_PrefixCodedTerms$TermIterator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PrefixCodedTerms$TermIterator), (PyObject *) self, "next", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spans/SpanNearQuery$Builder.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery::class$ = NULL;
          jmethodID *SpanNearQuery::mids$ = NULL;
          bool SpanNearQuery::live$ = false;

          jclass SpanNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_10326dbf4d880677] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getClauses_55969f275130ff39] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isInOrder_8454bd5aa23fd11e] = env->getMethodID(cls, "isInOrder", "()Z");
              mids$[mid_newOrderedNearQuery_59f027fe1d203ba9] = env->getStaticMethodID(cls, "newOrderedNearQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/spans/SpanNearQuery$Builder;");
              mids$[mid_newUnorderedNearQuery_59f027fe1d203ba9] = env->getStaticMethodID(cls, "newUnorderedNearQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/spans/SpanNearQuery$Builder;");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_10326dbf4d880677, a0.this$, a1, a2)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanNearQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanNearQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_55969f275130ff39]));
          }

          ::java::lang::String SpanNearQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jint SpanNearQuery::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_9972fcc56b44e79d]);
          }

          jint SpanNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean SpanNearQuery::isInOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isInOrder_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::search::spans::SpanNearQuery$Builder SpanNearQuery::newOrderedNearQuery(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::spans::SpanNearQuery$Builder(env->callStaticObjectMethod(cls, mids$[mid_newOrderedNearQuery_59f027fe1d203ba9], a0.this$));
          }

          ::org::apache::lucene::search::spans::SpanNearQuery$Builder SpanNearQuery::newUnorderedNearQuery(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::spans::SpanNearQuery$Builder(env->callStaticObjectMethod(cls, mids$[mid_newUnorderedNearQuery_59f027fe1d203ba9], a0.this$));
          }

          ::org::apache::lucene::search::Query SpanNearQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String SpanNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanNearQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery_createWeight(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_newOrderedNearQuery(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_newUnorderedNearQuery(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_visit(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data);
          static PyGetSetDef t_SpanNearQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNearQuery, clauses),
            DECLARE_GET_FIELD(t_SpanNearQuery, field),
            DECLARE_GET_FIELD(t_SpanNearQuery, inOrder),
            DECLARE_GET_FIELD(t_SpanNearQuery, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, isInOrder, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, newOrderedNearQuery, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, newUnorderedNearQuery, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanNearQuery)[] = {
            { Py_tp_methods, t_SpanNearQuery__methods_ },
            { Py_tp_init, (void *) t_SpanNearQuery_init_ },
            { Py_tp_getset, t_SpanNearQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanNearQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanNearQuery, t_SpanNearQuery, SpanNearQuery);

          void t_SpanNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery), &PY_TYPE_DEF(SpanNearQuery), module, "SpanNearQuery", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery), "Builder", make_descriptor(&PY_TYPE_DEF(SpanNearQuery$Builder)));
          }

          void t_SpanNearQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery), "class_", make_descriptor(SpanNearQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery), "wrapfn_", make_descriptor(t_SpanNearQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery::wrap_Object(SpanNearQuery(((t_SpanNearQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            SpanNearQuery object((jobject) NULL);

            if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanNearQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery_createWeight(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isInOrder());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SpanNearQuery_newOrderedNearQuery(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanNearQuery$Builder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanNearQuery::newOrderedNearQuery(a0));
              return ::org::apache::lucene::search::spans::t_SpanNearQuery$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newOrderedNearQuery", arg);
            return NULL;
          }

          static PyObject *t_SpanNearQuery_newUnorderedNearQuery(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanNearQuery$Builder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanNearQuery::newUnorderedNearQuery(a0));
              return ::org::apache::lucene::search::spans::t_SpanNearQuery$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newUnorderedNearQuery", arg);
            return NULL;
          }

          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNearQuery_visit(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNearQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isInOrder());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *Token::class$ = NULL;
            jmethodID *Token::mids$ = NULL;
            jfieldID *Token::fids$ = NULL;
            bool Token::live$ = false;

            jclass Token::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/Token");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_836a82ec1a65a0bc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                mids$[mid_getValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_newToken_f51c876584e3a9c6] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_newToken_222942359b468183] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

            Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_836a82ec1a65a0bc, a0, a1.this$)) {}

            ::java::lang::Object Token::getValue() const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_d6bcd06f3102c4d9]));
            }

            Token Token::newToken(jint a0)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_f51c876584e3a9c6], a0));
            }

            Token Token::newToken(jint a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_222942359b468183], a0, a1.this$));
            }

            ::java::lang::String Token::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }

            jint Token::_get_beginColumn() const
            {
              return env->getIntField(this$, fids$[fid_beginColumn]);
            }

            void Token::_set_beginColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginColumn], a0);
            }

            jint Token::_get_beginLine() const
            {
              return env->getIntField(this$, fids$[fid_beginLine]);
            }

            void Token::_set_beginLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginLine], a0);
            }

            jint Token::_get_endColumn() const
            {
              return env->getIntField(this$, fids$[fid_endColumn]);
            }

            void Token::_set_endColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endColumn], a0);
            }

            jint Token::_get_endLine() const
            {
              return env->getIntField(this$, fids$[fid_endLine]);
            }

            void Token::_set_endLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endLine], a0);
            }

            ::java::lang::String Token::_get_image() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
            }

            void Token::_set_image(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_image], a0.this$);
            }

            jint Token::_get_kind() const
            {
              return env->getIntField(this$, fids$[fid_kind]);
            }

            void Token::_set_kind(jint a0) const
            {
              env->setIntField(this$, fids$[fid_kind], a0);
            }

            Token Token::_get_next() const
            {
              return Token(env->getObjectField(this$, fids$[fid_next]));
            }

            void Token::_set_next(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_next], a0.this$);
            }

            Token Token::_get_specialToken() const
            {
              return Token(env->getObjectField(this$, fids$[fid_specialToken]));
            }

            void Token::_set_specialToken(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Token_getValue(t_Token *self);
            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
            static PyObject *t_Token_toString(t_Token *self, PyObject *args);
            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endLine(t_Token *self, void *data);
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__image(t_Token *self, void *data);
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__kind(t_Token *self, void *data);
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__next(t_Token *self, void *data);
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

            static PyObject *t_Token_get__value(t_Token *self, void *data);
            static PyGetSetDef t_Token__fields_[] = {
              DECLARE_GETSET_FIELD(t_Token, beginColumn),
              DECLARE_GETSET_FIELD(t_Token, beginLine),
              DECLARE_GETSET_FIELD(t_Token, endColumn),
              DECLARE_GETSET_FIELD(t_Token, endLine),
              DECLARE_GETSET_FIELD(t_Token, image),
              DECLARE_GETSET_FIELD(t_Token, kind),
              DECLARE_GETSET_FIELD(t_Token, next),
              DECLARE_GETSET_FIELD(t_Token, specialToken),
              DECLARE_GET_FIELD(t_Token, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Token__methods_[] = {
              DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
              DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_Token, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Token)[] = {
              { Py_tp_methods, t_Token__methods_ },
              { Py_tp_init, (void *) t_Token_init_ },
              { Py_tp_getset, t_Token__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Token)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Token, t_Token, Token);

            void t_Token::install(PyObject *module)
            {
              installType(&PY_TYPE(Token), &PY_TYPE_DEF(Token), module, "Token", 0);
            }

            void t_Token::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "class_", make_descriptor(Token::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "wrapfn_", make_descriptor(t_Token::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                return NULL;
              return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
            }
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Token::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Token object((jobject) NULL);

                  INT_CALL(object = Token());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  jint a0;
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = Token(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    INT_CALL(object = Token(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Token_getValue(t_Token *self)
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0));
                    return t_Token::wrap_Object(result);
                  }
                }
                break;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0, a1));
                    return t_Token::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "newToken", args);
              return NULL;
            }

            static PyObject *t_Token_toString(t_Token *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginColumn());
              return PyLong_FromLong((long) value);
            }
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginLine());
              return PyLong_FromLong((long) value);
            }
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endColumn());
              return PyLong_FromLong((long) value);
            }
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__endLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endLine());
              return PyLong_FromLong((long) value);
            }
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__image(t_Token *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_image());
              return j2p(value);
            }
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_image(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "image", arg);
              return -1;
            }

            static PyObject *t_Token_get__kind(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_kind());
              return PyLong_FromLong((long) value);
            }
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_kind(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "kind", arg);
              return -1;
            }

            static PyObject *t_Token_get__next(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_next());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_next(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "next", arg);
              return -1;
            }

            static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_specialToken());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_specialToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
              return -1;
            }

            static PyObject *t_Token_get__value(t_Token *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilter::class$ = NULL;
          jmethodID *HyphenatedWordsFilter::mids$ = NULL;
          bool HyphenatedWordsFilter::live$ = false;

          jclass HyphenatedWordsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilter::HyphenatedWordsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean HyphenatedWordsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void HyphenatedWordsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args);
          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HyphenatedWordsFilter)[] = {
            { Py_tp_methods, t_HyphenatedWordsFilter__methods_ },
            { Py_tp_init, (void *) t_HyphenatedWordsFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HyphenatedWordsFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(HyphenatedWordsFilter, t_HyphenatedWordsFilter, HyphenatedWordsFilter);

          void t_HyphenatedWordsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilter), &PY_TYPE_DEF(HyphenatedWordsFilter), module, "HyphenatedWordsFilter", 0);
          }

          void t_HyphenatedWordsFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilter), "class_", make_descriptor(HyphenatedWordsFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilter), "wrapfn_", make_descriptor(t_HyphenatedWordsFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilter::wrap_Object(HyphenatedWordsFilter(((t_HyphenatedWordsFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HyphenatedWordsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HyphenatedWordsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QuotedFieldQueryNode::class$ = NULL;
              jmethodID *QuotedFieldQueryNode::mids$ = NULL;
              bool QuotedFieldQueryNode::live$ = false;

              jclass QuotedFieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_9cb0cd96f3795799] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_99103ef840873629] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QuotedFieldQueryNode::QuotedFieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_9cb0cd96f3795799, a0.this$, a1.this$, a2, a3)) {}

              QuotedFieldQueryNode QuotedFieldQueryNode::cloneTree() const
              {
                return QuotedFieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_99103ef840873629]));
              }

              ::java::lang::CharSequence QuotedFieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String QuotedFieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args);

              static PyMethodDef t_QuotedFieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_QuotedFieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QuotedFieldQueryNode)[] = {
                { Py_tp_methods, t_QuotedFieldQueryNode__methods_ },
                { Py_tp_init, (void *) t_QuotedFieldQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QuotedFieldQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode),
                NULL
              };

              DEFINE_TYPE(QuotedFieldQueryNode, t_QuotedFieldQueryNode, QuotedFieldQueryNode);

              void t_QuotedFieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QuotedFieldQueryNode), &PY_TYPE_DEF(QuotedFieldQueryNode), module, "QuotedFieldQueryNode", 0);
              }

              void t_QuotedFieldQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QuotedFieldQueryNode), "class_", make_descriptor(QuotedFieldQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QuotedFieldQueryNode), "wrapfn_", make_descriptor(t_QuotedFieldQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QuotedFieldQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QuotedFieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_QuotedFieldQueryNode::wrap_Object(QuotedFieldQueryNode(((t_QuotedFieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QuotedFieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                QuotedFieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QuotedFieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                QuotedFieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_QuotedFieldQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CorruptIndexException::class$ = NULL;
        jmethodID *CorruptIndexException::mids$ = NULL;
        bool CorruptIndexException::live$ = false;

        jclass CorruptIndexException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CorruptIndexException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_7f178f3aad405df6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_init$_e7dc457af7736fc4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_init$_fb9b37d4c9399590] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V");
            mids$[mid_init$_830df5b4a59b21d0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/DataInput;Ljava/lang/Throwable;)V");
            mids$[mid_init$_5df93809587d438c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/DataOutput;Ljava/lang/Throwable;)V");
            mids$[mid_getOriginalMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getOriginalMessage", "()Ljava/lang/String;");
            mids$[mid_getResourceDescription_db9b55ba01e03e4b] = env->getMethodID(cls, "getResourceDescription", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::org::apache::lucene::store::DataInput & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_7f178f3aad405df6, a0.this$, a1.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::org::apache::lucene::store::DataOutput & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_e7dc457af7736fc4, a0.this$, a1.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::Throwable & a2) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_fb9b37d4c9399590, a0.this$, a1.this$, a2.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::org::apache::lucene::store::DataInput & a1, const ::java::lang::Throwable & a2) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_830df5b4a59b21d0, a0.this$, a1.this$, a2.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::java::lang::Throwable & a2) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5df93809587d438c, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String CorruptIndexException::getOriginalMessage() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOriginalMessage_db9b55ba01e03e4b]));
        }

        ::java::lang::String CorruptIndexException::getResourceDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getResourceDescription_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CorruptIndexException_getOriginalMessage(t_CorruptIndexException *self);
        static PyObject *t_CorruptIndexException_getResourceDescription(t_CorruptIndexException *self);
        static PyObject *t_CorruptIndexException_get__originalMessage(t_CorruptIndexException *self, void *data);
        static PyObject *t_CorruptIndexException_get__resourceDescription(t_CorruptIndexException *self, void *data);
        static PyGetSetDef t_CorruptIndexException__fields_[] = {
          DECLARE_GET_FIELD(t_CorruptIndexException, originalMessage),
          DECLARE_GET_FIELD(t_CorruptIndexException, resourceDescription),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CorruptIndexException__methods_[] = {
          DECLARE_METHOD(t_CorruptIndexException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, getOriginalMessage, METH_NOARGS),
          DECLARE_METHOD(t_CorruptIndexException, getResourceDescription, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CorruptIndexException)[] = {
          { Py_tp_methods, t_CorruptIndexException__methods_ },
          { Py_tp_init, (void *) t_CorruptIndexException_init_ },
          { Py_tp_getset, t_CorruptIndexException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CorruptIndexException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(CorruptIndexException, t_CorruptIndexException, CorruptIndexException);

        void t_CorruptIndexException::install(PyObject *module)
        {
          installType(&PY_TYPE(CorruptIndexException), &PY_TYPE_DEF(CorruptIndexException), module, "CorruptIndexException", 0);
        }

        void t_CorruptIndexException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CorruptIndexException), "class_", make_descriptor(CorruptIndexException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CorruptIndexException), "wrapfn_", make_descriptor(t_CorruptIndexException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CorruptIndexException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CorruptIndexException::initializeClass, 1)))
            return NULL;
          return t_CorruptIndexException::wrap_Object(CorruptIndexException(((t_CorruptIndexException *) arg)->object.this$));
        }
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CorruptIndexException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::DataInput a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Throwable a2((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::java::lang::Throwable::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CorruptIndexException(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::DataInput a1((jobject) NULL);
              ::java::lang::Throwable a2((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::store::DataInput::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CorruptIndexException(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
              ::java::lang::Throwable a2((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::store::DataOutput::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CorruptIndexException(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CorruptIndexException_getOriginalMessage(t_CorruptIndexException *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMessage());
          return j2p(result);
        }

        static PyObject *t_CorruptIndexException_getResourceDescription(t_CorruptIndexException *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getResourceDescription());
          return j2p(result);
        }

        static PyObject *t_CorruptIndexException_get__originalMessage(t_CorruptIndexException *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMessage());
          return j2p(value);
        }

        static PyObject *t_CorruptIndexException_get__resourceDescription(t_CorruptIndexException *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getResourceDescription());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *Dictionary::class$ = NULL;
            jmethodID *Dictionary::mids$ = NULL;
            bool Dictionary::live$ = false;

            jclass Dictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/Dictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getLeftPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getLeftPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getMorphemes_ec2d69830563855a] = env->getMethodID(cls, "getMorphemes", "(I[CII)[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getPOSType_b7cb9401295fad9c] = env->getMethodID(cls, "getPOSType", "(I)Lorg/apache/lucene/analysis/ko/POS$Type;");
                mids$[mid_getReading_d7593acad64ef635] = env->getMethodID(cls, "getReading", "(I)Ljava/lang/String;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getRightPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getRightPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint Dictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag Dictionary::getLeftPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_b8b0dfb882948f38], a0));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > Dictionary::getMorphemes(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_ec2d69830563855a], a0, a1.this$, a2, a3));
            }

            ::org::apache::lucene::analysis::ko::POS$Type Dictionary::getPOSType(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_b7cb9401295fad9c], a0));
            }

            ::java::lang::String Dictionary::getReading(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_d7593acad64ef635], a0));
            }

            jint Dictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag Dictionary::getRightPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_b8b0dfb882948f38], a0));
            }

            jint Dictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Dictionary_getLeftId(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getLeftPOS(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getMorphemes(t_Dictionary *self, PyObject *args);
            static PyObject *t_Dictionary_getPOSType(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getReading(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getRightId(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getRightPOS(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getWordCost(t_Dictionary *self, PyObject *arg);

            static PyMethodDef t_Dictionary__methods_[] = {
              DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Dictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_Dictionary, getLeftPOS, METH_O),
              DECLARE_METHOD(t_Dictionary, getMorphemes, METH_VARARGS),
              DECLARE_METHOD(t_Dictionary, getPOSType, METH_O),
              DECLARE_METHOD(t_Dictionary, getReading, METH_O),
              DECLARE_METHOD(t_Dictionary, getRightId, METH_O),
              DECLARE_METHOD(t_Dictionary, getRightPOS, METH_O),
              DECLARE_METHOD(t_Dictionary, getWordCost, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Dictionary)[] = {
              { Py_tp_methods, t_Dictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Dictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Dictionary, t_Dictionary, Dictionary);

            void t_Dictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(Dictionary), &PY_TYPE_DEF(Dictionary), module, "Dictionary", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "Morpheme", make_descriptor(&PY_TYPE_DEF(Dictionary$Morpheme)));
            }

            void t_Dictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "class_", make_descriptor(Dictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
                return NULL;
              return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
            }
            static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Dictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Dictionary_getLeftId(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getLeftPOS(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftPOS", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getMorphemes(t_Dictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getMorphemes(a0, a1, a2, a3));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
              }

              PyErr_SetArgsError((PyObject *) self, "getMorphemes", args);
              return NULL;
            }

            static PyObject *t_Dictionary_getPOSType(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPOSType(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPOSType", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getReading(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getReading(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getRightId(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getRightPOS(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightPOS", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getWordCost(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMOutputStream::class$ = NULL;
        jmethodID *RAMOutputStream::mids$ = NULL;
        bool RAMOutputStream::live$ = false;

        jclass RAMOutputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMOutputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a0cb299f25d483d9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_init$_ba22c6ee653e1e85] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeTo_ead2c38342037c59] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeTo_2a8b02a5adcbf830] = env->getMethodID(cls, "writeTo", "([BI)V");
            mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMOutputStream::RAMOutputStream() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        RAMOutputStream::RAMOutputStream(const ::org::apache::lucene::store::RAMFile & a0, jboolean a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_a0cb299f25d483d9, a0.this$, a1)) {}

        RAMOutputStream::RAMOutputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1, jboolean a2) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_ba22c6ee653e1e85, a0.this$, a1.this$, a2)) {}

        void RAMOutputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong RAMOutputStream::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        ::java::util::Collection RAMOutputStream::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        jlong RAMOutputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong RAMOutputStream::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void RAMOutputStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void RAMOutputStream::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void RAMOutputStream::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void RAMOutputStream::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_ead2c38342037c59], a0.this$);
        }

        void RAMOutputStream::writeTo(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_2a8b02a5adcbf830], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChildResources(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__childResources(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data);
        static PyGetSetDef t_RAMOutputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMOutputStream, checksum),
          DECLARE_GET_FIELD(t_RAMOutputStream, childResources),
          DECLARE_GET_FIELD(t_RAMOutputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMOutputStream__methods_[] = {
          DECLARE_METHOD(t_RAMOutputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, reset, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeTo, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RAMOutputStream)[] = {
          { Py_tp_methods, t_RAMOutputStream__methods_ },
          { Py_tp_init, (void *) t_RAMOutputStream_init_ },
          { Py_tp_getset, t_RAMOutputStream__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RAMOutputStream)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexOutput),
          NULL
        };

        DEFINE_TYPE(RAMOutputStream, t_RAMOutputStream, RAMOutputStream);

        void t_RAMOutputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMOutputStream), &PY_TYPE_DEF(RAMOutputStream), module, "RAMOutputStream", 0);
        }

        void t_RAMOutputStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMOutputStream), "class_", make_descriptor(RAMOutputStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMOutputStream), "wrapfn_", make_descriptor(t_RAMOutputStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMOutputStream), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMOutputStream::initializeClass, 1)))
            return NULL;
          return t_RAMOutputStream::wrap_Object(RAMOutputStream(((t_RAMOutputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMOutputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMOutputStream object((jobject) NULL);

              INT_CALL(object = RAMOutputStream());
              self->object = object;
              break;
            }
           case 2:
            {
              ::org::apache::lucene::store::RAMFile a0((jobject) NULL);
              jboolean a1;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMOutputStream(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
              jboolean a2;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RAMOutputStream(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RAMOutputStream), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChildResources(t_RAMOutputStream *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RAMOutputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMOutputStream), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMOutputStream), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(self->object.writeTo(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeTo(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeTo", args);
          return NULL;
        }

        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RAMOutputStream_get__childResources(t_RAMOutputStream *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenFilterFactory::class$ = NULL;
          jmethodID *TokenFilterFactory::mids$ = NULL;
          bool TokenFilterFactory::live$ = false;

          jclass TokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenFilters_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableTokenFilters", "()Ljava/util/Set;");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_findSPIName_1d6fc28577e5ff15] = env->getStaticMethodID(cls, "findSPIName", "(Ljava/lang/Class;)Ljava/lang/String;");
              mids$[mid_forName_ba73db39a6da1f70] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenFilterFactory;");
              mids$[mid_lookupClass_337d52b895d55b49] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reloadTokenFilters_98a876e82795b112] = env->getStaticMethodID(cls, "reloadTokenFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenFilterFactory::availableTokenFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenFilters_7dcf4034c6d1a92a]));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::java::lang::String TokenFilterFactory::findSPIName(const ::java::lang::Class & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_findSPIName_1d6fc28577e5ff15], a0.this$));
          }

          TokenFilterFactory TokenFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_ba73db39a6da1f70], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_337d52b895d55b49], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }

          void TokenFilterFactory::reloadTokenFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenFilters_98a876e82795b112], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type);
          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_findSPIName(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_normalize(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, availableTokenFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, create, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, findSPIName, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, normalize, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, reloadTokenFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenFilterFactory)[] = {
            { Py_tp_methods, t_TokenFilterFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::AbstractAnalysisFactory),
            NULL
          };

          DEFINE_TYPE(TokenFilterFactory, t_TokenFilterFactory, TokenFilterFactory);

          void t_TokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenFilterFactory), &PY_TYPE_DEF(TokenFilterFactory), module, "TokenFilterFactory", 0);
          }

          void t_TokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilterFactory), "class_", make_descriptor(TokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilterFactory), "wrapfn_", make_descriptor(t_TokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilterFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenFilterFactory::wrap_Object(TokenFilterFactory(((t_TokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::availableTokenFilters());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_findSPIName(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::Class a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::findSPIName(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "findSPIName", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::forName(a0, a1));
              return t_TokenFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_normalize(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenFilterFactory::reloadTokenFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *VersionBlockTreeTermsReader::class$ = NULL;
          jmethodID *VersionBlockTreeTermsReader::mids$ = NULL;
          bool VersionBlockTreeTermsReader::live$ = false;

          jclass VersionBlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c81533df697e8cdb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VersionBlockTreeTermsReader::VersionBlockTreeTermsReader(const ::org::apache::lucene::codecs::PostingsReaderBase & a0, const ::org::apache::lucene::index::SegmentReadState & a1) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_c81533df697e8cdb, a0.this$, a1.this$)) {}

          void VersionBlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void VersionBlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection VersionBlockTreeTermsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::util::Iterator VersionBlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong VersionBlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint VersionBlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms VersionBlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }

          ::java::lang::String VersionBlockTreeTermsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_VersionBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VersionBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VersionBlockTreeTermsReader_init_(t_VersionBlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VersionBlockTreeTermsReader_checkIntegrity(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_close(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_getChildResources(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_iterator(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_ramBytesUsed(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_size(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_terms(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_toString(t_VersionBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_VersionBlockTreeTermsReader_get__childResources(t_VersionBlockTreeTermsReader *self, void *data);
          static PyGetSetDef t_VersionBlockTreeTermsReader__fields_[] = {
            DECLARE_GET_FIELD(t_VersionBlockTreeTermsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VersionBlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, terms, METH_VARARGS),
            DECLARE_METHOD(t_VersionBlockTreeTermsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VersionBlockTreeTermsReader)[] = {
            { Py_tp_methods, t_VersionBlockTreeTermsReader__methods_ },
            { Py_tp_init, (void *) t_VersionBlockTreeTermsReader_init_ },
            { Py_tp_getset, t_VersionBlockTreeTermsReader__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_VersionBlockTreeTermsReader *)) get_iterator< t_VersionBlockTreeTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VersionBlockTreeTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(VersionBlockTreeTermsReader, t_VersionBlockTreeTermsReader, VersionBlockTreeTermsReader);

          void t_VersionBlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(VersionBlockTreeTermsReader), &PY_TYPE_DEF(VersionBlockTreeTermsReader), module, "VersionBlockTreeTermsReader", 0);
          }

          void t_VersionBlockTreeTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsReader), "class_", make_descriptor(VersionBlockTreeTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsReader), "wrapfn_", make_descriptor(t_VersionBlockTreeTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VersionBlockTreeTermsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VersionBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VersionBlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_VersionBlockTreeTermsReader::wrap_Object(VersionBlockTreeTermsReader(((t_VersionBlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_VersionBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VersionBlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VersionBlockTreeTermsReader_init_(t_VersionBlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::PostingsReaderBase a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);
            VersionBlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
            {
              INT_CALL(object = VersionBlockTreeTermsReader(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VersionBlockTreeTermsReader_checkIntegrity(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_close(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_getChildResources(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_iterator(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_ramBytesUsed(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_size(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_terms(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_toString(t_VersionBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(VersionBlockTreeTermsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_VersionBlockTreeTermsReader_get__childResources(t_VersionBlockTreeTermsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonSimpleCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonSimpleCollector::class$ = NULL;
        jmethodID *PythonSimpleCollector::mids$ = NULL;
        bool PythonSimpleCollector::live$ = false;

        jclass PythonSimpleCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonSimpleCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_collect_da161bce5801b190] = env->getMethodID(cls, "collect", "(IF)V");
            mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSimpleCollector::PythonSimpleCollector() : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonSimpleCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        void PythonSimpleCollector::doSetNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::search::SimpleCollector::class$->this$, ::org::apache::lucene::search::SimpleCollector::mids$[::org::apache::lucene::search::SimpleCollector::mid_doSetNextReader_8747e0e89febf88d], a0.this$);
        }

        void PythonSimpleCollector::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonSimpleCollector::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonSimpleCollector::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        void PythonSimpleCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonSimpleCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSimpleCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSimpleCollector_init_(t_PythonSimpleCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSimpleCollector_collect(t_PythonSimpleCollector *self, PyObject *args);
        static PyObject *t_PythonSimpleCollector_doSetNextReader(t_PythonSimpleCollector *self, PyObject *arg);
        static PyObject *t_PythonSimpleCollector_finalize(t_PythonSimpleCollector *self);
        static PyObject *t_PythonSimpleCollector_pythonExtension(t_PythonSimpleCollector *self, PyObject *args);
        static PyObject *t_PythonSimpleCollector_setScorer(t_PythonSimpleCollector *self, PyObject *args);
        static void JNICALL t_PythonSimpleCollector_collect0(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1);
        static void JNICALL t_PythonSimpleCollector_doSetNextReader1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSimpleCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSimpleCollector_scoreMode3(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSimpleCollector_get__self(t_PythonSimpleCollector *self, void *data);
        static int t_PythonSimpleCollector_set__scorer(t_PythonSimpleCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PythonSimpleCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PythonSimpleCollector, scorer),
          DECLARE_GET_FIELD(t_PythonSimpleCollector, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSimpleCollector__methods_[] = {
          DECLARE_METHOD(t_PythonSimpleCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSimpleCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSimpleCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PythonSimpleCollector, doSetNextReader, METH_O),
          DECLARE_METHOD(t_PythonSimpleCollector, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSimpleCollector, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSimpleCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonSimpleCollector)[] = {
          { Py_tp_methods, t_PythonSimpleCollector__methods_ },
          { Py_tp_init, (void *) t_PythonSimpleCollector_init_ },
          { Py_tp_getset, t_PythonSimpleCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonSimpleCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
          NULL
        };

        DEFINE_TYPE(PythonSimpleCollector, t_PythonSimpleCollector, PythonSimpleCollector);

        void t_PythonSimpleCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSimpleCollector), &PY_TYPE_DEF(PythonSimpleCollector), module, "PythonSimpleCollector", 1);
        }

        void t_PythonSimpleCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimpleCollector), "class_", make_descriptor(PythonSimpleCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimpleCollector), "wrapfn_", make_descriptor(t_PythonSimpleCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimpleCollector), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSimpleCollector::initializeClass);
          JNINativeMethod methods[] = {
            { "collect", "(IF)V", (void *) t_PythonSimpleCollector_collect0 },
            { "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V", (void *) t_PythonSimpleCollector_doSetNextReader1 },
            { "pythonDecRef", "()V", (void *) t_PythonSimpleCollector_pythonDecRef2 },
            { "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;", (void *) t_PythonSimpleCollector_scoreMode3 },
          };
          env->registerNatives(cls, methods, 4);
        }

        static PyObject *t_PythonSimpleCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSimpleCollector::initializeClass, 1)))
            return NULL;
          return t_PythonSimpleCollector::wrap_Object(PythonSimpleCollector(((t_PythonSimpleCollector *) arg)->object.this$));
        }
        static PyObject *t_PythonSimpleCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSimpleCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSimpleCollector_init_(t_PythonSimpleCollector *self, PyObject *args, PyObject *kwds)
        {
          PythonSimpleCollector object((jobject) NULL);

          INT_CALL(object = PythonSimpleCollector());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSimpleCollector_collect(t_PythonSimpleCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonSimpleCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PythonSimpleCollector_doSetNextReader(t_PythonSimpleCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.doSetNextReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doSetNextReader", arg);
          return NULL;
        }

        static PyObject *t_PythonSimpleCollector_finalize(t_PythonSimpleCollector *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSimpleCollector_pythonExtension(t_PythonSimpleCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSimpleCollector_setScorer(t_PythonSimpleCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonSimpleCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static void JNICALL t_PythonSimpleCollector_collect0(JNIEnv *jenv, jobject jobj, jint a0, jfloat a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSimpleCollector::mids$[PythonSimpleCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "collect", "if", (int) a0, (float) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonSimpleCollector_doSetNextReader1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSimpleCollector::mids$[PythonSimpleCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::index::t_LeafReaderContext::wrap_Object(::org::apache::lucene::index::LeafReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "doSetNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonSimpleCollector_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSimpleCollector::mids$[PythonSimpleCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSimpleCollector::mids$[PythonSimpleCollector::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonSimpleCollector_scoreMode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSimpleCollector::mids$[PythonSimpleCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::ScoreMode value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "scoreMode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::ScoreMode::initializeClass, &value))
          {
            throwTypeError("scoreMode", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSimpleCollector_get__self(t_PythonSimpleCollector *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }

        static int t_PythonSimpleCollector_set__scorer(t_PythonSimpleCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfo::class$ = NULL;
        jmethodID *SegmentInfo::mids$ = NULL;
        jfieldID *SegmentInfo::fids$ = NULL;
        bool SegmentInfo::live$ = false;
        jint SegmentInfo::NO = (jint) 0;
        jint SegmentInfo::YES = (jint) 0;

        jclass SegmentInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9de460ab2a0d060] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/Version;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;[BLjava/util/Map;Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_addFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "addFile", "(Ljava/lang/String;)V");
            mids$[mid_addFiles_50bc3ddc62a19f2d] = env->getMethodID(cls, "addFiles", "(Ljava/util/Collection;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_files_7dcf4034c6d1a92a] = env->getMethodID(cls, "files", "()Ljava/util/Set;");
            mids$[mid_getAttribute_9bfa75c9f141b67f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getAttributes_1c3426541413a55d] = env->getMethodID(cls, "getAttributes", "()Ljava/util/Map;");
            mids$[mid_getCodec_a302ebac25c26553] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDiagnostics_1c3426541413a55d] = env->getMethodID(cls, "getDiagnostics", "()Ljava/util/Map;");
            mids$[mid_getId_cf386cdb1bbd339f] = env->getMethodID(cls, "getId", "()[B");
            mids$[mid_getIndexSort_f58d0196b42aaee4] = env->getMethodID(cls, "getIndexSort", "()Lorg/apache/lucene/search/Sort;");
            mids$[mid_getMinVersion_6b68647131bbda98] = env->getMethodID(cls, "getMinVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_getUseCompoundFile_8454bd5aa23fd11e] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getVersion_6b68647131bbda98] = env->getMethodID(cls, "getVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_putAttribute_04b762e0ad33dcc5] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setCodec_945acc7dbd39be07] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_setFiles_50bc3ddc62a19f2d] = env->getMethodID(cls, "setFiles", "(Ljava/util/Collection;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO = env->getStaticIntField(cls, "NO");
            YES = env->getStaticIntField(cls, "YES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::util::Version & a2, const ::java::lang::String & a3, jint a4, jboolean a5, const ::org::apache::lucene::codecs::Codec & a6, const ::java::util::Map & a7, const JArray< jbyte > & a8, const ::java::util::Map & a9, const ::org::apache::lucene::search::Sort & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9de460ab2a0d060, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$)) {}

        void SegmentInfo::addFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFile_9fd2eb66a64e6f0f], a0.this$);
        }

        void SegmentInfo::addFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFiles_50bc3ddc62a19f2d], a0.this$);
        }

        jboolean SegmentInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::Set SegmentInfo::files() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_files_7dcf4034c6d1a92a]));
        }

        ::java::lang::String SegmentInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_9bfa75c9f141b67f], a0.this$));
        }

        ::java::util::Map SegmentInfo::getAttributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getAttributes_1c3426541413a55d]));
        }

        ::org::apache::lucene::codecs::Codec SegmentInfo::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_a302ebac25c26553]));
        }

        ::java::util::Map SegmentInfo::getDiagnostics() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDiagnostics_1c3426541413a55d]));
        }

        JArray< jbyte > SegmentInfo::getId() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getId_cf386cdb1bbd339f]));
        }

        ::org::apache::lucene::search::Sort SegmentInfo::getIndexSort() const
        {
          return ::org::apache::lucene::search::Sort(env->callObjectMethod(this$, mids$[mid_getIndexSort_f58d0196b42aaee4]));
        }

        ::org::apache::lucene::util::Version SegmentInfo::getMinVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getMinVersion_6b68647131bbda98]));
        }

        jboolean SegmentInfo::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::util::Version SegmentInfo::getVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getVersion_6b68647131bbda98]));
        }

        jint SegmentInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint SegmentInfo::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        ::java::lang::String SegmentInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_04b762e0ad33dcc5], a0.this$, a1.this$));
        }

        void SegmentInfo::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCodec_945acc7dbd39be07], a0.this$);
        }

        void SegmentInfo::setFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFiles_50bc3ddc62a19f2d], a0.this$);
        }

        ::java::lang::String SegmentInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String SegmentInfo::toString(jint a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
        }

        ::org::apache::lucene::store::Directory SegmentInfo::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        ::java::lang::String SegmentInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_getAttributes(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getId(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getIndexSort(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getMinVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_maxDoc(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data);

        static PyObject *t_SegmentInfo_get__attributes(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__id(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__indexSort(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__minVersion(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data);
        static PyGetSetDef t_SegmentInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfo, dir),
          DECLARE_GET_FIELD(t_SegmentInfo, name),
          DECLARE_GET_FIELD(t_SegmentInfo, attributes),
          DECLARE_GETSET_FIELD(t_SegmentInfo, codec),
          DECLARE_GET_FIELD(t_SegmentInfo, diagnostics),
          DECLARE_GET_FIELD(t_SegmentInfo, id),
          DECLARE_GET_FIELD(t_SegmentInfo, indexSort),
          DECLARE_GET_FIELD(t_SegmentInfo, minVersion),
          DECLARE_GET_FIELD(t_SegmentInfo, useCompoundFile),
          DECLARE_GET_FIELD(t_SegmentInfo, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, addFile, METH_O),
          DECLARE_METHOD(t_SegmentInfo, addFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_SegmentInfo, getAttributes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDiagnostics, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getId, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getIndexSort, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getMinVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, setCodec, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentInfo)[] = {
          { Py_tp_methods, t_SegmentInfo__methods_ },
          { Py_tp_init, (void *) t_SegmentInfo_init_ },
          { Py_tp_getset, t_SegmentInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentInfo, t_SegmentInfo, SegmentInfo);

        void t_SegmentInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfo), &PY_TYPE_DEF(SegmentInfo), module, "SegmentInfo", 0);
        }

        void t_SegmentInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfo), "class_", make_descriptor(SegmentInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfo), "wrapfn_", make_descriptor(t_SegmentInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfo), "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfo::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfo), "NO", make_descriptor(SegmentInfo::NO));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfo), "YES", make_descriptor(SegmentInfo::YES));
        }

        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentInfo::wrap_Object(SegmentInfo(((t_SegmentInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::util::Version a1((jobject) NULL);
          ::org::apache::lucene::util::Version a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);
          jint a4;
          jboolean a5;
          ::org::apache::lucene::codecs::Codec a6((jobject) NULL);
          ::java::util::Map a7((jobject) NULL);
          PyTypeObject **p7;
          JArray< jbyte > a8((jobject) NULL);
          ::java::util::Map a9((jobject) NULL);
          PyTypeObject **p9;
          ::org::apache::lucene::search::Sort a10((jobject) NULL);
          SegmentInfo object((jobject) NULL);

          if (!parseArgs(args, "kkksIZkK[BKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &p7, ::java::util::t_Map::parameters_, &a8, &a9, &p9, ::java::util::t_Map::parameters_, &a10))
          {
            INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.addFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFile", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.addFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SegmentInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_getAttributes(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getId(t_SegmentInfo *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getId());
          return result.wrap();
        }

        static PyObject *t_SegmentInfo_getIndexSort(t_SegmentInfo *self)
        {
          ::org::apache::lucene::search::Sort result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getMinVersion(t_SegmentInfo *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getMinVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SegmentInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SegmentInfo_maxDoc(t_SegmentInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCodec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.setFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(PY_TYPE(SegmentInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_SegmentInfo_get__attributes(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__id(t_SegmentInfo *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getId());
          return value.wrap();
        }

        static PyObject *t_SegmentInfo_get__indexSort(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::search::Sort value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__minVersion(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getMinVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DropIfFlaggedFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DropIfFlaggedFilter::class$ = NULL;
          jmethodID *DropIfFlaggedFilter::mids$ = NULL;
          bool DropIfFlaggedFilter::live$ = false;

          jclass DropIfFlaggedFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DropIfFlaggedFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DropIfFlaggedFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DropIfFlaggedFilter_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DropIfFlaggedFilter__methods_[] = {
            DECLARE_METHOD(t_DropIfFlaggedFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DropIfFlaggedFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DropIfFlaggedFilter)[] = {
            { Py_tp_methods, t_DropIfFlaggedFilter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DropIfFlaggedFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(DropIfFlaggedFilter, t_DropIfFlaggedFilter, DropIfFlaggedFilter);

          void t_DropIfFlaggedFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DropIfFlaggedFilter), &PY_TYPE_DEF(DropIfFlaggedFilter), module, "DropIfFlaggedFilter", 0);
          }

          void t_DropIfFlaggedFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilter), "class_", make_descriptor(DropIfFlaggedFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilter), "wrapfn_", make_descriptor(t_DropIfFlaggedFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DropIfFlaggedFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DropIfFlaggedFilter::initializeClass, 1)))
              return NULL;
            return t_DropIfFlaggedFilter::wrap_Object(DropIfFlaggedFilter(((t_DropIfFlaggedFilter *) arg)->object.this$));
          }
          static PyObject *t_DropIfFlaggedFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DropIfFlaggedFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {

          ::java::lang::Class *OrdsSegmentTermsEnum::class$ = NULL;
          jmethodID *OrdsSegmentTermsEnum::mids$ = NULL;
          bool OrdsSegmentTermsEnum::live$ = false;

          jclass OrdsSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OrdsSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::ImpactsEnum OrdsSegmentTermsEnum::impacts(jint a0) const
          {
            return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
          }

          ::org::apache::lucene::util::BytesRef OrdsSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          jlong OrdsSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::index::PostingsEnum OrdsSegmentTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus OrdsSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
          }

          jboolean OrdsSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
          }

          void OrdsSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
          }

          void OrdsSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::BytesRef OrdsSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::index::TermState OrdsSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
          }

          ::java::lang::String OrdsSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong OrdsSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {
          static PyObject *t_OrdsSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdsSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdsSegmentTermsEnum_docFreq(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_impacts(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_next(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_ord(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_postings(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_seekCeil(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_seekExact(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_term(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_termState(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_toString(t_OrdsSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_OrdsSegmentTermsEnum_totalTermFreq(t_OrdsSegmentTermsEnum *self, PyObject *args);

          static PyMethodDef t_OrdsSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, impacts, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, postings, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_OrdsSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdsSegmentTermsEnum)[] = {
            { Py_tp_methods, t_OrdsSegmentTermsEnum__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_OrdsSegmentTermsEnum *)) get_next< t_OrdsSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdsSegmentTermsEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::BaseTermsEnum),
            NULL
          };

          DEFINE_TYPE(OrdsSegmentTermsEnum, t_OrdsSegmentTermsEnum, OrdsSegmentTermsEnum);

          void t_OrdsSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdsSegmentTermsEnum), &PY_TYPE_DEF(OrdsSegmentTermsEnum), module, "OrdsSegmentTermsEnum", 0);
          }

          void t_OrdsSegmentTermsEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsSegmentTermsEnum), "class_", make_descriptor(OrdsSegmentTermsEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsSegmentTermsEnum), "wrapfn_", make_descriptor(t_OrdsSegmentTermsEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsSegmentTermsEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdsSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdsSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_OrdsSegmentTermsEnum::wrap_Object(OrdsSegmentTermsEnum(((t_OrdsSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_OrdsSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdsSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OrdsSegmentTermsEnum_docFreq(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_impacts(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.impacts(a0));
              return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "impacts", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_next(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_ord(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_postings(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.postings(a0, a1));
              return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "postings", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_seekCeil(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_seekExact(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_term(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_termState(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_toString(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OrdsSegmentTermsEnum_totalTermFreq(t_OrdsSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(OrdsSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiPostingsEnum.h"
#include "org/apache/lucene/index/MultiPostingsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MultiPostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiPostingsEnum::class$ = NULL;
        jmethodID *MultiPostingsEnum::mids$ = NULL;
        bool MultiPostingsEnum::live$ = false;

        jclass MultiPostingsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiPostingsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_86f36fcc4e752960] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_94de085e6df95ec4] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_9972fcc56b44e79d] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_6a22e46343c8a832] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiPostingsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_reset_d0c48b3ebbefc2e6] = env->getMethodID(cls, "reset", "([Lorg/apache/lucene/index/MultiPostingsEnum$EnumWithSlice;I)Lorg/apache/lucene/index/MultiPostingsEnum;");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPostingsEnum::MultiPostingsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::PostingsEnum(env->newObject(initializeClass, &mids$, mid_init$_86f36fcc4e752960, a0.this$, a1)) {}

        jint MultiPostingsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean MultiPostingsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_94de085e6df95ec4], a0.this$);
        }

        jlong MultiPostingsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint MultiPostingsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint MultiPostingsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jint MultiPostingsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
        }

        jint MultiPostingsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef MultiPostingsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
        }

        JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice > MultiPostingsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_6a22e46343c8a832]));
        }

        jint MultiPostingsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint MultiPostingsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_9972fcc56b44e79d]);
        }

        MultiPostingsEnum MultiPostingsEnum::reset(const JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice > & a0, jint a1) const
        {
          return MultiPostingsEnum(env->callObjectMethod(this$, mids$[mid_reset_d0c48b3ebbefc2e6], a0.this$, a1));
        }

        jint MultiPostingsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }

        ::java::lang::String MultiPostingsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiPostingsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPostingsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPostingsEnum_init_(t_MultiPostingsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPostingsEnum_advance(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_canReuse(t_MultiPostingsEnum *self, PyObject *arg);
        static PyObject *t_MultiPostingsEnum_cost(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_docID(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_endOffset(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_freq(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_getNumSubs(t_MultiPostingsEnum *self);
        static PyObject *t_MultiPostingsEnum_getPayload(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_getSubs(t_MultiPostingsEnum *self);
        static PyObject *t_MultiPostingsEnum_nextDoc(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_nextPosition(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_reset(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_startOffset(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_toString(t_MultiPostingsEnum *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum_get__numSubs(t_MultiPostingsEnum *self, void *data);
        static PyObject *t_MultiPostingsEnum_get__payload(t_MultiPostingsEnum *self, void *data);
        static PyObject *t_MultiPostingsEnum_get__subs(t_MultiPostingsEnum *self, void *data);
        static PyGetSetDef t_MultiPostingsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPostingsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiPostingsEnum, payload),
          DECLARE_GET_FIELD(t_MultiPostingsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPostingsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiPostingsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPostingsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPostingsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiPostingsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, reset, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, startOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiPostingsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiPostingsEnum)[] = {
          { Py_tp_methods, t_MultiPostingsEnum__methods_ },
          { Py_tp_init, (void *) t_MultiPostingsEnum_init_ },
          { Py_tp_getset, t_MultiPostingsEnum__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiPostingsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::PostingsEnum),
          NULL
        };

        DEFINE_TYPE(MultiPostingsEnum, t_MultiPostingsEnum, MultiPostingsEnum);

        void t_MultiPostingsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPostingsEnum), &PY_TYPE_DEF(MultiPostingsEnum), module, "MultiPostingsEnum", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum), "EnumWithSlice", make_descriptor(&PY_TYPE_DEF(MultiPostingsEnum$EnumWithSlice)));
        }

        void t_MultiPostingsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum), "class_", make_descriptor(MultiPostingsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum), "wrapfn_", make_descriptor(t_MultiPostingsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPostingsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPostingsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiPostingsEnum::wrap_Object(MultiPostingsEnum(((t_MultiPostingsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiPostingsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPostingsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPostingsEnum_init_(t_MultiPostingsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiPostingsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiPostingsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiPostingsEnum_advance(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_canReuse(t_MultiPostingsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiPostingsEnum_cost(t_MultiPostingsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_docID(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_endOffset(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_freq(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_getNumSubs(t_MultiPostingsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiPostingsEnum_getPayload(t_MultiPostingsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_getSubs(t_MultiPostingsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiPostingsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiPostingsEnum_nextDoc(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_nextPosition(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_reset(t_MultiPostingsEnum *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice > a0((jobject) NULL);
          jint a1;
          MultiPostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.reset(a0, a1));
            return t_MultiPostingsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_MultiPostingsEnum_startOffset(t_MultiPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_toString(t_MultiPostingsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPostingsEnum_get__numSubs(t_MultiPostingsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MultiPostingsEnum_get__payload(t_MultiPostingsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiPostingsEnum_get__subs(t_MultiPostingsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiPostingsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiPostingsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrBuilder::class$ = NULL;
            jmethodID *SpanOrBuilder::mids$ = NULL;
            bool SpanOrBuilder::live$ = false;

            jclass SpanOrBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a59cd39e7afcbd2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrBuilder::SpanOrBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_a59cd39e7afcbd2c, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanOrBuilder)[] = {
              { Py_tp_methods, t_SpanOrBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanOrBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanOrBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanOrBuilder, t_SpanOrBuilder, SpanOrBuilder);

            void t_SpanOrBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrBuilder), &PY_TYPE_DEF(SpanOrBuilder), module, "SpanOrBuilder", 0);
            }

            void t_SpanOrBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrBuilder), "class_", make_descriptor(SpanOrBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrBuilder), "wrapfn_", make_descriptor(t_SpanOrBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrBuilder::wrap_Object(SpanOrBuilder(((t_SpanOrBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanOrBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader::class$ = NULL;
        jmethodID *FilterDirectoryReader::mids$ = NULL;
        bool FilterDirectoryReader::live$ = false;

        jclass FilterDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_70267027c6eda7f7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper;)V");
            mids$[mid_getDelegate_f2740abbecd1a98f] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getIndexCommit_4abaa8d830d8ecf1] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_2e5ae9edcb9b072f] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_8454bd5aa23fd11e] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_unwrap_bfd9949da06c4860] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doOpenIfChanged_f2740abbecd1a98f] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_6b4aca5e21cc99e9] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_f2a35b536582c7c2] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doWrapDirectoryReader_bfd9949da06c4860] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper & a1) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_70267027c6eda7f7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::DirectoryReader FilterDirectoryReader::getDelegate() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getDelegate_f2740abbecd1a98f]));
        }

        ::org::apache::lucene::index::IndexCommit FilterDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_4abaa8d830d8ecf1]));
        }

        jlong FilterDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_2e5ae9edcb9b072f]);
        }

        jboolean FilterDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::DirectoryReader FilterDirectoryReader::unwrap(const ::org::apache::lucene::index::DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_bfd9949da06c4860], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args);
        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader_getDelegate(t_FilterDirectoryReader *self);
        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__delegate(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader, current),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, delegate),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, version),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, isCurrent, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterDirectoryReader)[] = {
          { Py_tp_methods, t_FilterDirectoryReader__methods_ },
          { Py_tp_init, (void *) t_FilterDirectoryReader_init_ },
          { Py_tp_getset, t_FilterDirectoryReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterDirectoryReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DirectoryReader),
          NULL
        };

        DEFINE_TYPE(FilterDirectoryReader, t_FilterDirectoryReader, FilterDirectoryReader);
        PyObject *t_FilterDirectoryReader::wrap_Object(const FilterDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader), &PY_TYPE_DEF(FilterDirectoryReader), module, "FilterDirectoryReader", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader), "SubReaderWrapper", make_descriptor(&PY_TYPE_DEF(FilterDirectoryReader$SubReaderWrapper)));
        }

        void t_FilterDirectoryReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader), "class_", make_descriptor(FilterDirectoryReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader), "wrapfn_", make_descriptor(t_FilterDirectoryReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectoryReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader::wrap_Object(FilterDirectoryReader(((t_FilterDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper a1((jobject) NULL);
          PyTypeObject **p1;
          FilterDirectoryReader object((jobject) NULL);

          if (!parseArgs(args, "KK", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1, &p1, ::org::apache::lucene::index::t_FilterDirectoryReader$SubReaderWrapper::parameters_))
          {
            INT_CALL(object = FilterDirectoryReader(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterDirectoryReader_getDelegate(t_FilterDirectoryReader *self)
        {
          ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
        }

        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterDirectoryReader::unwrap(a0));
            return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FilterDirectoryReader_get__delegate(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerFactory::class$ = NULL;
          jmethodID *StandardTokenizerFactory::mids$ = NULL;
          bool StandardTokenizerFactory::live$ = false;
          ::java::lang::String *StandardTokenizerFactory::NAME = NULL;

          jclass StandardTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7c71a2e91b19db9d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/standard/StandardTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerFactory::StandardTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardTokenizer StandardTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::standard::StandardTokenizer(env->callObjectMethod(this$, mids$[mid_create_7c71a2e91b19db9d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_StandardTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StandardTokenizerFactory)[] = {
            { Py_tp_methods, t_StandardTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_StandardTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StandardTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(StandardTokenizerFactory, t_StandardTokenizerFactory, StandardTokenizerFactory);

          void t_StandardTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerFactory), &PY_TYPE_DEF(StandardTokenizerFactory), module, "StandardTokenizerFactory", 0);
          }

          void t_StandardTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerFactory), "class_", make_descriptor(StandardTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerFactory), "wrapfn_", make_descriptor(t_StandardTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerFactory), "NAME", make_descriptor(j2p(*StandardTokenizerFactory::NAME)));
          }

          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerFactory::wrap_Object(StandardTokenizerFactory(((t_StandardTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_StandardTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(StandardTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Membership::class$ = NULL;
          jmethodID *Membership::mids$ = NULL;
          bool Membership::live$ = false;

          jclass Membership::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Membership");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isWithin_ac70289ee56608c0] = env->getMethodID(cls, "isWithin", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_isWithin_5afbc0f2c6478de6] = env->getMethodID(cls, "isWithin", "(DDD)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Membership::isWithin(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_ac70289ee56608c0], a0.this$);
          }

          jboolean Membership::isWithin(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_5afbc0f2c6478de6], a0, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Membership_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Membership_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Membership_isWithin(t_Membership *self, PyObject *args);

          static PyMethodDef t_Membership__methods_[] = {
            DECLARE_METHOD(t_Membership, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Membership, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Membership, isWithin, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Membership)[] = {
            { Py_tp_methods, t_Membership__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Membership)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Membership, t_Membership, Membership);

          void t_Membership::install(PyObject *module)
          {
            installType(&PY_TYPE(Membership), &PY_TYPE_DEF(Membership), module, "Membership", 0);
          }

          void t_Membership::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Membership), "class_", make_descriptor(Membership::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Membership), "wrapfn_", make_descriptor(t_Membership::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Membership), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Membership_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Membership::initializeClass, 1)))
              return NULL;
            return t_Membership::wrap_Object(Membership(((t_Membership *) arg)->object.this$));
          }
          static PyObject *t_Membership_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Membership::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Membership_isWithin(t_Membership *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.isWithin(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.isWithin(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isWithin", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/DecimalDigitFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *DecimalDigitFilter::class$ = NULL;
          jmethodID *DecimalDigitFilter::mids$ = NULL;
          bool DecimalDigitFilter::live$ = false;

          jclass DecimalDigitFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/DecimalDigitFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DecimalDigitFilter::DecimalDigitFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean DecimalDigitFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_DecimalDigitFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DecimalDigitFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DecimalDigitFilter_init_(t_DecimalDigitFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DecimalDigitFilter_incrementToken(t_DecimalDigitFilter *self, PyObject *args);

          static PyMethodDef t_DecimalDigitFilter__methods_[] = {
            DECLARE_METHOD(t_DecimalDigitFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecimalDigitFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecimalDigitFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DecimalDigitFilter)[] = {
            { Py_tp_methods, t_DecimalDigitFilter__methods_ },
            { Py_tp_init, (void *) t_DecimalDigitFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DecimalDigitFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(DecimalDigitFilter, t_DecimalDigitFilter, DecimalDigitFilter);

          void t_DecimalDigitFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DecimalDigitFilter), &PY_TYPE_DEF(DecimalDigitFilter), module, "DecimalDigitFilter", 0);
          }

          void t_DecimalDigitFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilter), "class_", make_descriptor(DecimalDigitFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilter), "wrapfn_", make_descriptor(t_DecimalDigitFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DecimalDigitFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DecimalDigitFilter::initializeClass, 1)))
              return NULL;
            return t_DecimalDigitFilter::wrap_Object(DecimalDigitFilter(((t_DecimalDigitFilter *) arg)->object.this$));
          }
          static PyObject *t_DecimalDigitFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DecimalDigitFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DecimalDigitFilter_init_(t_DecimalDigitFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            DecimalDigitFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = DecimalDigitFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DecimalDigitFilter_incrementToken(t_DecimalDigitFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DecimalDigitFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *ConstantScoreQueryBuilder::class$ = NULL;
            jmethodID *ConstantScoreQueryBuilder::mids$ = NULL;
            bool ConstantScoreQueryBuilder::live$ = false;

            jclass ConstantScoreQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e9666cbd1a71cdf4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilderFactory;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstantScoreQueryBuilder::ConstantScoreQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilderFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e9666cbd1a71cdf4, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ConstantScoreQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ConstantScoreQueryBuilder)[] = {
              { Py_tp_methods, t_ConstantScoreQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_ConstantScoreQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ConstantScoreQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder, ConstantScoreQueryBuilder);

            void t_ConstantScoreQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstantScoreQueryBuilder), &PY_TYPE_DEF(ConstantScoreQueryBuilder), module, "ConstantScoreQueryBuilder", 0);
            }

            void t_ConstantScoreQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQueryBuilder), "class_", make_descriptor(ConstantScoreQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQueryBuilder), "wrapfn_", make_descriptor(t_ConstantScoreQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_ConstantScoreQueryBuilder::wrap_Object(ConstantScoreQueryBuilder(((t_ConstantScoreQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilderFactory a0((jobject) NULL);
              ConstantScoreQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilderFactory::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax::class$ = NULL;
              jmethodID *EscapeQuerySyntax::mids$ = NULL;
              bool EscapeQuerySyntax::live$ = false;

              jclass EscapeQuerySyntax::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_escape_a334820900042cef] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence EscapeQuerySyntax::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_a334820900042cef], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntax__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(EscapeQuerySyntax)[] = {
                { Py_tp_methods, t_EscapeQuerySyntax__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(EscapeQuerySyntax)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(EscapeQuerySyntax, t_EscapeQuerySyntax, EscapeQuerySyntax);

              void t_EscapeQuerySyntax::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax), &PY_TYPE_DEF(EscapeQuerySyntax), module, "EscapeQuerySyntax", 0);
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax), "Type", make_descriptor(&PY_TYPE_DEF(EscapeQuerySyntax$Type)));
              }

              void t_EscapeQuerySyntax::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax), "class_", make_descriptor(EscapeQuerySyntax::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax), "wrapfn_", make_descriptor(t_EscapeQuerySyntax::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax::wrap_Object(EscapeQuerySyntax(((t_EscapeQuerySyntax *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", ::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchNoDocsQuery::class$ = NULL;
        jmethodID *MatchNoDocsQuery::mids$ = NULL;
        bool MatchNoDocsQuery::live$ = false;

        jclass MatchNoDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchNoDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchNoDocsQuery::MatchNoDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        MatchNoDocsQuery::MatchNoDocsQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::org::apache::lucene::search::Weight MatchNoDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean MatchNoDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint MatchNoDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String MatchNoDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void MatchNoDocsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchNoDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchNoDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchNoDocsQuery_init_(t_MatchNoDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchNoDocsQuery_createWeight(t_MatchNoDocsQuery *self, PyObject *args);
        static PyObject *t_MatchNoDocsQuery_equals(t_MatchNoDocsQuery *self, PyObject *args);
        static PyObject *t_MatchNoDocsQuery_hashCode(t_MatchNoDocsQuery *self, PyObject *args);
        static PyObject *t_MatchNoDocsQuery_toString(t_MatchNoDocsQuery *self, PyObject *args);
        static PyObject *t_MatchNoDocsQuery_visit(t_MatchNoDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchNoDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchNoDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchNoDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchNoDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchNoDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchNoDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchNoDocsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_MatchNoDocsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MatchNoDocsQuery)[] = {
          { Py_tp_methods, t_MatchNoDocsQuery__methods_ },
          { Py_tp_init, (void *) t_MatchNoDocsQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MatchNoDocsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(MatchNoDocsQuery, t_MatchNoDocsQuery, MatchNoDocsQuery);

        void t_MatchNoDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchNoDocsQuery), &PY_TYPE_DEF(MatchNoDocsQuery), module, "MatchNoDocsQuery", 0);
        }

        void t_MatchNoDocsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQuery), "class_", make_descriptor(MatchNoDocsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQuery), "wrapfn_", make_descriptor(t_MatchNoDocsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchNoDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchNoDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchNoDocsQuery::wrap_Object(MatchNoDocsQuery(((t_MatchNoDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchNoDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchNoDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchNoDocsQuery_init_(t_MatchNoDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MatchNoDocsQuery object((jobject) NULL);

              INT_CALL(object = MatchNoDocsQuery());
              self->object = object;
              break;
            }
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MatchNoDocsQuery object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MatchNoDocsQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MatchNoDocsQuery_createWeight(t_MatchNoDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MatchNoDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchNoDocsQuery_equals(t_MatchNoDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MatchNoDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchNoDocsQuery_hashCode(t_MatchNoDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MatchNoDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchNoDocsQuery_toString(t_MatchNoDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(MatchNoDocsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MatchNoDocsQuery_visit(t_MatchNoDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MatchNoDocsQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/NumericComparator.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *NumericComparator::class$ = NULL;
          jmethodID *NumericComparator::mids$ = NULL;
          bool NumericComparator::live$ = false;

          jclass NumericComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/NumericComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_disableSkipping_f2cc1bce94666404] = env->getMethodID(cls, "disableSkipping", "()V");
              mids$[mid_setSingleSort_f2cc1bce94666404] = env->getMethodID(cls, "setSingleSort", "()V");
              mids$[mid_setTopValue_f5ecd8f3b63e12f5] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Number;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void NumericComparator::disableSkipping() const
          {
            env->callVoidMethod(this$, mids$[mid_disableSkipping_f2cc1bce94666404]);
          }

          void NumericComparator::setSingleSort() const
          {
            env->callVoidMethod(this$, mids$[mid_setSingleSort_f2cc1bce94666404]);
          }

          void NumericComparator::setTopValue(const ::java::lang::Number & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_f5ecd8f3b63e12f5], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_NumericComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericComparator_of_(t_NumericComparator *self, PyObject *args);
          static PyObject *t_NumericComparator_disableSkipping(t_NumericComparator *self, PyObject *args);
          static PyObject *t_NumericComparator_setSingleSort(t_NumericComparator *self, PyObject *args);
          static PyObject *t_NumericComparator_setTopValue(t_NumericComparator *self, PyObject *args);
          static int t_NumericComparator_set__topValue(t_NumericComparator *self, PyObject *arg, void *data);
          static PyObject *t_NumericComparator_get__parameters_(t_NumericComparator *self, void *data);
          static PyGetSetDef t_NumericComparator__fields_[] = {
            DECLARE_SET_FIELD(t_NumericComparator, topValue),
            DECLARE_GET_FIELD(t_NumericComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NumericComparator__methods_[] = {
            DECLARE_METHOD(t_NumericComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_NumericComparator, disableSkipping, METH_VARARGS),
            DECLARE_METHOD(t_NumericComparator, setSingleSort, METH_VARARGS),
            DECLARE_METHOD(t_NumericComparator, setTopValue, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NumericComparator)[] = {
            { Py_tp_methods, t_NumericComparator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_NumericComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NumericComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
            NULL
          };

          DEFINE_TYPE(NumericComparator, t_NumericComparator, NumericComparator);
          PyObject *t_NumericComparator::wrap_Object(const NumericComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NumericComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NumericComparator *self = (t_NumericComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NumericComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NumericComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NumericComparator *self = (t_NumericComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NumericComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericComparator), &PY_TYPE_DEF(NumericComparator), module, "NumericComparator", 0);
          }

          void t_NumericComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator), "class_", make_descriptor(NumericComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator), "wrapfn_", make_descriptor(t_NumericComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericComparator::initializeClass, 1)))
              return NULL;
            return t_NumericComparator::wrap_Object(NumericComparator(((t_NumericComparator *) arg)->object.this$));
          }
          static PyObject *t_NumericComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NumericComparator_of_(t_NumericComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NumericComparator_disableSkipping(t_NumericComparator *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.disableSkipping());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NumericComparator), (PyObject *) self, "disableSkipping", args, 2);
          }

          static PyObject *t_NumericComparator_setSingleSort(t_NumericComparator *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.setSingleSort());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NumericComparator), (PyObject *) self, "setSingleSort", args, 2);
          }

          static PyObject *t_NumericComparator_setTopValue(t_NumericComparator *self, PyObject *args)
          {
            ::java::lang::Number a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Number), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NumericComparator), (PyObject *) self, "setTopValue", args, 2);
          }
          static PyObject *t_NumericComparator_get__parameters_(t_NumericComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_NumericComparator_set__topValue(t_NumericComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Number value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Number), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CachingTokenFilter::class$ = NULL;
        jmethodID *CachingTokenFilter::mids$ = NULL;
        bool CachingTokenFilter::live$ = false;

        jclass CachingTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CachingTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_isCached_8454bd5aa23fd11e] = env->getMethodID(cls, "isCached", "()Z");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingTokenFilter::CachingTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        void CachingTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        jboolean CachingTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
        }

        jboolean CachingTokenFilter::isCached() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCached_8454bd5aa23fd11e]);
        }

        void CachingTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_isCached(t_CachingTokenFilter *self);
        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_get__cached(t_CachingTokenFilter *self, void *data);
        static PyGetSetDef t_CachingTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_CachingTokenFilter, cached),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingTokenFilter__methods_[] = {
          DECLARE_METHOD(t_CachingTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, isCached, METH_NOARGS),
          DECLARE_METHOD(t_CachingTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CachingTokenFilter)[] = {
          { Py_tp_methods, t_CachingTokenFilter__methods_ },
          { Py_tp_init, (void *) t_CachingTokenFilter_init_ },
          { Py_tp_getset, t_CachingTokenFilter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CachingTokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
          NULL
        };

        DEFINE_TYPE(CachingTokenFilter, t_CachingTokenFilter, CachingTokenFilter);

        void t_CachingTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingTokenFilter), &PY_TYPE_DEF(CachingTokenFilter), module, "CachingTokenFilter", 0);
        }

        void t_CachingTokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingTokenFilter), "class_", make_descriptor(CachingTokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingTokenFilter), "wrapfn_", make_descriptor(t_CachingTokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingTokenFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingTokenFilter::initializeClass, 1)))
            return NULL;
          return t_CachingTokenFilter::wrap_Object(CachingTokenFilter(((t_CachingTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          CachingTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = CachingTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CachingTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CachingTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_CachingTokenFilter_isCached(t_CachingTokenFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCached());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CachingTokenFilter), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_CachingTokenFilter_get__cached(t_CachingTokenFilter *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCached());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexInput::class$ = NULL;
        jmethodID *PythonIndexInput::mids$ = NULL;
        bool PythonIndexInput::live$ = false;

        jclass PythonIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_605be02e51b1fbf8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_clone_93fa6f10fba0eb8c] = env->getMethodID(cls, "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_readInternal_bbbb62d8b24c0c26] = env->getMethodID(cls, "readInternal", "(IJ)[B");
            mids$[mid_seekInternal_9c778c9bce6694df] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_d159d3a3e7127e81] = env->getMethodID(cls, "readInternal", "(Ljava/nio/ByteBuffer;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_605be02e51b1fbf8, a0.this$, a1.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        PythonIndexInput PythonIndexInput::clone() const
        {
          return PythonIndexInput(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::store::BufferedIndexInput::class$->this$, ::org::apache::lucene::store::BufferedIndexInput::mids$[::org::apache::lucene::store::BufferedIndexInput::mid_clone_34606e0c8dd07fbf]));
        }

        void PythonIndexInput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonIndexInput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonIndexInput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg);
        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self);
        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args);
        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1);
        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0);
        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data);
        static PyGetSetDef t_PythonIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexInput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexInput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, clone, METH_O),
          DECLARE_METHOD(t_PythonIndexInput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexInput, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonIndexInput)[] = {
          { Py_tp_methods, t_PythonIndexInput__methods_ },
          { Py_tp_init, (void *) t_PythonIndexInput_init_ },
          { Py_tp_getset, t_PythonIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::BufferedIndexInput),
          NULL
        };

        DEFINE_TYPE(PythonIndexInput, t_PythonIndexInput, PythonIndexInput);

        void t_PythonIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexInput), &PY_TYPE_DEF(PythonIndexInput), module, "PythonIndexInput", 1);
        }

        void t_PythonIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexInput), "class_", make_descriptor(PythonIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexInput), "wrapfn_", make_descriptor(t_PythonIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexInput), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexInput::initializeClass);
          JNINativeMethod methods[] = {
            { "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;", (void *) t_PythonIndexInput_clone0 },
            { "close", "()V", (void *) t_PythonIndexInput_close1 },
            { "length", "()J", (void *) t_PythonIndexInput_length2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexInput_pythonDecRef3 },
            { "readInternal", "(IJ)[B", (void *) t_PythonIndexInput_readInternal4 },
            { "seekInternal", "(J)V", (void *) t_PythonIndexInput_seekInternal5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexInput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexInput::wrap_Object(PythonIndexInput(((t_PythonIndexInput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = PythonIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg)
        {
          PythonIndexInput result((jobject) NULL);

          if (arg)
          {
            OBJ_CALL(result = self->object.clone());

            PythonIndexInput object(result.this$);
            if (PyObject_TypeCheck(arg, PY_TYPE(FinalizerProxy)) &&
                PyObject_TypeCheck(((t_fp *) arg)->object, Py_TYPE(self)))
            {
              PyObject *_arg = ((t_fp *) arg)->object;
              ((t_JObject *) _arg)->object = object;
              Py_INCREF(_arg);
              object.pythonExtension((jlong) (Py_intptr_t) (void *) _arg);
              Py_INCREF(arg);
              return arg;
            }
            return PyErr_SetArgsError("clone", arg);
          }

          return callSuper(PY_TYPE(PythonIndexInput), (PyObject *) self, "clone", arg, 1);
        }

        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PythonIndexInput value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "clone", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", PythonIndexInput::initializeClass, &value))
          {
            throwTypeError("clone", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "length", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("length", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< jbyte > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "readInternal", "iL", (int) a0, (long long) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[B", &value))
          {
            throwTypeError("readInternal", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "seekInternal", "L", (long long) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FutureObjects.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FutureObjects::class$ = NULL;
        jmethodID *FutureObjects::mids$ = NULL;
        bool FutureObjects::live$ = false;

        jclass FutureObjects::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FutureObjects");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkFromIndexSize_5b9a30c564891466] = env->getStaticMethodID(cls, "checkFromIndexSize", "(III)I");
            mids$[mid_checkFromToIndex_5b9a30c564891466] = env->getStaticMethodID(cls, "checkFromToIndex", "(III)I");
            mids$[mid_checkIndex_57a58545eba514db] = env->getStaticMethodID(cls, "checkIndex", "(II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FutureObjects::checkFromIndexSize(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkFromIndexSize_5b9a30c564891466], a0, a1, a2);
        }

        jint FutureObjects::checkFromToIndex(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkFromToIndex_5b9a30c564891466], a0, a1, a2);
        }

        jint FutureObjects::checkIndex(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkIndex_57a58545eba514db], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FutureObjects_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FutureObjects_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FutureObjects_checkFromIndexSize(PyTypeObject *type, PyObject *args);
        static PyObject *t_FutureObjects_checkFromToIndex(PyTypeObject *type, PyObject *args);
        static PyObject *t_FutureObjects_checkIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FutureObjects__methods_[] = {
          DECLARE_METHOD(t_FutureObjects, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FutureObjects, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FutureObjects, checkFromIndexSize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FutureObjects, checkFromToIndex, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FutureObjects, checkIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FutureObjects)[] = {
          { Py_tp_methods, t_FutureObjects__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FutureObjects)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FutureObjects, t_FutureObjects, FutureObjects);

        void t_FutureObjects::install(PyObject *module)
        {
          installType(&PY_TYPE(FutureObjects), &PY_TYPE_DEF(FutureObjects), module, "FutureObjects", 0);
        }

        void t_FutureObjects::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureObjects), "class_", make_descriptor(FutureObjects::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureObjects), "wrapfn_", make_descriptor(t_FutureObjects::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureObjects), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FutureObjects_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FutureObjects::initializeClass, 1)))
            return NULL;
          return t_FutureObjects::wrap_Object(FutureObjects(((t_FutureObjects *) arg)->object.this$));
        }
        static PyObject *t_FutureObjects_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FutureObjects::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FutureObjects_checkFromIndexSize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FutureObjects::checkFromIndexSize(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkFromIndexSize", args);
          return NULL;
        }

        static PyObject *t_FutureObjects_checkFromToIndex(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FutureObjects::checkFromToIndex(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkFromToIndex", args);
          return NULL;
        }

        static PyObject *t_FutureObjects_checkIndex(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FutureObjects::checkIndex(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SingleTermsEnum::class$ = NULL;
        jmethodID *SingleTermsEnum::mids$ = NULL;
        bool SingleTermsEnum::live$ = false;

        jclass SingleTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SingleTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fd97f2c261e0cf40] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_dc5d5822c627e12a] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleTermsEnum::SingleTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_fd97f2c261e0cf40, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SingleTermsEnum__methods_[] = {
          DECLARE_METHOD(t_SingleTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SingleTermsEnum)[] = {
          { Py_tp_methods, t_SingleTermsEnum__methods_ },
          { Py_tp_init, (void *) t_SingleTermsEnum_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SingleTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilteredTermsEnum),
          NULL
        };

        DEFINE_TYPE(SingleTermsEnum, t_SingleTermsEnum, SingleTermsEnum);

        void t_SingleTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleTermsEnum), &PY_TYPE_DEF(SingleTermsEnum), module, "SingleTermsEnum", 0);
        }

        void t_SingleTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleTermsEnum), "class_", make_descriptor(SingleTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleTermsEnum), "wrapfn_", make_descriptor(t_SingleTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleTermsEnum::initializeClass, 1)))
            return NULL;
          return t_SingleTermsEnum::wrap_Object(SingleTermsEnum(((t_SingleTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SingleTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SingleTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptCompiler.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptCompiler::class$ = NULL;
          jmethodID *JavascriptCompiler::mids$ = NULL;
          bool JavascriptCompiler::live$ = false;

          jclass JavascriptCompiler::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptCompiler");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compile_861d7a9e7f6eeaec] = env->getStaticMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/Expression;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::expressions::Expression JavascriptCompiler::compile(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::expressions::Expression(env->callStaticObjectMethod(cls, mids$[mid_compile_861d7a9e7f6eeaec], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_JavascriptCompiler__methods_[] = {
            DECLARE_METHOD(t_JavascriptCompiler, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, compile, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptCompiler)[] = {
            { Py_tp_methods, t_JavascriptCompiler__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptCompiler)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(JavascriptCompiler, t_JavascriptCompiler, JavascriptCompiler);

          void t_JavascriptCompiler::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptCompiler), &PY_TYPE_DEF(JavascriptCompiler), module, "JavascriptCompiler", 0);
          }

          void t_JavascriptCompiler::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptCompiler), "class_", make_descriptor(JavascriptCompiler::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptCompiler), "wrapfn_", make_descriptor(t_JavascriptCompiler::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptCompiler), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptCompiler::initializeClass, 1)))
              return NULL;
            return t_JavascriptCompiler::wrap_Object(JavascriptCompiler(((t_JavascriptCompiler *) arg)->object.this$));
          }
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptCompiler::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::expressions::Expression result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::JavascriptCompiler::compile(a0));
              return ::org::apache::lucene::expressions::t_Expression::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "compile", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilderFactory::class$ = NULL;
            jmethodID *SpanQueryBuilderFactory::mids$ = NULL;
            bool SpanQueryBuilderFactory::live$ = false;

            jclass SpanQueryBuilderFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addBuilder_d2478634f7897389] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanQueryBuilderFactory::SpanQueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void SpanQueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addBuilder_d2478634f7897389], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args);

            static PyMethodDef t_SpanQueryBuilderFactory__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilderFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, addBuilder, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanQueryBuilderFactory)[] = {
              { Py_tp_methods, t_SpanQueryBuilderFactory__methods_ },
              { Py_tp_init, (void *) t_SpanQueryBuilderFactory_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanQueryBuilderFactory)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(SpanQueryBuilderFactory, t_SpanQueryBuilderFactory, SpanQueryBuilderFactory);

            void t_SpanQueryBuilderFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilderFactory), &PY_TYPE_DEF(SpanQueryBuilderFactory), module, "SpanQueryBuilderFactory", 0);
            }

            void t_SpanQueryBuilderFactory::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilderFactory), "class_", make_descriptor(SpanQueryBuilderFactory::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilderFactory), "wrapfn_", make_descriptor(t_SpanQueryBuilderFactory::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilderFactory), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilderFactory::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilderFactory::wrap_Object(SpanQueryBuilderFactory(((t_SpanQueryBuilderFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilderFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds)
            {
              SpanQueryBuilderFactory object((jobject) NULL);

              INT_CALL(object = SpanQueryBuilderFactory());
              self->object = object;

              return 0;
            }

            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addBuilder(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValuesIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValuesIterator::class$ = NULL;
        jmethodID *DocValuesIterator::mids$ = NULL;
        bool DocValuesIterator::live$ = false;

        jclass DocValuesIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValuesIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean DocValuesIterator::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValuesIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesIterator_advanceExact(t_DocValuesIterator *self, PyObject *arg);

        static PyMethodDef t_DocValuesIterator__methods_[] = {
          DECLARE_METHOD(t_DocValuesIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesIterator, advanceExact, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesIterator)[] = {
          { Py_tp_methods, t_DocValuesIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesIterator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(DocValuesIterator, t_DocValuesIterator, DocValuesIterator);

        void t_DocValuesIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesIterator), &PY_TYPE_DEF(DocValuesIterator), module, "DocValuesIterator", 0);
        }

        void t_DocValuesIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesIterator), "class_", make_descriptor(DocValuesIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesIterator), "wrapfn_", make_descriptor(t_DocValuesIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesIterator::initializeClass, 1)))
            return NULL;
          return t_DocValuesIterator::wrap_Object(DocValuesIterator(((t_DocValuesIterator *) arg)->object.this$));
        }
        static PyObject *t_DocValuesIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesIterator_advanceExact(t_DocValuesIterator *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "advanceExact", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedWriter::class$ = NULL;
          jmethodID *MonotonicBlockPackedWriter::mids$ = NULL;
          bool MonotonicBlockPackedWriter::live$ = false;

          jclass MonotonicBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_18f961b5c3a68dc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_9c778c9bce6694df] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicBlockPackedWriter::MonotonicBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_18f961b5c3a68dc0, a0.this$, a1)) {}

          void MonotonicBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MonotonicBlockPackedWriter)[] = {
            { Py_tp_methods, t_MonotonicBlockPackedWriter__methods_ },
            { Py_tp_init, (void *) t_MonotonicBlockPackedWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MonotonicBlockPackedWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::AbstractBlockPackedWriter),
            NULL
          };

          DEFINE_TYPE(MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter, MonotonicBlockPackedWriter);

          void t_MonotonicBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedWriter), &PY_TYPE_DEF(MonotonicBlockPackedWriter), module, "MonotonicBlockPackedWriter", 0);
          }

          void t_MonotonicBlockPackedWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedWriter), "class_", make_descriptor(MonotonicBlockPackedWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedWriter), "wrapfn_", make_descriptor(t_MonotonicBlockPackedWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedWriter::wrap_Object(MonotonicBlockPackedWriter(((t_MonotonicBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            MonotonicBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MonotonicBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args)
          {
            jlong a0;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MonotonicBlockPackedWriter), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$DocMap::class$ = NULL;
        jmethodID *MergeState$DocMap::mids$ = NULL;
        bool MergeState$DocMap::live$ = false;

        jclass MergeState$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_1e143afe1894d213] = env->getMethodID(cls, "get", "(I)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$DocMap::MergeState$DocMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint MergeState$DocMap::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_1e143afe1894d213], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeState$DocMap_init_(t_MergeState$DocMap *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg);

        static PyMethodDef t_MergeState$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergeState$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeState$DocMap)[] = {
          { Py_tp_methods, t_MergeState$DocMap__methods_ },
          { Py_tp_init, (void *) t_MergeState$DocMap_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeState$DocMap)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergeState$DocMap, t_MergeState$DocMap, MergeState$DocMap);

        void t_MergeState$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$DocMap), &PY_TYPE_DEF(MergeState$DocMap), module, "MergeState$DocMap", 0);
        }

        void t_MergeState$DocMap::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState$DocMap), "class_", make_descriptor(MergeState$DocMap::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState$DocMap), "wrapfn_", make_descriptor(t_MergeState$DocMap::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState$DocMap), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergeState$DocMap::wrap_Object(MergeState$DocMap(((t_MergeState$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeState$DocMap_init_(t_MergeState$DocMap *self, PyObject *args, PyObject *kwds)
        {
          MergeState$DocMap object((jobject) NULL);

          INT_CALL(object = MergeState$DocMap());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataInput::class$ = NULL;
        jmethodID *DataInput::mids$ = NULL;
        bool DataInput::live$ = false;

        jclass DataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_68b5e10aafd1a740] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/DataInput;");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_2cb00acb3a58ec31] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLELongs_d07f51188c558bf8] = env->getMethodID(cls, "readLELongs", "([JII)V");
            mids$[mid_readLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readMapOfStrings_1c3426541413a55d] = env->getMethodID(cls, "readMapOfStrings", "()Ljava/util/Map;");
            mids$[mid_readSetOfStrings_7dcf4034c6d1a92a] = env->getMethodID(cls, "readSetOfStrings", "()Ljava/util/Set;");
            mids$[mid_readShort_ec20af88366b851e] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readString_db9b55ba01e03e4b] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readVInt_9972fcc56b44e79d] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_readZInt_9972fcc56b44e79d] = env->getMethodID(cls, "readZInt", "()I");
            mids$[mid_readZLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readZLong", "()J");
            mids$[mid_skipBytes_9c778c9bce6694df] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataInput::DataInput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        DataInput DataInput::clone() const
        {
          return DataInput(env->callObjectMethod(this$, mids$[mid_clone_68b5e10aafd1a740]));
        }

        jbyte DataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_2cb00acb3a58ec31], a0.this$, a1, a2, a3);
        }

        jint DataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        void DataInput::readLELongs(const JArray< jlong > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readLELongs_d07f51188c558bf8], a0.this$, a1, a2);
        }

        jlong DataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_2e5ae9edcb9b072f]);
        }

        ::java::util::Map DataInput::readMapOfStrings() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readMapOfStrings_1c3426541413a55d]));
        }

        ::java::util::Set DataInput::readSetOfStrings() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readSetOfStrings_7dcf4034c6d1a92a]));
        }

        jshort DataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_ec20af88366b851e]);
        }

        ::java::lang::String DataInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_db9b55ba01e03e4b]));
        }

        jint DataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_9972fcc56b44e79d]);
        }

        jlong DataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_2e5ae9edcb9b072f]);
        }

        jint DataInput::readZInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readZInt_9972fcc56b44e79d]);
        }

        jlong DataInput::readZLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readZLong_2e5ae9edcb9b072f]);
        }

        void DataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataInput_clone(t_DataInput *self);
        static PyObject *t_DataInput_readByte(t_DataInput *self);
        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readInt(t_DataInput *self);
        static PyObject *t_DataInput_readLELongs(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readLong(t_DataInput *self);
        static PyObject *t_DataInput_readMapOfStrings(t_DataInput *self);
        static PyObject *t_DataInput_readSetOfStrings(t_DataInput *self);
        static PyObject *t_DataInput_readShort(t_DataInput *self);
        static PyObject *t_DataInput_readString(t_DataInput *self);
        static PyObject *t_DataInput_readVInt(t_DataInput *self);
        static PyObject *t_DataInput_readVLong(t_DataInput *self);
        static PyObject *t_DataInput_readZInt(t_DataInput *self);
        static PyObject *t_DataInput_readZLong(t_DataInput *self);
        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg);

        static PyMethodDef t_DataInput__methods_[] = {
          DECLARE_METHOD(t_DataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, clone, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readByte, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readLELongs, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readMapOfStrings, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readSetOfStrings, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readShort, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readString, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readZInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readZLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, skipBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DataInput)[] = {
          { Py_tp_methods, t_DataInput__methods_ },
          { Py_tp_init, (void *) t_DataInput_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DataInput)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DataInput, t_DataInput, DataInput);

        void t_DataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataInput), &PY_TYPE_DEF(DataInput), module, "DataInput", 0);
        }

        void t_DataInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataInput), "class_", make_descriptor(DataInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataInput), "wrapfn_", make_descriptor(t_DataInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataInput::initializeClass, 1)))
            return NULL;
          return t_DataInput::wrap_Object(DataInput(((t_DataInput *) arg)->object.this$));
        }
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds)
        {
          DataInput object((jobject) NULL);

          INT_CALL(object = DataInput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataInput_clone(t_DataInput *self)
        {
          DataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DataInput::wrap_Object(result);
        }

        static PyObject *t_DataInput_readByte(t_DataInput *self)
        {
          jbyte result;
          OBJ_CALL(result = self->object.readByte());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_DataInput_readInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DataInput_readLELongs(t_DataInput *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readLELongs(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readLELongs", args);
          return NULL;
        }

        static PyObject *t_DataInput_readLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readMapOfStrings(t_DataInput *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.readMapOfStrings());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readSetOfStrings(t_DataInput *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.readSetOfStrings());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readShort(t_DataInput *self)
        {
          jshort result;
          OBJ_CALL(result = self->object.readShort());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DataInput_readString(t_DataInput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.readString());
          return j2p(result);
        }

        static PyObject *t_DataInput_readVInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readVInt());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DataInput_readVLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readVLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readZInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readZInt());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DataInput_readZLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readZLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "org/apache/lucene/spatial3d/geom/GeoSizeable.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBBox::class$ = NULL;
          jmethodID *GeoBBox::mids$ = NULL;
          bool GeoBBox::live$ = false;

          jclass GeoBBox::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBBox");

              mids$ = new jmethodID[max_mid];
              mids$[mid_expand_ced210f3e52c8970] = env->getMethodID(cls, "expand", "(D)Lorg/apache/lucene/spatial3d/geom/GeoBBox;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBBox GeoBBox::expand(jdouble a0) const
          {
            return GeoBBox(env->callObjectMethod(this$, mids$[mid_expand_ced210f3e52c8970], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBBox_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBBox_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBBox_expand(t_GeoBBox *self, PyObject *arg);

          static PyMethodDef t_GeoBBox__methods_[] = {
            DECLARE_METHOD(t_GeoBBox, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBBox, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBBox, expand, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBBox)[] = {
            { Py_tp_methods, t_GeoBBox__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBBox)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoBBox, t_GeoBBox, GeoBBox);

          void t_GeoBBox::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBBox), &PY_TYPE_DEF(GeoBBox), module, "GeoBBox", 0);
          }

          void t_GeoBBox::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBox), "class_", make_descriptor(GeoBBox::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBox), "wrapfn_", make_descriptor(t_GeoBBox::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBox), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBBox_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBBox::initializeClass, 1)))
              return NULL;
            return t_GeoBBox::wrap_Object(GeoBBox(((t_GeoBBox *) arg)->object.this$));
          }
          static PyObject *t_GeoBBox_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBBox::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoBBox_expand(t_GeoBBox *self, PyObject *arg)
          {
            jdouble a0;
            GeoBBox result((jobject) NULL);

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.expand(a0));
              return t_GeoBBox::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "expand", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishAnalyzer::class$ = NULL;
          jmethodID *IrishAnalyzer::mids$ = NULL;
          bool IrishAnalyzer::live$ = false;
          ::java::lang::String *IrishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IrishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishAnalyzer::IrishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet IrishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data);
          static PyGetSetDef t_IrishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IrishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IrishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IrishAnalyzer)[] = {
            { Py_tp_methods, t_IrishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_IrishAnalyzer_init_ },
            { Py_tp_getset, t_IrishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IrishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(IrishAnalyzer, t_IrishAnalyzer, IrishAnalyzer);

          void t_IrishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishAnalyzer), &PY_TYPE_DEF(IrishAnalyzer), module, "IrishAnalyzer", 0);
          }

          void t_IrishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishAnalyzer), "class_", make_descriptor(IrishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishAnalyzer), "wrapfn_", make_descriptor(t_IrishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IrishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IrishAnalyzer::wrap_Object(IrishAnalyzer(((t_IrishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IrishAnalyzer object((jobject) NULL);

                INT_CALL(object = IrishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ga::IrishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues::class$ = NULL;
          jmethodID *FunctionValues::mids$ = NULL;
          bool FunctionValues::live$ = false;

          jclass FunctionValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
              mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
              mids$[mid_byteVal_0ff3bfb1ed512144] = env->getMethodID(cls, "byteVal", "(I[B)V");
              mids$[mid_bytesVal_81393e711d0ebc08] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRefBuilder;)Z");
              mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
              mids$[mid_doubleVal_a60d9c45cb58b918] = env->getMethodID(cls, "doubleVal", "(I[D)V");
              mids$[mid_exists_a1d30e1ee40c89a2] = env->getMethodID(cls, "exists", "(I)Z");
              mids$[mid_explain_9f7396620820dffe] = env->getMethodID(cls, "explain", "(I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
              mids$[mid_floatVal_9105bb5b941e483f] = env->getMethodID(cls, "floatVal", "(I[F)V");
              mids$[mid_getRangeScorer_a2e4107cfe5ff421] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getScorer_7ebd6e85fb2e2257] = env->getMethodID(cls, "getScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
              mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
              mids$[mid_intVal_b389acd9aa70d94d] = env->getMethodID(cls, "intVal", "(I[I)V");
              mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
              mids$[mid_longVal_7357cce567af4766] = env->getMethodID(cls, "longVal", "(I[J)V");
              mids$[mid_numOrd_9972fcc56b44e79d] = env->getMethodID(cls, "numOrd", "()I");
              mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
              mids$[mid_ordVal_1e143afe1894d213] = env->getMethodID(cls, "ordVal", "(I)I");
              mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
              mids$[mid_shortVal_8bfe273e2c76407f] = env->getMethodID(cls, "shortVal", "(I[S)V");
              mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
              mids$[mid_strVal_fe087eb49c9d0cd4] = env->getMethodID(cls, "strVal", "(I[Ljava/lang/String;)V");
              mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues::FunctionValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean FunctionValues::boolVal(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
          }

          jbyte FunctionValues::byteVal(jint a0) const
          {
            return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
          }

          void FunctionValues::byteVal(jint a0, const JArray< jbyte > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_byteVal_0ff3bfb1ed512144], a0, a1.this$);
          }

          jboolean FunctionValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRefBuilder & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_bytesVal_81393e711d0ebc08], a0, a1.this$);
          }

          jdouble FunctionValues::doubleVal(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
          }

          void FunctionValues::doubleVal(jint a0, const JArray< jdouble > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_doubleVal_a60d9c45cb58b918], a0, a1.this$);
          }

          jboolean FunctionValues::exists(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_a1d30e1ee40c89a2], a0);
          }

          ::org::apache::lucene::search::Explanation FunctionValues::explain(jint a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_9f7396620820dffe], a0));
          }

          jfloat FunctionValues::floatVal(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
          }

          void FunctionValues::floatVal(jint a0, const JArray< jfloat > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_floatVal_9105bb5b941e483f], a0, a1.this$);
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getRangeScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jboolean a4, jboolean a5) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_a2e4107cfe5ff421], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getScorer_7ebd6e85fb2e2257], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FunctionValues::getValueFiller() const
          {
            return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
          }

          jint FunctionValues::intVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
          }

          void FunctionValues::intVal(jint a0, const JArray< jint > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_intVal_b389acd9aa70d94d], a0, a1.this$);
          }

          jlong FunctionValues::longVal(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
          }

          void FunctionValues::longVal(jint a0, const JArray< jlong > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_longVal_7357cce567af4766], a0, a1.this$);
          }

          jint FunctionValues::numOrd() const
          {
            return env->callIntMethod(this$, mids$[mid_numOrd_9972fcc56b44e79d]);
          }

          ::java::lang::Object FunctionValues::objectVal(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
          }

          jint FunctionValues::ordVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_ordVal_1e143afe1894d213], a0);
          }

          jshort FunctionValues::shortVal(jint a0) const
          {
            return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
          }

          void FunctionValues::shortVal(jint a0, const JArray< jshort > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_shortVal_8bfe273e2c76407f], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::strVal(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
          }

          void FunctionValues::strVal(jint a0, const JArray< ::java::lang::String > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_strVal_fe087eb49c9d0cd4], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::toString(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self);
          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self);
          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data);
          static PyGetSetDef t_FunctionValues__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues, valueFiller),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues__methods_[] = {
            DECLARE_METHOD(t_FunctionValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, boolVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, byteVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, bytesVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, doubleVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, exists, METH_O),
            DECLARE_METHOD(t_FunctionValues, explain, METH_O),
            DECLARE_METHOD(t_FunctionValues, floatVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getRangeScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getValueFiller, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, intVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, longVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, numOrd, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, objectVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, ordVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, shortVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, strVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionValues)[] = {
            { Py_tp_methods, t_FunctionValues__methods_ },
            { Py_tp_init, (void *) t_FunctionValues_init_ },
            { Py_tp_getset, t_FunctionValues__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionValues)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FunctionValues, t_FunctionValues, FunctionValues);

          void t_FunctionValues::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues), &PY_TYPE_DEF(FunctionValues), module, "FunctionValues", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues), "ValueFiller", make_descriptor(&PY_TYPE_DEF(FunctionValues$ValueFiller)));
          }

          void t_FunctionValues::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues), "class_", make_descriptor(FunctionValues::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues), "wrapfn_", make_descriptor(t_FunctionValues::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues::initializeClass, 1)))
              return NULL;
            return t_FunctionValues::wrap_Object(FunctionValues(((t_FunctionValues *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues object((jobject) NULL);

            INT_CALL(object = FunctionValues());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.boolVal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "boolVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jbyte result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.byteVal(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);

                if (!parseArgs(args, "I[B", &a0, &a1))
                {
                  OBJ_CALL(self->object.byteVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "byteVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bytesVal(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bytesVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jdouble result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.doubleVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jdouble > a1((jobject) NULL);

                if (!parseArgs(args, "I[D", &a0, &a1))
                {
                  OBJ_CALL(self->object.doubleVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "doubleVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.exists(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jfloat result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.floatVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jfloat > a1((jobject) NULL);

                if (!parseArgs(args, "I[F", &a0, &a1))
                {
                  OBJ_CALL(self->object.floatVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "floatVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::search::Weight a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            jboolean a4;
            jboolean a5;
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kkssZZ", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::search::Weight a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getScorer(a0, a1));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
          }

          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.intVal(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jint > a1((jobject) NULL);

                if (!parseArgs(args, "I[I", &a0, &a1))
                {
                  OBJ_CALL(self->object.intVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "intVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.longVal(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);

                if (!parseArgs(args, "I[J", &a0, &a1))
                {
                  OBJ_CALL(self->object.longVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "longVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numOrd());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.objectVal(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "objectVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.ordVal(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ordVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jshort result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.shortVal(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jshort > a1((jobject) NULL);

                if (!parseArgs(args, "I[S", &a0, &a1))
                {
                  OBJ_CALL(self->object.shortVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "shortVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.strVal(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::String > a1((jobject) NULL);

                if (!parseArgs(args, "I[s", &a0, &a1))
                {
                  OBJ_CALL(self->object.strVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FunctionValues), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingTermBuilder::class$ = NULL;
            jmethodID *BoostingTermBuilder::mids$ = NULL;
            bool BoostingTermBuilder::live$ = false;

            jclass BoostingTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingTermBuilder::BoostingTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingTermBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BoostingTermBuilder)[] = {
              { Py_tp_methods, t_BoostingTermBuilder__methods_ },
              { Py_tp_init, (void *) t_BoostingTermBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BoostingTermBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(BoostingTermBuilder, t_BoostingTermBuilder, BoostingTermBuilder);

            void t_BoostingTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingTermBuilder), &PY_TYPE_DEF(BoostingTermBuilder), module, "BoostingTermBuilder", 0);
            }

            void t_BoostingTermBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoostingTermBuilder), "class_", make_descriptor(BoostingTermBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoostingTermBuilder), "wrapfn_", make_descriptor(t_BoostingTermBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BoostingTermBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingTermBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingTermBuilder::wrap_Object(BoostingTermBuilder(((t_BoostingTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              BoostingTermBuilder object((jobject) NULL);

              INT_CALL(object = BoostingTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilterFactory::mids$ = NULL;
          bool TypeAsPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *TypeAsPayloadTokenFilterFactory::NAME = NULL;

          jclass TypeAsPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d5966de02d36dcd8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilterFactory::TypeAsPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter TypeAsPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_d5966de02d36dcd8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAsPayloadTokenFilterFactory)[] = {
            { Py_tp_methods, t_TypeAsPayloadTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TypeAsPayloadTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAsPayloadTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory, TypeAsPayloadTokenFilterFactory);

          void t_TypeAsPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilterFactory), &PY_TYPE_DEF(TypeAsPayloadTokenFilterFactory), module, "TypeAsPayloadTokenFilterFactory", 0);
          }

          void t_TypeAsPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilterFactory), "class_", make_descriptor(TypeAsPayloadTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilterFactory), "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAsPayloadTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilterFactory), "NAME", make_descriptor(j2p(*TypeAsPayloadTokenFilterFactory::NAME)));
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilterFactory::wrap_Object(TypeAsPayloadTokenFilterFactory(((t_TypeAsPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TypeAsPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TypeAsPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleConstValueSource::class$ = NULL;
            jmethodID *DoubleConstValueSource::mids$ = NULL;
            bool DoubleConstValueSource::live$ = false;

            jclass DoubleConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3c435f10a3b1e038] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_8454bd5aa23fd11e] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_8c74b787998ce4bc] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_58aec2b64dff50c8] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_9972fcc56b44e79d] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_f5813404cc5e3a1e] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleConstValueSource::DoubleConstValueSource(jdouble a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_3c435f10a3b1e038, a0)) {}

            ::java::lang::String DoubleConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean DoubleConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jboolean DoubleConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_8454bd5aa23fd11e]);
            }

            jdouble DoubleConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_8c74b787998ce4bc]);
            }

            jfloat DoubleConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_58aec2b64dff50c8]);
            }

            jint DoubleConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_9972fcc56b44e79d]);
            }

            jlong DoubleConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_2e5ae9edcb9b072f]);
            }

            ::java::lang::Number DoubleConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_f5813404cc5e3a1e]));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint DoubleConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data);
            static PyGetSetDef t_DoubleConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleConstValueSource, bool),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, double),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, float),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, int),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, long),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleConstValueSource__methods_[] = {
              DECLARE_METHOD(t_DoubleConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DoubleConstValueSource)[] = {
              { Py_tp_methods, t_DoubleConstValueSource__methods_ },
              { Py_tp_init, (void *) t_DoubleConstValueSource_init_ },
              { Py_tp_getset, t_DoubleConstValueSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DoubleConstValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::ConstNumberSource),
              NULL
            };

            DEFINE_TYPE(DoubleConstValueSource, t_DoubleConstValueSource, DoubleConstValueSource);

            void t_DoubleConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleConstValueSource), &PY_TYPE_DEF(DoubleConstValueSource), module, "DoubleConstValueSource", 0);
            }

            void t_DoubleConstValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleConstValueSource), "class_", make_descriptor(DoubleConstValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleConstValueSource), "wrapfn_", make_descriptor(t_DoubleConstValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleConstValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleConstValueSource::initializeClass, 1)))
                return NULL;
              return t_DoubleConstValueSource::wrap_Object(DoubleConstValueSource(((t_DoubleConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jdouble a0;
              DoubleConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "D", &a0))
              {
                INT_CALL(object = DoubleConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectMonotonicWriter.h"
#include "org/apache/lucene/util/packed/DirectMonotonicWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectMonotonicWriter::class$ = NULL;
          jmethodID *DirectMonotonicWriter::mids$ = NULL;
          bool DirectMonotonicWriter::live$ = false;
          jint DirectMonotonicWriter::MAX_BLOCK_SHIFT = (jint) 0;
          jint DirectMonotonicWriter::MIN_BLOCK_SHIFT = (jint) 0;

          jclass DirectMonotonicWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectMonotonicWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9c778c9bce6694df] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_27785395e0258525] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;JI)Lorg/apache/lucene/util/packed/DirectMonotonicWriter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_BLOCK_SHIFT = env->getStaticIntField(cls, "MAX_BLOCK_SHIFT");
              MIN_BLOCK_SHIFT = env->getStaticIntField(cls, "MIN_BLOCK_SHIFT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectMonotonicWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_9c778c9bce6694df], a0);
          }

          void DirectMonotonicWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
          }

          DirectMonotonicWriter DirectMonotonicWriter::getInstance(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::store::IndexOutput & a1, jlong a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectMonotonicWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_27785395e0258525], a0.this$, a1.this$, a2, a3));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectMonotonicWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicWriter_add(t_DirectMonotonicWriter *self, PyObject *arg);
          static PyObject *t_DirectMonotonicWriter_finish(t_DirectMonotonicWriter *self);
          static PyObject *t_DirectMonotonicWriter_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectMonotonicWriter__methods_[] = {
            DECLARE_METHOD(t_DirectMonotonicWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicWriter, add, METH_O),
            DECLARE_METHOD(t_DirectMonotonicWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectMonotonicWriter, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectMonotonicWriter)[] = {
            { Py_tp_methods, t_DirectMonotonicWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectMonotonicWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DirectMonotonicWriter, t_DirectMonotonicWriter, DirectMonotonicWriter);

          void t_DirectMonotonicWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectMonotonicWriter), &PY_TYPE_DEF(DirectMonotonicWriter), module, "DirectMonotonicWriter", 0);
          }

          void t_DirectMonotonicWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicWriter), "class_", make_descriptor(DirectMonotonicWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicWriter), "wrapfn_", make_descriptor(t_DirectMonotonicWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectMonotonicWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicWriter), "MAX_BLOCK_SHIFT", make_descriptor(DirectMonotonicWriter::MAX_BLOCK_SHIFT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicWriter), "MIN_BLOCK_SHIFT", make_descriptor(DirectMonotonicWriter::MIN_BLOCK_SHIFT));
          }

          static PyObject *t_DirectMonotonicWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectMonotonicWriter::initializeClass, 1)))
              return NULL;
            return t_DirectMonotonicWriter::wrap_Object(DirectMonotonicWriter(((t_DirectMonotonicWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectMonotonicWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectMonotonicWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectMonotonicWriter_add(t_DirectMonotonicWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectMonotonicWriter_finish(t_DirectMonotonicWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectMonotonicWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a1((jobject) NULL);
            jlong a2;
            jint a3;
            DirectMonotonicWriter result((jobject) NULL);

            if (!parseArgs(args, "kkJI", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectMonotonicWriter::getInstance(a0, a1, a2, a3));
              return t_DirectMonotonicWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizerFactory::class$ = NULL;
          jmethodID *KeywordTokenizerFactory::mids$ = NULL;
          bool KeywordTokenizerFactory::live$ = false;
          ::java::lang::String *KeywordTokenizerFactory::NAME = NULL;

          jclass KeywordTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_57ba4441e9f854d8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/core/KeywordTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizerFactory::KeywordTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::core::KeywordTokenizer KeywordTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::core::KeywordTokenizer(env->callObjectMethod(this$, mids$[mid_create_57ba4441e9f854d8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordTokenizerFactory)[] = {
            { Py_tp_methods, t_KeywordTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_KeywordTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(KeywordTokenizerFactory, t_KeywordTokenizerFactory, KeywordTokenizerFactory);

          void t_KeywordTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizerFactory), &PY_TYPE_DEF(KeywordTokenizerFactory), module, "KeywordTokenizerFactory", 0);
          }

          void t_KeywordTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizerFactory), "class_", make_descriptor(KeywordTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizerFactory), "wrapfn_", make_descriptor(t_KeywordTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizerFactory), "NAME", make_descriptor(j2p(*KeywordTokenizerFactory::NAME)));
          }

          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizerFactory::wrap_Object(KeywordTokenizerFactory(((t_KeywordTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::KeywordTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_KeywordTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KeywordTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *AlreadyClosedException::class$ = NULL;
        jmethodID *AlreadyClosedException::mids$ = NULL;
        bool AlreadyClosedException::live$ = false;

        jclass AlreadyClosedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/AlreadyClosedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        AlreadyClosedException::AlreadyClosedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_AlreadyClosedException__methods_[] = {
          DECLARE_METHOD(t_AlreadyClosedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AlreadyClosedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AlreadyClosedException)[] = {
          { Py_tp_methods, t_AlreadyClosedException__methods_ },
          { Py_tp_init, (void *) t_AlreadyClosedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AlreadyClosedException)[] = {
          &PY_TYPE_DEF(::java::lang::IllegalStateException),
          NULL
        };

        DEFINE_TYPE(AlreadyClosedException, t_AlreadyClosedException, AlreadyClosedException);

        void t_AlreadyClosedException::install(PyObject *module)
        {
          installType(&PY_TYPE(AlreadyClosedException), &PY_TYPE_DEF(AlreadyClosedException), module, "AlreadyClosedException", 0);
        }

        void t_AlreadyClosedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AlreadyClosedException), "class_", make_descriptor(AlreadyClosedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AlreadyClosedException), "wrapfn_", make_descriptor(t_AlreadyClosedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AlreadyClosedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AlreadyClosedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AlreadyClosedException::initializeClass, 1)))
            return NULL;
          return t_AlreadyClosedException::wrap_Object(AlreadyClosedException(((t_AlreadyClosedException *) arg)->object.this$));
        }
        static PyObject *t_AlreadyClosedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AlreadyClosedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AlreadyClosedException_init_(t_AlreadyClosedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              AlreadyClosedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = AlreadyClosedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              AlreadyClosedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = AlreadyClosedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BlendedTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/BlendedTermQuery$RewriteMethod.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BlendedTermQuery::class$ = NULL;
        jmethodID *BlendedTermQuery::mids$ = NULL;
        bool BlendedTermQuery::live$ = false;
        ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod *BlendedTermQuery::BOOLEAN_REWRITE = NULL;
        ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod *BlendedTermQuery::DISJUNCTION_MAX_REWRITE = NULL;

        jclass BlendedTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BlendedTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BOOLEAN_REWRITE = new ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod(env->getStaticObjectField(cls, "BOOLEAN_REWRITE", "Lorg/apache/lucene/search/BlendedTermQuery$RewriteMethod;"));
            DISJUNCTION_MAX_REWRITE = new ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod(env->getStaticObjectField(cls, "DISJUNCTION_MAX_REWRITE", "Lorg/apache/lucene/search/BlendedTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean BlendedTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint BlendedTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query BlendedTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String BlendedTermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void BlendedTermQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BlendedTermQuery$DisjunctionMaxRewrite.h"
#include "org/apache/lucene/search/BlendedTermQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BlendedTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery_equals(t_BlendedTermQuery *self, PyObject *args);
        static PyObject *t_BlendedTermQuery_hashCode(t_BlendedTermQuery *self, PyObject *args);
        static PyObject *t_BlendedTermQuery_rewrite(t_BlendedTermQuery *self, PyObject *args);
        static PyObject *t_BlendedTermQuery_toString(t_BlendedTermQuery *self, PyObject *args);
        static PyObject *t_BlendedTermQuery_visit(t_BlendedTermQuery *self, PyObject *args);

        static PyMethodDef t_BlendedTermQuery__methods_[] = {
          DECLARE_METHOD(t_BlendedTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlendedTermQuery)[] = {
          { Py_tp_methods, t_BlendedTermQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlendedTermQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(BlendedTermQuery, t_BlendedTermQuery, BlendedTermQuery);

        void t_BlendedTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BlendedTermQuery), &PY_TYPE_DEF(BlendedTermQuery), module, "BlendedTermQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "DisjunctionMaxRewrite", make_descriptor(&PY_TYPE_DEF(BlendedTermQuery$DisjunctionMaxRewrite)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "RewriteMethod", make_descriptor(&PY_TYPE_DEF(BlendedTermQuery$RewriteMethod)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "Builder", make_descriptor(&PY_TYPE_DEF(BlendedTermQuery$Builder)));
        }

        void t_BlendedTermQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "class_", make_descriptor(BlendedTermQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "wrapfn_", make_descriptor(t_BlendedTermQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "boxfn_", make_descriptor(boxObject));
          env->getClass(BlendedTermQuery::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "BOOLEAN_REWRITE", make_descriptor(::org::apache::lucene::search::t_BlendedTermQuery$RewriteMethod::wrap_Object(*BlendedTermQuery::BOOLEAN_REWRITE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery), "DISJUNCTION_MAX_REWRITE", make_descriptor(::org::apache::lucene::search::t_BlendedTermQuery$RewriteMethod::wrap_Object(*BlendedTermQuery::DISJUNCTION_MAX_REWRITE)));
        }

        static PyObject *t_BlendedTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlendedTermQuery::initializeClass, 1)))
            return NULL;
          return t_BlendedTermQuery::wrap_Object(BlendedTermQuery(((t_BlendedTermQuery *) arg)->object.this$));
        }
        static PyObject *t_BlendedTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlendedTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlendedTermQuery_equals(t_BlendedTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BlendedTermQuery_hashCode(t_BlendedTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BlendedTermQuery_rewrite(t_BlendedTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BlendedTermQuery_toString(t_BlendedTermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlendedTermQuery_visit(t_BlendedTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BlendedTermQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FieldQueryNodeBuilder::class$ = NULL;
              jmethodID *FieldQueryNodeBuilder::mids$ = NULL;
              bool FieldQueryNodeBuilder::live$ = false;

              jclass FieldQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_f6da5efc526c39e2] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNodeBuilder::FieldQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::TermQuery FieldQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_f6da5efc526c39e2], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FieldQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldQueryNodeBuilder)[] = {
                { Py_tp_methods, t_FieldQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_FieldQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FieldQueryNodeBuilder, t_FieldQueryNodeBuilder, FieldQueryNodeBuilder);

              void t_FieldQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNodeBuilder), &PY_TYPE_DEF(FieldQueryNodeBuilder), module, "FieldQueryNodeBuilder", 0);
              }

              void t_FieldQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNodeBuilder), "class_", make_descriptor(FieldQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNodeBuilder), "wrapfn_", make_descriptor(t_FieldQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNodeBuilder::wrap_Object(FieldQueryNodeBuilder(((t_FieldQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FieldQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FieldQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitDocIdSet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitDocIdSet::class$ = NULL;
        jmethodID *BitDocIdSet::mids$ = NULL;
        bool BitDocIdSet::live$ = false;

        jclass BitDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4eda08c7010ba824] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BitSet;)V");
            mids$[mid_init$_3c9f50c8b4ac8730] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BitSet;J)V");
            mids$[mid_bits_b6503785024a1489] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/BitSet;");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitDocIdSet::BitDocIdSet(const ::org::apache::lucene::util::BitSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_4eda08c7010ba824, a0.this$)) {}

        BitDocIdSet::BitDocIdSet(const ::org::apache::lucene::util::BitSet & a0, jlong a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_3c9f50c8b4ac8730, a0.this$, a1)) {}

        ::org::apache::lucene::util::BitSet BitDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_bits_b6503785024a1489]));
        }

        ::org::apache::lucene::search::DocIdSetIterator BitDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jlong BitDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String BitDocIdSet::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitDocIdSet_init_(t_BitDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitDocIdSet_bits(t_BitDocIdSet *self, PyObject *args);
        static PyObject *t_BitDocIdSet_iterator(t_BitDocIdSet *self, PyObject *args);
        static PyObject *t_BitDocIdSet_ramBytesUsed(t_BitDocIdSet *self, PyObject *args);
        static PyObject *t_BitDocIdSet_toString(t_BitDocIdSet *self, PyObject *args);

        static PyMethodDef t_BitDocIdSet__methods_[] = {
          DECLARE_METHOD(t_BitDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_BitDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BitDocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BitDocIdSet, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BitDocIdSet)[] = {
          { Py_tp_methods, t_BitDocIdSet__methods_ },
          { Py_tp_init, (void *) t_BitDocIdSet_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BitDocIdSet)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSet),
          NULL
        };

        DEFINE_TYPE(BitDocIdSet, t_BitDocIdSet, BitDocIdSet);

        void t_BitDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitDocIdSet), &PY_TYPE_DEF(BitDocIdSet), module, "BitDocIdSet", 0);
        }

        void t_BitDocIdSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitDocIdSet), "class_", make_descriptor(BitDocIdSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitDocIdSet), "wrapfn_", make_descriptor(t_BitDocIdSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitDocIdSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitDocIdSet::initializeClass, 1)))
            return NULL;
          return t_BitDocIdSet::wrap_Object(BitDocIdSet(((t_BitDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_BitDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitDocIdSet_init_(t_BitDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BitSet a0((jobject) NULL);
              BitDocIdSet object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BitSet::initializeClass, &a0))
              {
                INT_CALL(object = BitDocIdSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::BitSet a0((jobject) NULL);
              jlong a1;
              BitDocIdSet object((jobject) NULL);

              if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BitDocIdSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitDocIdSet_bits(t_BitDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::BitSet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BitDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_BitDocIdSet_iterator(t_BitDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BitDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_BitDocIdSet_ramBytesUsed(t_BitDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BitDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_BitDocIdSet_toString(t_BitDocIdSet *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BitDocIdSet), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *TooManyBasicQueries::class$ = NULL;
            jmethodID *TooManyBasicQueries::mids$ = NULL;
            bool TooManyBasicQueries::live$ = false;

            jclass TooManyBasicQueries::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/TooManyBasicQueries");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TooManyBasicQueries::TooManyBasicQueries(jint a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TooManyBasicQueries__methods_[] = {
              DECLARE_METHOD(t_TooManyBasicQueries, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TooManyBasicQueries, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TooManyBasicQueries)[] = {
              { Py_tp_methods, t_TooManyBasicQueries__methods_ },
              { Py_tp_init, (void *) t_TooManyBasicQueries_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TooManyBasicQueries)[] = {
              &PY_TYPE_DEF(::java::io::IOException),
              NULL
            };

            DEFINE_TYPE(TooManyBasicQueries, t_TooManyBasicQueries, TooManyBasicQueries);

            void t_TooManyBasicQueries::install(PyObject *module)
            {
              installType(&PY_TYPE(TooManyBasicQueries), &PY_TYPE_DEF(TooManyBasicQueries), module, "TooManyBasicQueries", 0);
            }

            void t_TooManyBasicQueries::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TooManyBasicQueries), "class_", make_descriptor(TooManyBasicQueries::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TooManyBasicQueries), "wrapfn_", make_descriptor(t_TooManyBasicQueries::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TooManyBasicQueries), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TooManyBasicQueries::initializeClass, 1)))
                return NULL;
              return t_TooManyBasicQueries::wrap_Object(TooManyBasicQueries(((t_TooManyBasicQueries *) arg)->object.this$));
            }
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TooManyBasicQueries::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              TooManyBasicQueries object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = TooManyBasicQueries(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentWriteState::class$ = NULL;
        jmethodID *SegmentWriteState::mids$ = NULL;
        jfieldID *SegmentWriteState::fids$ = NULL;
        bool SegmentWriteState::live$ = false;

        jclass SegmentWriteState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentWriteState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cefa2ff4240327ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_delCountOnFlush] = env->getFieldID(cls, "delCountOnFlush", "I");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "Lorg/apache/lucene/util/FixedBitSet;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_softDelCountOnFlush] = env->getFieldID(cls, "softDelCountOnFlush", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentWriteState::SegmentWriteState(const SegmentWriteState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cefa2ff4240327ff, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentWriteState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        jint SegmentWriteState::_get_delCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_delCountOnFlush]);
        }

        void SegmentWriteState::_set_delCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_delCountOnFlush], a0);
        }

        ::org::apache::lucene::store::Directory SegmentWriteState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentWriteState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::util::InfoStream SegmentWriteState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        ::org::apache::lucene::util::FixedBitSet SegmentWriteState::_get_liveDocs() const
        {
          return ::org::apache::lucene::util::FixedBitSet(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        void SegmentWriteState::_set_liveDocs(const ::org::apache::lucene::util::FixedBitSet & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocs], a0.this$);
        }

        ::org::apache::lucene::index::SegmentInfo SegmentWriteState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentWriteState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentWriteState::_get_softDelCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_softDelCountOnFlush]);
        }

        void SegmentWriteState::_set_softDelCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_softDelCountOnFlush], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__softDelCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__softDelCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentWriteState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentWriteState, context),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, delCountOnFlush),
          DECLARE_GET_FIELD(t_SegmentWriteState, directory),
          DECLARE_GET_FIELD(t_SegmentWriteState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentWriteState, infoStream),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, liveDocs),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, softDelCountOnFlush),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentWriteState__methods_[] = {
          DECLARE_METHOD(t_SegmentWriteState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentWriteState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentWriteState)[] = {
          { Py_tp_methods, t_SegmentWriteState__methods_ },
          { Py_tp_init, (void *) t_SegmentWriteState_init_ },
          { Py_tp_getset, t_SegmentWriteState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentWriteState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentWriteState, t_SegmentWriteState, SegmentWriteState);

        void t_SegmentWriteState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentWriteState), &PY_TYPE_DEF(SegmentWriteState), module, "SegmentWriteState", 0);
        }

        void t_SegmentWriteState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentWriteState), "class_", make_descriptor(SegmentWriteState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentWriteState), "wrapfn_", make_descriptor(t_SegmentWriteState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentWriteState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentWriteState::initializeClass, 1)))
            return NULL;
          return t_SegmentWriteState::wrap_Object(SegmentWriteState(((t_SegmentWriteState *) arg)->object.this$));
        }
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentWriteState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds)
        {
          SegmentWriteState a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          SegmentWriteState object((jobject) NULL);

          if (!parseArgs(args, "ks", SegmentWriteState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SegmentWriteState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_delCountOnFlush());
          return PyLong_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_delCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delCountOnFlush", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::FixedBitSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(value);
        }
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::FixedBitSet value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::FixedBitSet::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocs", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentWriteState_get__softDelCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_softDelCountOnFlush());
          return PyLong_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__softDelCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_softDelCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "softDelCountOnFlush", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts::class$ = NULL;
          jmethodID *PackedInts::mids$ = NULL;
          bool PackedInts::live$ = false;
          ::java::lang::String *PackedInts::CODEC_NAME = NULL;
          jfloat PackedInts::COMPACT = (jfloat) 0;
          jfloat PackedInts::DEFAULT = (jfloat) 0;
          jint PackedInts::DEFAULT_BUFFER_SIZE = (jint) 0;
          jfloat PackedInts::FAST = (jfloat) 0;
          jfloat PackedInts::FASTEST = (jfloat) 0;
          jint PackedInts::VERSION_CURRENT = (jint) 0;
          jint PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG = (jint) 0;
          jint PackedInts::VERSION_START = (jint) 0;

          jclass PackedInts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_bitsRequired_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_checkVersion_040c4cd0390c5aff] = env->getStaticMethodID(cls, "checkVersion", "(I)V");
              mids$[mid_copy_85a1d205a3dbdd7e] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/packed/PackedInts$Reader;ILorg/apache/lucene/util/packed/PackedInts$Mutable;III)V");
              mids$[mid_fastestFormatAndBits_e37f260c09ba0078] = env->getStaticMethodID(cls, "fastestFormatAndBits", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$FormatAndBits;");
              mids$[mid_getDecoder_365715f47dcb52cc] = env->getStaticMethodID(cls, "getDecoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Decoder;");
              mids$[mid_getDirectReader_ea621a243364bc47] = env->getStaticMethodID(cls, "getDirectReader", "(Lorg/apache/lucene/store/IndexInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_c1c4b12c598a8066] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getEncoder_feca54b1dd46075b] = env->getStaticMethodID(cls, "getEncoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Encoder;");
              mids$[mid_getMutable_351b73df51e39810] = env->getStaticMethodID(cls, "getMutable", "(IILorg/apache/lucene/util/packed/PackedInts$Format;)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getMutable_8190aa0f7eac9798] = env->getStaticMethodID(cls, "getMutable", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getReader_a4c4701ae160298b] = env->getStaticMethodID(cls, "getReader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderIterator_a735c3a51d9abcc6] = env->getStaticMethodID(cls, "getReaderIterator", "(Lorg/apache/lucene/store/DataInput;I)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderIteratorNoHeader_624a89fd02863178] = env->getStaticMethodID(cls, "getReaderIteratorNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;IIII)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderNoHeader_9fc73ca5a7d635f8] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getWriter_d7f96e4a635f30d5] = env->getStaticMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/DataOutput;IIF)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_getWriterNoHeader_8a668bd28100ef9b] = env->getStaticMethodID(cls, "getWriterNoHeader", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_maxValue_0f1d64a641e8af53] = env->getStaticMethodID(cls, "maxValue", "(I)J");
              mids$[mid_unsignedBitsRequired_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              COMPACT = env->getStaticFloatField(cls, "COMPACT");
              DEFAULT = env->getStaticFloatField(cls, "DEFAULT");
              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              FAST = env->getStaticFloatField(cls, "FAST");
              FASTEST = env->getStaticFloatField(cls, "FASTEST");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_MONOTONIC_WITHOUT_ZIGZAG = env->getStaticIntField(cls, "VERSION_MONOTONIC_WITHOUT_ZIGZAG");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts::PackedInts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint PackedInts::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_694afffd0eb7dc3c], a0);
          }

          void PackedInts::checkVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_checkVersion_040c4cd0390c5aff], a0);
          }

          void PackedInts::copy(const ::org::apache::lucene::util::packed::PackedInts$Reader & a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Mutable & a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_copy_85a1d205a3dbdd7e], a0.this$, a1, a2.this$, a3, a4, a5);
          }

          ::org::apache::lucene::util::packed::PackedInts$FormatAndBits PackedInts::fastestFormatAndBits(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$FormatAndBits(env->callStaticObjectMethod(cls, mids$[mid_fastestFormatAndBits_e37f260c09ba0078], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Decoder PackedInts::getDecoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Decoder(env->callStaticObjectMethod(cls, mids$[mid_getDecoder_365715f47dcb52cc], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReader(const ::org::apache::lucene::store::IndexInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReader_ea621a243364bc47], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_c1c4b12c598a8066], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Encoder PackedInts::getEncoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Encoder(env->callStaticObjectMethod(cls, mids$[mid_getEncoder_feca54b1dd46075b], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Format & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_351b73df51e39810], a0, a1, a2.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_8190aa0f7eac9798], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReader_a4c4701ae160298b], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIterator_a735c3a51d9abcc6], a0.this$, a1));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIteratorNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIteratorNoHeader_624a89fd02863178], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_9fc73ca5a7d635f8], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1, jint a2, jfloat a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriter_d7f96e4a635f30d5], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriterNoHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriterNoHeader_8a668bd28100ef9b], a0.this$, a1.this$, a2, a3, a4));
          }

          jlong PackedInts::maxValue(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_maxValue_0f1d64a641e8af53], a0);
          }

          jint PackedInts::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_694afffd0eb7dc3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_PackedInts__methods_[] = {
            DECLARE_METHOD(t_PackedInts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, checkVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, fastestFormatAndBits, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDecoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getEncoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getMutable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIterator, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIteratorNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriterNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, maxValue, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts)[] = {
            { Py_tp_methods, t_PackedInts__methods_ },
            { Py_tp_init, (void *) t_PackedInts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts, t_PackedInts, PackedInts);

          void t_PackedInts::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts), &PY_TYPE_DEF(PackedInts), module, "PackedInts", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Writer", make_descriptor(&PY_TYPE_DEF(PackedInts$Writer)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "NullReader", make_descriptor(&PY_TYPE_DEF(PackedInts$NullReader)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Mutable", make_descriptor(&PY_TYPE_DEF(PackedInts$Mutable)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "ReaderIterator", make_descriptor(&PY_TYPE_DEF(PackedInts$ReaderIterator)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Reader", make_descriptor(&PY_TYPE_DEF(PackedInts$Reader)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Encoder", make_descriptor(&PY_TYPE_DEF(PackedInts$Encoder)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Decoder", make_descriptor(&PY_TYPE_DEF(PackedInts$Decoder)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "FormatAndBits", make_descriptor(&PY_TYPE_DEF(PackedInts$FormatAndBits)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "Format", make_descriptor(&PY_TYPE_DEF(PackedInts$Format)));
          }

          void t_PackedInts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "class_", make_descriptor(PackedInts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "wrapfn_", make_descriptor(t_PackedInts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "CODEC_NAME", make_descriptor(j2p(*PackedInts::CODEC_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "COMPACT", make_descriptor(PackedInts::COMPACT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "DEFAULT", make_descriptor(PackedInts::DEFAULT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "DEFAULT_BUFFER_SIZE", make_descriptor(PackedInts::DEFAULT_BUFFER_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "FAST", make_descriptor(PackedInts::FAST));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "FASTEST", make_descriptor(PackedInts::FASTEST));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "VERSION_CURRENT", make_descriptor(PackedInts::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "VERSION_MONOTONIC_WITHOUT_ZIGZAG", make_descriptor(PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts), "VERSION_START", make_descriptor(PackedInts::VERSION_START));
          }

          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts::initializeClass, 1)))
              return NULL;
            return t_PackedInts::wrap_Object(PackedInts(((t_PackedInts *) arg)->object.this$));
          }
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds)
          {
            PackedInts object((jobject) NULL);

            INT_CALL(object = PackedInts());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::bitsRequired(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::checkVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "checkVersion", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Reader a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$Mutable a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;

            if (!parseArgs(args, "kIkIII", ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Mutable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::copy(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat a2;
            ::org::apache::lucene::util::packed::PackedInts$FormatAndBits result((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::fastestFormatAndBits(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$FormatAndBits::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fastestFormatAndBits", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Decoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDecoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Decoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDecoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Encoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getEncoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Encoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getEncoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::packed::PackedInts$Format a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIK", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
              {
                jint a0;
                jint a1;
                jfloat a2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getMutable", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIterator(a0, a1));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIterator", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            jint a5;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kKIIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIteratorNoHeader(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIteratorNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            jint a2;
            jfloat a3;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kIIF", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriter(a0, a1, a2, a3));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriter", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriterNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriterNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::maxValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "maxValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::unsignedBitsRequired(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MSBRadixSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MSBRadixSorter::class$ = NULL;
        jmethodID *MSBRadixSorter::mids$ = NULL;
        bool MSBRadixSorter::live$ = false;

        jclass MSBRadixSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MSBRadixSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_438c62480c481c65] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_getBucket_57a58545eba514db] = env->getMethodID(cls, "getBucket", "(II)I");
            mids$[mid_getFallbackSorter_941f3cb31d983b76] = env->getMethodID(cls, "getFallbackSorter", "(I)Lorg/apache/lucene/util/Sorter;");
            mids$[mid_reorder_50c137e6aaa1731d] = env->getMethodID(cls, "reorder", "(II[I[II)V");
            mids$[mid_byteAt_57a58545eba514db] = env->getMethodID(cls, "byteAt", "(II)I");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_sort_34ab80131650555f] = env->getMethodID(cls, "sort", "(IIII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MSBRadixSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MSBRadixSorter_sort(t_MSBRadixSorter *self, PyObject *args);

        static PyMethodDef t_MSBRadixSorter__methods_[] = {
          DECLARE_METHOD(t_MSBRadixSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MSBRadixSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MSBRadixSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MSBRadixSorter)[] = {
          { Py_tp_methods, t_MSBRadixSorter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MSBRadixSorter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Sorter),
          NULL
        };

        DEFINE_TYPE(MSBRadixSorter, t_MSBRadixSorter, MSBRadixSorter);

        void t_MSBRadixSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(MSBRadixSorter), &PY_TYPE_DEF(MSBRadixSorter), module, "MSBRadixSorter", 0);
        }

        void t_MSBRadixSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MSBRadixSorter), "class_", make_descriptor(MSBRadixSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MSBRadixSorter), "wrapfn_", make_descriptor(t_MSBRadixSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MSBRadixSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MSBRadixSorter::initializeClass, 1)))
            return NULL;
          return t_MSBRadixSorter::wrap_Object(MSBRadixSorter(((t_MSBRadixSorter *) arg)->object.this$));
        }
        static PyObject *t_MSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MSBRadixSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MSBRadixSorter_sort(t_MSBRadixSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MSBRadixSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonPerFieldSimilarityWrapper.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonPerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PythonPerFieldSimilarityWrapper::mids$ = NULL;
          bool PythonPerFieldSimilarityWrapper::live$ = false;

          jclass PythonPerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonPerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_get_842ad739f75ff8a0] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonPerFieldSimilarityWrapper::PythonPerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::PerFieldSimilarityWrapper(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonPerFieldSimilarityWrapper::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonPerFieldSimilarityWrapper::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonPerFieldSimilarityWrapper::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonPerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonPerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonPerFieldSimilarityWrapper_init_(t_PythonPerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonPerFieldSimilarityWrapper_finalize(t_PythonPerFieldSimilarityWrapper *self);
          static PyObject *t_PythonPerFieldSimilarityWrapper_pythonExtension(t_PythonPerFieldSimilarityWrapper *self, PyObject *args);
          static jobject JNICALL t_PythonPerFieldSimilarityWrapper_get0(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonPerFieldSimilarityWrapper_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonPerFieldSimilarityWrapper_get__self(t_PythonPerFieldSimilarityWrapper *self, void *data);
          static PyGetSetDef t_PythonPerFieldSimilarityWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_PythonPerFieldSimilarityWrapper, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonPerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PythonPerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonPerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonPerFieldSimilarityWrapper, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonPerFieldSimilarityWrapper, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonPerFieldSimilarityWrapper)[] = {
            { Py_tp_methods, t_PythonPerFieldSimilarityWrapper__methods_ },
            { Py_tp_init, (void *) t_PythonPerFieldSimilarityWrapper_init_ },
            { Py_tp_getset, t_PythonPerFieldSimilarityWrapper__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonPerFieldSimilarityWrapper)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::PerFieldSimilarityWrapper),
            NULL
          };

          DEFINE_TYPE(PythonPerFieldSimilarityWrapper, t_PythonPerFieldSimilarityWrapper, PythonPerFieldSimilarityWrapper);

          void t_PythonPerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonPerFieldSimilarityWrapper), &PY_TYPE_DEF(PythonPerFieldSimilarityWrapper), module, "PythonPerFieldSimilarityWrapper", 1);
          }

          void t_PythonPerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonPerFieldSimilarityWrapper), "class_", make_descriptor(PythonPerFieldSimilarityWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonPerFieldSimilarityWrapper), "wrapfn_", make_descriptor(t_PythonPerFieldSimilarityWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonPerFieldSimilarityWrapper), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonPerFieldSimilarityWrapper::initializeClass);
            JNINativeMethod methods[] = {
              { "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;", (void *) t_PythonPerFieldSimilarityWrapper_get0 },
              { "pythonDecRef", "()V", (void *) t_PythonPerFieldSimilarityWrapper_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonPerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonPerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PythonPerFieldSimilarityWrapper::wrap_Object(PythonPerFieldSimilarityWrapper(((t_PythonPerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PythonPerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonPerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonPerFieldSimilarityWrapper_init_(t_PythonPerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PythonPerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PythonPerFieldSimilarityWrapper());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonPerFieldSimilarityWrapper_finalize(t_PythonPerFieldSimilarityWrapper *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonPerFieldSimilarityWrapper_pythonExtension(t_PythonPerFieldSimilarityWrapper *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonPerFieldSimilarityWrapper_get0(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonPerFieldSimilarityWrapper::mids$[PythonPerFieldSimilarityWrapper::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *result = PyObject_CallMethod(obj, "get", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              throwTypeError("get", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonPerFieldSimilarityWrapper_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonPerFieldSimilarityWrapper::mids$[PythonPerFieldSimilarityWrapper::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonPerFieldSimilarityWrapper::mids$[PythonPerFieldSimilarityWrapper::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonPerFieldSimilarityWrapper_get__self(t_PythonPerFieldSimilarityWrapper *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndQuery::class$ = NULL;
            jmethodID *SrndQuery::mids$ = NULL;
            bool SrndQuery::live$ = false;

            jclass SrndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clone_c098c03af75798aa] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getWeight_58aec2b64dff50c8] = env->getMethodID(cls, "getWeight", "()F");
                mids$[mid_getWeightOperator_db9b55ba01e03e4b] = env->getMethodID(cls, "getWeightOperator", "()Ljava/lang/String;");
                mids$[mid_getWeightString_db9b55ba01e03e4b] = env->getMethodID(cls, "getWeightString", "()Ljava/lang/String;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isWeighted_8454bd5aa23fd11e] = env->getMethodID(cls, "isWeighted", "()Z");
                mids$[mid_makeLuceneQueryField_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setWeight_8e1d952dd65cdc3a] = env->getMethodID(cls, "setWeight", "(F)V");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_weightToString_90aa63c10985f260] = env->getMethodID(cls, "weightToString", "(Ljava/lang/StringBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndQuery::SrndQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            SrndQuery SrndQuery::clone() const
            {
              return SrndQuery(env->callObjectMethod(this$, mids$[mid_clone_c098c03af75798aa]));
            }

            jboolean SrndQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jfloat SrndQuery::getWeight() const
            {
              return env->callFloatMethod(this$, mids$[mid_getWeight_58aec2b64dff50c8]);
            }

            ::java::lang::String SrndQuery::getWeightOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightOperator_db9b55ba01e03e4b]));
            }

            ::java::lang::String SrndQuery::getWeightString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWeightString_db9b55ba01e03e4b]));
            }

            jint SrndQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            jboolean SrndQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e]);
            }

            jboolean SrndQuery::isWeighted() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isWeighted_8454bd5aa23fd11e]);
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryField_464e180a5423633e], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query SrndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }

            void SrndQuery::setWeight(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setWeight_8e1d952dd65cdc3a], a0);
            }

            ::java::lang::String SrndQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndQuery_clone(t_SrndQuery *self);
            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self);
            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self);
            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self);
            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self);
            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg);
            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args);
            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data);
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data);
            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data);
            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data);
            static PyGetSetDef t_SrndQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndQuery, fieldsSubQueryAcceptable),
              DECLARE_GETSET_FIELD(t_SrndQuery, weight),
              DECLARE_GET_FIELD(t_SrndQuery, weightOperator),
              DECLARE_GET_FIELD(t_SrndQuery, weightString),
              DECLARE_GET_FIELD(t_SrndQuery, weighted),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndQuery__methods_[] = {
              DECLARE_METHOD(t_SrndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndQuery, clone, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, getWeight, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, getWeightString, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, isFieldsSubQueryAcceptable, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, isWeighted, METH_NOARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryField, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SrndQuery, setWeight, METH_O),
              DECLARE_METHOD(t_SrndQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SrndQuery)[] = {
              { Py_tp_methods, t_SrndQuery__methods_ },
              { Py_tp_init, (void *) t_SrndQuery_init_ },
              { Py_tp_getset, t_SrndQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SrndQuery)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(SrndQuery, t_SrndQuery, SrndQuery);

            void t_SrndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndQuery), &PY_TYPE_DEF(SrndQuery), module, "SrndQuery", 0);
            }

            void t_SrndQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndQuery), "class_", make_descriptor(SrndQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndQuery), "wrapfn_", make_descriptor(t_SrndQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndQuery::initializeClass, 1)))
                return NULL;
              return t_SrndQuery::wrap_Object(SrndQuery(((t_SrndQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndQuery_init_(t_SrndQuery *self, PyObject *args, PyObject *kwds)
            {
              SrndQuery object((jobject) NULL);

              INT_CALL(object = SrndQuery());
              self->object = object;

              return 0;
            }

            static PyObject *t_SrndQuery_clone(t_SrndQuery *self)
            {
              SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_SrndQuery_equals(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SrndQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SrndQuery_getWeight(t_SrndQuery *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getWeight());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_SrndQuery_getWeightOperator(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightOperator());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_getWeightString(t_SrndQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getWeightString());
              return j2p(result);
            }

            static PyObject *t_SrndQuery_hashCode(t_SrndQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(SrndQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_SrndQuery_isFieldsSubQueryAcceptable(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_isWeighted(t_SrndQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isWeighted());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SrndQuery_makeLuceneQueryField(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryField(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryField", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_makeLuceneQueryFieldNoBoost(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryFieldNoBoost", args);
              return NULL;
            }

            static PyObject *t_SrndQuery_setWeight(t_SrndQuery *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setWeight(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
              return NULL;
            }

            static PyObject *t_SrndQuery_toString(t_SrndQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SrndQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SrndQuery_get__fieldsSubQueryAcceptable(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SrndQuery_get__weight(t_SrndQuery *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getWeight());
              return PyFloat_FromDouble((double) value);
            }
            static int t_SrndQuery_set__weight(t_SrndQuery *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setWeight(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "weight", arg);
              return -1;
            }

            static PyObject *t_SrndQuery_get__weightOperator(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightOperator());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weightString(t_SrndQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getWeightString());
              return j2p(value);
            }

            static PyObject *t_SrndQuery_get__weighted(t_SrndQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isWeighted());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterSortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterSortedDocValues::class$ = NULL;
        jmethodID *FilterSortedDocValues::mids$ = NULL;
        bool FilterSortedDocValues::live$ = false;

        jclass FilterSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_884cd1bc4aebdeb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SortedDocValues;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_intersect_2452e24ae7d5129f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_lookupOrd_83238e65a54c68bb] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_1c2e5fa34f4312de] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_ordValue_9972fcc56b44e79d] = env->getMethodID(cls, "ordValue", "()I");
            mids$[mid_termsEnum_3f9a21827903a65f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterSortedDocValues::FilterSortedDocValues(const ::org::apache::lucene::index::SortedDocValues & a0) : ::org::apache::lucene::index::SortedDocValues(env->newObject(initializeClass, &mids$, mid_init$_884cd1bc4aebdeb3, a0.this$)) {}

        jint FilterSortedDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean FilterSortedDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterSortedDocValues::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        jlong FilterSortedDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterSortedDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint FilterSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::TermsEnum FilterSortedDocValues::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_2452e24ae7d5129f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef FilterSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_83238e65a54c68bb], a0));
        }

        jint FilterSortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_1c2e5fa34f4312de], a0.this$);
        }

        jint FilterSortedDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint FilterSortedDocValues::ordValue() const
        {
          return env->callIntMethod(this$, mids$[mid_ordValue_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::TermsEnum FilterSortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_3f9a21827903a65f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterSortedDocValues_init_(t_FilterSortedDocValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterSortedDocValues_advance(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_advanceExact(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_binaryValue(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_cost(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_docID(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_getValueCount(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_intersect(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_lookupOrd(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_lookupTerm(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_nextDoc(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_ordValue(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_termsEnum(t_FilterSortedDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedDocValues_get__valueCount(t_FilterSortedDocValues *self, void *data);
        static PyGetSetDef t_FilterSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_FilterSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_FilterSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, binaryValue, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, intersect, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, ordValue, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedDocValues, termsEnum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterSortedDocValues)[] = {
          { Py_tp_methods, t_FilterSortedDocValues__methods_ },
          { Py_tp_init, (void *) t_FilterSortedDocValues_init_ },
          { Py_tp_getset, t_FilterSortedDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterSortedDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortedDocValues),
          NULL
        };

        DEFINE_TYPE(FilterSortedDocValues, t_FilterSortedDocValues, FilterSortedDocValues);

        void t_FilterSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterSortedDocValues), &PY_TYPE_DEF(FilterSortedDocValues), module, "FilterSortedDocValues", 0);
        }

        void t_FilterSortedDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedDocValues), "class_", make_descriptor(FilterSortedDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedDocValues), "wrapfn_", make_descriptor(t_FilterSortedDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_FilterSortedDocValues::wrap_Object(FilterSortedDocValues(((t_FilterSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_FilterSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterSortedDocValues_init_(t_FilterSortedDocValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
          FilterSortedDocValues object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
          {
            INT_CALL(object = FilterSortedDocValues(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterSortedDocValues_advance(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_advanceExact(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_binaryValue(t_FilterSortedDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.binaryValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "binaryValue", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_cost(t_FilterSortedDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_docID(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_getValueCount(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_intersect(t_FilterSortedDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersect(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_lookupOrd(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_lookupTerm(t_FilterSortedDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "lookupTerm", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_nextDoc(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_ordValue(t_FilterSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ordValue());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "ordValue", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_termsEnum(t_FilterSortedDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termsEnum());
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterSortedDocValues), (PyObject *) self, "termsEnum", args, 2);
        }

        static PyObject *t_FilterSortedDocValues_get__valueCount(t_FilterSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilter::class$ = NULL;
          jmethodID *PatternReplaceCharFilter::mids$ = NULL;
          bool PatternReplaceCharFilter::live$ = false;

          jclass PatternReplaceCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fce5c982c44ac26c] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_1e143afe1894d213] = env->getMethodID(cls, "correct", "(I)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_fce5c982c44ac26c, a0.this$, a1.this$, a2.this$)) {}

          jint PatternReplaceCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint PatternReplaceCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternReplaceCharFilter)[] = {
            { Py_tp_methods, t_PatternReplaceCharFilter__methods_ },
            { Py_tp_init, (void *) t_PatternReplaceCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternReplaceCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::charfilter::BaseCharFilter),
            NULL
          };

          DEFINE_TYPE(PatternReplaceCharFilter, t_PatternReplaceCharFilter, PatternReplaceCharFilter);

          void t_PatternReplaceCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilter), &PY_TYPE_DEF(PatternReplaceCharFilter), module, "PatternReplaceCharFilter", 0);
          }

          void t_PatternReplaceCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilter), "class_", make_descriptor(PatternReplaceCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilter), "wrapfn_", make_descriptor(t_PatternReplaceCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilter::wrap_Object(PatternReplaceCharFilter(((t_PatternReplaceCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::regex::Pattern a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::io::Reader a2((jobject) NULL);
            PatternReplaceCharFilter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(PatternReplaceCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttribute::class$ = NULL;
          jmethodID *PayloadAttribute::mids$ = NULL;
          bool PayloadAttribute::live$ = false;

          jclass PayloadAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_setPayload_0bdfd2603b7490a8] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadAttribute::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
          }

          void PayloadAttribute::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_0bdfd2603b7490a8], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self);
          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg);
          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data);
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttribute, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttribute__methods_[] = {
            DECLARE_METHOD(t_PayloadAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttribute, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttribute, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadAttribute)[] = {
            { Py_tp_methods, t_PayloadAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PayloadAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(PayloadAttribute, t_PayloadAttribute, PayloadAttribute);

          void t_PayloadAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttribute), &PY_TYPE_DEF(PayloadAttribute), module, "PayloadAttribute", 0);
          }

          void t_PayloadAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttribute), "class_", make_descriptor(PayloadAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttribute), "wrapfn_", make_descriptor(t_PayloadAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttribute::initializeClass, 1)))
              return NULL;
            return t_PayloadAttribute::wrap_Object(PayloadAttribute(((t_PayloadAttribute *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadAttribute_getPayload(t_PayloadAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttribute_setPayload(t_PayloadAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttribute_get__payload(t_PayloadAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttribute_set__payload(t_PayloadAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemmer::class$ = NULL;
          jmethodID *GermanMinimalStemmer::mids$ = NULL;
          bool GermanMinimalStemmer::live$ = false;

          jclass GermanMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemmer::GermanMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint GermanMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanMinimalStemmer)[] = {
            { Py_tp_methods, t_GermanMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_GermanMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanMinimalStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GermanMinimalStemmer, t_GermanMinimalStemmer, GermanMinimalStemmer);

          void t_GermanMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemmer), &PY_TYPE_DEF(GermanMinimalStemmer), module, "GermanMinimalStemmer", 0);
          }

          void t_GermanMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemmer), "class_", make_descriptor(GermanMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemmer), "wrapfn_", make_descriptor(t_GermanMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemmer::wrap_Object(GermanMinimalStemmer(((t_GermanMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GermanMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/util/CSVUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {

            ::java::lang::Class *CSVUtil::class$ = NULL;
            jmethodID *CSVUtil::mids$ = NULL;
            bool CSVUtil::live$ = false;

            jclass CSVUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/util/CSVUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_parse_1606e23a23a4a8e5] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)[Ljava/lang/String;");
                mids$[mid_quoteEscape_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "quoteEscape", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::String > CSVUtil::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_parse_1606e23a23a4a8e5], a0.this$));
            }

            ::java::lang::String CSVUtil::quoteEscape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_quoteEscape_9bfa75c9f141b67f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {
            static PyObject *t_CSVUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CSVUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CSVUtil_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CSVUtil_quoteEscape(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_CSVUtil__methods_[] = {
              DECLARE_METHOD(t_CSVUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CSVUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CSVUtil, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CSVUtil, quoteEscape, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CSVUtil)[] = {
              { Py_tp_methods, t_CSVUtil__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CSVUtil)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CSVUtil, t_CSVUtil, CSVUtil);

            void t_CSVUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(CSVUtil), &PY_TYPE_DEF(CSVUtil), module, "CSVUtil", 0);
            }

            void t_CSVUtil::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "class_", make_descriptor(CSVUtil::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "wrapfn_", make_descriptor(t_CSVUtil::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CSVUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CSVUtil::initializeClass, 1)))
                return NULL;
              return t_CSVUtil::wrap_Object(CSVUtil(((t_CSVUtil *) arg)->object.this$));
            }
            static PyObject *t_CSVUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CSVUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CSVUtil_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::CSVUtil::parse(a0));
                return JArray<jstring>(result.this$).wrap();
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_CSVUtil_quoteEscape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::CSVUtil::quoteEscape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "quoteEscape", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PriorityQueue::class$ = NULL;
        jmethodID *PriorityQueue::mids$ = NULL;
        bool PriorityQueue::live$ = false;

        jclass PriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_ef5afc2036db078b] = env->getMethodID(cls, "<init>", "(ILjava/util/function/Supplier;)V");
            mids$[mid_add_e5ae0f8c04795fa9] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_insertWithOverflow_e5ae0f8c04795fa9] = env->getMethodID(cls, "insertWithOverflow", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pop_d6bcd06f3102c4d9] = env->getMethodID(cls, "pop", "()Ljava/lang/Object;");
            mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_d6bcd06f3102c4d9] = env->getMethodID(cls, "top", "()Ljava/lang/Object;");
            mids$[mid_updateTop_d6bcd06f3102c4d9] = env->getMethodID(cls, "updateTop", "()Ljava/lang/Object;");
            mids$[mid_updateTop_e5ae0f8c04795fa9] = env->getMethodID(cls, "updateTop", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_lessThan_b06c7be184b2a9ad] = env->getMethodID(cls, "lessThan", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
            mids$[mid_getHeapArray_6becf78ffd87a9bc] = env->getMethodID(cls, "getHeapArray", "()[Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PriorityQueue::PriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        PriorityQueue::PriorityQueue(jint a0, const ::java::util::function::Supplier & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ef5afc2036db078b, a0, a1.this$)) {}

        ::java::lang::Object PriorityQueue::add(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_e5ae0f8c04795fa9], a0.this$));
        }

        void PriorityQueue::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        ::java::lang::Object PriorityQueue::insertWithOverflow(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_insertWithOverflow_e5ae0f8c04795fa9], a0.this$));
        }

        ::java::util::Iterator PriorityQueue::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::java::lang::Object PriorityQueue::pop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pop_d6bcd06f3102c4d9]));
        }

        jboolean PriorityQueue::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::java::lang::Object PriorityQueue::top() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_top_d6bcd06f3102c4d9]));
        }

        ::java::lang::Object PriorityQueue::updateTop() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_d6bcd06f3102c4d9]));
        }

        ::java::lang::Object PriorityQueue::updateTop(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_updateTop_e5ae0f8c04795fa9], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args);
        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_iterator(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_remove(t_PriorityQueue *self, PyObject *arg);
        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self);
        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self, PyObject *args);
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data);
        static PyGetSetDef t_PriorityQueue__fields_[] = {
          DECLARE_GET_FIELD(t_PriorityQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PriorityQueue__methods_[] = {
          DECLARE_METHOD(t_PriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PriorityQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_PriorityQueue, add, METH_O),
          DECLARE_METHOD(t_PriorityQueue, clear, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, insertWithOverflow, METH_O),
          DECLARE_METHOD(t_PriorityQueue, iterator, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, remove, METH_O),
          DECLARE_METHOD(t_PriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_PriorityQueue, updateTop, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PriorityQueue)[] = {
          { Py_tp_methods, t_PriorityQueue__methods_ },
          { Py_tp_init, (void *) t_PriorityQueue_init_ },
          { Py_tp_getset, t_PriorityQueue__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_PriorityQueue *)) get_generic_iterator< t_PriorityQueue >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PriorityQueue)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PriorityQueue, t_PriorityQueue, PriorityQueue);
        PyObject *t_PriorityQueue::wrap_Object(const PriorityQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PriorityQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PriorityQueue *self = (t_PriorityQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(PriorityQueue), &PY_TYPE_DEF(PriorityQueue), module, "PriorityQueue", 0);
        }

        void t_PriorityQueue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PriorityQueue), "class_", make_descriptor(PriorityQueue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PriorityQueue), "wrapfn_", make_descriptor(t_PriorityQueue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PriorityQueue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PriorityQueue::initializeClass, 1)))
            return NULL;
          return t_PriorityQueue::wrap_Object(PriorityQueue(((t_PriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_PriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PriorityQueue_of_(t_PriorityQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PriorityQueue_init_(t_PriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = PriorityQueue(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::java::util::function::Supplier a1((jobject) NULL);
              PyTypeObject **p1;
              PriorityQueue object((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::function::Supplier::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Supplier::parameters_))
              {
                INT_CALL(object = PriorityQueue(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PriorityQueue_add(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_clear(t_PriorityQueue *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_PriorityQueue_insertWithOverflow(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.insertWithOverflow(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "insertWithOverflow", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_iterator(t_PriorityQueue *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_PriorityQueue_pop(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_remove(t_PriorityQueue *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_PriorityQueue_size(t_PriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PriorityQueue_top(t_PriorityQueue *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PriorityQueue_updateTop(t_PriorityQueue *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.updateTop());
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "O", self->parameters[0], &a0))
              {
                OBJ_CALL(result = self->object.updateTop(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateTop", args);
          return NULL;
        }
        static PyObject *t_PriorityQueue_get__parameters_(t_PriorityQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/DoubleComparator$DoubleLeafComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/comparators/DoubleComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *DoubleComparator$DoubleLeafComparator::class$ = NULL;
          jmethodID *DoubleComparator$DoubleLeafComparator::mids$ = NULL;
          bool DoubleComparator$DoubleLeafComparator::live$ = false;

          jclass DoubleComparator$DoubleLeafComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/DoubleComparator$DoubleLeafComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a8e183dbcc0ffb28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/comparators/DoubleComparator;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_encodeTop_9ffdf271836656c4] = env->getMethodID(cls, "encodeTop", "([B)V");
              mids$[mid_encodeBottom_9ffdf271836656c4] = env->getMethodID(cls, "encodeBottom", "([B)V");
              mids$[mid_isMissingValueCompetitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isMissingValueCompetitive", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleComparator$DoubleLeafComparator::DoubleComparator$DoubleLeafComparator(const ::org::apache::lucene::search::comparators::DoubleComparator & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) : ::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator(env->newObject(initializeClass, &mids$, mid_init$_a8e183dbcc0ffb28, a0.this$, a1.this$)) {}

          jint DoubleComparator$DoubleLeafComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
          }

          jint DoubleComparator$DoubleLeafComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
          }

          void DoubleComparator$DoubleLeafComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
          }

          void DoubleComparator$DoubleLeafComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_DoubleComparator$DoubleLeafComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_of_(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args);
          static int t_DoubleComparator$DoubleLeafComparator_init_(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_compareBottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_compareTop(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_copy(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_setBottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args);
          static int t_DoubleComparator$DoubleLeafComparator_set__bottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *arg, void *data);
          static PyObject *t_DoubleComparator$DoubleLeafComparator_get__parameters_(t_DoubleComparator$DoubleLeafComparator *self, void *data);
          static PyGetSetDef t_DoubleComparator$DoubleLeafComparator__fields_[] = {
            DECLARE_SET_FIELD(t_DoubleComparator$DoubleLeafComparator, bottom),
            DECLARE_GET_FIELD(t_DoubleComparator$DoubleLeafComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleComparator$DoubleLeafComparator__methods_[] = {
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator$DoubleLeafComparator, setBottom, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleComparator$DoubleLeafComparator)[] = {
            { Py_tp_methods, t_DoubleComparator$DoubleLeafComparator__methods_ },
            { Py_tp_init, (void *) t_DoubleComparator$DoubleLeafComparator_init_ },
            { Py_tp_getset, t_DoubleComparator$DoubleLeafComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleComparator$DoubleLeafComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator),
            NULL
          };

          DEFINE_TYPE(DoubleComparator$DoubleLeafComparator, t_DoubleComparator$DoubleLeafComparator, DoubleComparator$DoubleLeafComparator);
          PyObject *t_DoubleComparator$DoubleLeafComparator::wrap_Object(const DoubleComparator$DoubleLeafComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleComparator$DoubleLeafComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleComparator$DoubleLeafComparator *self = (t_DoubleComparator$DoubleLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DoubleComparator$DoubleLeafComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleComparator$DoubleLeafComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleComparator$DoubleLeafComparator *self = (t_DoubleComparator$DoubleLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DoubleComparator$DoubleLeafComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleComparator$DoubleLeafComparator), &PY_TYPE_DEF(DoubleComparator$DoubleLeafComparator), module, "DoubleComparator$DoubleLeafComparator", 0);
          }

          void t_DoubleComparator$DoubleLeafComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator$DoubleLeafComparator), "class_", make_descriptor(DoubleComparator$DoubleLeafComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator$DoubleLeafComparator), "wrapfn_", make_descriptor(t_DoubleComparator$DoubleLeafComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator$DoubleLeafComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleComparator$DoubleLeafComparator::initializeClass, 1)))
              return NULL;
            return t_DoubleComparator$DoubleLeafComparator::wrap_Object(DoubleComparator$DoubleLeafComparator(((t_DoubleComparator$DoubleLeafComparator *) arg)->object.this$));
          }
          static PyObject *t_DoubleComparator$DoubleLeafComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleComparator$DoubleLeafComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_of_(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DoubleComparator$DoubleLeafComparator_init_(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::comparators::DoubleComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            DoubleComparator$DoubleLeafComparator object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::comparators::DoubleComparator::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::org::apache::lucene::search::comparators::t_DoubleComparator::parameters_, &a1))
            {
              INT_CALL(object = DoubleComparator$DoubleLeafComparator(a0, a1));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Double);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_compareBottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DoubleComparator$DoubleLeafComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_compareTop(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DoubleComparator$DoubleLeafComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_copy(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleComparator$DoubleLeafComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_DoubleComparator$DoubleLeafComparator_setBottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleComparator$DoubleLeafComparator), (PyObject *) self, "setBottom", args, 2);
          }
          static PyObject *t_DoubleComparator$DoubleLeafComparator_get__parameters_(t_DoubleComparator$DoubleLeafComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_DoubleComparator$DoubleLeafComparator_set__bottom(t_DoubleComparator$DoubleLeafComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianLightStemFilterFactory::mids$ = NULL;
          bool NorwegianLightStemFilterFactory::live$ = false;
          ::java::lang::String *NorwegianLightStemFilterFactory::NAME = NULL;

          jclass NorwegianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilterFactory::NorwegianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianLightStemFilterFactory)[] = {
            { Py_tp_methods, t_NorwegianLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_NorwegianLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory, NorwegianLightStemFilterFactory);

          void t_NorwegianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilterFactory), &PY_TYPE_DEF(NorwegianLightStemFilterFactory), module, "NorwegianLightStemFilterFactory", 0);
          }

          void t_NorwegianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilterFactory), "class_", make_descriptor(NorwegianLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilterFactory), "wrapfn_", make_descriptor(t_NorwegianLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilterFactory), "NAME", make_descriptor(j2p(*NorwegianLightStemFilterFactory::NAME)));
          }

          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilterFactory::wrap_Object(NorwegianLightStemFilterFactory(((t_NorwegianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NorwegianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicStats::class$ = NULL;
          jmethodID *BasicStats::mids$ = NULL;
          bool BasicStats::live$ = false;

          jclass BasicStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5c6442be7f92276] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
              mids$[mid_getAvgFieldLength_8c74b787998ce4bc] = env->getMethodID(cls, "getAvgFieldLength", "()D");
              mids$[mid_getBoost_8c74b787998ce4bc] = env->getMethodID(cls, "getBoost", "()D");
              mids$[mid_getDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDocFreq", "()J");
              mids$[mid_getNumberOfDocuments_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNumberOfDocuments", "()J");
              mids$[mid_getNumberOfFieldTokens_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNumberOfFieldTokens", "()J");
              mids$[mid_getTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTotalTermFreq", "()J");
              mids$[mid_setAvgFieldLength_3c435f10a3b1e038] = env->getMethodID(cls, "setAvgFieldLength", "(D)V");
              mids$[mid_setDocFreq_9c778c9bce6694df] = env->getMethodID(cls, "setDocFreq", "(J)V");
              mids$[mid_setNumberOfDocuments_9c778c9bce6694df] = env->getMethodID(cls, "setNumberOfDocuments", "(J)V");
              mids$[mid_setNumberOfFieldTokens_9c778c9bce6694df] = env->getMethodID(cls, "setNumberOfFieldTokens", "(J)V");
              mids$[mid_setTotalTermFreq_9c778c9bce6694df] = env->getMethodID(cls, "setTotalTermFreq", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicStats::BasicStats(const ::java::lang::String & a0, jdouble a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5c6442be7f92276, a0.this$, a1)) {}

          jdouble BasicStats::getAvgFieldLength() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getAvgFieldLength_8c74b787998ce4bc]);
          }

          jdouble BasicStats::getBoost() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getBoost_8c74b787998ce4bc]);
          }

          jlong BasicStats::getDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getDocFreq_2e5ae9edcb9b072f]);
          }

          jlong BasicStats::getNumberOfDocuments() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfDocuments_2e5ae9edcb9b072f]);
          }

          jlong BasicStats::getNumberOfFieldTokens() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfFieldTokens_2e5ae9edcb9b072f]);
          }

          jlong BasicStats::getTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotalTermFreq_2e5ae9edcb9b072f]);
          }

          void BasicStats::setAvgFieldLength(jdouble a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAvgFieldLength_3c435f10a3b1e038], a0);
          }

          void BasicStats::setDocFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDocFreq_9c778c9bce6694df], a0);
          }

          void BasicStats::setNumberOfDocuments(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfDocuments_9c778c9bce6694df], a0);
          }

          void BasicStats::setNumberOfFieldTokens(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfFieldTokens_9c778c9bce6694df], a0);
          }

          void BasicStats::setTotalTermFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTotalTermFreq_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self);
          static PyObject *t_BasicStats_getBoost(t_BasicStats *self);
          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data);
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__boost(t_BasicStats *self, void *data);
          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_BasicStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_BasicStats, avgFieldLength),
            DECLARE_GET_FIELD(t_BasicStats, boost),
            DECLARE_GETSET_FIELD(t_BasicStats, docFreq),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfDocuments),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfFieldTokens),
            DECLARE_GETSET_FIELD(t_BasicStats, totalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasicStats__methods_[] = {
            DECLARE_METHOD(t_BasicStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, getAvgFieldLength, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfDocuments, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfFieldTokens, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, setAvgFieldLength, METH_O),
            DECLARE_METHOD(t_BasicStats, setDocFreq, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfDocuments, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfFieldTokens, METH_O),
            DECLARE_METHOD(t_BasicStats, setTotalTermFreq, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicStats)[] = {
            { Py_tp_methods, t_BasicStats__methods_ },
            { Py_tp_init, (void *) t_BasicStats_init_ },
            { Py_tp_getset, t_BasicStats__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicStats)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BasicStats, t_BasicStats, BasicStats);

          void t_BasicStats::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicStats), &PY_TYPE_DEF(BasicStats), module, "BasicStats", 0);
          }

          void t_BasicStats::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicStats), "class_", make_descriptor(BasicStats::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicStats), "wrapfn_", make_descriptor(t_BasicStats::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicStats), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicStats::initializeClass, 1)))
              return NULL;
            return t_BasicStats::wrap_Object(BasicStats(((t_BasicStats *) arg)->object.this$));
          }
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            BasicStats object((jobject) NULL);

            if (!parseArgs(args, "sD", &a0, &a1))
            {
              INT_CALL(object = BasicStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getBoost(t_BasicStats *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg)
          {
            jdouble a0;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(self->object.setAvgFieldLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAvgFieldLength", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfDocuments(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfDocuments", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfFieldTokens(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfFieldTokens", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setTotalTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) value);
          }
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jdouble value;
              if (!parseArg(arg, "D", &value))
              {
                INT_CALL(self->object.setAvgFieldLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "avgFieldLength", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__boost(t_BasicStats *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfDocuments(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfDocuments", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfFieldTokens(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfFieldTokens", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setTotalTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/ForDeltaUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *ForDeltaUtil::class$ = NULL;
          jmethodID *ForDeltaUtil::mids$ = NULL;
          bool ForDeltaUtil::live$ = false;

          jclass ForDeltaUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/ForDeltaUtil");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_ForDeltaUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ForDeltaUtil_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_ForDeltaUtil__methods_[] = {
            DECLARE_METHOD(t_ForDeltaUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ForDeltaUtil, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ForDeltaUtil)[] = {
            { Py_tp_methods, t_ForDeltaUtil__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ForDeltaUtil)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ForDeltaUtil, t_ForDeltaUtil, ForDeltaUtil);

          void t_ForDeltaUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(ForDeltaUtil), &PY_TYPE_DEF(ForDeltaUtil), module, "ForDeltaUtil", 0);
          }

          void t_ForDeltaUtil::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ForDeltaUtil), "class_", make_descriptor(ForDeltaUtil::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ForDeltaUtil), "wrapfn_", make_descriptor(t_ForDeltaUtil::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ForDeltaUtil), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ForDeltaUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ForDeltaUtil::initializeClass, 1)))
              return NULL;
            return t_ForDeltaUtil::wrap_Object(ForDeltaUtil(((t_ForDeltaUtil *) arg)->object.this$));
          }
          static PyObject *t_ForDeltaUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ForDeltaUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IdentityEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IdentityEncoder::class$ = NULL;
          jmethodID *IdentityEncoder::mids$ = NULL;
          bool IdentityEncoder::live$ = false;

          jclass IdentityEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IdentityEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_785adfa8e7d32a0b] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IdentityEncoder::IdentityEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRef IdentityEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_785adfa8e7d32a0b], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args);

          static PyMethodDef t_IdentityEncoder__methods_[] = {
            DECLARE_METHOD(t_IdentityEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IdentityEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IdentityEncoder)[] = {
            { Py_tp_methods, t_IdentityEncoder__methods_ },
            { Py_tp_init, (void *) t_IdentityEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IdentityEncoder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::payloads::AbstractEncoder),
            NULL
          };

          DEFINE_TYPE(IdentityEncoder, t_IdentityEncoder, IdentityEncoder);

          void t_IdentityEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IdentityEncoder), &PY_TYPE_DEF(IdentityEncoder), module, "IdentityEncoder", 0);
          }

          void t_IdentityEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IdentityEncoder), "class_", make_descriptor(IdentityEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IdentityEncoder), "wrapfn_", make_descriptor(t_IdentityEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IdentityEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IdentityEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IdentityEncoder::initializeClass, 1)))
              return NULL;
            return t_IdentityEncoder::wrap_Object(IdentityEncoder(((t_IdentityEncoder *) arg)->object.this$));
          }
          static PyObject *t_IdentityEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IdentityEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IdentityEncoder_init_(t_IdentityEncoder *self, PyObject *args, PyObject *kwds)
          {
            IdentityEncoder object((jobject) NULL);

            INT_CALL(object = IdentityEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IdentityEncoder_encode(t_IdentityEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IdentityEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *ClassificationResult::class$ = NULL;
        jmethodID *ClassificationResult::mids$ = NULL;
        bool ClassificationResult::live$ = false;

        jclass ClassificationResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/ClassificationResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ff125f2e136766ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;D)V");
            mids$[mid_compareTo_8b294b676c675c54] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/classification/ClassificationResult;)I");
            mids$[mid_getAssignedClass_d6bcd06f3102c4d9] = env->getMethodID(cls, "getAssignedClass", "()Ljava/lang/Object;");
            mids$[mid_getScore_8c74b787998ce4bc] = env->getMethodID(cls, "getScore", "()D");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ClassificationResult::ClassificationResult(const ::java::lang::Object & a0, jdouble a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ff125f2e136766ae, a0.this$, a1)) {}

        jint ClassificationResult::compareTo(const ClassificationResult & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_8b294b676c675c54], a0.this$);
        }

        ::java::lang::Object ClassificationResult::getAssignedClass() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getAssignedClass_d6bcd06f3102c4d9]));
        }

        jdouble ClassificationResult::getScore() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getScore_8c74b787998ce4bc]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_ClassificationResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassificationResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassificationResult_of_(t_ClassificationResult *self, PyObject *args);
        static int t_ClassificationResult_init_(t_ClassificationResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ClassificationResult_compareTo(t_ClassificationResult *self, PyObject *arg);
        static PyObject *t_ClassificationResult_getAssignedClass(t_ClassificationResult *self);
        static PyObject *t_ClassificationResult_getScore(t_ClassificationResult *self);
        static PyObject *t_ClassificationResult_get__assignedClass(t_ClassificationResult *self, void *data);
        static PyObject *t_ClassificationResult_get__score(t_ClassificationResult *self, void *data);
        static PyObject *t_ClassificationResult_get__parameters_(t_ClassificationResult *self, void *data);
        static PyGetSetDef t_ClassificationResult__fields_[] = {
          DECLARE_GET_FIELD(t_ClassificationResult, assignedClass),
          DECLARE_GET_FIELD(t_ClassificationResult, score),
          DECLARE_GET_FIELD(t_ClassificationResult, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ClassificationResult__methods_[] = {
          DECLARE_METHOD(t_ClassificationResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ClassificationResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ClassificationResult, of_, METH_VARARGS),
          DECLARE_METHOD(t_ClassificationResult, compareTo, METH_O),
          DECLARE_METHOD(t_ClassificationResult, getAssignedClass, METH_NOARGS),
          DECLARE_METHOD(t_ClassificationResult, getScore, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ClassificationResult)[] = {
          { Py_tp_methods, t_ClassificationResult__methods_ },
          { Py_tp_init, (void *) t_ClassificationResult_init_ },
          { Py_tp_getset, t_ClassificationResult__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ClassificationResult)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ClassificationResult, t_ClassificationResult, ClassificationResult);
        PyObject *t_ClassificationResult::wrap_Object(const ClassificationResult& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ClassificationResult::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ClassificationResult *self = (t_ClassificationResult *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ClassificationResult::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ClassificationResult::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ClassificationResult *self = (t_ClassificationResult *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ClassificationResult::install(PyObject *module)
        {
          installType(&PY_TYPE(ClassificationResult), &PY_TYPE_DEF(ClassificationResult), module, "ClassificationResult", 0);
        }

        void t_ClassificationResult::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ClassificationResult), "class_", make_descriptor(ClassificationResult::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ClassificationResult), "wrapfn_", make_descriptor(t_ClassificationResult::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ClassificationResult), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ClassificationResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ClassificationResult::initializeClass, 1)))
            return NULL;
          return t_ClassificationResult::wrap_Object(ClassificationResult(((t_ClassificationResult *) arg)->object.this$));
        }
        static PyObject *t_ClassificationResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ClassificationResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ClassificationResult_of_(t_ClassificationResult *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ClassificationResult_init_(t_ClassificationResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          jdouble a1;
          ClassificationResult object((jobject) NULL);

          if (!parseArgs(args, "oD", &a0, &a1))
          {
            INT_CALL(object = ClassificationResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ClassificationResult_compareTo(t_ClassificationResult *self, PyObject *arg)
        {
          ClassificationResult a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ClassificationResult::initializeClass, &a0, &p0, t_ClassificationResult::parameters_))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_ClassificationResult_getAssignedClass(t_ClassificationResult *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getAssignedClass());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ClassificationResult_getScore(t_ClassificationResult *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getScore());
          return PyFloat_FromDouble((double) result);
        }
        static PyObject *t_ClassificationResult_get__parameters_(t_ClassificationResult *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ClassificationResult_get__assignedClass(t_ClassificationResult *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getAssignedClass());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_ClassificationResult_get__score(t_ClassificationResult *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getScore());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/GetTermInfo.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *GetTermInfo::class$ = NULL;
        jmethodID *GetTermInfo::mids$ = NULL;
        bool GetTermInfo::live$ = false;

        jclass GetTermInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/GetTermInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getTermInfo_85eab20c95de0699] = env->getStaticMethodID(cls, "getTermInfo", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/Term;)V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GetTermInfo::GetTermInfo() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void GetTermInfo::getTermInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::Term & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_getTermInfo_85eab20c95de0699], a0.this$, a1.this$);
        }

        void GetTermInfo::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_GetTermInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GetTermInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GetTermInfo_init_(t_GetTermInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GetTermInfo_getTermInfo(PyTypeObject *type, PyObject *args);
        static PyObject *t_GetTermInfo_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_GetTermInfo__methods_[] = {
          DECLARE_METHOD(t_GetTermInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GetTermInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GetTermInfo, getTermInfo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GetTermInfo, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GetTermInfo)[] = {
          { Py_tp_methods, t_GetTermInfo__methods_ },
          { Py_tp_init, (void *) t_GetTermInfo_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GetTermInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(GetTermInfo, t_GetTermInfo, GetTermInfo);

        void t_GetTermInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(GetTermInfo), &PY_TYPE_DEF(GetTermInfo), module, "GetTermInfo", 0);
        }

        void t_GetTermInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GetTermInfo), "class_", make_descriptor(GetTermInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GetTermInfo), "wrapfn_", make_descriptor(t_GetTermInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GetTermInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GetTermInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GetTermInfo::initializeClass, 1)))
            return NULL;
          return t_GetTermInfo::wrap_Object(GetTermInfo(((t_GetTermInfo *) arg)->object.this$));
        }
        static PyObject *t_GetTermInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GetTermInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GetTermInfo_init_(t_GetTermInfo *self, PyObject *args, PyObject *kwds)
        {
          GetTermInfo object((jobject) NULL);

          INT_CALL(object = GetTermInfo());
          self->object = object;

          return 0;
        }

        static PyObject *t_GetTermInfo_getTermInfo(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::misc::GetTermInfo::getTermInfo(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "getTermInfo", args);
          return NULL;
        }

        static PyObject *t_GetTermInfo_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::misc::GetTermInfo::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DivFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DivFloatFunction::class$ = NULL;
            jmethodID *DivFloatFunction::mids$ = NULL;
            bool DivFloatFunction::live$ = false;

            jclass DivFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DivFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6d73cd8677453118] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_328d6b0dd62870d9] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DivFloatFunction::DivFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_6d73cd8677453118, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DivFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DivFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DivFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DivFloatFunction)[] = {
              { Py_tp_methods, t_DivFloatFunction__methods_ },
              { Py_tp_init, (void *) t_DivFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DivFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::DualFloatFunction),
              NULL
            };

            DEFINE_TYPE(DivFloatFunction, t_DivFloatFunction, DivFloatFunction);

            void t_DivFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DivFloatFunction), &PY_TYPE_DEF(DivFloatFunction), module, "DivFloatFunction", 0);
            }

            void t_DivFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DivFloatFunction), "class_", make_descriptor(DivFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DivFloatFunction), "wrapfn_", make_descriptor(t_DivFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DivFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DivFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DivFloatFunction::wrap_Object(DivFloatFunction(((t_DivFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DivFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DivFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DivFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilterFactory::class$ = NULL;
          jmethodID *FrenchLightStemFilterFactory::mids$ = NULL;
          bool FrenchLightStemFilterFactory::live$ = false;
          ::java::lang::String *FrenchLightStemFilterFactory::NAME = NULL;

          jclass FrenchLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilterFactory::FrenchLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchLightStemFilterFactory)[] = {
            { Py_tp_methods, t_FrenchLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FrenchLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FrenchLightStemFilterFactory, t_FrenchLightStemFilterFactory, FrenchLightStemFilterFactory);

          void t_FrenchLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilterFactory), &PY_TYPE_DEF(FrenchLightStemFilterFactory), module, "FrenchLightStemFilterFactory", 0);
          }

          void t_FrenchLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilterFactory), "class_", make_descriptor(FrenchLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilterFactory), "wrapfn_", make_descriptor(t_FrenchLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilterFactory), "NAME", make_descriptor(j2p(*FrenchLightStemFilterFactory::NAME)));
          }

          static PyObject *t_FrenchLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilterFactory::wrap_Object(FrenchLightStemFilterFactory(((t_FrenchLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilterFactory_init_(t_FrenchLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilterFactory_create(t_FrenchLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FrenchLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *BaseCharFilter::class$ = NULL;
          jmethodID *BaseCharFilter::mids$ = NULL;
          bool BaseCharFilter::live$ = false;

          jclass BaseCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/BaseCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_correct_1e143afe1894d213] = env->getMethodID(cls, "correct", "(I)I");
              mids$[mid_addOffCorrectMap_438c62480c481c65] = env->getMethodID(cls, "addOffCorrectMap", "(II)V");
              mids$[mid_getLastCumulativeDiff_9972fcc56b44e79d] = env->getMethodID(cls, "getLastCumulativeDiff", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseCharFilter::BaseCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseCharFilter__methods_[] = {
            DECLARE_METHOD(t_BaseCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseCharFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BaseCharFilter)[] = {
            { Py_tp_methods, t_BaseCharFilter__methods_ },
            { Py_tp_init, (void *) t_BaseCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BaseCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::CharFilter),
            NULL
          };

          DEFINE_TYPE(BaseCharFilter, t_BaseCharFilter, BaseCharFilter);

          void t_BaseCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseCharFilter), &PY_TYPE_DEF(BaseCharFilter), module, "BaseCharFilter", 0);
          }

          void t_BaseCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCharFilter), "class_", make_descriptor(BaseCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCharFilter), "wrapfn_", make_descriptor(t_BaseCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseCharFilter::initializeClass, 1)))
              return NULL;
            return t_BaseCharFilter::wrap_Object(BaseCharFilter(((t_BaseCharFilter *) arg)->object.this$));
          }
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            BaseCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = BaseCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchNoDocsQueryNode::class$ = NULL;
              jmethodID *MatchNoDocsQueryNode::mids$ = NULL;
              bool MatchNoDocsQueryNode::live$ = false;

              jclass MatchNoDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNode::MatchNoDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::java::lang::String MatchNoDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchNoDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MatchNoDocsQueryNode)[] = {
                { Py_tp_methods, t_MatchNoDocsQueryNode__methods_ },
                { Py_tp_init, (void *) t_MatchNoDocsQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MatchNoDocsQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode),
                NULL
              };

              DEFINE_TYPE(MatchNoDocsQueryNode, t_MatchNoDocsQueryNode, MatchNoDocsQueryNode);

              void t_MatchNoDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNode), &PY_TYPE_DEF(MatchNoDocsQueryNode), module, "MatchNoDocsQueryNode", 0);
              }

              void t_MatchNoDocsQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNode), "class_", make_descriptor(MatchNoDocsQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNode), "wrapfn_", make_descriptor(t_MatchNoDocsQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNode::wrap_Object(MatchNoDocsQueryNode(((t_MatchNoDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(MatchNoDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriQuery::class$ = NULL;
        jmethodID *IndriQuery::mids$ = NULL;
        bool IndriQuery::live$ = false;

        jclass IndriQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getClauses_49ec78390f08338a] = env->getMethodID(cls, "getClauses", "()Ljava/util/List;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndriQuery::IndriQuery(const ::java::util::List & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

        ::org::apache::lucene::search::Weight IndriQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean IndriQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::List IndriQuery::getClauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClauses_49ec78390f08338a]));
        }

        jint IndriQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::util::Iterator IndriQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::java::lang::String IndriQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void IndriQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndriQuery_init_(t_IndriQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndriQuery_createWeight(t_IndriQuery *self, PyObject *args);
        static PyObject *t_IndriQuery_equals(t_IndriQuery *self, PyObject *args);
        static PyObject *t_IndriQuery_getClauses(t_IndriQuery *self);
        static PyObject *t_IndriQuery_hashCode(t_IndriQuery *self, PyObject *args);
        static PyObject *t_IndriQuery_iterator(t_IndriQuery *self);
        static PyObject *t_IndriQuery_toString(t_IndriQuery *self, PyObject *args);
        static PyObject *t_IndriQuery_visit(t_IndriQuery *self, PyObject *args);
        static PyObject *t_IndriQuery_get__clauses(t_IndriQuery *self, void *data);
        static PyGetSetDef t_IndriQuery__fields_[] = {
          DECLARE_GET_FIELD(t_IndriQuery, clauses),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndriQuery__methods_[] = {
          DECLARE_METHOD(t_IndriQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_IndriQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndriQuery, getClauses, METH_NOARGS),
          DECLARE_METHOD(t_IndriQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndriQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_IndriQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_IndriQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriQuery)[] = {
          { Py_tp_methods, t_IndriQuery__methods_ },
          { Py_tp_init, (void *) t_IndriQuery_init_ },
          { Py_tp_getset, t_IndriQuery__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_IndriQuery *)) get_iterator< t_IndriQuery >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(IndriQuery, t_IndriQuery, IndriQuery);

        void t_IndriQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriQuery), &PY_TYPE_DEF(IndriQuery), module, "IndriQuery", 0);
        }

        void t_IndriQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriQuery), "class_", make_descriptor(IndriQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriQuery), "wrapfn_", make_descriptor(t_IndriQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriQuery::initializeClass, 1)))
            return NULL;
          return t_IndriQuery::wrap_Object(IndriQuery(((t_IndriQuery *) arg)->object.this$));
        }
        static PyObject *t_IndriQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndriQuery_init_(t_IndriQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          IndriQuery object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = IndriQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndriQuery_createWeight(t_IndriQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_IndriQuery_equals(t_IndriQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndriQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndriQuery_getClauses(t_IndriQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getClauses());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_IndriQuery_hashCode(t_IndriQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndriQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndriQuery_iterator(t_IndriQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_IndriQuery_toString(t_IndriQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndriQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndriQuery_visit(t_IndriQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IndriQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_IndriQuery_get__clauses(t_IndriQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getClauses());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/TooComplexToDeterminizeException.h"
#include "org/apache/lucene/util/automaton/TooComplexToDeterminizeException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *TooComplexToDeterminizeException::class$ = NULL;
          jmethodID *TooComplexToDeterminizeException::mids$ = NULL;
          bool TooComplexToDeterminizeException::live$ = false;

          jclass TooComplexToDeterminizeException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/TooComplexToDeterminizeException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7b4ad886b0525d24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/RegExp;Lorg/apache/lucene/util/automaton/TooComplexToDeterminizeException;)V");
              mids$[mid_init$_df17a55ceec53376] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;I)V");
              mids$[mid_getAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDeterminizedStates", "()I");
              mids$[mid_getRegExp_8a1118657ba35ec9] = env->getMethodID(cls, "getRegExp", "()Lorg/apache/lucene/util/automaton/RegExp;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TooComplexToDeterminizeException::TooComplexToDeterminizeException(const ::org::apache::lucene::util::automaton::RegExp & a0, const TooComplexToDeterminizeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_7b4ad886b0525d24, a0.this$, a1.this$)) {}

          TooComplexToDeterminizeException::TooComplexToDeterminizeException(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_df17a55ceec53376, a0.this$, a1)) {}

          ::org::apache::lucene::util::automaton::Automaton TooComplexToDeterminizeException::getAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_d9f5c446a29ec187]));
          }

          jint TooComplexToDeterminizeException::getMaxDeterminizedStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::automaton::RegExp TooComplexToDeterminizeException::getRegExp() const
          {
            return ::org::apache::lucene::util::automaton::RegExp(env->callObjectMethod(this$, mids$[mid_getRegExp_8a1118657ba35ec9]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_TooComplexToDeterminizeException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TooComplexToDeterminizeException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TooComplexToDeterminizeException_init_(t_TooComplexToDeterminizeException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TooComplexToDeterminizeException_getAutomaton(t_TooComplexToDeterminizeException *self);
          static PyObject *t_TooComplexToDeterminizeException_getMaxDeterminizedStates(t_TooComplexToDeterminizeException *self);
          static PyObject *t_TooComplexToDeterminizeException_getRegExp(t_TooComplexToDeterminizeException *self);
          static PyObject *t_TooComplexToDeterminizeException_get__automaton(t_TooComplexToDeterminizeException *self, void *data);
          static PyObject *t_TooComplexToDeterminizeException_get__maxDeterminizedStates(t_TooComplexToDeterminizeException *self, void *data);
          static PyObject *t_TooComplexToDeterminizeException_get__regExp(t_TooComplexToDeterminizeException *self, void *data);
          static PyGetSetDef t_TooComplexToDeterminizeException__fields_[] = {
            DECLARE_GET_FIELD(t_TooComplexToDeterminizeException, automaton),
            DECLARE_GET_FIELD(t_TooComplexToDeterminizeException, maxDeterminizedStates),
            DECLARE_GET_FIELD(t_TooComplexToDeterminizeException, regExp),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TooComplexToDeterminizeException__methods_[] = {
            DECLARE_METHOD(t_TooComplexToDeterminizeException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TooComplexToDeterminizeException, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TooComplexToDeterminizeException, getAutomaton, METH_NOARGS),
            DECLARE_METHOD(t_TooComplexToDeterminizeException, getMaxDeterminizedStates, METH_NOARGS),
            DECLARE_METHOD(t_TooComplexToDeterminizeException, getRegExp, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TooComplexToDeterminizeException)[] = {
            { Py_tp_methods, t_TooComplexToDeterminizeException__methods_ },
            { Py_tp_init, (void *) t_TooComplexToDeterminizeException_init_ },
            { Py_tp_getset, t_TooComplexToDeterminizeException__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TooComplexToDeterminizeException)[] = {
            &PY_TYPE_DEF(::java::lang::RuntimeException),
            NULL
          };

          DEFINE_TYPE(TooComplexToDeterminizeException, t_TooComplexToDeterminizeException, TooComplexToDeterminizeException);

          void t_TooComplexToDeterminizeException::install(PyObject *module)
          {
            installType(&PY_TYPE(TooComplexToDeterminizeException), &PY_TYPE_DEF(TooComplexToDeterminizeException), module, "TooComplexToDeterminizeException", 0);
          }

          void t_TooComplexToDeterminizeException::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TooComplexToDeterminizeException), "class_", make_descriptor(TooComplexToDeterminizeException::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TooComplexToDeterminizeException), "wrapfn_", make_descriptor(t_TooComplexToDeterminizeException::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TooComplexToDeterminizeException), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TooComplexToDeterminizeException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TooComplexToDeterminizeException::initializeClass, 1)))
              return NULL;
            return t_TooComplexToDeterminizeException::wrap_Object(TooComplexToDeterminizeException(((t_TooComplexToDeterminizeException *) arg)->object.this$));
          }
          static PyObject *t_TooComplexToDeterminizeException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TooComplexToDeterminizeException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TooComplexToDeterminizeException_init_(t_TooComplexToDeterminizeException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::automaton::RegExp a0((jobject) NULL);
                TooComplexToDeterminizeException a1((jobject) NULL);
                TooComplexToDeterminizeException object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::RegExp::initializeClass, TooComplexToDeterminizeException::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = TooComplexToDeterminizeException(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                TooComplexToDeterminizeException object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = TooComplexToDeterminizeException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TooComplexToDeterminizeException_getAutomaton(t_TooComplexToDeterminizeException *self)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.getAutomaton());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_TooComplexToDeterminizeException_getMaxDeterminizedStates(t_TooComplexToDeterminizeException *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDeterminizedStates());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TooComplexToDeterminizeException_getRegExp(t_TooComplexToDeterminizeException *self)
          {
            ::org::apache::lucene::util::automaton::RegExp result((jobject) NULL);
            OBJ_CALL(result = self->object.getRegExp());
            return ::org::apache::lucene::util::automaton::t_RegExp::wrap_Object(result);
          }

          static PyObject *t_TooComplexToDeterminizeException_get__automaton(t_TooComplexToDeterminizeException *self, void *data)
          {
            ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
            OBJ_CALL(value = self->object.getAutomaton());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
          }

          static PyObject *t_TooComplexToDeterminizeException_get__maxDeterminizedStates(t_TooComplexToDeterminizeException *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDeterminizedStates());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TooComplexToDeterminizeException_get__regExp(t_TooComplexToDeterminizeException *self, void *data)
          {
            ::org::apache::lucene::util::automaton::RegExp value((jobject) NULL);
            OBJ_CALL(value = self->object.getRegExp());
            return ::org::apache::lucene::util::automaton::t_RegExp::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "java/util/Comparator.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/OutputStream.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup::class$ = NULL;
          jmethodID *Lookup::mids$ = NULL;
          bool Lookup::live$ = false;
          ::java::util::Comparator *Lookup::CHARSEQUENCE_COMPARATOR = NULL;

          jclass Lookup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_build_beb21a0bed34d1c1] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/spell/Dictionary;)V");
              mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
              mids$[mid_load_174f501a36e0b663] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)Z");
              mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
              mids$[mid_lookup_615e71ef0df182df] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
              mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
              mids$[mid_lookup_46ccd4df2ff3d83e] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/BooleanQuery;IZZ)Ljava/util/List;");
              mids$[mid_store_185ae1aacccec26c] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;)Z");
              mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CHARSEQUENCE_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "CHARSEQUENCE_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup::Lookup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void Lookup::build(const ::org::apache::lucene::search::spell::Dictionary & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_beb21a0bed34d1c1], a0.this$);
          }

          void Lookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
          }

          jlong Lookup::getCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
          }

          jboolean Lookup::load(const ::java::io::InputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_174f501a36e0b663], a0.this$);
          }

          jboolean Lookup::load(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_615e71ef0df182df], a0.this$, a1, a2));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::search::BooleanQuery & a1, jint a2, jboolean a3, jboolean a4) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_46ccd4df2ff3d83e], a0.this$, a1.this$, a2, a3, a4));
          }

          jboolean Lookup::store(const ::java::io::OutputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_185ae1aacccec26c], a0.this$);
          }

          jboolean Lookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_getCount(t_Lookup *self);
          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data);
          static PyGetSetDef t_Lookup__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup, count),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup__methods_[] = {
            DECLARE_METHOD(t_Lookup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, build, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, getCount, METH_NOARGS),
            DECLARE_METHOD(t_Lookup, load, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, lookup, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, store, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lookup)[] = {
            { Py_tp_methods, t_Lookup__methods_ },
            { Py_tp_init, (void *) t_Lookup_init_ },
            { Py_tp_getset, t_Lookup__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lookup)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Lookup, t_Lookup, Lookup);

          void t_Lookup::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup), &PY_TYPE_DEF(Lookup), module, "Lookup", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "LookupPriorityQueue", make_descriptor(&PY_TYPE_DEF(Lookup$LookupPriorityQueue)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "LookupResult", make_descriptor(&PY_TYPE_DEF(Lookup$LookupResult)));
          }

          void t_Lookup::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "class_", make_descriptor(Lookup::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "wrapfn_", make_descriptor(t_Lookup::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lookup::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup), "CHARSEQUENCE_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*Lookup::CHARSEQUENCE_COMPARATOR)));
          }

          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup::initializeClass, 1)))
              return NULL;
            return t_Lookup::wrap_Object(Lookup(((t_Lookup *) arg)->object.this$));
          }
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds)
          {
            Lookup object((jobject) NULL);

            INT_CALL(object = Lookup());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::Dictionary::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "build", args);
            return NULL;
          }

          static PyObject *t_Lookup_getCount(t_Lookup *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
          }

          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OZI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                  return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jint a3;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                  return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery a1((jobject) NULL);
                jint a2;
                jboolean a3;
                jboolean a4;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OkIZZ", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::search::BooleanQuery::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                  return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "lookup", args);
            return NULL;
          }

          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::OutputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
          }

          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/lang/InterruptedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ControlledRealTimeReopenThread::class$ = NULL;
        jmethodID *ControlledRealTimeReopenThread::mids$ = NULL;
        bool ControlledRealTimeReopenThread::live$ = false;

        jclass ControlledRealTimeReopenThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ControlledRealTimeReopenThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ac31a0879268c67] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/search/ReferenceManager;DD)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getSearchingGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSearchingGen", "()J");
            mids$[mid_run_f2cc1bce94666404] = env->getMethodID(cls, "run", "()V");
            mids$[mid_waitForGeneration_9c778c9bce6694df] = env->getMethodID(cls, "waitForGeneration", "(J)V");
            mids$[mid_waitForGeneration_c09f849210cd0e37] = env->getMethodID(cls, "waitForGeneration", "(JI)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ControlledRealTimeReopenThread::ControlledRealTimeReopenThread(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::search::ReferenceManager & a1, jdouble a2, jdouble a3) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_4ac31a0879268c67, a0.this$, a1.this$, a2, a3)) {}

        void ControlledRealTimeReopenThread::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong ControlledRealTimeReopenThread::getSearchingGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getSearchingGen_2e5ae9edcb9b072f]);
        }

        void ControlledRealTimeReopenThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_f2cc1bce94666404]);
        }

        void ControlledRealTimeReopenThread::waitForGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_waitForGeneration_9c778c9bce6694df], a0);
        }

        jboolean ControlledRealTimeReopenThread::waitForGeneration(jlong a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_waitForGeneration_c09f849210cd0e37], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_getSearchingGen(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_get__searchingGen(t_ControlledRealTimeReopenThread *self, void *data);
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data);
        static PyGetSetDef t_ControlledRealTimeReopenThread__fields_[] = {
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, searchingGen),
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ControlledRealTimeReopenThread__methods_[] = {
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, of_, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, close, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, getSearchingGen, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, run, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, waitForGeneration, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ControlledRealTimeReopenThread)[] = {
          { Py_tp_methods, t_ControlledRealTimeReopenThread__methods_ },
          { Py_tp_init, (void *) t_ControlledRealTimeReopenThread_init_ },
          { Py_tp_getset, t_ControlledRealTimeReopenThread__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ControlledRealTimeReopenThread)[] = {
          &PY_TYPE_DEF(::java::lang::Thread),
          NULL
        };

        DEFINE_TYPE(ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread, ControlledRealTimeReopenThread);
        PyObject *t_ControlledRealTimeReopenThread::wrap_Object(const ControlledRealTimeReopenThread& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ControlledRealTimeReopenThread::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ControlledRealTimeReopenThread::install(PyObject *module)
        {
          installType(&PY_TYPE(ControlledRealTimeReopenThread), &PY_TYPE_DEF(ControlledRealTimeReopenThread), module, "ControlledRealTimeReopenThread", 0);
        }

        void t_ControlledRealTimeReopenThread::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ControlledRealTimeReopenThread), "class_", make_descriptor(ControlledRealTimeReopenThread::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ControlledRealTimeReopenThread), "wrapfn_", make_descriptor(t_ControlledRealTimeReopenThread::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ControlledRealTimeReopenThread), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 1)))
            return NULL;
          return t_ControlledRealTimeReopenThread::wrap_Object(ControlledRealTimeReopenThread(((t_ControlledRealTimeReopenThread *) arg)->object.this$));
        }
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::search::ReferenceManager a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          ControlledRealTimeReopenThread object((jobject) NULL);

          if (!parseArgs(args, "kKDD", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a2, &a3))
          {
            INT_CALL(object = ControlledRealTimeReopenThread(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_getSearchingGen(t_ControlledRealTimeReopenThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSearchingGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ControlledRealTimeReopenThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.waitForGeneration(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jint a1;
              jboolean result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.waitForGeneration(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "waitForGeneration", args);
          return NULL;
        }
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ControlledRealTimeReopenThread_get__searchingGen(t_ControlledRealTimeReopenThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSearchingGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *BooleanQueryNodeBuilder::mids$ = NULL;
              bool BooleanQueryNodeBuilder::live$ = false;

              jclass BooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff52d9212329b1a7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNodeBuilder::BooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::BooleanQuery BooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_ff52d9212329b1a7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanQueryNodeBuilder)[] = {
                { Py_tp_methods, t_BooleanQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_BooleanQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder, BooleanQueryNodeBuilder);

              void t_BooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNodeBuilder), &PY_TYPE_DEF(BooleanQueryNodeBuilder), module, "BooleanQueryNodeBuilder", 0);
              }

              void t_BooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNodeBuilder), "class_", make_descriptor(BooleanQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNodeBuilder), "wrapfn_", make_descriptor(t_BooleanQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNodeBuilder::wrap_Object(BooleanQueryNodeBuilder(((t_BooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SimpleCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SimpleCollector::class$ = NULL;
        jmethodID *SimpleCollector::mids$ = NULL;
        bool SimpleCollector::live$ = false;

        jclass SimpleCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SimpleCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleCollector::SimpleCollector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void SimpleCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::search::LeafCollector SimpleCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        void SimpleCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SimpleCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleCollector_init_(t_SimpleCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleCollector_collect(t_SimpleCollector *self, PyObject *arg);
        static PyObject *t_SimpleCollector_getLeafCollector(t_SimpleCollector *self, PyObject *arg);
        static PyObject *t_SimpleCollector_setScorer(t_SimpleCollector *self, PyObject *arg);
        static int t_SimpleCollector_set__scorer(t_SimpleCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_SimpleCollector__fields_[] = {
          DECLARE_SET_FIELD(t_SimpleCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SimpleCollector__methods_[] = {
          DECLARE_METHOD(t_SimpleCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleCollector, collect, METH_O),
          DECLARE_METHOD(t_SimpleCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_SimpleCollector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleCollector)[] = {
          { Py_tp_methods, t_SimpleCollector__methods_ },
          { Py_tp_init, (void *) t_SimpleCollector_init_ },
          { Py_tp_getset, t_SimpleCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SimpleCollector, t_SimpleCollector, SimpleCollector);

        void t_SimpleCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleCollector), &PY_TYPE_DEF(SimpleCollector), module, "SimpleCollector", 0);
        }

        void t_SimpleCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleCollector), "class_", make_descriptor(SimpleCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleCollector), "wrapfn_", make_descriptor(t_SimpleCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleCollector::initializeClass, 1)))
            return NULL;
          return t_SimpleCollector::wrap_Object(SimpleCollector(((t_SimpleCollector *) arg)->object.this$));
        }
        static PyObject *t_SimpleCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleCollector_init_(t_SimpleCollector *self, PyObject *args, PyObject *kwds)
        {
          SimpleCollector object((jobject) NULL);

          INT_CALL(object = SimpleCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleCollector_collect(t_SimpleCollector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_SimpleCollector_getLeafCollector(t_SimpleCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_SimpleCollector_setScorer(t_SimpleCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_SimpleCollector_set__scorer(t_SimpleCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/OutputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *VerifyingLockFactory::class$ = NULL;
        jmethodID *VerifyingLockFactory::mids$ = NULL;
        bool VerifyingLockFactory::live$ = false;
        jint VerifyingLockFactory::MSG_LOCK_ACQUIRED = (jint) 0;
        jint VerifyingLockFactory::MSG_LOCK_RELEASED = (jint) 0;

        jclass VerifyingLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/VerifyingLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc8d1e96ea4f06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/io/InputStream;Ljava/io/OutputStream;)V");
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MSG_LOCK_ACQUIRED = env->getStaticIntField(cls, "MSG_LOCK_ACQUIRED");
            MSG_LOCK_RELEASED = env->getStaticIntField(cls, "MSG_LOCK_RELEASED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VerifyingLockFactory::VerifyingLockFactory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::io::InputStream & a1, const ::java::io::OutputStream & a2) : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_f2cc8d1e96ea4f06, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::store::Lock VerifyingLockFactory::obtainLock(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_6aee55f49034dd72], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VerifyingLockFactory_obtainLock(t_VerifyingLockFactory *self, PyObject *args);

        static PyMethodDef t_VerifyingLockFactory__methods_[] = {
          DECLARE_METHOD(t_VerifyingLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, obtainLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(VerifyingLockFactory)[] = {
          { Py_tp_methods, t_VerifyingLockFactory__methods_ },
          { Py_tp_init, (void *) t_VerifyingLockFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(VerifyingLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::LockFactory),
          NULL
        };

        DEFINE_TYPE(VerifyingLockFactory, t_VerifyingLockFactory, VerifyingLockFactory);

        void t_VerifyingLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(VerifyingLockFactory), &PY_TYPE_DEF(VerifyingLockFactory), module, "VerifyingLockFactory", 0);
        }

        void t_VerifyingLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(VerifyingLockFactory), "class_", make_descriptor(VerifyingLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(VerifyingLockFactory), "wrapfn_", make_descriptor(t_VerifyingLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(VerifyingLockFactory), "boxfn_", make_descriptor(boxObject));
          env->getClass(VerifyingLockFactory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(VerifyingLockFactory), "MSG_LOCK_ACQUIRED", make_descriptor(VerifyingLockFactory::MSG_LOCK_ACQUIRED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(VerifyingLockFactory), "MSG_LOCK_RELEASED", make_descriptor(VerifyingLockFactory::MSG_LOCK_RELEASED));
        }

        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VerifyingLockFactory::initializeClass, 1)))
            return NULL;
          return t_VerifyingLockFactory::wrap_Object(VerifyingLockFactory(((t_VerifyingLockFactory *) arg)->object.this$));
        }
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VerifyingLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
          ::java::io::InputStream a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          VerifyingLockFactory object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = VerifyingLockFactory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VerifyingLockFactory_obtainLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.obtainLock(a0, a1));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(VerifyingLockFactory), (PyObject *) self, "obtainLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/BlockTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *BlockTermsReader::class$ = NULL;
          jmethodID *BlockTermsReader::mids$ = NULL;
          bool BlockTermsReader::live$ = false;

          jclass BlockTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/BlockTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dccda6cf8cbcc776] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/blockterms/TermsIndexReaderBase;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTermsReader::BlockTermsReader(const ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase & a0, const ::org::apache::lucene::codecs::PostingsReaderBase & a1, const ::org::apache::lucene::index::SegmentReadState & a2) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_dccda6cf8cbcc776, a0.this$, a1.this$, a2.this$)) {}

          void BlockTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void BlockTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection BlockTermsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::util::Iterator BlockTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong BlockTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint BlockTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms BlockTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }

          ::java::lang::String BlockTermsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_BlockTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTermsReader_init_(t_BlockTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTermsReader_checkIntegrity(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_close(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_getChildResources(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_iterator(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_ramBytesUsed(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_size(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_terms(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_toString(t_BlockTermsReader *self, PyObject *args);
          static PyObject *t_BlockTermsReader_get__childResources(t_BlockTermsReader *self, void *data);
          static PyGetSetDef t_BlockTermsReader__fields_[] = {
            DECLARE_GET_FIELD(t_BlockTermsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, terms, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockTermsReader)[] = {
            { Py_tp_methods, t_BlockTermsReader__methods_ },
            { Py_tp_init, (void *) t_BlockTermsReader_init_ },
            { Py_tp_getset, t_BlockTermsReader__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_BlockTermsReader *)) get_iterator< t_BlockTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(BlockTermsReader, t_BlockTermsReader, BlockTermsReader);

          void t_BlockTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTermsReader), &PY_TYPE_DEF(BlockTermsReader), module, "BlockTermsReader", 0);
          }

          void t_BlockTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsReader), "class_", make_descriptor(BlockTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsReader), "wrapfn_", make_descriptor(t_BlockTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTermsReader::wrap_Object(BlockTermsReader(((t_BlockTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTermsReader_init_(t_BlockTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a2((jobject) NULL);
            BlockTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = BlockTermsReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTermsReader_checkIntegrity(t_BlockTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTermsReader_close(t_BlockTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTermsReader_getChildResources(t_BlockTermsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_BlockTermsReader_iterator(t_BlockTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTermsReader_ramBytesUsed(t_BlockTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTermsReader_size(t_BlockTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTermsReader_terms(t_BlockTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_BlockTermsReader_toString(t_BlockTermsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BlockTermsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BlockTermsReader_get__childResources(t_BlockTermsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IDFValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IDFValueSource::class$ = NULL;
            jmethodID *IDFValueSource::mids$ = NULL;
            bool IDFValueSource::live$ = false;

            jclass IDFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IDFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1329b9cc98226e6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IDFValueSource::IDFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_1329b9cc98226e6f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues IDFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            ::java::lang::String IDFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args);
            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args);

            static PyMethodDef t_IDFValueSource__methods_[] = {
              DECLARE_METHOD(t_IDFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IDFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(IDFValueSource)[] = {
              { Py_tp_methods, t_IDFValueSource__methods_ },
              { Py_tp_init, (void *) t_IDFValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(IDFValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::DocFreqValueSource),
              NULL
            };

            DEFINE_TYPE(IDFValueSource, t_IDFValueSource, IDFValueSource);

            void t_IDFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IDFValueSource), &PY_TYPE_DEF(IDFValueSource), module, "IDFValueSource", 0);
            }

            void t_IDFValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(IDFValueSource), "class_", make_descriptor(IDFValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IDFValueSource), "wrapfn_", make_descriptor(t_IDFValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IDFValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IDFValueSource::initializeClass, 1)))
                return NULL;
              return t_IDFValueSource::wrap_Object(IDFValueSource(((t_IDFValueSource *) arg)->object.this$));
            }
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IDFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              IDFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IDFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IDFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(PY_TYPE(IDFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LimitedFiniteStringsIterator.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LimitedFiniteStringsIterator::class$ = NULL;
          jmethodID *LimitedFiniteStringsIterator::mids$ = NULL;
          bool LimitedFiniteStringsIterator::live$ = false;

          jclass LimitedFiniteStringsIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LimitedFiniteStringsIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_df17a55ceec53376] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;I)V");
              mids$[mid_next_ce9cdfb58d7a482b] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitedFiniteStringsIterator::LimitedFiniteStringsIterator(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1) : ::org::apache::lucene::util::automaton::FiniteStringsIterator(env->newObject(initializeClass, &mids$, mid_init$_df17a55ceec53376, a0.this$, a1)) {}

          ::org::apache::lucene::util::IntsRef LimitedFiniteStringsIterator::next() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_next_ce9cdfb58d7a482b]));
          }

          jint LimitedFiniteStringsIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LimitedFiniteStringsIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitedFiniteStringsIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitedFiniteStringsIterator_init_(t_LimitedFiniteStringsIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitedFiniteStringsIterator_next(t_LimitedFiniteStringsIterator *self, PyObject *args);
          static PyObject *t_LimitedFiniteStringsIterator_size(t_LimitedFiniteStringsIterator *self);

          static PyMethodDef t_LimitedFiniteStringsIterator__methods_[] = {
            DECLARE_METHOD(t_LimitedFiniteStringsIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitedFiniteStringsIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitedFiniteStringsIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_LimitedFiniteStringsIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitedFiniteStringsIterator)[] = {
            { Py_tp_methods, t_LimitedFiniteStringsIterator__methods_ },
            { Py_tp_init, (void *) t_LimitedFiniteStringsIterator_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_LimitedFiniteStringsIterator *)) get_next< t_LimitedFiniteStringsIterator,::org::apache::lucene::util::t_IntsRef,::org::apache::lucene::util::IntsRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitedFiniteStringsIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::automaton::FiniteStringsIterator),
            NULL
          };

          DEFINE_TYPE(LimitedFiniteStringsIterator, t_LimitedFiniteStringsIterator, LimitedFiniteStringsIterator);

          void t_LimitedFiniteStringsIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitedFiniteStringsIterator), &PY_TYPE_DEF(LimitedFiniteStringsIterator), module, "LimitedFiniteStringsIterator", 0);
          }

          void t_LimitedFiniteStringsIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitedFiniteStringsIterator), "class_", make_descriptor(LimitedFiniteStringsIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitedFiniteStringsIterator), "wrapfn_", make_descriptor(t_LimitedFiniteStringsIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitedFiniteStringsIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitedFiniteStringsIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitedFiniteStringsIterator::initializeClass, 1)))
              return NULL;
            return t_LimitedFiniteStringsIterator::wrap_Object(LimitedFiniteStringsIterator(((t_LimitedFiniteStringsIterator *) arg)->object.this$));
          }
          static PyObject *t_LimitedFiniteStringsIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitedFiniteStringsIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitedFiniteStringsIterator_init_(t_LimitedFiniteStringsIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            LimitedFiniteStringsIterator object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LimitedFiniteStringsIterator(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitedFiniteStringsIterator_next(t_LimitedFiniteStringsIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LimitedFiniteStringsIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_LimitedFiniteStringsIterator_size(t_LimitedFiniteStringsIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RoaringDocIdSet.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RoaringDocIdSet::class$ = NULL;
        jmethodID *RoaringDocIdSet::mids$ = NULL;
        bool RoaringDocIdSet::live$ = false;

        jclass RoaringDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RoaringDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_9972fcc56b44e79d] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint RoaringDocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::DocIdSetIterator RoaringDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jlong RoaringDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String RoaringDocIdSet::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/RoaringDocIdSet$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RoaringDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RoaringDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RoaringDocIdSet_cardinality(t_RoaringDocIdSet *self);
        static PyObject *t_RoaringDocIdSet_iterator(t_RoaringDocIdSet *self, PyObject *args);
        static PyObject *t_RoaringDocIdSet_ramBytesUsed(t_RoaringDocIdSet *self, PyObject *args);
        static PyObject *t_RoaringDocIdSet_toString(t_RoaringDocIdSet *self, PyObject *args);

        static PyMethodDef t_RoaringDocIdSet__methods_[] = {
          DECLARE_METHOD(t_RoaringDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RoaringDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RoaringDocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_RoaringDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_RoaringDocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_RoaringDocIdSet, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RoaringDocIdSet)[] = {
          { Py_tp_methods, t_RoaringDocIdSet__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RoaringDocIdSet)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSet),
          NULL
        };

        DEFINE_TYPE(RoaringDocIdSet, t_RoaringDocIdSet, RoaringDocIdSet);

        void t_RoaringDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(RoaringDocIdSet), &PY_TYPE_DEF(RoaringDocIdSet), module, "RoaringDocIdSet", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet), "Builder", make_descriptor(&PY_TYPE_DEF(RoaringDocIdSet$Builder)));
        }

        void t_RoaringDocIdSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet), "class_", make_descriptor(RoaringDocIdSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet), "wrapfn_", make_descriptor(t_RoaringDocIdSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RoaringDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RoaringDocIdSet::initializeClass, 1)))
            return NULL;
          return t_RoaringDocIdSet::wrap_Object(RoaringDocIdSet(((t_RoaringDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_RoaringDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RoaringDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RoaringDocIdSet_cardinality(t_RoaringDocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RoaringDocIdSet_iterator(t_RoaringDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RoaringDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_RoaringDocIdSet_ramBytesUsed(t_RoaringDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RoaringDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_RoaringDocIdSet_toString(t_RoaringDocIdSet *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(RoaringDocIdSet), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction::class$ = NULL;
            jmethodID *MultiFunction::mids$ = NULL;
            bool MultiFunction::live$ = false;

            jclass MultiFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_allExists_79d91b981374bcba] = env->getStaticMethodID(cls, "allExists", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_allExists_d3dc0352a2f5d844] = env->getStaticMethodID(cls, "allExists", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_anyExists_79d91b981374bcba] = env->getStaticMethodID(cls, "anyExists", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_anyExists_d3dc0352a2f5d844] = env->getStaticMethodID(cls, "anyExists", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_description_529403107c179f5f] = env->getStaticMethodID(cls, "description", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_b42438aa226c4ff5] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/String;[Lorg/apache/lucene/queries/function/FunctionValues;I)Ljava/lang/String;");
                mids$[mid_valsArr_6bca9607e0686ac4] = env->getStaticMethodID(cls, "valsArr", "(Ljava/util/List;Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)[Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction::MultiFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

            jboolean MultiFunction::allExists(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticBooleanMethod(cls, mids$[mid_allExists_79d91b981374bcba], a0, a1.this$);
            }

            jboolean MultiFunction::allExists(jint a0, const ::org::apache::lucene::queries::function::FunctionValues & a1, const ::org::apache::lucene::queries::function::FunctionValues & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticBooleanMethod(cls, mids$[mid_allExists_d3dc0352a2f5d844], a0, a1.this$, a2.this$);
            }

            jboolean MultiFunction::anyExists(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticBooleanMethod(cls, mids$[mid_anyExists_79d91b981374bcba], a0, a1.this$);
            }

            jboolean MultiFunction::anyExists(jint a0, const ::org::apache::lucene::queries::function::FunctionValues & a1, const ::org::apache::lucene::queries::function::FunctionValues & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticBooleanMethod(cls, mids$[mid_anyExists_d3dc0352a2f5d844], a0, a1.this$, a2.this$);
            }

            void MultiFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            ::java::lang::String MultiFunction::description(const ::java::lang::String & a0, const ::java::util::List & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_description_529403107c179f5f], a0.this$, a1.this$));
            }

            jboolean MultiFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint MultiFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String MultiFunction::toString(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_b42438aa226c4ff5], a0.this$, a1.this$, a2));
            }

            JArray< ::org::apache::lucene::queries::function::FunctionValues > MultiFunction::valsArr(const ::java::util::List & a0, const ::java::util::Map & a1, const ::org::apache::lucene::index::LeafReaderContext & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::org::apache::lucene::queries::function::FunctionValues >(env->callStaticObjectMethod(cls, mids$[mid_valsArr_6bca9607e0686ac4], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction_allExists(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_anyExists(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args);
            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args);
            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_MultiFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, allExists, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, anyExists, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, description_, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction, toString, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction, valsArr, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiFunction)[] = {
              { Py_tp_methods, t_MultiFunction__methods_ },
              { Py_tp_init, (void *) t_MultiFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(MultiFunction, t_MultiFunction, MultiFunction);

            void t_MultiFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction), &PY_TYPE_DEF(MultiFunction), module, "MultiFunction", 0);
            }

            void t_MultiFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction), "class_", make_descriptor(MultiFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction), "wrapfn_", make_descriptor(t_MultiFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFunction::wrap_Object(MultiFunction(((t_MultiFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction_init_(t_MultiFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction_allExists(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  jint a0;
                  JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::allExists(a0, a1));
                    Py_RETURN_BOOL(result);
                  }
                }
                break;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::queries::function::FunctionValues a1((jobject) NULL);
                  ::org::apache::lucene::queries::function::FunctionValues a2((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "Ikk", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::allExists(a0, a1, a2));
                    Py_RETURN_BOOL(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "allExists", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_anyExists(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  jint a0;
                  JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::anyExists(a0, a1));
                    Py_RETURN_BOOL(result);
                  }
                }
                break;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::queries::function::FunctionValues a1((jobject) NULL);
                  ::org::apache::lucene::queries::function::FunctionValues a2((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "Ikk", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::anyExists(a0, a1, a2));
                    Py_RETURN_BOOL(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "anyExists", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_createWeight(t_MultiFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(MultiFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFunction_description(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFunction_description_(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::description(a0, a1));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "description_", args);
              return NULL;
            }

            static PyObject *t_MultiFunction_equals(t_MultiFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFunction_hashCode(t_MultiFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MultiFunction_toString(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              jint a2;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[kI", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::toString(a0, a1, a2));
                return j2p(result);
              }

              return callSuper(type, "toString", args, 2);
            }

            static PyObject *t_MultiFunction_valsArr(PyTypeObject *type, PyObject *args)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::index::LeafReaderContext a2((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > result((jobject) NULL);

              if (!parseArgs(args, "KKk", ::java::util::List::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::queries::function::valuesource::MultiFunction::valsArr(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::queries::function::t_FunctionValues::wrap_jobject);
              }

              PyErr_SetArgsError(type, "valsArr", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailAnalyzer::class$ = NULL;
          jmethodID *UAX29URLEmailAnalyzer::mids$ = NULL;
          bool UAX29URLEmailAnalyzer::live$ = false;
          jint UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::CharArraySet *UAX29URLEmailAnalyzer::STOP_WORDS_SET = NULL;

          jclass UAX29URLEmailAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint UAX29URLEmailAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          void UAX29URLEmailAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self);
          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data);
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UAX29URLEmailAnalyzer)[] = {
            { Py_tp_methods, t_UAX29URLEmailAnalyzer__methods_ },
            { Py_tp_init, (void *) t_UAX29URLEmailAnalyzer_init_ },
            { Py_tp_getset, t_UAX29URLEmailAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UAX29URLEmailAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer, UAX29URLEmailAnalyzer);

          void t_UAX29URLEmailAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailAnalyzer), &PY_TYPE_DEF(UAX29URLEmailAnalyzer), module, "UAX29URLEmailAnalyzer", 0);
          }

          void t_UAX29URLEmailAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailAnalyzer), "class_", make_descriptor(UAX29URLEmailAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailAnalyzer), "wrapfn_", make_descriptor(t_UAX29URLEmailAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailAnalyzer), "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailAnalyzer), "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(*UAX29URLEmailAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailAnalyzer::wrap_Object(UAX29URLEmailAnalyzer(((t_UAX29URLEmailAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                UAX29URLEmailAnalyzer object((jobject) NULL);

                INT_CALL(object = UAX29URLEmailAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataInput::class$ = NULL;
          jmethodID *PackedDataInput::mids$ = NULL;
          bool PackedDataInput::live$ = false;

          jclass PackedDataInput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataInput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_be8da68faa81682c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_readLong_0f1d64a641e8af53] = env->getMethodID(cls, "readLong", "(I)J");
              mids$[mid_skipToNextByte_f2cc1bce94666404] = env->getMethodID(cls, "skipToNextByte", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataInput::PackedDataInput(const ::org::apache::lucene::store::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be8da68faa81682c, a0.this$)) {}

          jlong PackedDataInput::readLong(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_readLong_0f1d64a641e8af53], a0);
          }

          void PackedDataInput::skipToNextByte() const
          {
            env->callVoidMethod(this$, mids$[mid_skipToNextByte_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg);
          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self);

          static PyMethodDef t_PackedDataInput__methods_[] = {
            DECLARE_METHOD(t_PackedDataInput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, readLong, METH_O),
            DECLARE_METHOD(t_PackedDataInput, skipToNextByte, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedDataInput)[] = {
            { Py_tp_methods, t_PackedDataInput__methods_ },
            { Py_tp_init, (void *) t_PackedDataInput_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedDataInput)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedDataInput, t_PackedDataInput, PackedDataInput);

          void t_PackedDataInput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataInput), &PY_TYPE_DEF(PackedDataInput), module, "PackedDataInput", 0);
          }

          void t_PackedDataInput::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataInput), "class_", make_descriptor(PackedDataInput::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataInput), "wrapfn_", make_descriptor(t_PackedDataInput::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataInput), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataInput::initializeClass, 1)))
              return NULL;
            return t_PackedDataInput::wrap_Object(PackedDataInput(((t_PackedDataInput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataInput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            PackedDataInput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataInput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLong", arg);
            return NULL;
          }

          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self)
          {
            OBJ_CALL(self->object.skipToNextByte());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker$BreakSuggestionSortMethod::class$ = NULL;
          jmethodID *WordBreakSpellChecker$BreakSuggestionSortMethod::mids$ = NULL;
          bool WordBreakSpellChecker$BreakSuggestionSortMethod::live$ = false;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY = NULL;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY = NULL;

          jclass WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_672325964d93fdf7] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");
              mids$[mid_values_aa532b676f4da596] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NUM_CHANGES_THEN_MAX_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_MAX_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              NUM_CHANGES_THEN_SUMMED_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker$BreakSuggestionSortMethod WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return WordBreakSpellChecker$BreakSuggestionSortMethod(env->callStaticObjectMethod(cls, mids$[mid_valueOf_672325964d93fdf7], a0.this$));
          }

          JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > WordBreakSpellChecker$BreakSuggestionSortMethod::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< WordBreakSpellChecker$BreakSuggestionSortMethod >(env->callStaticObjectMethod(cls, mids$[mid_values_aa532b676f4da596]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data);
          static PyGetSetDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_[] = {
            DECLARE_GET_FIELD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordBreakSpellChecker$BreakSuggestionSortMethod)[] = {
            { Py_tp_methods, t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordBreakSpellChecker$BreakSuggestionSortMethod)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod, t_WordBreakSpellChecker$BreakSuggestionSortMethod, WordBreakSpellChecker$BreakSuggestionSortMethod);
          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(const WordBreakSpellChecker$BreakSuggestionSortMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), &PY_TYPE_DEF(WordBreakSpellChecker$BreakSuggestionSortMethod), module, "WordBreakSpellChecker$BreakSuggestionSortMethod", 0);
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), "class_", make_descriptor(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), "wrapfn_", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), "NUM_CHANGES_THEN_MAX_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), "NUM_CHANGES_THEN_SUMMED_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY)));
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(WordBreakSpellChecker$BreakSuggestionSortMethod(((t_WordBreakSpellChecker$BreakSuggestionSortMethod *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            WordBreakSpellChecker$BreakSuggestionSortMethod result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(a0));
              return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type)
          {
            JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::values());
            return JArray<jobject>(result.this$).wrap(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject);
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttributeImpl::class$ = NULL;
        jmethodID *PythonAttributeImpl::mids$ = NULL;
        bool PythonAttributeImpl::live$ = false;

        jclass PythonAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAttributeImpl::PythonAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean PythonAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void PythonAttributeImpl::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jint PythonAttributeImpl::hashCode() const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::util::AttributeImpl::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_hashCode_9972fcc56b44e79d]);
        }

        jlong PythonAttributeImpl::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonAttributeImpl::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self);
        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args);
        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args);
        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonAttributeImpl_reflectWith5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data);
        static PyGetSetDef t_PythonAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAttributeImpl, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_PythonAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PythonAttributeImpl, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonAttributeImpl)[] = {
          { Py_tp_methods, t_PythonAttributeImpl__methods_ },
          { Py_tp_init, (void *) t_PythonAttributeImpl_init_ },
          { Py_tp_getset, t_PythonAttributeImpl__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonAttributeImpl)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
          NULL
        };

        DEFINE_TYPE(PythonAttributeImpl, t_PythonAttributeImpl, PythonAttributeImpl);

        void t_PythonAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttributeImpl), &PY_TYPE_DEF(PythonAttributeImpl), module, "PythonAttributeImpl", 1);
        }

        void t_PythonAttributeImpl::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttributeImpl), "class_", make_descriptor(PythonAttributeImpl::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttributeImpl), "wrapfn_", make_descriptor(t_PythonAttributeImpl::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttributeImpl), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAttributeImpl::initializeClass);
          JNINativeMethod methods[] = {
            { "clear", "()V", (void *) t_PythonAttributeImpl_clear0 },
            { "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V", (void *) t_PythonAttributeImpl_copyTo1 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonAttributeImpl_equals2 },
            { "hashCode", "()I", (void *) t_PythonAttributeImpl_hashCode3 },
            { "pythonDecRef", "()V", (void *) t_PythonAttributeImpl_pythonDecRef4 },
            { "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V", (void *) t_PythonAttributeImpl_reflectWith5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_PythonAttributeImpl::wrap_Object(PythonAttributeImpl(((t_PythonAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_PythonAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAttributeImpl_init_(t_PythonAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          PythonAttributeImpl object((jobject) NULL);

          INT_CALL(object = PythonAttributeImpl());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAttributeImpl_equals(t_PythonAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PythonAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_finalize(t_PythonAttributeImpl *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAttributeImpl_hashCode(t_PythonAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PythonAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PythonAttributeImpl_pythonExtension(t_PythonAttributeImpl *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonAttributeImpl_clear0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonAttributeImpl_copyTo1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(::org::apache::lucene::util::AttributeImpl(a0));
          PyObject *result = PyObject_CallMethod(obj, "copyTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonAttributeImpl_equals2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonAttributeImpl_hashCode3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "hashCode", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("hashCode", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonAttributeImpl_pythonDecRef4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonAttributeImpl_reflectWith5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAttributeImpl::mids$[PythonAttributeImpl::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::util::t_AttributeReflector::wrap_Object(::org::apache::lucene::util::AttributeReflector(a0));
          PyObject *result = PyObject_CallMethod(obj, "reflectWith", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonAttributeImpl_get__self(t_PythonAttributeImpl *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/UnknownDictionary.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/dict/UnknownDictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "org/apache/lucene/analysis/ja/dict/CharacterDefinition.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *UnknownDictionary::class$ = NULL;
            jmethodID *UnknownDictionary::mids$ = NULL;
            bool UnknownDictionary::live$ = false;

            jclass UnknownDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/UnknownDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1548dd30612cf831] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_getCharacterDefinition_130a12a2a5322fc2] = env->getMethodID(cls, "getCharacterDefinition", "()Lorg/apache/lucene/analysis/ja/dict/CharacterDefinition;");
                mids$[mid_getInflectionForm_d7593acad64ef635] = env->getMethodID(cls, "getInflectionForm", "(I)Ljava/lang/String;");
                mids$[mid_getInflectionType_d7593acad64ef635] = env->getMethodID(cls, "getInflectionType", "(I)Ljava/lang/String;");
                mids$[mid_getInstance_a0ececa42eb06b0d] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ja/dict/UnknownDictionary;");
                mids$[mid_getReading_467f88cdc3f1f7b5] = env->getMethodID(cls, "getReading", "(I[CII)Ljava/lang/String;");
                mids$[mid_lookup_644fc0bf0aa7fb26] = env->getMethodID(cls, "lookup", "([CII)I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UnknownDictionary::UnknownDictionary(const ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::ja::dict::BinaryDictionary(env->newObject(initializeClass, &mids$, mid_init$_1548dd30612cf831, a0.this$, a1.this$)) {}

            ::org::apache::lucene::analysis::ja::dict::CharacterDefinition UnknownDictionary::getCharacterDefinition() const
            {
              return ::org::apache::lucene::analysis::ja::dict::CharacterDefinition(env->callObjectMethod(this$, mids$[mid_getCharacterDefinition_130a12a2a5322fc2]));
            }

            ::java::lang::String UnknownDictionary::getInflectionForm(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_d7593acad64ef635], a0));
            }

            ::java::lang::String UnknownDictionary::getInflectionType(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_d7593acad64ef635], a0));
            }

            UnknownDictionary UnknownDictionary::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return UnknownDictionary(env->callStaticObjectMethod(cls, mids$[mid_getInstance_a0ececa42eb06b0d]));
            }

            ::java::lang::String UnknownDictionary::getReading(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            jint UnknownDictionary::lookup(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              return env->callIntMethod(this$, mids$[mid_lookup_644fc0bf0aa7fb26], a0.this$, a1, a2);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_UnknownDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UnknownDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UnknownDictionary_init_(t_UnknownDictionary *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UnknownDictionary_getCharacterDefinition(t_UnknownDictionary *self);
            static PyObject *t_UnknownDictionary_getInflectionForm(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_getInflectionType(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_getInstance(PyTypeObject *type);
            static PyObject *t_UnknownDictionary_getReading(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_lookup(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_get__characterDefinition(t_UnknownDictionary *self, void *data);
            static PyObject *t_UnknownDictionary_get__instance(t_UnknownDictionary *self, void *data);
            static PyGetSetDef t_UnknownDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_UnknownDictionary, characterDefinition),
              DECLARE_GET_FIELD(t_UnknownDictionary, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UnknownDictionary__methods_[] = {
              DECLARE_METHOD(t_UnknownDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, getCharacterDefinition, METH_NOARGS),
              DECLARE_METHOD(t_UnknownDictionary, getInflectionForm, METH_VARARGS),
              DECLARE_METHOD(t_UnknownDictionary, getInflectionType, METH_VARARGS),
              DECLARE_METHOD(t_UnknownDictionary, getInstance, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, getReading, METH_VARARGS),
              DECLARE_METHOD(t_UnknownDictionary, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UnknownDictionary)[] = {
              { Py_tp_methods, t_UnknownDictionary__methods_ },
              { Py_tp_init, (void *) t_UnknownDictionary_init_ },
              { Py_tp_getset, t_UnknownDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UnknownDictionary)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::ja::dict::BinaryDictionary),
              NULL
            };

            DEFINE_TYPE(UnknownDictionary, t_UnknownDictionary, UnknownDictionary);

            void t_UnknownDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(UnknownDictionary), &PY_TYPE_DEF(UnknownDictionary), module, "UnknownDictionary", 0);
            }

            void t_UnknownDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "class_", make_descriptor(UnknownDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "wrapfn_", make_descriptor(t_UnknownDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UnknownDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UnknownDictionary::initializeClass, 1)))
                return NULL;
              return t_UnknownDictionary::wrap_Object(UnknownDictionary(((t_UnknownDictionary *) arg)->object.this$));
            }
            static PyObject *t_UnknownDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UnknownDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UnknownDictionary_init_(t_UnknownDictionary *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              UnknownDictionary object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ja::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = UnknownDictionary(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UnknownDictionary_getCharacterDefinition(t_UnknownDictionary *self)
            {
              ::org::apache::lucene::analysis::ja::dict::CharacterDefinition result((jobject) NULL);
              OBJ_CALL(result = self->object.getCharacterDefinition());
              return ::org::apache::lucene::analysis::ja::dict::t_CharacterDefinition::wrap_Object(result);
            }

            static PyObject *t_UnknownDictionary_getInflectionForm(t_UnknownDictionary *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionForm(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(UnknownDictionary), (PyObject *) self, "getInflectionForm", args, 2);
            }

            static PyObject *t_UnknownDictionary_getInflectionType(t_UnknownDictionary *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionType(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(UnknownDictionary), (PyObject *) self, "getInflectionType", args, 2);
            }

            static PyObject *t_UnknownDictionary_getInstance(PyTypeObject *type)
            {
              UnknownDictionary result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::UnknownDictionary::getInstance());
              return t_UnknownDictionary::wrap_Object(result);
            }

            static PyObject *t_UnknownDictionary_getReading(t_UnknownDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getReading(a0, a1, a2, a3));
                return j2p(result);
              }

              return callSuper(PY_TYPE(UnknownDictionary), (PyObject *) self, "getReading", args, 2);
            }

            static PyObject *t_UnknownDictionary_lookup(t_UnknownDictionary *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_UnknownDictionary_get__characterDefinition(t_UnknownDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ja::dict::CharacterDefinition value((jobject) NULL);
              OBJ_CALL(value = self->object.getCharacterDefinition());
              return ::org::apache::lucene::analysis::ja::dict::t_CharacterDefinition::wrap_Object(value);
            }

            static PyObject *t_UnknownDictionary_get__instance(t_UnknownDictionary *self, void *data)
            {
              UnknownDictionary value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_UnknownDictionary::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilterFactory::class$ = NULL;
          jmethodID *ElisionFilterFactory::mids$ = NULL;
          bool ElisionFilterFactory::live$ = false;
          ::java::lang::String *ElisionFilterFactory::NAME = NULL;

          jclass ElisionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilterFactory::ElisionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ElisionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void ElisionFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          ::org::apache::lucene::analysis::TokenStream ElisionFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args);
          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_normalize(t_ElisionFilterFactory *self, PyObject *args);

          static PyMethodDef t_ElisionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ElisionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_ElisionFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ElisionFilterFactory)[] = {
            { Py_tp_methods, t_ElisionFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ElisionFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ElisionFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ElisionFilterFactory, t_ElisionFilterFactory, ElisionFilterFactory);

          void t_ElisionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilterFactory), &PY_TYPE_DEF(ElisionFilterFactory), module, "ElisionFilterFactory", 0);
          }

          void t_ElisionFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilterFactory), "class_", make_descriptor(ElisionFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilterFactory), "wrapfn_", make_descriptor(t_ElisionFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ElisionFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilterFactory), "NAME", make_descriptor(j2p(*ElisionFilterFactory::NAME)));
          }

          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ElisionFilterFactory::wrap_Object(ElisionFilterFactory(((t_ElisionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ElisionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ElisionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ElisionFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ElisionFilterFactory_normalize(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ElisionFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeException::class$ = NULL;
        jmethodID *MergePolicy$MergeException::mids$ = NULL;
        bool MergePolicy$MergeException::live$ = false;

        jclass MergePolicy$MergeException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        MergePolicy$MergeException::MergePolicy$MergeException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$MergeException)[] = {
          { Py_tp_methods, t_MergePolicy$MergeException__methods_ },
          { Py_tp_init, (void *) t_MergePolicy$MergeException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$MergeException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(MergePolicy$MergeException, t_MergePolicy$MergeException, MergePolicy$MergeException);

        void t_MergePolicy$MergeException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeException), &PY_TYPE_DEF(MergePolicy$MergeException), module, "MergePolicy$MergeException", 0);
        }

        void t_MergePolicy$MergeException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeException), "class_", make_descriptor(MergePolicy$MergeException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeException), "wrapfn_", make_descriptor(t_MergePolicy$MergeException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeException::wrap_Object(MergePolicy$MergeException(((t_MergePolicy$MergeException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeException_init_(t_MergePolicy$MergeException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeException(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::Throwable a0((jobject) NULL);
              MergePolicy$MergeException object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
              {
                INT_CALL(object = MergePolicy$MergeException(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemmer::class$ = NULL;
          jmethodID *ArabicStemmer::mids$ = NULL;
          bool ArabicStemmer::live$ = false;
          jchar ArabicStemmer::ALEF = (jchar) 0;
          jchar ArabicStemmer::BEH = (jchar) 0;
          jchar ArabicStemmer::FEH = (jchar) 0;
          jchar ArabicStemmer::HEH = (jchar) 0;
          jchar ArabicStemmer::KAF = (jchar) 0;
          jchar ArabicStemmer::LAM = (jchar) 0;
          jchar ArabicStemmer::NOON = (jchar) 0;
          jchar ArabicStemmer::TEH = (jchar) 0;
          jchar ArabicStemmer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicStemmer::WAW = (jchar) 0;
          jchar ArabicStemmer::YEH = (jchar) 0;
          JArray< JArray< jchar > > *ArabicStemmer::prefixes = NULL;
          JArray< JArray< jchar > > *ArabicStemmer::suffixes = NULL;

          jclass ArabicStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");
              mids$[mid_stemPrefix_d4655f2a19359017] = env->getMethodID(cls, "stemPrefix", "([CI)I");
              mids$[mid_stemSuffix_d4655f2a19359017] = env->getMethodID(cls, "stemSuffix", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              BEH = env->getStaticCharField(cls, "BEH");
              FEH = env->getStaticCharField(cls, "FEH");
              HEH = env->getStaticCharField(cls, "HEH");
              KAF = env->getStaticCharField(cls, "KAF");
              LAM = env->getStaticCharField(cls, "LAM");
              NOON = env->getStaticCharField(cls, "NOON");
              TEH = env->getStaticCharField(cls, "TEH");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              WAW = env->getStaticCharField(cls, "WAW");
              YEH = env->getStaticCharField(cls, "YEH");
              prefixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "prefixes", "[[C"));
              suffixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "suffixes", "[[C"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemmer::ArabicStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint ArabicStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }

          jint ArabicStemmer::stemPrefix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemPrefix_d4655f2a19359017], a0.this$, a1);
          }

          jint ArabicStemmer::stemSuffix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemSuffix_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args);

          static PyMethodDef t_ArabicStemmer__methods_[] = {
            DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemPrefix, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemSuffix, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicStemmer)[] = {
            { Py_tp_methods, t_ArabicStemmer__methods_ },
            { Py_tp_init, (void *) t_ArabicStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ArabicStemmer, t_ArabicStemmer, ArabicStemmer);

          void t_ArabicStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemmer), &PY_TYPE_DEF(ArabicStemmer), module, "ArabicStemmer", 0);
          }

          void t_ArabicStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemmer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "ALEF", make_descriptor(ArabicStemmer::ALEF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "BEH", make_descriptor(ArabicStemmer::BEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "FEH", make_descriptor(ArabicStemmer::FEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "HEH", make_descriptor(ArabicStemmer::HEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "KAF", make_descriptor(ArabicStemmer::KAF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "LAM", make_descriptor(ArabicStemmer::LAM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "NOON", make_descriptor(ArabicStemmer::NOON));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "TEH", make_descriptor(ArabicStemmer::TEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "TEH_MARBUTA", make_descriptor(ArabicStemmer::TEH_MARBUTA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "WAW", make_descriptor(ArabicStemmer::WAW));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "YEH", make_descriptor(ArabicStemmer::YEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "prefixes", make_descriptor(JArray<jobject>(ArabicStemmer::prefixes->this$).wrap(NULL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "suffixes", make_descriptor(JArray<jobject>(ArabicStemmer::suffixes->this$).wrap(NULL)));
          }

          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
              return NULL;
            return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
          {
            ArabicStemmer object((jobject) NULL);

            INT_CALL(object = ArabicStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemPrefix(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemPrefix", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemSuffix(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemSuffix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AnyQueryNode::class$ = NULL;
              jmethodID *AnyQueryNode::mids$ = NULL;
              bool AnyQueryNode::live$ = false;

              jclass AnyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6c9c231617219dd5] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;I)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getMinimumMatchingElements_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumMatchingElements", "()I");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNode::AnyQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, jint a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6c9c231617219dd5, a0.this$, a1.this$, a2)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnyQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence AnyQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::java::lang::String AnyQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_db9b55ba01e03e4b]));
              }

              jint AnyQueryNode::getMinimumMatchingElements() const
              {
                return env->callIntMethod(this$, mids$[mid_getMinimumMatchingElements_9972fcc56b44e79d]);
              }

              void AnyQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence AnyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String AnyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg);
              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data);
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data);
              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data);
              static PyGetSetDef t_AnyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AnyQueryNode, field),
                DECLARE_GET_FIELD(t_AnyQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_AnyQueryNode, minimumMatchingElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AnyQueryNode__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getMinimumMatchingElements, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AnyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AnyQueryNode)[] = {
                { Py_tp_methods, t_AnyQueryNode__methods_ },
                { Py_tp_init, (void *) t_AnyQueryNode_init_ },
                { Py_tp_getset, t_AnyQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AnyQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode),
                NULL
              };

              DEFINE_TYPE(AnyQueryNode, t_AnyQueryNode, AnyQueryNode);

              void t_AnyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNode), &PY_TYPE_DEF(AnyQueryNode), module, "AnyQueryNode", 0);
              }

              void t_AnyQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNode), "class_", make_descriptor(AnyQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNode), "wrapfn_", make_descriptor(t_AnyQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNode::wrap_Object(AnyQueryNode(((t_AnyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                AnyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KOI", ::java::util::List::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnyQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AnyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getMinimumMatchingElements());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AnyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(AnyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getMinimumMatchingElements());
                return PyLong_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArabicStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArabicStemmer::class$ = NULL;
        jmethodID *ArabicStemmer::mids$ = NULL;
        bool ArabicStemmer::live$ = false;

        jclass ArabicStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArabicStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArabicStemmer::ArabicStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean ArabicStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint ArabicStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean ArabicStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArabicStemmer_equals(t_ArabicStemmer *self, PyObject *args);
        static PyObject *t_ArabicStemmer_hashCode(t_ArabicStemmer *self, PyObject *args);
        static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);

        static PyMethodDef t_ArabicStemmer__methods_[] = {
          DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArabicStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArabicStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ArabicStemmer)[] = {
          { Py_tp_methods, t_ArabicStemmer__methods_ },
          { Py_tp_init, (void *) t_ArabicStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ArabicStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(ArabicStemmer, t_ArabicStemmer, ArabicStemmer);

        void t_ArabicStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArabicStemmer), &PY_TYPE_DEF(ArabicStemmer), module, "ArabicStemmer", 0);
        }

        void t_ArabicStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
            return NULL;
          return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArabicStemmer object((jobject) NULL);

          INT_CALL(object = ArabicStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArabicStemmer_equals(t_ArabicStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ArabicStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArabicStemmer_hashCode(t_ArabicStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ArabicStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ArabicStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionTerms.h"
#include "org/apache/lucene/search/suggest/document/NRTSuggester.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionTerms::class$ = NULL;
            jmethodID *CompletionTerms::mids$ = NULL;
            bool CompletionTerms::live$ = false;

            jclass CompletionTerms::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionTerms");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxWeight_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMaxWeight", "()J");
                mids$[mid_getMinWeight_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMinWeight", "()J");
                mids$[mid_getType_871cd52a74f26213] = env->getMethodID(cls, "getType", "()B");
                mids$[mid_suggester_05382a7351c5bba9] = env->getMethodID(cls, "suggester", "()Lorg/apache/lucene/search/suggest/document/NRTSuggester;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jlong CompletionTerms::getMaxWeight() const
            {
              return env->callLongMethod(this$, mids$[mid_getMaxWeight_2e5ae9edcb9b072f]);
            }

            jlong CompletionTerms::getMinWeight() const
            {
              return env->callLongMethod(this$, mids$[mid_getMinWeight_2e5ae9edcb9b072f]);
            }

            jbyte CompletionTerms::getType() const
            {
              return env->callByteMethod(this$, mids$[mid_getType_871cd52a74f26213]);
            }

            ::org::apache::lucene::search::suggest::document::NRTSuggester CompletionTerms::suggester() const
            {
              return ::org::apache::lucene::search::suggest::document::NRTSuggester(env->callObjectMethod(this$, mids$[mid_suggester_05382a7351c5bba9]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionTerms_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionTerms_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionTerms_getMaxWeight(t_CompletionTerms *self);
            static PyObject *t_CompletionTerms_getMinWeight(t_CompletionTerms *self);
            static PyObject *t_CompletionTerms_getType(t_CompletionTerms *self);
            static PyObject *t_CompletionTerms_suggester(t_CompletionTerms *self);
            static PyObject *t_CompletionTerms_get__maxWeight(t_CompletionTerms *self, void *data);
            static PyObject *t_CompletionTerms_get__minWeight(t_CompletionTerms *self, void *data);
            static PyObject *t_CompletionTerms_get__type(t_CompletionTerms *self, void *data);
            static PyGetSetDef t_CompletionTerms__fields_[] = {
              DECLARE_GET_FIELD(t_CompletionTerms, maxWeight),
              DECLARE_GET_FIELD(t_CompletionTerms, minWeight),
              DECLARE_GET_FIELD(t_CompletionTerms, type),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionTerms__methods_[] = {
              DECLARE_METHOD(t_CompletionTerms, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionTerms, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionTerms, getMaxWeight, METH_NOARGS),
              DECLARE_METHOD(t_CompletionTerms, getMinWeight, METH_NOARGS),
              DECLARE_METHOD(t_CompletionTerms, getType, METH_NOARGS),
              DECLARE_METHOD(t_CompletionTerms, suggester, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionTerms)[] = {
              { Py_tp_methods, t_CompletionTerms__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CompletionTerms__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionTerms)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader$FilterTerms),
              NULL
            };

            DEFINE_TYPE(CompletionTerms, t_CompletionTerms, CompletionTerms);

            void t_CompletionTerms::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionTerms), &PY_TYPE_DEF(CompletionTerms), module, "CompletionTerms", 0);
            }

            void t_CompletionTerms::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTerms), "class_", make_descriptor(CompletionTerms::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTerms), "wrapfn_", make_descriptor(t_CompletionTerms::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTerms), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionTerms_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionTerms::initializeClass, 1)))
                return NULL;
              return t_CompletionTerms::wrap_Object(CompletionTerms(((t_CompletionTerms *) arg)->object.this$));
            }
            static PyObject *t_CompletionTerms_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionTerms::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionTerms_getMaxWeight(t_CompletionTerms *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getMaxWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_CompletionTerms_getMinWeight(t_CompletionTerms *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getMinWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_CompletionTerms_getType(t_CompletionTerms *self)
            {
              jbyte result;
              OBJ_CALL(result = self->object.getType());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CompletionTerms_suggester(t_CompletionTerms *self)
            {
              ::org::apache::lucene::search::suggest::document::NRTSuggester result((jobject) NULL);
              OBJ_CALL(result = self->object.suggester());
              return ::org::apache::lucene::search::suggest::document::t_NRTSuggester::wrap_Object(result);
            }

            static PyObject *t_CompletionTerms_get__maxWeight(t_CompletionTerms *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getMaxWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_CompletionTerms_get__minWeight(t_CompletionTerms *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getMinWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_CompletionTerms_get__type(t_CompletionTerms *self, void *data)
            {
              jbyte value;
              OBJ_CALL(value = self->object.getType());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STMergingTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STMergingTermsEnum::class$ = NULL;
            jmethodID *STMergingTermsEnum::mids$ = NULL;
            bool STMergingTermsEnum::live$ = false;

            jclass STMergingTermsEnum::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STMergingTermsEnum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
                mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
                mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
                mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
                mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
                mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
                mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
                mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
                mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
                mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");
                mids$[mid_reset_270433669c4cfd00] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/List;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::util::AttributeSource STMergingTermsEnum::attributes() const
            {
              return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
            }

            jint STMergingTermsEnum::docFreq() const
            {
              return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
            }

            ::org::apache::lucene::index::ImpactsEnum STMergingTermsEnum::impacts(jint a0) const
            {
              return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
            }

            ::org::apache::lucene::util::BytesRef STMergingTermsEnum::next() const
            {
              return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
            }

            jlong STMergingTermsEnum::ord() const
            {
              return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
            }

            ::org::apache::lucene::index::PostingsEnum STMergingTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
            {
              return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
            }

            ::org::apache::lucene::index::TermsEnum$SeekStatus STMergingTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
            }

            jboolean STMergingTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
            }

            void STMergingTermsEnum::seekExact(jlong a0) const
            {
              env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
            }

            void STMergingTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
            }

            ::org::apache::lucene::util::BytesRef STMergingTermsEnum::term() const
            {
              return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
            }

            ::org::apache::lucene::index::TermState STMergingTermsEnum::termState() const
            {
              return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
            }

            jlong STMergingTermsEnum::totalTermFreq() const
            {
              return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STMergingTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STMergingTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STMergingTermsEnum_attributes(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_docFreq(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_impacts(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_next(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_ord(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_postings(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_seekCeil(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_seekExact(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_term(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_termState(t_STMergingTermsEnum *self, PyObject *args);
            static PyObject *t_STMergingTermsEnum_totalTermFreq(t_STMergingTermsEnum *self, PyObject *args);

            static PyMethodDef t_STMergingTermsEnum__methods_[] = {
              DECLARE_METHOD(t_STMergingTermsEnum, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STMergingTermsEnum, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STMergingTermsEnum, attributes, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, docFreq, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, impacts, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, next, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, ord, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, postings, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, seekCeil, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, seekExact, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, term, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, termState, METH_VARARGS),
              DECLARE_METHOD(t_STMergingTermsEnum, totalTermFreq, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STMergingTermsEnum)[] = {
              { Py_tp_methods, t_STMergingTermsEnum__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_iter, (void *) PyObject_SelfIter },
              { Py_tp_iternext, (void *) ((PyObject *(*)(t_STMergingTermsEnum *)) get_next< t_STMergingTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STMergingTermsEnum)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::index::TermsEnum),
              NULL
            };

            DEFINE_TYPE(STMergingTermsEnum, t_STMergingTermsEnum, STMergingTermsEnum);

            void t_STMergingTermsEnum::install(PyObject *module)
            {
              installType(&PY_TYPE(STMergingTermsEnum), &PY_TYPE_DEF(STMergingTermsEnum), module, "STMergingTermsEnum", 0);
            }

            void t_STMergingTermsEnum::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingTermsEnum), "class_", make_descriptor(STMergingTermsEnum::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingTermsEnum), "wrapfn_", make_descriptor(t_STMergingTermsEnum::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STMergingTermsEnum), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STMergingTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STMergingTermsEnum::initializeClass, 1)))
                return NULL;
              return t_STMergingTermsEnum::wrap_Object(STMergingTermsEnum(((t_STMergingTermsEnum *) arg)->object.this$));
            }
            static PyObject *t_STMergingTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STMergingTermsEnum::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_STMergingTermsEnum_attributes(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.attributes());
                return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "attributes", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_docFreq(t_STMergingTermsEnum *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.docFreq());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "docFreq", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_impacts(t_STMergingTermsEnum *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.impacts(a0));
                return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "impacts", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_next(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.next());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "next", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_ord(t_STMergingTermsEnum *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ord());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "ord", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_postings(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.postings(a0, a1));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "postings", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_seekCeil(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekCeil(a0));
                return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "seekCeil", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_seekExact(t_STMergingTermsEnum *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                  jboolean result;

                  if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.seekExact(a0));
                    Py_RETURN_BOOL(result);
                  }
                }
                {
                  jlong a0;

                  if (!parseArgs(args, "J", &a0))
                  {
                    OBJ_CALL(self->object.seekExact(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                  ::org::apache::lucene::index::TermState a1((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.seekExact(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "seekExact", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_term(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.term());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "term", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_termState(t_STMergingTermsEnum *self, PyObject *args)
            {
              ::org::apache::lucene::index::TermState result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.termState());
                return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "termState", args, 2);
            }

            static PyObject *t_STMergingTermsEnum_totalTermFreq(t_STMergingTermsEnum *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.totalTermFreq());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(STMergingTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoCompositePolygon.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygon.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoCompositePolygon::class$ = NULL;
          jmethodID *GeoCompositePolygon::mids$ = NULL;
          bool GeoCompositePolygon::live$ = false;

          jclass GeoCompositePolygon::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoCompositePolygon");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_init$_fa69e987247475d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoCompositePolygon::GeoCompositePolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          GeoCompositePolygon::GeoCompositePolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fa69e987247475d8, a0.this$, a1.this$)) {}

          jboolean GeoCompositePolygon::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String GeoCompositePolygon::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoCompositePolygon_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositePolygon_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositePolygon_of_(t_GeoCompositePolygon *self, PyObject *args);
          static int t_GeoCompositePolygon_init_(t_GeoCompositePolygon *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoCompositePolygon_equals(t_GeoCompositePolygon *self, PyObject *args);
          static PyObject *t_GeoCompositePolygon_toString(t_GeoCompositePolygon *self, PyObject *args);
          static PyObject *t_GeoCompositePolygon_get__parameters_(t_GeoCompositePolygon *self, void *data);
          static PyGetSetDef t_GeoCompositePolygon__fields_[] = {
            DECLARE_GET_FIELD(t_GeoCompositePolygon, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoCompositePolygon__methods_[] = {
            DECLARE_METHOD(t_GeoCompositePolygon, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositePolygon, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositePolygon, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositePolygon, equals, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositePolygon, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoCompositePolygon)[] = {
            { Py_tp_methods, t_GeoCompositePolygon__methods_ },
            { Py_tp_init, (void *) t_GeoCompositePolygon_init_ },
            { Py_tp_getset, t_GeoCompositePolygon__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoCompositePolygon)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoCompositePolygon, t_GeoCompositePolygon, GeoCompositePolygon);
          PyObject *t_GeoCompositePolygon::wrap_Object(const GeoCompositePolygon& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositePolygon::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositePolygon *self = (t_GeoCompositePolygon *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoCompositePolygon::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositePolygon::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositePolygon *self = (t_GeoCompositePolygon *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoCompositePolygon::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoCompositePolygon), &PY_TYPE_DEF(GeoCompositePolygon), module, "GeoCompositePolygon", 0);
          }

          void t_GeoCompositePolygon::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositePolygon), "class_", make_descriptor(GeoCompositePolygon::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositePolygon), "wrapfn_", make_descriptor(t_GeoCompositePolygon::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositePolygon), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoCompositePolygon_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoCompositePolygon::initializeClass, 1)))
              return NULL;
            return t_GeoCompositePolygon::wrap_Object(GeoCompositePolygon(((t_GeoCompositePolygon *) arg)->object.this$));
          }
          static PyObject *t_GeoCompositePolygon_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoCompositePolygon::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoCompositePolygon_of_(t_GeoCompositePolygon *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GeoCompositePolygon_init_(t_GeoCompositePolygon *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                GeoCompositePolygon object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
                {
                  INT_CALL(object = GeoCompositePolygon(a0));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoPolygon);
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                GeoCompositePolygon object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GeoCompositePolygon(a0, a1));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoPolygon);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoCompositePolygon_equals(t_GeoCompositePolygon *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoCompositePolygon), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GeoCompositePolygon_toString(t_GeoCompositePolygon *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GeoCompositePolygon), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_GeoCompositePolygon_get__parameters_(t_GeoCompositePolygon *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPath.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPath::class$ = NULL;
          jmethodID *GeoPath::mids$ = NULL;
          bool GeoPath::live$ = false;

          jclass GeoPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeNearestDistance_d330d2576549fa67] = env->getMethodID(cls, "computeNearestDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeNearestDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeNearestDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_computePathCenterDistance_d330d2576549fa67] = env->getMethodID(cls, "computePathCenterDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computePathCenterDistance_2b407c8141eb9589] = env->getMethodID(cls, "computePathCenterDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble GeoPath::computeNearestDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeNearestDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoPath::computeNearestDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeNearestDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }

          jdouble GeoPath::computePathCenterDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computePathCenterDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoPath::computePathCenterDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computePathCenterDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPath_computeNearestDistance(t_GeoPath *self, PyObject *args);
          static PyObject *t_GeoPath_computePathCenterDistance(t_GeoPath *self, PyObject *args);

          static PyMethodDef t_GeoPath__methods_[] = {
            DECLARE_METHOD(t_GeoPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPath, computeNearestDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoPath, computePathCenterDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPath)[] = {
            { Py_tp_methods, t_GeoPath__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPath)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoDistanceShape),
            NULL
          };

          DEFINE_TYPE(GeoPath, t_GeoPath, GeoPath);

          void t_GeoPath::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPath), &PY_TYPE_DEF(GeoPath), module, "GeoPath", 0);
          }

          void t_GeoPath::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPath), "class_", make_descriptor(GeoPath::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPath), "wrapfn_", make_descriptor(t_GeoPath::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPath), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPath::initializeClass, 1)))
              return NULL;
            return t_GeoPath::wrap_Object(GeoPath(((t_GeoPath *) arg)->object.this$));
          }
          static PyObject *t_GeoPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoPath_computeNearestDistance(t_GeoPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeNearestDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeNearestDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeNearestDistance", args);
            return NULL;
          }

          static PyObject *t_GeoPath_computePathCenterDistance(t_GeoPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computePathCenterDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computePathCenterDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computePathCenterDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$IntSorter.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$IntSorter::class$ = NULL;
        jmethodID *IndexSorter$IntSorter::mids$ = NULL;
        bool IndexSorter$IntSorter::live$ = false;

        jclass IndexSorter$IntSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$IntSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1f9c919ee1dbc343] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Integer;ZLorg/apache/lucene/index/IndexSorter$NumericDocValuesProvider;)V");
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSorter$IntSorter::IndexSorter$IntSorter(const ::java::lang::String & a0, const ::java::lang::Integer & a1, jboolean a2, const ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1f9c919ee1dbc343, a0.this$, a1.this$, a2, a3.this$)) {}

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter$IntSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter$IntSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter$IntSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$IntSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$IntSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSorter$IntSorter_init_(t_IndexSorter$IntSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSorter$IntSorter_getComparableProviders(t_IndexSorter$IntSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter$IntSorter_getDocComparator(t_IndexSorter$IntSorter *self, PyObject *args);
        static PyObject *t_IndexSorter$IntSorter_getProviderName(t_IndexSorter$IntSorter *self);
        static PyObject *t_IndexSorter$IntSorter_get__providerName(t_IndexSorter$IntSorter *self, void *data);
        static PyGetSetDef t_IndexSorter$IntSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter$IntSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter$IntSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$IntSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$IntSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$IntSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter$IntSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter$IntSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$IntSorter)[] = {
          { Py_tp_methods, t_IndexSorter$IntSorter__methods_ },
          { Py_tp_init, (void *) t_IndexSorter$IntSorter_init_ },
          { Py_tp_getset, t_IndexSorter$IntSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$IntSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$IntSorter, t_IndexSorter$IntSorter, IndexSorter$IntSorter);

        void t_IndexSorter$IntSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$IntSorter), &PY_TYPE_DEF(IndexSorter$IntSorter), module, "IndexSorter$IntSorter", 0);
        }

        void t_IndexSorter$IntSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$IntSorter), "class_", make_descriptor(IndexSorter$IntSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$IntSorter), "wrapfn_", make_descriptor(t_IndexSorter$IntSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$IntSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$IntSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$IntSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$IntSorter::wrap_Object(IndexSorter$IntSorter(((t_IndexSorter$IntSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$IntSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$IntSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSorter$IntSorter_init_(t_IndexSorter$IntSorter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Integer a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider a3((jobject) NULL);
          IndexSorter$IntSorter object((jobject) NULL);

          if (!parseArgs(args, "sOZk", ::java::lang::PY_TYPE(Integer), ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSorter$IntSorter(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSorter$IntSorter_getComparableProviders(t_IndexSorter$IntSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter$IntSorter_getDocComparator(t_IndexSorter$IntSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter$IntSorter_getProviderName(t_IndexSorter$IntSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter$IntSorter_get__providerName(t_IndexSorter$IntSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFragmenter::class$ = NULL;
          jmethodID *PythonFragmenter::mids$ = NULL;
          bool PythonFragmenter::live$ = false;

          jclass PythonFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_isNewFragment_8454bd5aa23fd11e] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_start_c5ab6d211d8d31bc] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFragmenter::PythonFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonFragmenter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonFragmenter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonFragmenter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self);
          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args);
          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data);
          static PyGetSetDef t_PythonFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFragmenter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFragmenter__methods_[] = {
            DECLARE_METHOD(t_PythonFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFragmenter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonFragmenter)[] = {
            { Py_tp_methods, t_PythonFragmenter__methods_ },
            { Py_tp_init, (void *) t_PythonFragmenter_init_ },
            { Py_tp_getset, t_PythonFragmenter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonFragmenter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PythonFragmenter, t_PythonFragmenter, PythonFragmenter);

          void t_PythonFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFragmenter), &PY_TYPE_DEF(PythonFragmenter), module, "PythonFragmenter", 1);
          }

          void t_PythonFragmenter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFragmenter), "class_", make_descriptor(PythonFragmenter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFragmenter), "wrapfn_", make_descriptor(t_PythonFragmenter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFragmenter), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFragmenter::initializeClass);
            JNINativeMethod methods[] = {
              { "isNewFragment", "()Z", (void *) t_PythonFragmenter_isNewFragment0 },
              { "pythonDecRef", "()V", (void *) t_PythonFragmenter_pythonDecRef1 },
              { "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V", (void *) t_PythonFragmenter_start2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFragmenter::initializeClass, 1)))
              return NULL;
            return t_PythonFragmenter::wrap_Object(PythonFragmenter(((t_PythonFragmenter *) arg)->object.this$));
          }
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds)
          {
            PythonFragmenter object((jobject) NULL);

            INT_CALL(object = PythonFragmenter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isNewFragment", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isNewFragment", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(::org::apache::lucene::analysis::TokenStream(a1));
            PyObject *result = PyObject_CallMethod(obj, "start", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PointInSetQuery.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PointInSetQuery::class$ = NULL;
        jmethodID *PointInSetQuery::mids$ = NULL;
        bool PointInSetQuery::live$ = false;

        jclass PointInSetQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PointInSetQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesPerDim_9972fcc56b44e79d] = env->getMethodID(cls, "getBytesPerDim", "()I");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getNumDims_9972fcc56b44e79d] = env->getMethodID(cls, "getNumDims", "()I");
            mids$[mid_getPackedPoints_d4dfbf7a26ff41df] = env->getMethodID(cls, "getPackedPoints", "()Ljava/util/Collection;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_toString_724cde42c4d4b340] = env->getMethodID(cls, "toString", "([B)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight PointInSetQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean PointInSetQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PointInSetQuery::getBytesPerDim() const
        {
          return env->callIntMethod(this$, mids$[mid_getBytesPerDim_9972fcc56b44e79d]);
        }

        ::java::lang::String PointInSetQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        jint PointInSetQuery::getNumDims() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumDims_9972fcc56b44e79d]);
        }

        ::java::util::Collection PointInSetQuery::getPackedPoints() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPackedPoints_d4dfbf7a26ff41df]));
        }

        jint PointInSetQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong PointInSetQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String PointInSetQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void PointInSetQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/PointInSetQuery$Stream.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PointInSetQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointInSetQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointInSetQuery_createWeight(t_PointInSetQuery *self, PyObject *args);
        static PyObject *t_PointInSetQuery_equals(t_PointInSetQuery *self, PyObject *args);
        static PyObject *t_PointInSetQuery_getBytesPerDim(t_PointInSetQuery *self);
        static PyObject *t_PointInSetQuery_getField(t_PointInSetQuery *self);
        static PyObject *t_PointInSetQuery_getNumDims(t_PointInSetQuery *self);
        static PyObject *t_PointInSetQuery_getPackedPoints(t_PointInSetQuery *self);
        static PyObject *t_PointInSetQuery_hashCode(t_PointInSetQuery *self, PyObject *args);
        static PyObject *t_PointInSetQuery_ramBytesUsed(t_PointInSetQuery *self);
        static PyObject *t_PointInSetQuery_toString(t_PointInSetQuery *self, PyObject *args);
        static PyObject *t_PointInSetQuery_visit(t_PointInSetQuery *self, PyObject *args);
        static PyObject *t_PointInSetQuery_get__bytesPerDim(t_PointInSetQuery *self, void *data);
        static PyObject *t_PointInSetQuery_get__field(t_PointInSetQuery *self, void *data);
        static PyObject *t_PointInSetQuery_get__numDims(t_PointInSetQuery *self, void *data);
        static PyObject *t_PointInSetQuery_get__packedPoints(t_PointInSetQuery *self, void *data);
        static PyGetSetDef t_PointInSetQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PointInSetQuery, bytesPerDim),
          DECLARE_GET_FIELD(t_PointInSetQuery, field),
          DECLARE_GET_FIELD(t_PointInSetQuery, numDims),
          DECLARE_GET_FIELD(t_PointInSetQuery, packedPoints),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PointInSetQuery__methods_[] = {
          DECLARE_METHOD(t_PointInSetQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointInSetQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointInSetQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PointInSetQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PointInSetQuery, getBytesPerDim, METH_NOARGS),
          DECLARE_METHOD(t_PointInSetQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_PointInSetQuery, getNumDims, METH_NOARGS),
          DECLARE_METHOD(t_PointInSetQuery, getPackedPoints, METH_NOARGS),
          DECLARE_METHOD(t_PointInSetQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PointInSetQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_PointInSetQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_PointInSetQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointInSetQuery)[] = {
          { Py_tp_methods, t_PointInSetQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PointInSetQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointInSetQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(PointInSetQuery, t_PointInSetQuery, PointInSetQuery);

        void t_PointInSetQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PointInSetQuery), &PY_TYPE_DEF(PointInSetQuery), module, "PointInSetQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery), "Stream", make_descriptor(&PY_TYPE_DEF(PointInSetQuery$Stream)));
        }

        void t_PointInSetQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery), "class_", make_descriptor(PointInSetQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery), "wrapfn_", make_descriptor(t_PointInSetQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointInSetQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointInSetQuery::initializeClass, 1)))
            return NULL;
          return t_PointInSetQuery::wrap_Object(PointInSetQuery(((t_PointInSetQuery *) arg)->object.this$));
        }
        static PyObject *t_PointInSetQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointInSetQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointInSetQuery_createWeight(t_PointInSetQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PointInSetQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PointInSetQuery_equals(t_PointInSetQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PointInSetQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PointInSetQuery_getBytesPerDim(t_PointInSetQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBytesPerDim());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointInSetQuery_getField(t_PointInSetQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_PointInSetQuery_getNumDims(t_PointInSetQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumDims());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointInSetQuery_getPackedPoints(t_PointInSetQuery *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getPackedPoints());
          return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_PointInSetQuery_hashCode(t_PointInSetQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PointInSetQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PointInSetQuery_ramBytesUsed(t_PointInSetQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PointInSetQuery_toString(t_PointInSetQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(PointInSetQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PointInSetQuery_visit(t_PointInSetQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PointInSetQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_PointInSetQuery_get__bytesPerDim(t_PointInSetQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getBytesPerDim());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointInSetQuery_get__field(t_PointInSetQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_PointInSetQuery_get__numDims(t_PointInSetQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumDims());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointInSetQuery_get__packedPoints(t_PointInSetQuery *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getPackedPoints());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilter.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilter::class$ = NULL;
          jmethodID *HunspellStemFilter::mids$ = NULL;
          bool HunspellStemFilter::live$ = false;

          jclass HunspellStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59ff594a2dd1b954] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_6077f45aba152e78] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;Z)V");
              mids$[mid_init$_8951428b09abe1b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;ZZ)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_59ff594a2dd1b954, a0.this$, a1.this$)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6077f45aba152e78, a0.this$, a1.this$, a2)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8951428b09abe1b3, a0.this$, a1.this$, a2, a3)) {}

          jboolean HunspellStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void HunspellStemFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args);
          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args);

          static PyMethodDef t_HunspellStemFilter__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HunspellStemFilter)[] = {
            { Py_tp_methods, t_HunspellStemFilter__methods_ },
            { Py_tp_init, (void *) t_HunspellStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HunspellStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(HunspellStemFilter, t_HunspellStemFilter, HunspellStemFilter);

          void t_HunspellStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilter), &PY_TYPE_DEF(HunspellStemFilter), module, "HunspellStemFilter", 0);
          }

          void t_HunspellStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilter), "class_", make_descriptor(HunspellStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilter), "wrapfn_", make_descriptor(t_HunspellStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilter::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilter::wrap_Object(HunspellStemFilter(((t_HunspellStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(HunspellStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(HunspellStemFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIteratorWithSubs.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OffsetsEnum$OfMatchesIteratorWithSubs::class$ = NULL;
          jmethodID *OffsetsEnum$OfMatchesIteratorWithSubs::mids$ = NULL;
          bool OffsetsEnum$OfMatchesIteratorWithSubs::live$ = false;

          jclass OffsetsEnum$OfMatchesIteratorWithSubs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIteratorWithSubs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1e369679cdff28c9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MatchesIterator;)V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_nextPosition_8454bd5aa23fd11e] = env->getMethodID(cls, "nextPosition", "()Z");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetsEnum$OfMatchesIteratorWithSubs::OffsetsEnum$OfMatchesIteratorWithSubs(const ::org::apache::lucene::search::MatchesIterator & a0) : ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->newObject(initializeClass, &mids$, mid_init$_1e369679cdff28c9, a0.this$)) {}

          jint OffsetsEnum$OfMatchesIteratorWithSubs::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jint OffsetsEnum$OfMatchesIteratorWithSubs::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef OffsetsEnum$OfMatchesIteratorWithSubs::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jboolean OffsetsEnum$OfMatchesIteratorWithSubs::nextPosition() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nextPosition_8454bd5aa23fd11e]);
          }

          jint OffsetsEnum$OfMatchesIteratorWithSubs::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetsEnum$OfMatchesIteratorWithSubs_init_(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_endOffset(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_freq(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_getTerm(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_nextPosition(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_startOffset(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_get__term(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, void *data);
          static PyGetSetDef t_OffsetsEnum$OfMatchesIteratorWithSubs__fields_[] = {
            DECLARE_GET_FIELD(t_OffsetsEnum$OfMatchesIteratorWithSubs, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffsetsEnum$OfMatchesIteratorWithSubs__methods_[] = {
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, endOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, freq, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, getTerm, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, nextPosition, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfMatchesIteratorWithSubs, startOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetsEnum$OfMatchesIteratorWithSubs)[] = {
            { Py_tp_methods, t_OffsetsEnum$OfMatchesIteratorWithSubs__methods_ },
            { Py_tp_init, (void *) t_OffsetsEnum$OfMatchesIteratorWithSubs_init_ },
            { Py_tp_getset, t_OffsetsEnum$OfMatchesIteratorWithSubs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetsEnum$OfMatchesIteratorWithSubs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::OffsetsEnum),
            NULL
          };

          DEFINE_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs, t_OffsetsEnum$OfMatchesIteratorWithSubs, OffsetsEnum$OfMatchesIteratorWithSubs);

          void t_OffsetsEnum$OfMatchesIteratorWithSubs::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), &PY_TYPE_DEF(OffsetsEnum$OfMatchesIteratorWithSubs), module, "OffsetsEnum$OfMatchesIteratorWithSubs", 0);
          }

          void t_OffsetsEnum$OfMatchesIteratorWithSubs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), "class_", make_descriptor(OffsetsEnum$OfMatchesIteratorWithSubs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), "wrapfn_", make_descriptor(t_OffsetsEnum$OfMatchesIteratorWithSubs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetsEnum$OfMatchesIteratorWithSubs::initializeClass, 1)))
              return NULL;
            return t_OffsetsEnum$OfMatchesIteratorWithSubs::wrap_Object(OffsetsEnum$OfMatchesIteratorWithSubs(((t_OffsetsEnum$OfMatchesIteratorWithSubs *) arg)->object.this$));
          }
          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetsEnum$OfMatchesIteratorWithSubs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetsEnum$OfMatchesIteratorWithSubs_init_(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MatchesIterator a0((jobject) NULL);
            OffsetsEnum$OfMatchesIteratorWithSubs object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MatchesIterator::initializeClass, &a0))
            {
              INT_CALL(object = OffsetsEnum$OfMatchesIteratorWithSubs(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_endOffset(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), (PyObject *) self, "endOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_freq(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_getTerm(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), (PyObject *) self, "getTerm", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_nextPosition(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextPosition());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), (PyObject *) self, "nextPosition", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_startOffset(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfMatchesIteratorWithSubs), (PyObject *) self, "startOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfMatchesIteratorWithSubs_get__term(t_OffsetsEnum$OfMatchesIteratorWithSubs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery::class$ = NULL;
        jmethodID *PhraseQuery::mids$ = NULL;
        bool PhraseQuery::live$ = false;

        jclass PhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e15507bf45c25446] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_init$_890b82217556b281] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_0b968c11f9149986] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_init$_baafb7a433bab358] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getPositions_d2c45ef07a322466] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTerms_6715d5a0d228688a] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery::PhraseQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e15507bf45c25446, a0.this$, a1.this$)) {}

        PhraseQuery::PhraseQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_890b82217556b281, a0.this$, a1.this$)) {}

        PhraseQuery::PhraseQuery(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_0b968c11f9149986, a0, a1.this$, a2.this$)) {}

        PhraseQuery::PhraseQuery(jint a0, const ::java::lang::String & a1, const JArray< ::org::apache::lucene::util::BytesRef > & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_baafb7a433bab358, a0, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Weight PhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean PhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String PhraseQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        JArray< jint > PhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_d2c45ef07a322466]));
        }

        jint PhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_9972fcc56b44e79d]);
        }

        JArray< ::org::apache::lucene::index::Term > PhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_6715d5a0d228688a]));
        }

        jint PhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query PhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String PhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void PhraseQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/PhraseQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_getField(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_visit(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_get__field(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data);
        static PyGetSetDef t_PhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseQuery, field),
          DECLARE_GET_FIELD(t_PhraseQuery, positions),
          DECLARE_GET_FIELD(t_PhraseQuery, slop),
          DECLARE_GET_FIELD(t_PhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseQuery)[] = {
          { Py_tp_methods, t_PhraseQuery__methods_ },
          { Py_tp_init, (void *) t_PhraseQuery_init_ },
          { Py_tp_getset, t_PhraseQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(PhraseQuery, t_PhraseQuery, PhraseQuery);

        void t_PhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery), &PY_TYPE_DEF(PhraseQuery), module, "PhraseQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery), "Builder", make_descriptor(&PY_TYPE_DEF(PhraseQuery$Builder)));
        }

        void t_PhraseQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery), "class_", make_descriptor(PhraseQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery), "wrapfn_", make_descriptor(t_PhraseQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery::wrap_Object(PhraseQuery(((t_PhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              PhraseQuery object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = PhraseQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              PhraseQuery object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PhraseQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              JArray< ::java::lang::String > a2((jobject) NULL);
              PhraseQuery object((jobject) NULL);

              if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
              {
                INT_CALL(object = PhraseQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a2((jobject) NULL);
              PhraseQuery object((jobject) NULL);

              if (!parseArgs(args, "Is[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = PhraseQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseQuery_getField(t_PhraseQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseQuery_visit(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PhraseQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_PhraseQuery_get__field(t_PhraseQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *CharVector::class$ = NULL;
            jmethodID *CharVector::mids$ = NULL;
            bool CharVector::live$ = false;

            jclass CharVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/CharVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_82dffe1ba55ed767] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_d7b537fea0247190] = env->getMethodID(cls, "<init>", "([CI)V");
                mids$[mid_alloc_1e143afe1894d213] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_9972fcc56b44e79d] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_ae471b683dfda8bf] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/CharVector;");
                mids$[mid_get_ebc61ec1e57770d1] = env->getMethodID(cls, "get", "(I)C");
                mids$[mid_getArray_e11cf13c9a887534] = env->getMethodID(cls, "getArray", "()[C");
                mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_49eec491b83160ef] = env->getMethodID(cls, "put", "(IC)V");
                mids$[mid_trimToSize_f2cc1bce94666404] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CharVector::CharVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            CharVector::CharVector(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_82dffe1ba55ed767, a0.this$)) {}

            CharVector::CharVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

            CharVector::CharVector(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d7b537fea0247190, a0.this$, a1)) {}

            jint CharVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_1e143afe1894d213], a0);
            }

            jint CharVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_9972fcc56b44e79d]);
            }

            void CharVector::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            CharVector CharVector::clone() const
            {
              return CharVector(env->callObjectMethod(this$, mids$[mid_clone_ae471b683dfda8bf]));
            }

            jchar CharVector::get(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_get_ebc61ec1e57770d1], a0);
            }

            JArray< jchar > CharVector::getArray() const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_e11cf13c9a887534]));
            }

            jint CharVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
            }

            void CharVector::put(jint a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_49eec491b83160ef], a0, a1);
            }

            void CharVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_f2cc1bce94666404]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_capacity(t_CharVector *self);
            static PyObject *t_CharVector_clear(t_CharVector *self);
            static PyObject *t_CharVector_clone(t_CharVector *self);
            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_getArray(t_CharVector *self);
            static PyObject *t_CharVector_length(t_CharVector *self);
            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args);
            static PyObject *t_CharVector_trimToSize(t_CharVector *self);
            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data);
            static PyGetSetDef t_CharVector__fields_[] = {
              DECLARE_GET_FIELD(t_CharVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharVector__methods_[] = {
              DECLARE_METHOD(t_CharVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, alloc, METH_O),
              DECLARE_METHOD(t_CharVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clear, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clone, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, get, METH_O),
              DECLARE_METHOD(t_CharVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, length, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, put, METH_VARARGS),
              DECLARE_METHOD(t_CharVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CharVector)[] = {
              { Py_tp_methods, t_CharVector__methods_ },
              { Py_tp_init, (void *) t_CharVector_init_ },
              { Py_tp_getset, t_CharVector__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CharVector)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CharVector, t_CharVector, CharVector);

            void t_CharVector::install(PyObject *module)
            {
              installType(&PY_TYPE(CharVector), &PY_TYPE_DEF(CharVector), module, "CharVector", 0);
            }

            void t_CharVector::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharVector), "class_", make_descriptor(CharVector::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharVector), "wrapfn_", make_descriptor(t_CharVector::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharVector), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharVector::initializeClass, 1)))
                return NULL;
              return t_CharVector::wrap_Object(CharVector(((t_CharVector *) arg)->object.this$));
            }
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  CharVector object((jobject) NULL);

                  INT_CALL(object = CharVector());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[C", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    INT_CALL(object = CharVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_CharVector_capacity(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharVector_clear(t_CharVector *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_clone(t_CharVector *self)
            {
              CharVector result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_CharVector::wrap_Object(result);
            }

            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return c2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_CharVector_getArray(t_CharVector *self)
            {
              JArray< jchar > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_CharVector_length(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args)
            {
              jint a0;
              jchar a1;

              if (!parseArgs(args, "IC", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_CharVector_trimToSize(t_CharVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data)
            {
              JArray< jchar > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity::class$ = NULL;
          jmethodID *Similarity::mids$ = NULL;
          bool Similarity::live$ = false;

          jclass Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity::Similarity() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer Similarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_scorer(t_Similarity *self, PyObject *args);

          static PyMethodDef t_Similarity__methods_[] = {
            DECLARE_METHOD(t_Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, computeNorm, METH_O),
            DECLARE_METHOD(t_Similarity, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Similarity)[] = {
            { Py_tp_methods, t_Similarity__methods_ },
            { Py_tp_init, (void *) t_Similarity_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Similarity)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Similarity, t_Similarity, Similarity);

          void t_Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity), &PY_TYPE_DEF(Similarity), module, "Similarity", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity), "SimScorer", make_descriptor(&PY_TYPE_DEF(Similarity$SimScorer)));
          }

          void t_Similarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity), "class_", make_descriptor(Similarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity), "wrapfn_", make_descriptor(t_Similarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity::initializeClass, 1)))
              return NULL;
            return t_Similarity::wrap_Object(Similarity(((t_Similarity *) arg)->object.this$));
          }
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds)
          {
            Similarity object((jobject) NULL);

            INT_CALL(object = Similarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_scorer(t_Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "scorer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *TermsIndexReaderBase::class$ = NULL;
          jmethodID *TermsIndexReaderBase::mids$ = NULL;
          bool TermsIndexReaderBase::live$ = false;

          jclass TermsIndexReaderBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/TermsIndexReaderBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getFieldEnum_545426ea5d9b0f76] = env->getMethodID(cls, "getFieldEnum", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum;");
              mids$[mid_supportsOrd_8454bd5aa23fd11e] = env->getMethodID(cls, "supportsOrd", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermsIndexReaderBase::TermsIndexReaderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void TermsIndexReaderBase::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum TermsIndexReaderBase::getFieldEnum(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum(env->callObjectMethod(this$, mids$[mid_getFieldEnum_545426ea5d9b0f76], a0.this$));
          }

          jboolean TermsIndexReaderBase::supportsOrd() const
          {
            return env->callBooleanMethod(this$, mids$[mid_supportsOrd_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_TermsIndexReaderBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermsIndexReaderBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermsIndexReaderBase_init_(t_TermsIndexReaderBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermsIndexReaderBase_close(t_TermsIndexReaderBase *self);
          static PyObject *t_TermsIndexReaderBase_getFieldEnum(t_TermsIndexReaderBase *self, PyObject *arg);
          static PyObject *t_TermsIndexReaderBase_supportsOrd(t_TermsIndexReaderBase *self);

          static PyMethodDef t_TermsIndexReaderBase__methods_[] = {
            DECLARE_METHOD(t_TermsIndexReaderBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexReaderBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexReaderBase, close, METH_NOARGS),
            DECLARE_METHOD(t_TermsIndexReaderBase, getFieldEnum, METH_O),
            DECLARE_METHOD(t_TermsIndexReaderBase, supportsOrd, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermsIndexReaderBase)[] = {
            { Py_tp_methods, t_TermsIndexReaderBase__methods_ },
            { Py_tp_init, (void *) t_TermsIndexReaderBase_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermsIndexReaderBase)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TermsIndexReaderBase, t_TermsIndexReaderBase, TermsIndexReaderBase);

          void t_TermsIndexReaderBase::install(PyObject *module)
          {
            installType(&PY_TYPE(TermsIndexReaderBase), &PY_TYPE_DEF(TermsIndexReaderBase), module, "TermsIndexReaderBase", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase), "FieldIndexEnum", make_descriptor(&PY_TYPE_DEF(TermsIndexReaderBase$FieldIndexEnum)));
          }

          void t_TermsIndexReaderBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase), "class_", make_descriptor(TermsIndexReaderBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase), "wrapfn_", make_descriptor(t_TermsIndexReaderBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermsIndexReaderBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermsIndexReaderBase::initializeClass, 1)))
              return NULL;
            return t_TermsIndexReaderBase::wrap_Object(TermsIndexReaderBase(((t_TermsIndexReaderBase *) arg)->object.this$));
          }
          static PyObject *t_TermsIndexReaderBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermsIndexReaderBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermsIndexReaderBase_init_(t_TermsIndexReaderBase *self, PyObject *args, PyObject *kwds)
          {
            TermsIndexReaderBase object((jobject) NULL);

            INT_CALL(object = TermsIndexReaderBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_TermsIndexReaderBase_close(t_TermsIndexReaderBase *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TermsIndexReaderBase_getFieldEnum(t_TermsIndexReaderBase *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFieldEnum(a0));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexReaderBase$FieldIndexEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldEnum", arg);
            return NULL;
          }

          static PyObject *t_TermsIndexReaderBase_supportsOrd(t_TermsIndexReaderBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.supportsOrd());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsReader::class$ = NULL;
        jmethodID *TermVectorsReader::mids$ = NULL;
        bool TermVectorsReader::live$ = false;

        jclass TermVectorsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_f69eb90f55592154] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_get_9997c94b783ad8be] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getMergeInstance_f69eb90f55592154] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/TermVectorsReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        TermVectorsReader TermVectorsReader::clone() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_f69eb90f55592154]));
        }

        ::org::apache::lucene::index::Fields TermVectorsReader::get(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_9997c94b783ad8be], a0));
        }

        TermVectorsReader TermVectorsReader::getMergeInstance() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getMergeInstance_f69eb90f55592154]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg);
        static PyObject *t_TermVectorsReader_getMergeInstance(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get__mergeInstance(t_TermVectorsReader *self, void *data);
        static PyGetSetDef t_TermVectorsReader__fields_[] = {
          DECLARE_GET_FIELD(t_TermVectorsReader, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermVectorsReader__methods_[] = {
          DECLARE_METHOD(t_TermVectorsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, get, METH_O),
          DECLARE_METHOD(t_TermVectorsReader, getMergeInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermVectorsReader)[] = {
          { Py_tp_methods, t_TermVectorsReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TermVectorsReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermVectorsReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermVectorsReader, t_TermVectorsReader, TermVectorsReader);

        void t_TermVectorsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsReader), &PY_TYPE_DEF(TermVectorsReader), module, "TermVectorsReader", 0);
        }

        void t_TermVectorsReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsReader), "class_", make_descriptor(TermVectorsReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsReader), "wrapfn_", make_descriptor(t_TermVectorsReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsReader::initializeClass, 1)))
            return NULL;
          return t_TermVectorsReader::wrap_Object(TermVectorsReader(((t_TermVectorsReader *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsReader_getMergeInstance(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get__mergeInstance(t_TermVectorsReader *self, void *data)
        {
          TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter::class$ = NULL;
          jmethodID *StemmerOverrideFilter::mids$ = NULL;
          bool StemmerOverrideFilter::live$ = false;

          jclass StemmerOverrideFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8043620869d0c1ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter::StemmerOverrideFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8043620869d0c1ef, a0.this$, a1.this$)) {}

          jboolean StemmerOverrideFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args);

          static PyMethodDef t_StemmerOverrideFilter__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StemmerOverrideFilter)[] = {
            { Py_tp_methods, t_StemmerOverrideFilter__methods_ },
            { Py_tp_init, (void *) t_StemmerOverrideFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StemmerOverrideFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(StemmerOverrideFilter, t_StemmerOverrideFilter, StemmerOverrideFilter);

          void t_StemmerOverrideFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter), &PY_TYPE_DEF(StemmerOverrideFilter), module, "StemmerOverrideFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter), "Builder", make_descriptor(&PY_TYPE_DEF(StemmerOverrideFilter$Builder)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter), "StemmerOverrideMap", make_descriptor(&PY_TYPE_DEF(StemmerOverrideFilter$StemmerOverrideMap)));
          }

          void t_StemmerOverrideFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter), "class_", make_descriptor(StemmerOverrideFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter), "wrapfn_", make_descriptor(t_StemmerOverrideFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter::wrap_Object(StemmerOverrideFilter(((t_StemmerOverrideFilter *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap a1((jobject) NULL);
            StemmerOverrideFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(StemmerOverrideFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery::class$ = NULL;
        jmethodID *MultiPhraseQuery::mids$ = NULL;
        bool MultiPhraseQuery::live$ = false;

        jclass MultiPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPositions_d2c45ef07a322466] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTermArrays_215a1a44bd613c99] = env->getMethodID(cls, "getTermArrays", "()[[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight MultiPhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean MultiPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        JArray< jint > MultiPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_d2c45ef07a322466]));
        }

        jint MultiPhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_9972fcc56b44e79d]);
        }

        JArray< JArray< ::org::apache::lucene::index::Term > > MultiPhraseQuery::getTermArrays() const
        {
          return JArray< JArray< ::org::apache::lucene::index::Term > >(env->callObjectMethod(this$, mids$[mid_getTermArrays_215a1a44bd613c99]));
        }

        jint MultiPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query MultiPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String MultiPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void MultiPhraseQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiPhraseQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_visit(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data);
        static PyGetSetDef t_MultiPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPhraseQuery, positions),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, slop),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, termArrays),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getTermArrays, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiPhraseQuery)[] = {
          { Py_tp_methods, t_MultiPhraseQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MultiPhraseQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiPhraseQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(MultiPhraseQuery, t_MultiPhraseQuery, MultiPhraseQuery);

        void t_MultiPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery), &PY_TYPE_DEF(MultiPhraseQuery), module, "MultiPhraseQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery), "Builder", make_descriptor(&PY_TYPE_DEF(MultiPhraseQuery$Builder)));
        }

        void t_MultiPhraseQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery), "class_", make_descriptor(MultiPhraseQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery), "wrapfn_", make_descriptor(t_MultiPhraseQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery::wrap_Object(MultiPhraseQuery(((t_MultiPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self)
        {
          JArray< JArray< ::org::apache::lucene::index::Term > > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermArrays());
          return JArray<jobject>(result.this$).wrap(NULL);
        }

        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_visit(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MultiPhraseQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data)
        {
          JArray< JArray< ::org::apache::lucene::index::Term > > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermArrays());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TokenStreamToTermAutomatonQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TermAutomatonQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TokenStreamToTermAutomatonQuery::class$ = NULL;
        jmethodID *TokenStreamToTermAutomatonQuery::mids$ = NULL;
        bool TokenStreamToTermAutomatonQuery::live$ = false;

        jclass TokenStreamToTermAutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TokenStreamToTermAutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setPreservePositionIncrements_9d72768e8fdce2b7] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_toQuery_24a751225fe3e84b] = env->getMethodID(cls, "toQuery", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/TermAutomatonQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToTermAutomatonQuery::TokenStreamToTermAutomatonQuery() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void TokenStreamToTermAutomatonQuery::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_9d72768e8fdce2b7], a0);
        }

        ::org::apache::lucene::search::TermAutomatonQuery TokenStreamToTermAutomatonQuery::toQuery(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::search::TermAutomatonQuery(env->callObjectMethod(this$, mids$[mid_toQuery_24a751225fe3e84b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TokenStreamToTermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToTermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToTermAutomatonQuery_init_(t_TokenStreamToTermAutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToTermAutomatonQuery_setPreservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg);
        static PyObject *t_TokenStreamToTermAutomatonQuery_toQuery(t_TokenStreamToTermAutomatonQuery *self, PyObject *args);
        static int t_TokenStreamToTermAutomatonQuery_set__preservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToTermAutomatonQuery__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToTermAutomatonQuery, preservePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToTermAutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToTermAutomatonQuery, toQuery, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TokenStreamToTermAutomatonQuery)[] = {
          { Py_tp_methods, t_TokenStreamToTermAutomatonQuery__methods_ },
          { Py_tp_init, (void *) t_TokenStreamToTermAutomatonQuery_init_ },
          { Py_tp_getset, t_TokenStreamToTermAutomatonQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TokenStreamToTermAutomatonQuery)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TokenStreamToTermAutomatonQuery, t_TokenStreamToTermAutomatonQuery, TokenStreamToTermAutomatonQuery);

        void t_TokenStreamToTermAutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToTermAutomatonQuery), &PY_TYPE_DEF(TokenStreamToTermAutomatonQuery), module, "TokenStreamToTermAutomatonQuery", 0);
        }

        void t_TokenStreamToTermAutomatonQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToTermAutomatonQuery), "class_", make_descriptor(TokenStreamToTermAutomatonQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToTermAutomatonQuery), "wrapfn_", make_descriptor(t_TokenStreamToTermAutomatonQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToTermAutomatonQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToTermAutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToTermAutomatonQuery::wrap_Object(TokenStreamToTermAutomatonQuery(((t_TokenStreamToTermAutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToTermAutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToTermAutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToTermAutomatonQuery_init_(t_TokenStreamToTermAutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToTermAutomatonQuery object((jobject) NULL);

          INT_CALL(object = TokenStreamToTermAutomatonQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_setPreservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToTermAutomatonQuery_toQuery(t_TokenStreamToTermAutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::search::TermAutomatonQuery result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.toQuery(a0, a1));
            return ::org::apache::lucene::search::t_TermAutomatonQuery::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toQuery", args);
          return NULL;
        }

        static int t_TokenStreamToTermAutomatonQuery_set__preservePositionIncrements(t_TokenStreamToTermAutomatonQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilterFactory::class$ = NULL;
          jmethodID *FrenchMinimalStemFilterFactory::mids$ = NULL;
          bool FrenchMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *FrenchMinimalStemFilterFactory::NAME = NULL;

          jclass FrenchMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilterFactory::FrenchMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_FrenchMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FrenchMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory, FrenchMinimalStemFilterFactory);

          void t_FrenchMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilterFactory), &PY_TYPE_DEF(FrenchMinimalStemFilterFactory), module, "FrenchMinimalStemFilterFactory", 0);
          }

          void t_FrenchMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilterFactory), "class_", make_descriptor(FrenchMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_FrenchMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*FrenchMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilterFactory::wrap_Object(FrenchMinimalStemFilterFactory(((t_FrenchMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FrenchMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiLeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiLeafReader::class$ = NULL;
        jmethodID *MultiLeafReader::mids$ = NULL;
        bool MultiLeafReader::live$ = false;

        jclass MultiLeafReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiLeafReader");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiLeafReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLeafReader_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_MultiLeafReader__methods_[] = {
          DECLARE_METHOD(t_MultiLeafReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLeafReader, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiLeafReader)[] = {
          { Py_tp_methods, t_MultiLeafReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiLeafReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiLeafReader, t_MultiLeafReader, MultiLeafReader);

        void t_MultiLeafReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLeafReader), &PY_TYPE_DEF(MultiLeafReader), module, "MultiLeafReader", 0);
        }

        void t_MultiLeafReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLeafReader), "class_", make_descriptor(MultiLeafReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLeafReader), "wrapfn_", make_descriptor(t_MultiLeafReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLeafReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLeafReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLeafReader::initializeClass, 1)))
            return NULL;
          return t_MultiLeafReader::wrap_Object(MultiLeafReader(((t_MultiLeafReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLeafReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLeafReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/PowFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *PowFloatFunction::class$ = NULL;
            jmethodID *PowFloatFunction::mids$ = NULL;
            bool PowFloatFunction::live$ = false;

            jclass PowFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/PowFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6d73cd8677453118] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_328d6b0dd62870d9] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PowFloatFunction::PowFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_6d73cd8677453118, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PowFloatFunction__methods_[] = {
              DECLARE_METHOD(t_PowFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PowFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PowFloatFunction)[] = {
              { Py_tp_methods, t_PowFloatFunction__methods_ },
              { Py_tp_init, (void *) t_PowFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PowFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::DualFloatFunction),
              NULL
            };

            DEFINE_TYPE(PowFloatFunction, t_PowFloatFunction, PowFloatFunction);

            void t_PowFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(PowFloatFunction), &PY_TYPE_DEF(PowFloatFunction), module, "PowFloatFunction", 0);
            }

            void t_PowFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PowFloatFunction), "class_", make_descriptor(PowFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PowFloatFunction), "wrapfn_", make_descriptor(t_PowFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PowFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PowFloatFunction::initializeClass, 1)))
                return NULL;
              return t_PowFloatFunction::wrap_Object(PowFloatFunction(((t_PowFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PowFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              PowFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PowFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ListOfOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ListOfOutputs::class$ = NULL;
          jmethodID *ListOfOutputs::mids$ = NULL;
          bool ListOfOutputs::live$ = false;

          jclass ListOfOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ListOfOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_526191276010c0ff] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_128a89bbc17a8b69] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_asList_879558f08e80c948] = env->getMethodID(cls, "asList", "(Ljava/lang/Object;)Ljava/util/List;");
              mids$[mid_common_128a89bbc17a8b69] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_128a89bbc17a8b69] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_8f886c83a83356f0] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_c602cc71de3e942a] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_bd77d49f2c2d164c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_bd77d49f2c2d164c] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_be8da68faa81682c] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_128a89bbc17a8b69] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_9939db8d7cac4f68] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_9939db8d7cac4f68] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ListOfOutputs::ListOfOutputs(const ::org::apache::lucene::util::fst::Outputs & a0) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_526191276010c0ff, a0.this$)) {}

          ::java::lang::Object ListOfOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::util::List ListOfOutputs::asList(const ::java::lang::Object & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_879558f08e80c948], a0.this$));
          }

          ::java::lang::Object ListOfOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Object ListOfOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_d6bcd06f3102c4d9]));
          }

          ::java::lang::Object ListOfOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String ListOfOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_8f886c83a83356f0], a0.this$));
          }

          jlong ListOfOutputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_c602cc71de3e942a], a0.this$);
          }

          ::java::lang::Object ListOfOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_bd77d49f2c2d164c], a0.this$));
          }

          ::java::lang::Object ListOfOutputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_bd77d49f2c2d164c], a0.this$));
          }

          void ListOfOutputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_be8da68faa81682c], a0.this$);
          }

          void ListOfOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::java::lang::Object ListOfOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String ListOfOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void ListOfOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9939db8d7cac4f68], a0.this$, a1.this$);
          }

          void ListOfOutputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_9939db8d7cac4f68], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ListOfOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ListOfOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ListOfOutputs_of_(t_ListOfOutputs *self, PyObject *args);
          static int t_ListOfOutputs_init_(t_ListOfOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ListOfOutputs_add(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_asList(t_ListOfOutputs *self, PyObject *arg);
          static PyObject *t_ListOfOutputs_common(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_getNoOutput(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_merge(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_outputToString(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_ramBytesUsed(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_read(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_readFinalOutput(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_skipFinalOutput(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_skipOutput(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_subtract(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_toString(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_write(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_writeFinalOutput(t_ListOfOutputs *self, PyObject *args);
          static PyObject *t_ListOfOutputs_get__noOutput(t_ListOfOutputs *self, void *data);
          static PyObject *t_ListOfOutputs_get__parameters_(t_ListOfOutputs *self, void *data);
          static PyGetSetDef t_ListOfOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ListOfOutputs, noOutput),
            DECLARE_GET_FIELD(t_ListOfOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ListOfOutputs__methods_[] = {
            DECLARE_METHOD(t_ListOfOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ListOfOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ListOfOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, asList, METH_O),
            DECLARE_METHOD(t_ListOfOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, readFinalOutput, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, skipFinalOutput, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, write, METH_VARARGS),
            DECLARE_METHOD(t_ListOfOutputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ListOfOutputs)[] = {
            { Py_tp_methods, t_ListOfOutputs__methods_ },
            { Py_tp_init, (void *) t_ListOfOutputs_init_ },
            { Py_tp_getset, t_ListOfOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ListOfOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(ListOfOutputs, t_ListOfOutputs, ListOfOutputs);
          PyObject *t_ListOfOutputs::wrap_Object(const ListOfOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ListOfOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ListOfOutputs *self = (t_ListOfOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ListOfOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ListOfOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ListOfOutputs *self = (t_ListOfOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ListOfOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ListOfOutputs), &PY_TYPE_DEF(ListOfOutputs), module, "ListOfOutputs", 0);
          }

          void t_ListOfOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ListOfOutputs), "class_", make_descriptor(ListOfOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ListOfOutputs), "wrapfn_", make_descriptor(t_ListOfOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ListOfOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ListOfOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ListOfOutputs::initializeClass, 1)))
              return NULL;
            return t_ListOfOutputs::wrap_Object(ListOfOutputs(((t_ListOfOutputs *) arg)->object.this$));
          }
          static PyObject *t_ListOfOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ListOfOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ListOfOutputs_of_(t_ListOfOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ListOfOutputs_init_(t_ListOfOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ListOfOutputs object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = ListOfOutputs(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ListOfOutputs_add(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ListOfOutputs_asList(t_ListOfOutputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.asList(a0));
              return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "asList", arg);
            return NULL;
          }

          static PyObject *t_ListOfOutputs_common(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ListOfOutputs_getNoOutput(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ListOfOutputs_merge(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_ListOfOutputs_outputToString(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ListOfOutputs_ramBytesUsed(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ListOfOutputs_read(t_ListOfOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ListOfOutputs_readFinalOutput(t_ListOfOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "readFinalOutput", args, 2);
          }

          static PyObject *t_ListOfOutputs_skipFinalOutput(t_ListOfOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "skipFinalOutput", args, 2);
          }

          static PyObject *t_ListOfOutputs_skipOutput(t_ListOfOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ListOfOutputs_subtract(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ListOfOutputs_toString(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ListOfOutputs_write(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "write", args, 2);
          }

          static PyObject *t_ListOfOutputs_writeFinalOutput(t_ListOfOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ListOfOutputs), (PyObject *) self, "writeFinalOutput", args, 2);
          }
          static PyObject *t_ListOfOutputs_get__parameters_(t_ListOfOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ListOfOutputs_get__noOutput(t_ListOfOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery::class$ = NULL;
          jmethodID *SpanPositionCheckQuery::mids$ = NULL;
          bool SpanPositionCheckQuery::live$ = false;

          jclass SpanPositionCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2407f75ccc2bd356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMatch_5a8903ceec80d1b9] = env->getMethodID(cls, "getMatch", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
              mids$[mid_acceptPosition_ab707424c19ac906] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery::SpanPositionCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_2407f75ccc2bd356, a0.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanPositionCheckQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanPositionCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String SpanPositionCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanPositionCheckQuery::getMatch() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMatch_5a8903ceec80d1b9]));
          }

          jint SpanPositionCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanPositionCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          void SpanPositionCheckQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery_createWeight(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_equals(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self);
          static PyObject *t_SpanPositionCheckQuery_hashCode(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_visit(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data);
          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPositionCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, field),
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, match),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getMatch, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanPositionCheckQuery)[] = {
            { Py_tp_methods, t_SpanPositionCheckQuery__methods_ },
            { Py_tp_init, (void *) t_SpanPositionCheckQuery_init_ },
            { Py_tp_getset, t_SpanPositionCheckQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanPositionCheckQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanPositionCheckQuery, t_SpanPositionCheckQuery, SpanPositionCheckQuery);

          void t_SpanPositionCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery), &PY_TYPE_DEF(SpanPositionCheckQuery), module, "SpanPositionCheckQuery", 0);
          }

          void t_SpanPositionCheckQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery), "class_", make_descriptor(SpanPositionCheckQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery), "wrapfn_", make_descriptor(t_SpanPositionCheckQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery::wrap_Object(SpanPositionCheckQuery(((t_SpanPositionCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanPositionCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanPositionCheckQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery_createWeight(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_equals(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanPositionCheckQuery_hashCode(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_visit(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/spans/PythonSpanCollector.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *PythonSpanCollector::class$ = NULL;
          jmethodID *PythonSpanCollector::mids$ = NULL;
          bool PythonSpanCollector::live$ = false;

          jclass PythonSpanCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/spans/PythonSpanCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_collectLeaf_a1c6efa50e122f38] = env->getMethodID(cls, "collectLeaf", "(Lorg/apache/lucene/index/PostingsEnum;ILorg/apache/lucene/index/Term;)V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSpanCollector::PythonSpanCollector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonSpanCollector::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonSpanCollector::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonSpanCollector::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {
          static PyObject *t_PythonSpanCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSpanCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSpanCollector_init_(t_PythonSpanCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSpanCollector_finalize(t_PythonSpanCollector *self);
          static PyObject *t_PythonSpanCollector_pythonExtension(t_PythonSpanCollector *self, PyObject *args);
          static void JNICALL t_PythonSpanCollector_collectLeaf0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jobject a2);
          static void JNICALL t_PythonSpanCollector_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonSpanCollector_reset2(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonSpanCollector_get__self(t_PythonSpanCollector *self, void *data);
          static PyGetSetDef t_PythonSpanCollector__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSpanCollector, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSpanCollector__methods_[] = {
            DECLARE_METHOD(t_PythonSpanCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpanCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpanCollector, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSpanCollector, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonSpanCollector)[] = {
            { Py_tp_methods, t_PythonSpanCollector__methods_ },
            { Py_tp_init, (void *) t_PythonSpanCollector_init_ },
            { Py_tp_getset, t_PythonSpanCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonSpanCollector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PythonSpanCollector, t_PythonSpanCollector, PythonSpanCollector);

          void t_PythonSpanCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSpanCollector), &PY_TYPE_DEF(PythonSpanCollector), module, "PythonSpanCollector", 1);
          }

          void t_PythonSpanCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSpanCollector), "class_", make_descriptor(PythonSpanCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSpanCollector), "wrapfn_", make_descriptor(t_PythonSpanCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSpanCollector), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSpanCollector::initializeClass);
            JNINativeMethod methods[] = {
              { "collectLeaf", "(Lorg/apache/lucene/index/PostingsEnum;ILorg/apache/lucene/index/Term;)V", (void *) t_PythonSpanCollector_collectLeaf0 },
              { "pythonDecRef", "()V", (void *) t_PythonSpanCollector_pythonDecRef1 },
              { "reset", "()V", (void *) t_PythonSpanCollector_reset2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonSpanCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSpanCollector::initializeClass, 1)))
              return NULL;
            return t_PythonSpanCollector::wrap_Object(PythonSpanCollector(((t_PythonSpanCollector *) arg)->object.this$));
          }
          static PyObject *t_PythonSpanCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSpanCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSpanCollector_init_(t_PythonSpanCollector *self, PyObject *args, PyObject *kwds)
          {
            PythonSpanCollector object((jobject) NULL);

            INT_CALL(object = PythonSpanCollector());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSpanCollector_finalize(t_PythonSpanCollector *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSpanCollector_pythonExtension(t_PythonSpanCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static void JNICALL t_PythonSpanCollector_collectLeaf0(JNIEnv *jenv, jobject jobj, jobject a0, jint a1, jobject a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpanCollector::mids$[PythonSpanCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(::org::apache::lucene::index::PostingsEnum(a0));
            PyObject *o2 = ::org::apache::lucene::index::t_Term::wrap_Object(::org::apache::lucene::index::Term(a2));
            PyObject *result = PyObject_CallMethod(obj, "collectLeaf", "OiO", o0, (int) a1, o2);
            Py_DECREF(o0);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static void JNICALL t_PythonSpanCollector_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpanCollector::mids$[PythonSpanCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSpanCollector::mids$[PythonSpanCollector::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonSpanCollector_reset2(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpanCollector::mids$[PythonSpanCollector::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *result = PyObject_CallMethod(obj, "reset", "");
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonSpanCollector_get__self(t_PythonSpanCollector *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextTermVectorsReader::class$ = NULL;
          jmethodID *SimpleTextTermVectorsReader::mids$ = NULL;
          bool SimpleTextTermVectorsReader::live$ = false;

          jclass SimpleTextTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_42bd8d9f441f9252] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_f69eb90f55592154] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_9997c94b783ad8be] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextTermVectorsReader::SimpleTextTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_42bd8d9f441f9252, a0.this$, a1.this$, a2.this$)) {}

          void SimpleTextTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader SimpleTextTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_f69eb90f55592154]));
          }

          void SimpleTextTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::org::apache::lucene::index::Fields SimpleTextTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_9997c94b783ad8be], a0));
          }

          jlong SimpleTextTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String SimpleTextTermVectorsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextTermVectorsReader_init_(t_SimpleTextTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextTermVectorsReader_checkIntegrity(t_SimpleTextTermVectorsReader *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsReader_clone(t_SimpleTextTermVectorsReader *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsReader_close(t_SimpleTextTermVectorsReader *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsReader_get(t_SimpleTextTermVectorsReader *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsReader_ramBytesUsed(t_SimpleTextTermVectorsReader *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsReader_toString(t_SimpleTextTermVectorsReader *self, PyObject *args);

          static PyMethodDef t_SimpleTextTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextTermVectorsReader)[] = {
            { Py_tp_methods, t_SimpleTextTermVectorsReader__methods_ },
            { Py_tp_init, (void *) t_SimpleTextTermVectorsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextTermVectorsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsReader),
            NULL
          };

          DEFINE_TYPE(SimpleTextTermVectorsReader, t_SimpleTextTermVectorsReader, SimpleTextTermVectorsReader);

          void t_SimpleTextTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextTermVectorsReader), &PY_TYPE_DEF(SimpleTextTermVectorsReader), module, "SimpleTextTermVectorsReader", 0);
          }

          void t_SimpleTextTermVectorsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsReader), "class_", make_descriptor(SimpleTextTermVectorsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsReader), "wrapfn_", make_descriptor(t_SimpleTextTermVectorsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_SimpleTextTermVectorsReader::wrap_Object(SimpleTextTermVectorsReader(((t_SimpleTextTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextTermVectorsReader_init_(t_SimpleTextTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            SimpleTextTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SimpleTextTermVectorsReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextTermVectorsReader_checkIntegrity(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsReader_clone(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsReader_close(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsReader_get(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsReader_ramBytesUsed(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsReader_toString(t_SimpleTextTermVectorsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsReader), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum$SeekStatus::class$ = NULL;
        jmethodID *TermsEnum$SeekStatus::mids$ = NULL;
        bool TermsEnum$SeekStatus::live$ = false;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::END = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::FOUND = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::NOT_FOUND = NULL;

        jclass TermsEnum$SeekStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum$SeekStatus");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_b3186e85cbf09c01] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_values_df323f125812ebfc] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/TermsEnum$SeekStatus;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            END = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "END", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            NOT_FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "NOT_FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsEnum$SeekStatus TermsEnum$SeekStatus::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TermsEnum$SeekStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b3186e85cbf09c01], a0.this$));
        }

        JArray< TermsEnum$SeekStatus > TermsEnum$SeekStatus::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TermsEnum$SeekStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_df323f125812ebfc]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type);
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data);
        static PyGetSetDef t_TermsEnum$SeekStatus__fields_[] = {
          DECLARE_GET_FIELD(t_TermsEnum$SeekStatus, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsEnum$SeekStatus__methods_[] = {
          DECLARE_METHOD(t_TermsEnum$SeekStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermsEnum$SeekStatus)[] = {
          { Py_tp_methods, t_TermsEnum$SeekStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TermsEnum$SeekStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermsEnum$SeekStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(TermsEnum$SeekStatus, t_TermsEnum$SeekStatus, TermsEnum$SeekStatus);
        PyObject *t_TermsEnum$SeekStatus::wrap_Object(const TermsEnum$SeekStatus& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermsEnum$SeekStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermsEnum$SeekStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum$SeekStatus), &PY_TYPE_DEF(TermsEnum$SeekStatus), module, "TermsEnum$SeekStatus", 0);
        }

        void t_TermsEnum$SeekStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "class_", make_descriptor(TermsEnum$SeekStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "wrapfn_", make_descriptor(t_TermsEnum$SeekStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum$SeekStatus::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "END", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::END)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::FOUND)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum$SeekStatus), "NOT_FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::NOT_FOUND)));
        }

        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum$SeekStatus::initializeClass, 1)))
            return NULL;
          return t_TermsEnum$SeekStatus::wrap_Object(TermsEnum$SeekStatus(((t_TermsEnum$SeekStatus *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum$SeekStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::valueOf(a0));
            return t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type)
        {
          JArray< TermsEnum$SeekStatus > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::values());
          return JArray<jobject>(result.this$).wrap(t_TermsEnum$SeekStatus::wrap_jobject);
        }
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF2EXP.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF2EXP::class$ = NULL;
          jmethodID *AxiomaticF2EXP::mids$ = NULL;
          bool AxiomaticF2EXP::live$ = false;

          jclass AxiomaticF2EXP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF2EXP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_5a9245193073da7b] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF2EXP::AxiomaticF2EXP() : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          AxiomaticF2EXP::AxiomaticF2EXP(jfloat a0) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          AxiomaticF2EXP::AxiomaticF2EXP(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_5a9245193073da7b, a0, a1)) {}

          ::java::lang::String AxiomaticF2EXP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF2EXP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF2EXP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF2EXP_init_(t_AxiomaticF2EXP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF2EXP_toString(t_AxiomaticF2EXP *self, PyObject *args);

          static PyMethodDef t_AxiomaticF2EXP__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF2EXP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF2EXP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF2EXP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF2EXP)[] = {
            { Py_tp_methods, t_AxiomaticF2EXP__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF2EXP_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF2EXP)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF2EXP, t_AxiomaticF2EXP, AxiomaticF2EXP);

          void t_AxiomaticF2EXP::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF2EXP), &PY_TYPE_DEF(AxiomaticF2EXP), module, "AxiomaticF2EXP", 0);
          }

          void t_AxiomaticF2EXP::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2EXP), "class_", make_descriptor(AxiomaticF2EXP::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2EXP), "wrapfn_", make_descriptor(t_AxiomaticF2EXP::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2EXP), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF2EXP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF2EXP::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF2EXP::wrap_Object(AxiomaticF2EXP(((t_AxiomaticF2EXP *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF2EXP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF2EXP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF2EXP_init_(t_AxiomaticF2EXP *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AxiomaticF2EXP object((jobject) NULL);

                INT_CALL(object = AxiomaticF2EXP());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                AxiomaticF2EXP object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AxiomaticF2EXP(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                AxiomaticF2EXP object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = AxiomaticF2EXP(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF2EXP_toString(t_AxiomaticF2EXP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF2EXP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$StemmerOverrideMap::class$ = NULL;
          jmethodID *StemmerOverrideFilter$StemmerOverrideMap::mids$ = NULL;
          bool StemmerOverrideFilter$StemmerOverrideMap::live$ = false;

          jclass StemmerOverrideFilter$StemmerOverrideMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d50ca64c20bd9cd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
              mids$[mid_get_c1b96e3e20970407] = env->getMethodID(cls, "get", "([CILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$StemmerOverrideMap::StemmerOverrideFilter$StemmerOverrideMap(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d50ca64c20bd9cd4, a0.this$, a1)) {}

          ::org::apache::lucene::util::BytesRef StemmerOverrideFilter$StemmerOverrideMap::get(const JArray< jchar > & a0, jint a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_c1b96e3e20970407], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader StemmerOverrideFilter$StemmerOverrideMap::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_79a0688c6e123a32]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilter$StemmerOverrideMap__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilter$StemmerOverrideMap, bytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilter$StemmerOverrideMap__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, get, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, getBytesReader, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StemmerOverrideFilter$StemmerOverrideMap)[] = {
            { Py_tp_methods, t_StemmerOverrideFilter$StemmerOverrideMap__methods_ },
            { Py_tp_init, (void *) t_StemmerOverrideFilter$StemmerOverrideMap_init_ },
            { Py_tp_getset, t_StemmerOverrideFilter$StemmerOverrideMap__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StemmerOverrideFilter$StemmerOverrideMap)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap, StemmerOverrideFilter$StemmerOverrideMap);

          void t_StemmerOverrideFilter$StemmerOverrideMap::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), &PY_TYPE_DEF(StemmerOverrideFilter$StemmerOverrideMap), module, "StemmerOverrideFilter$StemmerOverrideMap", 0);
          }

          void t_StemmerOverrideFilter$StemmerOverrideMap::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), "class_", make_descriptor(StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), "wrapfn_", make_descriptor(t_StemmerOverrideFilter$StemmerOverrideMap::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(StemmerOverrideFilter$StemmerOverrideMap(((t_StemmerOverrideFilter$StemmerOverrideMap *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            StemmerOverrideFilter$StemmerOverrideMap object((jobject) NULL);

            if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter$StemmerOverrideMap(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CIKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack$TermInfo::class$ = NULL;
          jmethodID *FieldTermStack$TermInfo::mids$ = NULL;
          bool FieldTermStack$TermInfo::live$ = false;

          jclass FieldTermStack$TermInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compareTo_0fd638c8d5761a8a] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNext_211d98576697f671] = env->getMethodID(cls, "getNext", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getText_db9b55ba01e03e4b] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_getWeight_58aec2b64dff50c8] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FieldTermStack$TermInfo::compareTo(const FieldTermStack$TermInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_0fd638c8d5761a8a], a0.this$);
          }

          jboolean FieldTermStack$TermInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FieldTermStack$TermInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          FieldTermStack$TermInfo FieldTermStack$TermInfo::getNext() const
          {
            return FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_getNext_211d98576697f671]));
          }

          jint FieldTermStack$TermInfo::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
          }

          jint FieldTermStack$TermInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          ::java::lang::String FieldTermStack$TermInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_db9b55ba01e03e4b]));
          }

          jfloat FieldTermStack$TermInfo::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_58aec2b64dff50c8]);
          }

          jint FieldTermStack$TermInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String FieldTermStack$TermInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data);
          static PyGetSetDef t_FieldTermStack$TermInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, next),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, position),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, text),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack$TermInfo__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack$TermInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getNext, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldTermStack$TermInfo)[] = {
            { Py_tp_methods, t_FieldTermStack$TermInfo__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FieldTermStack$TermInfo__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldTermStack$TermInfo)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldTermStack$TermInfo, t_FieldTermStack$TermInfo, FieldTermStack$TermInfo);

          void t_FieldTermStack$TermInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack$TermInfo), &PY_TYPE_DEF(FieldTermStack$TermInfo), module, "FieldTermStack$TermInfo", 0);
          }

          void t_FieldTermStack$TermInfo::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack$TermInfo), "class_", make_descriptor(FieldTermStack$TermInfo::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack$TermInfo), "wrapfn_", make_descriptor(t_FieldTermStack$TermInfo::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack$TermInfo), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack$TermInfo::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack$TermInfo::wrap_Object(FieldTermStack$TermInfo(((t_FieldTermStack$TermInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack$TermInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg)
          {
            FieldTermStack$TermInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self)
          {
            FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data)
          {
            FieldTermStack$TermInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11ebefdc30395571] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DZDZ)V");
              mids$[mid_accept_17ce67a573fe19e0] = env->getMethodID(cls, "accept", "(D)Z");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getQuery_f1beaaad49a72c77] = env->getMethodID(cls, "getQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/DoubleValuesSource;)Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(const ::java::lang::String & a0, jdouble a1, jboolean a2, jdouble a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_11ebefdc30395571, a0.this$, a1, a2, a3, a4)) {}

          jboolean DoubleRange::accept(jdouble a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_17ce67a573fe19e0], a0);
          }

          jboolean DoubleRange::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::Query DoubleRange::getQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_f1beaaad49a72c77], a0.this$, a1.this$));
          }

          jint DoubleRange::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg);
          static PyObject *t_DoubleRange_equals(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_getQuery(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_hashCode(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GET_FIELD(t_DoubleRange, max),
            DECLARE_GET_FIELD(t_DoubleRange, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, accept, METH_O),
            DECLARE_METHOD(t_DoubleRange, equals, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleRange)[] = {
            { Py_tp_methods, t_DoubleRange__methods_ },
            { Py_tp_init, (void *) t_DoubleRange_init_ },
            { Py_tp_getset, t_DoubleRange__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleRange)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::range::Range),
            NULL
          };

          DEFINE_TYPE(DoubleRange, t_DoubleRange, DoubleRange);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), &PY_TYPE_DEF(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            jboolean a2;
            jdouble a3;
            jboolean a4;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "sDZDZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg)
          {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_DoubleRange_equals(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DoubleRange_getQuery(t_DoubleRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQuery", args);
            return NULL;
          }

          static PyObject *t_DoubleRange_hashCode(t_DoubleRange *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FilterSpans$AcceptStatus.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/FilterSpans$AcceptStatus.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FilterSpans$AcceptStatus::class$ = NULL;
          jmethodID *FilterSpans$AcceptStatus::mids$ = NULL;
          bool FilterSpans$AcceptStatus::live$ = false;
          FilterSpans$AcceptStatus *FilterSpans$AcceptStatus::NO = NULL;
          FilterSpans$AcceptStatus *FilterSpans$AcceptStatus::NO_MORE_IN_CURRENT_DOC = NULL;
          FilterSpans$AcceptStatus *FilterSpans$AcceptStatus::YES = NULL;

          jclass FilterSpans$AcceptStatus::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FilterSpans$AcceptStatus");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1ab6f12de1949089] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");
              mids$[mid_values_fbbba3b65b96bea3] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NO = new FilterSpans$AcceptStatus(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;"));
              NO_MORE_IN_CURRENT_DOC = new FilterSpans$AcceptStatus(env->getStaticObjectField(cls, "NO_MORE_IN_CURRENT_DOC", "Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;"));
              YES = new FilterSpans$AcceptStatus(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilterSpans$AcceptStatus FilterSpans$AcceptStatus::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FilterSpans$AcceptStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1ab6f12de1949089], a0.this$));
          }

          JArray< FilterSpans$AcceptStatus > FilterSpans$AcceptStatus::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FilterSpans$AcceptStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_fbbba3b65b96bea3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FilterSpans$AcceptStatus_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterSpans$AcceptStatus_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterSpans$AcceptStatus_of_(t_FilterSpans$AcceptStatus *self, PyObject *args);
          static PyObject *t_FilterSpans$AcceptStatus_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FilterSpans$AcceptStatus_values(PyTypeObject *type);
          static PyObject *t_FilterSpans$AcceptStatus_get__parameters_(t_FilterSpans$AcceptStatus *self, void *data);
          static PyGetSetDef t_FilterSpans$AcceptStatus__fields_[] = {
            DECLARE_GET_FIELD(t_FilterSpans$AcceptStatus, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FilterSpans$AcceptStatus__methods_[] = {
            DECLARE_METHOD(t_FilterSpans$AcceptStatus, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterSpans$AcceptStatus, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterSpans$AcceptStatus, of_, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans$AcceptStatus, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FilterSpans$AcceptStatus, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FilterSpans$AcceptStatus)[] = {
            { Py_tp_methods, t_FilterSpans$AcceptStatus__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FilterSpans$AcceptStatus__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FilterSpans$AcceptStatus)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(FilterSpans$AcceptStatus, t_FilterSpans$AcceptStatus, FilterSpans$AcceptStatus);
          PyObject *t_FilterSpans$AcceptStatus::wrap_Object(const FilterSpans$AcceptStatus& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FilterSpans$AcceptStatus::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FilterSpans$AcceptStatus *self = (t_FilterSpans$AcceptStatus *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FilterSpans$AcceptStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FilterSpans$AcceptStatus::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FilterSpans$AcceptStatus *self = (t_FilterSpans$AcceptStatus *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FilterSpans$AcceptStatus::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterSpans$AcceptStatus), &PY_TYPE_DEF(FilterSpans$AcceptStatus), module, "FilterSpans$AcceptStatus", 0);
          }

          void t_FilterSpans$AcceptStatus::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "class_", make_descriptor(FilterSpans$AcceptStatus::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "wrapfn_", make_descriptor(t_FilterSpans$AcceptStatus::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "boxfn_", make_descriptor(boxObject));
            env->getClass(FilterSpans$AcceptStatus::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "NO", make_descriptor(t_FilterSpans$AcceptStatus::wrap_Object(*FilterSpans$AcceptStatus::NO)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "NO_MORE_IN_CURRENT_DOC", make_descriptor(t_FilterSpans$AcceptStatus::wrap_Object(*FilterSpans$AcceptStatus::NO_MORE_IN_CURRENT_DOC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans$AcceptStatus), "YES", make_descriptor(t_FilterSpans$AcceptStatus::wrap_Object(*FilterSpans$AcceptStatus::YES)));
          }

          static PyObject *t_FilterSpans$AcceptStatus_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterSpans$AcceptStatus::initializeClass, 1)))
              return NULL;
            return t_FilterSpans$AcceptStatus::wrap_Object(FilterSpans$AcceptStatus(((t_FilterSpans$AcceptStatus *) arg)->object.this$));
          }
          static PyObject *t_FilterSpans$AcceptStatus_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterSpans$AcceptStatus::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FilterSpans$AcceptStatus_of_(t_FilterSpans$AcceptStatus *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FilterSpans$AcceptStatus_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FilterSpans$AcceptStatus result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spans::FilterSpans$AcceptStatus::valueOf(a0));
              return t_FilterSpans$AcceptStatus::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FilterSpans$AcceptStatus_values(PyTypeObject *type)
          {
            JArray< FilterSpans$AcceptStatus > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spans::FilterSpans$AcceptStatus::values());
            return JArray<jobject>(result.this$).wrap(t_FilterSpans$AcceptStatus::wrap_jobject);
          }
          static PyObject *t_FilterSpans$AcceptStatus_get__parameters_(t_FilterSpans$AcceptStatus *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizer::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizer::mids$ = NULL;
          bool UAX29URLEmailTokenizer::live$ = false;
          jint UAX29URLEmailTokenizer::ALPHANUM = (jint) 0;
          jint UAX29URLEmailTokenizer::EMAIL = (jint) 0;
          jint UAX29URLEmailTokenizer::EMOJI = (jint) 0;
          jint UAX29URLEmailTokenizer::HANGUL = (jint) 0;
          jint UAX29URLEmailTokenizer::HIRAGANA = (jint) 0;
          jint UAX29URLEmailTokenizer::IDEOGRAPHIC = (jint) 0;
          jint UAX29URLEmailTokenizer::KATAKANA = (jint) 0;
          jint UAX29URLEmailTokenizer::MAX_TOKEN_LENGTH_LIMIT = (jint) 0;
          jint UAX29URLEmailTokenizer::NUM = (jint) 0;
          jint UAX29URLEmailTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *UAX29URLEmailTokenizer::TOKEN_TYPES = NULL;
          jint UAX29URLEmailTokenizer::URL = (jint) 0;

          jclass UAX29URLEmailTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              EMOJI = env->getStaticIntField(cls, "EMOJI");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              MAX_TOKEN_LENGTH_LIMIT = env->getStaticIntField(cls, "MAX_TOKEN_LENGTH_LIMIT");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              URL = env->getStaticIntField(cls, "URL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          void UAX29URLEmailTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void UAX29URLEmailTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jint UAX29URLEmailTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          jboolean UAX29URLEmailTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void UAX29URLEmailTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void UAX29URLEmailTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self);
          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data);
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UAX29URLEmailTokenizer)[] = {
            { Py_tp_methods, t_UAX29URLEmailTokenizer__methods_ },
            { Py_tp_init, (void *) t_UAX29URLEmailTokenizer_init_ },
            { Py_tp_getset, t_UAX29URLEmailTokenizer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UAX29URLEmailTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer, UAX29URLEmailTokenizer);

          void t_UAX29URLEmailTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizer), &PY_TYPE_DEF(UAX29URLEmailTokenizer), module, "UAX29URLEmailTokenizer", 0);
          }

          void t_UAX29URLEmailTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "class_", make_descriptor(UAX29URLEmailTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "ALPHANUM", make_descriptor(UAX29URLEmailTokenizer::ALPHANUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "EMAIL", make_descriptor(UAX29URLEmailTokenizer::EMAIL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "EMOJI", make_descriptor(UAX29URLEmailTokenizer::EMOJI));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "HANGUL", make_descriptor(UAX29URLEmailTokenizer::HANGUL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "HIRAGANA", make_descriptor(UAX29URLEmailTokenizer::HIRAGANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "IDEOGRAPHIC", make_descriptor(UAX29URLEmailTokenizer::IDEOGRAPHIC));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "KATAKANA", make_descriptor(UAX29URLEmailTokenizer::KATAKANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "MAX_TOKEN_LENGTH_LIMIT", make_descriptor(UAX29URLEmailTokenizer::MAX_TOKEN_LENGTH_LIMIT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "NUM", make_descriptor(UAX29URLEmailTokenizer::NUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "SOUTHEAST_ASIAN", make_descriptor(UAX29URLEmailTokenizer::SOUTHEAST_ASIAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "TOKEN_TYPES", make_descriptor(JArray<jstring>(UAX29URLEmailTokenizer::TOKEN_TYPES->this$).wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizer), "URL", make_descriptor(UAX29URLEmailTokenizer::URL));
          }

          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizer::wrap_Object(UAX29URLEmailTokenizer(((t_UAX29URLEmailTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                UAX29URLEmailTokenizer object((jobject) NULL);

                INT_CALL(object = UAX29URLEmailTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/HighFrequencyDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *HighFrequencyDictionary::class$ = NULL;
          jmethodID *HighFrequencyDictionary::mids$ = NULL;
          bool HighFrequencyDictionary::live$ = false;

          jclass HighFrequencyDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/HighFrequencyDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ab33cd852ace64f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;F)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HighFrequencyDictionary::HighFrequencyDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9ab33cd852ace64f, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::suggest::InputIterator HighFrequencyDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self);
          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data);
          static PyGetSetDef t_HighFrequencyDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_HighFrequencyDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HighFrequencyDictionary__methods_[] = {
            DECLARE_METHOD(t_HighFrequencyDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HighFrequencyDictionary)[] = {
            { Py_tp_methods, t_HighFrequencyDictionary__methods_ },
            { Py_tp_init, (void *) t_HighFrequencyDictionary_init_ },
            { Py_tp_getset, t_HighFrequencyDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HighFrequencyDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HighFrequencyDictionary, t_HighFrequencyDictionary, HighFrequencyDictionary);

          void t_HighFrequencyDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(HighFrequencyDictionary), &PY_TYPE_DEF(HighFrequencyDictionary), module, "HighFrequencyDictionary", 0);
          }

          void t_HighFrequencyDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HighFrequencyDictionary), "class_", make_descriptor(HighFrequencyDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HighFrequencyDictionary), "wrapfn_", make_descriptor(t_HighFrequencyDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HighFrequencyDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HighFrequencyDictionary::initializeClass, 1)))
              return NULL;
            return t_HighFrequencyDictionary::wrap_Object(HighFrequencyDictionary(((t_HighFrequencyDictionary *) arg)->object.this$));
          }
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HighFrequencyDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            HighFrequencyDictionary object((jobject) NULL);

            if (!parseArgs(args, "ksF", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = HighFrequencyDictionary(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/Dictionary.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *Dictionary::class$ = NULL;
            jmethodID *Dictionary::mids$ = NULL;
            bool Dictionary::live$ = false;
            ::java::lang::String *Dictionary::INTERNAL_SEPARATOR = NULL;

            jclass Dictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/Dictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getBaseForm_467f88cdc3f1f7b5] = env->getMethodID(cls, "getBaseForm", "(I[CII)Ljava/lang/String;");
                mids$[mid_getInflectionForm_d7593acad64ef635] = env->getMethodID(cls, "getInflectionForm", "(I)Ljava/lang/String;");
                mids$[mid_getInflectionType_d7593acad64ef635] = env->getMethodID(cls, "getInflectionType", "(I)Ljava/lang/String;");
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getPartOfSpeech_d7593acad64ef635] = env->getMethodID(cls, "getPartOfSpeech", "(I)Ljava/lang/String;");
                mids$[mid_getPronunciation_467f88cdc3f1f7b5] = env->getMethodID(cls, "getPronunciation", "(I[CII)Ljava/lang/String;");
                mids$[mid_getReading_467f88cdc3f1f7b5] = env->getMethodID(cls, "getReading", "(I[CII)Ljava/lang/String;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                INTERNAL_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_SEPARATOR", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Dictionary::getBaseForm(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::lang::String Dictionary::getInflectionForm(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_d7593acad64ef635], a0));
            }

            ::java::lang::String Dictionary::getInflectionType(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_d7593acad64ef635], a0));
            }

            jint Dictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::java::lang::String Dictionary::getPartOfSpeech(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_d7593acad64ef635], a0));
            }

            ::java::lang::String Dictionary::getPronunciation(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::lang::String Dictionary::getReading(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            jint Dictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            jint Dictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Dictionary_getBaseForm(t_Dictionary *self, PyObject *args);
            static PyObject *t_Dictionary_getInflectionForm(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getInflectionType(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getLeftId(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getPartOfSpeech(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getPronunciation(t_Dictionary *self, PyObject *args);
            static PyObject *t_Dictionary_getReading(t_Dictionary *self, PyObject *args);
            static PyObject *t_Dictionary_getRightId(t_Dictionary *self, PyObject *arg);
            static PyObject *t_Dictionary_getWordCost(t_Dictionary *self, PyObject *arg);

            static PyMethodDef t_Dictionary__methods_[] = {
              DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Dictionary, getBaseForm, METH_VARARGS),
              DECLARE_METHOD(t_Dictionary, getInflectionForm, METH_O),
              DECLARE_METHOD(t_Dictionary, getInflectionType, METH_O),
              DECLARE_METHOD(t_Dictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_Dictionary, getPartOfSpeech, METH_O),
              DECLARE_METHOD(t_Dictionary, getPronunciation, METH_VARARGS),
              DECLARE_METHOD(t_Dictionary, getReading, METH_VARARGS),
              DECLARE_METHOD(t_Dictionary, getRightId, METH_O),
              DECLARE_METHOD(t_Dictionary, getWordCost, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Dictionary)[] = {
              { Py_tp_methods, t_Dictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Dictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Dictionary, t_Dictionary, Dictionary);

            void t_Dictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(Dictionary), &PY_TYPE_DEF(Dictionary), module, "Dictionary", 0);
            }

            void t_Dictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "class_", make_descriptor(Dictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(Dictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "INTERNAL_SEPARATOR", make_descriptor(j2p(*Dictionary::INTERNAL_SEPARATOR)));
            }

            static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
                return NULL;
              return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
            }
            static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Dictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Dictionary_getBaseForm(t_Dictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBaseForm(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBaseForm", args);
              return NULL;
            }

            static PyObject *t_Dictionary_getInflectionForm(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionForm(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionForm", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getInflectionType(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionType(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionType", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getLeftId(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getPartOfSpeech(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPartOfSpeech(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPartOfSpeech", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getPronunciation(t_Dictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getPronunciation(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPronunciation", args);
              return NULL;
            }

            static PyObject *t_Dictionary_getReading(t_Dictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getReading(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", args);
              return NULL;
            }

            static PyObject *t_Dictionary_getRightId(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_Dictionary_getWordCost(t_Dictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliStemmer::class$ = NULL;
          jmethodID *BengaliStemmer::mids$ = NULL;
          bool BengaliStemmer::live$ = false;

          jclass BengaliStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliStemmer::BengaliStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint BengaliStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliStemmer_init_(t_BengaliStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliStemmer_stem(t_BengaliStemmer *self, PyObject *args);

          static PyMethodDef t_BengaliStemmer__methods_[] = {
            DECLARE_METHOD(t_BengaliStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliStemmer)[] = {
            { Py_tp_methods, t_BengaliStemmer__methods_ },
            { Py_tp_init, (void *) t_BengaliStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BengaliStemmer, t_BengaliStemmer, BengaliStemmer);

          void t_BengaliStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliStemmer), &PY_TYPE_DEF(BengaliStemmer), module, "BengaliStemmer", 0);
          }

          void t_BengaliStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemmer), "class_", make_descriptor(BengaliStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemmer), "wrapfn_", make_descriptor(t_BengaliStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BengaliStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliStemmer::initializeClass, 1)))
              return NULL;
            return t_BengaliStemmer::wrap_Object(BengaliStemmer(((t_BengaliStemmer *) arg)->object.this$));
          }
          static PyObject *t_BengaliStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliStemmer_init_(t_BengaliStemmer *self, PyObject *args, PyObject *kwds)
          {
            BengaliStemmer object((jobject) NULL);

            INT_CALL(object = BengaliStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BengaliStemmer_stem(t_BengaliStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYEncodingUtils.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYEncodingUtils::class$ = NULL;
        jmethodID *XYEncodingUtils::mids$ = NULL;
        bool XYEncodingUtils::live$ = false;
        jdouble XYEncodingUtils::MAX_VAL_INCL = (jdouble) 0;
        jdouble XYEncodingUtils::MIN_VAL_INCL = (jdouble) 0;

        jclass XYEncodingUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYEncodingUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decode_384f078ef4b8f931] = env->getStaticMethodID(cls, "decode", "(I)F");
            mids$[mid_decode_2431569bab1a7ba7] = env->getStaticMethodID(cls, "decode", "([BI)F");
            mids$[mid_encode_7db35672babd0b26] = env->getStaticMethodID(cls, "encode", "(F)I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_VAL_INCL = env->getStaticDoubleField(cls, "MAX_VAL_INCL");
            MIN_VAL_INCL = env->getStaticDoubleField(cls, "MIN_VAL_INCL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat XYEncodingUtils::decode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_decode_384f078ef4b8f931], a0);
        }

        jfloat XYEncodingUtils::decode(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_decode_2431569bab1a7ba7], a0.this$, a1);
        }

        jint XYEncodingUtils::encode(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_encode_7db35672babd0b26], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYEncodingUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYEncodingUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYEncodingUtils_decode(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYEncodingUtils_encode(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_XYEncodingUtils__methods_[] = {
          DECLARE_METHOD(t_XYEncodingUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYEncodingUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYEncodingUtils, decode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYEncodingUtils, encode, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYEncodingUtils)[] = {
          { Py_tp_methods, t_XYEncodingUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYEncodingUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(XYEncodingUtils, t_XYEncodingUtils, XYEncodingUtils);

        void t_XYEncodingUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(XYEncodingUtils), &PY_TYPE_DEF(XYEncodingUtils), module, "XYEncodingUtils", 0);
        }

        void t_XYEncodingUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYEncodingUtils), "class_", make_descriptor(XYEncodingUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYEncodingUtils), "wrapfn_", make_descriptor(t_XYEncodingUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYEncodingUtils), "boxfn_", make_descriptor(boxObject));
          env->getClass(XYEncodingUtils::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYEncodingUtils), "MAX_VAL_INCL", make_descriptor(XYEncodingUtils::MAX_VAL_INCL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYEncodingUtils), "MIN_VAL_INCL", make_descriptor(XYEncodingUtils::MIN_VAL_INCL));
        }

        static PyObject *t_XYEncodingUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYEncodingUtils::initializeClass, 1)))
            return NULL;
          return t_XYEncodingUtils::wrap_Object(XYEncodingUtils(((t_XYEncodingUtils *) arg)->object.this$));
        }
        static PyObject *t_XYEncodingUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYEncodingUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_XYEncodingUtils_decode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::XYEncodingUtils::decode(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jfloat result;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::XYEncodingUtils::decode(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError(type, "decode", args);
          return NULL;
        }

        static PyObject *t_XYEncodingUtils_encode(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::XYEncodingUtils::encode(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "encode", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharArrayMap$EntrySet.h"
#include "org/apache/lucene/analysis/CharArrayMap$EntryIterator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharArrayMap$EntrySet::class$ = NULL;
        jmethodID *CharArrayMap$EntrySet::mids$ = NULL;
        bool CharArrayMap$EntrySet::live$ = false;

        jclass CharArrayMap$EntrySet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharArrayMap$EntrySet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_iterator_62e106a87f5e24c1] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/analysis/CharArrayMap$EntryIterator;");
            mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CharArrayMap$EntrySet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jboolean CharArrayMap$EntrySet::contains(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::analysis::CharArrayMap$EntryIterator CharArrayMap$EntrySet::iterator() const
        {
          return ::org::apache::lucene::analysis::CharArrayMap$EntryIterator(env->callObjectMethod(this$, mids$[mid_iterator_62e106a87f5e24c1]));
        }

        jboolean CharArrayMap$EntrySet::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
        }

        jint CharArrayMap$EntrySet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data);
        static PyGetSetDef t_CharArrayMap$EntrySet__fields_[] = {
          DECLARE_GET_FIELD(t_CharArrayMap$EntrySet, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharArrayMap$EntrySet__methods_[] = {
          DECLARE_METHOD(t_CharArrayMap$EntrySet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, of_, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, clear, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, contains, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, remove, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntrySet, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharArrayMap$EntrySet)[] = {
          { Py_tp_methods, t_CharArrayMap$EntrySet__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CharArrayMap$EntrySet__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_CharArrayMap$EntrySet *)) get_generic_iterator< t_CharArrayMap$EntrySet >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharArrayMap$EntrySet)[] = {
          &PY_TYPE_DEF(::java::util::AbstractSet),
          NULL
        };

        DEFINE_TYPE(CharArrayMap$EntrySet, t_CharArrayMap$EntrySet, CharArrayMap$EntrySet);
        PyObject *t_CharArrayMap$EntrySet::wrap_Object(const CharArrayMap$EntrySet& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap$EntrySet::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CharArrayMap$EntrySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap$EntrySet::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CharArrayMap$EntrySet::install(PyObject *module)
        {
          installType(&PY_TYPE(CharArrayMap$EntrySet), &PY_TYPE_DEF(CharArrayMap$EntrySet), module, "CharArrayMap$EntrySet", 0);
        }

        void t_CharArrayMap$EntrySet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntrySet), "class_", make_descriptor(CharArrayMap$EntrySet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntrySet), "wrapfn_", make_descriptor(t_CharArrayMap$EntrySet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntrySet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharArrayMap$EntrySet::initializeClass, 1)))
            return NULL;
          return t_CharArrayMap$EntrySet::wrap_Object(CharArrayMap$EntrySet(((t_CharArrayMap$EntrySet *) arg)->object.this$));
        }
        static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharArrayMap$EntrySet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.contains(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::CharArrayMap$EntryIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::analysis::t_CharArrayMap$EntryIterator::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "size", args, 2);
        }
        static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilter::class$ = NULL;
          jmethodID *HindiNormalizationFilter::mids$ = NULL;
          bool HindiNormalizationFilter::live$ = false;

          jclass HindiNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilter::HindiNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean HindiNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiNormalizationFilter)[] = {
            { Py_tp_methods, t_HindiNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_HindiNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(HindiNormalizationFilter, t_HindiNormalizationFilter, HindiNormalizationFilter);

          void t_HindiNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilter), &PY_TYPE_DEF(HindiNormalizationFilter), module, "HindiNormalizationFilter", 0);
          }

          void t_HindiNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilter), "class_", make_descriptor(HindiNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilter), "wrapfn_", make_descriptor(t_HindiNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilter::wrap_Object(HindiNormalizationFilter(((t_HindiNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilter_init_(t_HindiNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilter_incrementToken(t_HindiNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(HindiNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Encoder::class$ = NULL;
          jmethodID *PackedInts$Encoder::mids$ = NULL;
          bool PackedInts$Encoder::live$ = false;

          jclass PackedInts$Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_9972fcc56b44e79d] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_encode_915737209e2fca29] = env->getMethodID(cls, "encode", "([II[BII)V");
              mids$[mid_encode_8330ac9387ca8cb2] = env->getMethodID(cls, "encode", "([JI[BII)V");
              mids$[mid_encode_e85630727b6855ac] = env->getMethodID(cls, "encode", "([II[JII)V");
              mids$[mid_encode_0309f1a5ccc713cf] = env->getMethodID(cls, "encode", "([JI[JII)V");
              mids$[mid_longBlockCount_9972fcc56b44e79d] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Encoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_9972fcc56b44e79d]);
          }

          jint PackedInts$Encoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_9972fcc56b44e79d]);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_915737209e2fca29], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_8330ac9387ca8cb2], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_e85630727b6855ac], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_0309f1a5ccc713cf], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Encoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_9972fcc56b44e79d]);
          }

          jint PackedInts$Encoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args);
          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self);

          static PyMethodDef t_PackedInts$Encoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, encode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Encoder)[] = {
            { Py_tp_methods, t_PackedInts$Encoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Encoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$Encoder, t_PackedInts$Encoder, PackedInts$Encoder);

          void t_PackedInts$Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Encoder), &PY_TYPE_DEF(PackedInts$Encoder), module, "PackedInts$Encoder", 0);
          }

          void t_PackedInts$Encoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Encoder), "class_", make_descriptor(PackedInts$Encoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Encoder), "wrapfn_", make_descriptor(t_PackedInts$Encoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Encoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Encoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Encoder::wrap_Object(PackedInts$Encoder(((t_PackedInts$Encoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LiteralValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LiteralValueSource::class$ = NULL;
            jmethodID *LiteralValueSource::mids$ = NULL;
            bool LiteralValueSource::live$ = false;
            jint LiteralValueSource::hash = (jint) 0;

            jclass LiteralValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LiteralValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValue_db9b55ba01e03e4b] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                hash = env->getStaticIntField(cls, "hash");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LiteralValueSource::LiteralValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String LiteralValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean LiteralValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::java::lang::String LiteralValueSource::getValue() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::queries::function::FunctionValues LiteralValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint LiteralValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self);
            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args);
            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data);
            static PyGetSetDef t_LiteralValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_LiteralValueSource, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LiteralValueSource__methods_[] = {
              DECLARE_METHOD(t_LiteralValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LiteralValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValue, METH_NOARGS),
              DECLARE_METHOD(t_LiteralValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LiteralValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LiteralValueSource)[] = {
              { Py_tp_methods, t_LiteralValueSource__methods_ },
              { Py_tp_init, (void *) t_LiteralValueSource_init_ },
              { Py_tp_getset, t_LiteralValueSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LiteralValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(LiteralValueSource, t_LiteralValueSource, LiteralValueSource);

            void t_LiteralValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LiteralValueSource), &PY_TYPE_DEF(LiteralValueSource), module, "LiteralValueSource", 0);
            }

            void t_LiteralValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LiteralValueSource), "class_", make_descriptor(LiteralValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LiteralValueSource), "wrapfn_", make_descriptor(t_LiteralValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LiteralValueSource), "boxfn_", make_descriptor(boxObject));
              env->getClass(LiteralValueSource::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(LiteralValueSource), "hash", make_descriptor(LiteralValueSource::hash));
            }

            static PyObject *t_LiteralValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LiteralValueSource::initializeClass, 1)))
                return NULL;
              return t_LiteralValueSource::wrap_Object(LiteralValueSource(((t_LiteralValueSource *) arg)->object.this$));
            }
            static PyObject *t_LiteralValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LiteralValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LiteralValueSource_init_(t_LiteralValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              LiteralValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LiteralValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LiteralValueSource_description(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(LiteralValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LiteralValueSource_equals(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(LiteralValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LiteralValueSource_getValue(t_LiteralValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return j2p(result);
            }

            static PyObject *t_LiteralValueSource_getValues(t_LiteralValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LiteralValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LiteralValueSource_hashCode(t_LiteralValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LiteralValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LiteralValueSource_get__value(t_LiteralValueSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollectorManager$Collectors.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollectorManager$Collectors::class$ = NULL;
        jmethodID *MultiCollectorManager$Collectors::mids$ = NULL;
        bool MultiCollectorManager$Collectors::live$ = false;

        jclass MultiCollectorManager$Collectors::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollectorManager$Collectors");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::LeafCollector MultiCollectorManager$Collectors::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode MultiCollectorManager$Collectors::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollectorManager$Collectors_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors_getLeafCollector(t_MultiCollectorManager$Collectors *self, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors_scoreMode(t_MultiCollectorManager$Collectors *self);

        static PyMethodDef t_MultiCollectorManager$Collectors__methods_[] = {
          DECLARE_METHOD(t_MultiCollectorManager$Collectors, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors, getLeafCollector, METH_O),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors, scoreMode, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiCollectorManager$Collectors)[] = {
          { Py_tp_methods, t_MultiCollectorManager$Collectors__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiCollectorManager$Collectors)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiCollectorManager$Collectors, t_MultiCollectorManager$Collectors, MultiCollectorManager$Collectors);

        void t_MultiCollectorManager$Collectors::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollectorManager$Collectors), &PY_TYPE_DEF(MultiCollectorManager$Collectors), module, "MultiCollectorManager$Collectors", 0);
        }

        void t_MultiCollectorManager$Collectors::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors), "class_", make_descriptor(MultiCollectorManager$Collectors::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors), "wrapfn_", make_descriptor(t_MultiCollectorManager$Collectors::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollectorManager$Collectors_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollectorManager$Collectors::initializeClass, 1)))
            return NULL;
          return t_MultiCollectorManager$Collectors::wrap_Object(MultiCollectorManager$Collectors(((t_MultiCollectorManager$Collectors *) arg)->object.this$));
        }
        static PyObject *t_MultiCollectorManager$Collectors_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollectorManager$Collectors::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollectorManager$Collectors_getLeafCollector(t_MultiCollectorManager$Collectors *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_MultiCollectorManager$Collectors_scoreMode(t_MultiCollectorManager$Collectors *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParser.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParser::class$ = NULL;
            jmethodID *QueryParser::mids$ = NULL;
            jfieldID *QueryParser::fids$ = NULL;
            bool QueryParser::live$ = false;

            jclass QueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_67ef41c0d2131f33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_init$_d91dd22f8b94642a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_AndQuery_c098c03af75798aa] = env->getMethodID(cls, "AndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQuery_c098c03af75798aa] = env->getMethodID(cls, "FieldsQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQueryList_49ec78390f08338a] = env->getMethodID(cls, "FieldsQueryList", "()Ljava/util/List;");
                mids$[mid_NQuery_c098c03af75798aa] = env->getMethodID(cls, "NQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_NotQuery_c098c03af75798aa] = env->getMethodID(cls, "NotQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_OptionalFields_908b4cd043251f58] = env->getMethodID(cls, "OptionalFields", "()Ljava/util/ArrayList;");
                mids$[mid_OptionalWeights_3f41275c0ad7d3ea] = env->getMethodID(cls, "OptionalWeights", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;)V");
                mids$[mid_OrQuery_c098c03af75798aa] = env->getMethodID(cls, "OrQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrefixOperatorQuery_c098c03af75798aa] = env->getMethodID(cls, "PrefixOperatorQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrimaryQuery_c098c03af75798aa] = env->getMethodID(cls, "PrimaryQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_ReInit_67ef41c0d2131f33] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_ReInit_d91dd22f8b94642a] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_SimpleTerm_c098c03af75798aa] = env->getMethodID(cls, "SimpleTerm", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_TopSrndQuery_c098c03af75798aa] = env->getMethodID(cls, "TopSrndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_WQuery_c098c03af75798aa] = env->getMethodID(cls, "WQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_disable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "disable_tracing", "()V");
                mids$[mid_enable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "enable_tracing", "()V");
                mids$[mid_generateParseException_d56a3afdd4365e57] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/surround/parser/ParseException;");
                mids$[mid_getNextToken_0cee914969d57b66] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_getToken_f51c876584e3a9c6] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_parse_02212ae07c05cc63] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_parse2_02212ae07c05cc63] = env->getMethodID(cls, "parse2", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getPrefixQuery_b4dd1499cb6ff328] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getFieldsQuery_3f395447a99b83eb] = env->getMethodID(cls, "getFieldsQuery", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/ArrayList;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getNotQuery_3c9645318087735c] = env->getMethodID(cls, "getNotQuery", "(Ljava/util/List;Lorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getAndQuery_f821fa2794a6f752] = env->getMethodID(cls, "getAndQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOrQuery_f821fa2794a6f752] = env->getMethodID(cls, "getOrQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOpDistance_a5a7d1128e9e2bb7] = env->getStaticMethodID(cls, "getOpDistance", "(Ljava/lang/String;)I");
                mids$[mid_checkDistanceSubQueries_9923e6e5759048a9] = env->getStaticMethodID(cls, "checkDistanceSubQueries", "(Lorg/apache/lucene/queryparser/surround/query/DistanceQuery;Ljava/lang/String;)V");
                mids$[mid_getDistanceQuery_b28acdb52d371e19] = env->getMethodID(cls, "getDistanceQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getTermQuery_b4dd1499cb6ff328] = env->getMethodID(cls, "getTermQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedSuffix_145b2d0af0c06b93] = env->getMethodID(cls, "allowedSuffix", "(Ljava/lang/String;)Z");
                mids$[mid_allowedTruncation_145b2d0af0c06b93] = env->getMethodID(cls, "allowedTruncation", "(Ljava/lang/String;)Z");
                mids$[mid_getTruncQuery_02212ae07c05cc63] = env->getMethodID(cls, "getTruncQuery", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParser::QueryParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67ef41c0d2131f33, a0.this$)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d91dd22f8b94642a, a0.this$)) {}

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::AndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_AndQuery_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::FieldsQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_FieldsQuery_c098c03af75798aa]));
            }

            ::java::util::List QueryParser::FieldsQueryList() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_FieldsQueryList_49ec78390f08338a]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NQuery_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NotQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NotQuery_c098c03af75798aa]));
            }

            ::java::util::ArrayList QueryParser::OptionalFields() const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_OptionalFields_908b4cd043251f58]));
            }

            void QueryParser::OptionalWeights(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_OptionalWeights_3f41275c0ad7d3ea], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::OrQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_OrQuery_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrefixOperatorQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrefixOperatorQuery_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrimaryQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrimaryQuery_c098c03af75798aa]));
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_67ef41c0d2131f33], a0.this$);
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_d91dd22f8b94642a], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::SimpleTerm() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_SimpleTerm_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::TopSrndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_TopSrndQuery_c098c03af75798aa]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::WQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_WQuery_c098c03af75798aa]));
            }

            void QueryParser::disable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_disable_tracing_f2cc1bce94666404]);
            }

            void QueryParser::enable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_enable_tracing_f2cc1bce94666404]);
            }

            ::org::apache::lucene::queryparser::surround::parser::ParseException QueryParser::generateParseException() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_d56a3afdd4365e57]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_0cee914969d57b66]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getToken(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_f51c876584e3a9c6], a0));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callStaticObjectMethod(cls, mids$[mid_parse_02212ae07c05cc63], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse2(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_parse2_02212ae07c05cc63], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_jj_nt() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
            }

            void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_token() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_token]));
            }

            void QueryParser::_set_token(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_token], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager QueryParser::_get_token_source() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
            }

            void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->setObjectField(this$, fids$[fid_token_source], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self);
            static PyObject *t_QueryParser_NQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self);
            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_WQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
            static PyGetSetDef t_QueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
              DECLARE_GETSET_FIELD(t_QueryParser, token),
              DECLARE_GETSET_FIELD(t_QueryParser, token_source),
              DECLARE_GET_FIELD(t_QueryParser, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParser__methods_[] = {
              DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, AndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQueryList, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NotQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalFields, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalWeights, METH_O),
              DECLARE_METHOD(t_QueryParser, OrQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrefixOperatorQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrimaryQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParser, SimpleTerm, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, TopSrndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, WQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getToken, METH_O),
              DECLARE_METHOD(t_QueryParser, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, parse2, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryParser)[] = {
              { Py_tp_methods, t_QueryParser__methods_ },
              { Py_tp_init, (void *) t_QueryParser_init_ },
              { Py_tp_getset, t_QueryParser__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryParser)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(QueryParser, t_QueryParser, QueryParser);

            void t_QueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParser), &PY_TYPE_DEF(QueryParser), module, "QueryParser", 0);
            }

            void t_QueryParser::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "class_", make_descriptor(QueryParser::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
                return NULL;
              return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
            }
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  QueryParser object((jobject) NULL);

                  INT_CALL(object = QueryParser());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.AndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQueryList());
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_QueryParser_NQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NotQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self)
            {
              ::java::util::ArrayList result((jobject) NULL);
              OBJ_CALL(result = self->object.OptionalFields());
              return ::java::util::t_ArrayList::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0))
              {
                OBJ_CALL(self->object.OptionalWeights(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "OptionalWeights", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.OrQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrefixOperatorQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrimaryQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.SimpleTerm());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.TopSrndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_WQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.WQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.disable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.enable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::ParseException result((jobject) NULL);
              OBJ_CALL(result = self->object.generateParseException());
              return ::org::apache::lucene::queryparser::surround::parser::t_ParseException::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getToken(a0));
                return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getToken", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::QueryParser::parse(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.parse2(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse2", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_jj_nt());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_jj_nt(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_token(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token_source());
              return ::org::apache::lucene::queryparser::surround::parser::t_QueryParserTokenManager::wrap_Object(value);
            }
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &value))
              {
                INT_CALL(self->object._set_token_source(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token_source", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReaderContext::class$ = NULL;
        jmethodID *IndexReaderContext::mids$ = NULL;
        jfieldID *IndexReaderContext::fids$ = NULL;
        bool IndexReaderContext::live$ = false;

        jclass IndexReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_49ec78390f08338a] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_id_d6bcd06f3102c4d9] = env->getMethodID(cls, "id", "()Ljava/lang/Object;");
            mids$[mid_leaves_49ec78390f08338a] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_3268165ce941bf52] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/IndexReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBaseInParent] = env->getFieldID(cls, "docBaseInParent", "I");
            fids$[fid_isTopLevel] = env->getFieldID(cls, "isTopLevel", "Z");
            fids$[fid_ordInParent] = env->getFieldID(cls, "ordInParent", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/apache/lucene/index/CompositeReaderContext;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List IndexReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_49ec78390f08338a]));
        }

        ::java::lang::Object IndexReaderContext::id() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_id_d6bcd06f3102c4d9]));
        }

        ::java::util::List IndexReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_49ec78390f08338a]));
        }

        ::org::apache::lucene::index::IndexReader IndexReaderContext::reader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_reader_3268165ce941bf52]));
        }

        jint IndexReaderContext::_get_docBaseInParent() const
        {
          return env->getIntField(this$, fids$[fid_docBaseInParent]);
        }

        jboolean IndexReaderContext::_get_isTopLevel() const
        {
          return env->getBooleanField(this$, fids$[fid_isTopLevel]);
        }

        jint IndexReaderContext::_get_ordInParent() const
        {
          return env->getIntField(this$, fids$[fid_ordInParent]);
        }

        ::org::apache::lucene::index::CompositeReaderContext IndexReaderContext::_get_parent() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->getObjectField(this$, fids$[fid_parent]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_id(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data);

        static PyGetSetDef t_IndexReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReaderContext, docBaseInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, isTopLevel),
          DECLARE_GET_FIELD(t_IndexReaderContext, ordInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, parent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReaderContext__methods_[] = {
          DECLARE_METHOD(t_IndexReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, children, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, id, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, reader, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexReaderContext)[] = {
          { Py_tp_methods, t_IndexReaderContext__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexReaderContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexReaderContext)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexReaderContext, t_IndexReaderContext, IndexReaderContext);

        void t_IndexReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReaderContext), &PY_TYPE_DEF(IndexReaderContext), module, "IndexReaderContext", 0);
        }

        void t_IndexReaderContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderContext), "class_", make_descriptor(IndexReaderContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderContext), "wrapfn_", make_descriptor(t_IndexReaderContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderContext), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReaderContext::initializeClass, 1)))
            return NULL;
          return t_IndexReaderContext::wrap_Object(IndexReaderContext(((t_IndexReaderContext *) arg)->object.this$));
        }
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.children());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
        }

        static PyObject *t_IndexReaderContext_id(t_IndexReaderContext *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.id());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(LeafReaderContext));
        }

        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.reader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBaseInParent());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isTopLevel());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ordInParent());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_parent());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MemoryTracker.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MemoryTracker::class$ = NULL;
        jmethodID *MemoryTracker::mids$ = NULL;
        bool MemoryTracker::live$ = false;

        jclass MemoryTracker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MemoryTracker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBytes", "()J");
            mids$[mid_updateBytes_9c778c9bce6694df] = env->getMethodID(cls, "updateBytes", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong MemoryTracker::getBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getBytes_2e5ae9edcb9b072f]);
        }

        void MemoryTracker::updateBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBytes_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MemoryTracker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MemoryTracker_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MemoryTracker_getBytes(t_MemoryTracker *self);
        static PyObject *t_MemoryTracker_updateBytes(t_MemoryTracker *self, PyObject *arg);
        static PyObject *t_MemoryTracker_get__bytes(t_MemoryTracker *self, void *data);
        static PyGetSetDef t_MemoryTracker__fields_[] = {
          DECLARE_GET_FIELD(t_MemoryTracker, bytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MemoryTracker__methods_[] = {
          DECLARE_METHOD(t_MemoryTracker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MemoryTracker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MemoryTracker, getBytes, METH_NOARGS),
          DECLARE_METHOD(t_MemoryTracker, updateBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MemoryTracker)[] = {
          { Py_tp_methods, t_MemoryTracker__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MemoryTracker__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MemoryTracker)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MemoryTracker, t_MemoryTracker, MemoryTracker);

        void t_MemoryTracker::install(PyObject *module)
        {
          installType(&PY_TYPE(MemoryTracker), &PY_TYPE_DEF(MemoryTracker), module, "MemoryTracker", 0);
        }

        void t_MemoryTracker::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryTracker), "class_", make_descriptor(MemoryTracker::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryTracker), "wrapfn_", make_descriptor(t_MemoryTracker::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryTracker), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MemoryTracker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MemoryTracker::initializeClass, 1)))
            return NULL;
          return t_MemoryTracker::wrap_Object(MemoryTracker(((t_MemoryTracker *) arg)->object.this$));
        }
        static PyObject *t_MemoryTracker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MemoryTracker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MemoryTracker_getBytes(t_MemoryTracker *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MemoryTracker_updateBytes(t_MemoryTracker *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.updateBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBytes", arg);
          return NULL;
        }

        static PyObject *t_MemoryTracker_get__bytes(t_MemoryTracker *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishAnalyzer::class$ = NULL;
          jmethodID *TurkishAnalyzer::mids$ = NULL;
          bool TurkishAnalyzer::live$ = false;
          ::java::lang::String *TurkishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass TurkishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishAnalyzer::TurkishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet TurkishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data);
          static PyGetSetDef t_TurkishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_TurkishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TurkishAnalyzer)[] = {
            { Py_tp_methods, t_TurkishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_TurkishAnalyzer_init_ },
            { Py_tp_getset, t_TurkishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TurkishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(TurkishAnalyzer, t_TurkishAnalyzer, TurkishAnalyzer);

          void t_TurkishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishAnalyzer), &PY_TYPE_DEF(TurkishAnalyzer), module, "TurkishAnalyzer", 0);
          }

          void t_TurkishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishAnalyzer), "class_", make_descriptor(TurkishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishAnalyzer), "wrapfn_", make_descriptor(t_TurkishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*TurkishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_TurkishAnalyzer::wrap_Object(TurkishAnalyzer(((t_TurkishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TurkishAnalyzer object((jobject) NULL);

                INT_CALL(object = TurkishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::tr::TurkishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMerge::class$ = NULL;
        jmethodID *MergePolicy$OneMerge::mids$ = NULL;
        jfieldID *MergePolicy$OneMerge::fids$ = NULL;
        bool MergePolicy$OneMerge::live$ = false;

        jclass MergePolicy$OneMerge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMerge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_checkAborted_f2cc1bce94666404] = env->getMethodID(cls, "checkAborted", "()V");
            mids$[mid_getMergeInfo_88665de6b57af2eb] = env->getMethodID(cls, "getMergeInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getMergeProgress_a195c5f1b5acc30a] = env->getMethodID(cls, "getMergeProgress", "()Lorg/apache/lucene/index/MergePolicy$OneMergeProgress;");
            mids$[mid_getStoreMergeInfo_2404c983e763de89] = env->getMethodID(cls, "getStoreMergeInfo", "()Lorg/apache/lucene/store/MergeInfo;");
            mids$[mid_isAborted_8454bd5aa23fd11e] = env->getMethodID(cls, "isAborted", "()Z");
            mids$[mid_mergeFinished_33bb9a5a88dc139c] = env->getMethodID(cls, "mergeFinished", "(ZZ)V");
            mids$[mid_mergeInit_f2cc1bce94666404] = env->getMethodID(cls, "mergeInit", "()V");
            mids$[mid_segString_db9b55ba01e03e4b] = env->getMethodID(cls, "segString", "()Ljava/lang/String;");
            mids$[mid_setAborted_f2cc1bce94666404] = env->getMethodID(cls, "setAborted", "()V");
            mids$[mid_setMergeInfo_7d313206bbb3a99e] = env->getMethodID(cls, "setMergeInfo", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_totalBytesSize_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalBytesSize", "()J");
            mids$[mid_totalNumDocs_9972fcc56b44e79d] = env->getMethodID(cls, "totalNumDocs", "()I");
            mids$[mid_wrapForMerge_5a4a763f0e786638] = env->getMethodID(cls, "wrapForMerge", "(Lorg/apache/lucene/index/CodecReader;)Lorg/apache/lucene/index/CodecReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_segments] = env->getFieldID(cls, "segments", "Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMerge::MergePolicy$OneMerge(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

        void MergePolicy$OneMerge::checkAborted() const
        {
          env->callVoidMethod(this$, mids$[mid_checkAborted_f2cc1bce94666404]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo MergePolicy$OneMerge::getMergeInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getMergeInfo_88665de6b57af2eb]));
        }

        ::org::apache::lucene::index::MergePolicy$OneMergeProgress MergePolicy$OneMerge::getMergeProgress() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMergeProgress(env->callObjectMethod(this$, mids$[mid_getMergeProgress_a195c5f1b5acc30a]));
        }

        ::org::apache::lucene::store::MergeInfo MergePolicy$OneMerge::getStoreMergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->callObjectMethod(this$, mids$[mid_getStoreMergeInfo_2404c983e763de89]));
        }

        jboolean MergePolicy$OneMerge::isAborted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAborted_8454bd5aa23fd11e]);
        }

        void MergePolicy$OneMerge::mergeFinished(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeFinished_33bb9a5a88dc139c], a0, a1);
        }

        void MergePolicy$OneMerge::mergeInit() const
        {
          env->callVoidMethod(this$, mids$[mid_mergeInit_f2cc1bce94666404]);
        }

        ::java::lang::String MergePolicy$OneMerge::segString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_db9b55ba01e03e4b]));
        }

        void MergePolicy$OneMerge::setAborted() const
        {
          env->callVoidMethod(this$, mids$[mid_setAborted_f2cc1bce94666404]);
        }

        void MergePolicy$OneMerge::setMergeInfo(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeInfo_7d313206bbb3a99e], a0.this$);
        }

        jlong MergePolicy$OneMerge::totalBytesSize() const
        {
          return env->callLongMethod(this$, mids$[mid_totalBytesSize_2e5ae9edcb9b072f]);
        }

        jint MergePolicy$OneMerge::totalNumDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_totalNumDocs_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::CodecReader MergePolicy$OneMerge::wrapForMerge(const ::org::apache::lucene::index::CodecReader & a0) const
        {
          return ::org::apache::lucene::index::CodecReader(env->callObjectMethod(this$, mids$[mid_wrapForMerge_5a4a763f0e786638], a0.this$));
        }

        jlong MergePolicy$OneMerge::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        void MergePolicy$OneMerge::_set_estimatedMergeBytes(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_estimatedMergeBytes], a0);
        }

        ::java::util::List MergePolicy$OneMerge::_get_segments() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segments]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeProgress(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getStoreMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_isAborted(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_mergeFinished(t_MergePolicy$OneMerge *self, PyObject *args);
        static PyObject *t_MergePolicy$OneMerge_mergeInit(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_setAborted(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_setMergeInfo(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_wrapForMerge(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data);

        static PyObject *t_MergePolicy$OneMerge_get__aborted(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__mergeInfo(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeProgress(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__storeMergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static PyGetSetDef t_MergePolicy$OneMerge__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, segments),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, aborted),
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, mergeInfo),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeProgress),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, storeMergeInfo),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMerge__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMerge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, checkAborted, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeProgress, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getStoreMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, isAborted, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, mergeFinished, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, mergeInit, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, segString, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setAborted, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setMergeInfo, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalBytesSize, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalNumDocs, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, wrapForMerge, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$OneMerge)[] = {
          { Py_tp_methods, t_MergePolicy$OneMerge__methods_ },
          { Py_tp_init, (void *) t_MergePolicy$OneMerge_init_ },
          { Py_tp_getset, t_MergePolicy$OneMerge__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$OneMerge)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergePolicy$OneMerge, t_MergePolicy$OneMerge, MergePolicy$OneMerge);

        void t_MergePolicy$OneMerge::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMerge), &PY_TYPE_DEF(MergePolicy$OneMerge), module, "MergePolicy$OneMerge", 0);
        }

        void t_MergePolicy$OneMerge::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMerge), "class_", make_descriptor(MergePolicy$OneMerge::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMerge), "wrapfn_", make_descriptor(t_MergePolicy$OneMerge::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMerge), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMerge::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMerge::wrap_Object(MergePolicy$OneMerge(((t_MergePolicy$OneMerge *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMerge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          MergePolicy$OneMerge object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = MergePolicy$OneMerge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self)
        {
          OBJ_CALL(self->object.checkAborted());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeProgress(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMergeProgress result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeProgress());
          return ::org::apache::lucene::index::t_MergePolicy$OneMergeProgress::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getStoreMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::store::MergeInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getStoreMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_isAborted(t_MergePolicy$OneMerge *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAborted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMerge_mergeFinished(t_MergePolicy$OneMerge *self, PyObject *args)
        {
          jboolean a0;
          jboolean a1;

          if (!parseArgs(args, "ZZ", &a0, &a1))
          {
            OBJ_CALL(self->object.mergeFinished(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeFinished", args);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_mergeInit(t_MergePolicy$OneMerge *self)
        {
          OBJ_CALL(self->object.mergeInit());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.segString());
          return j2p(result);
        }

        static PyObject *t_MergePolicy$OneMerge_setAborted(t_MergePolicy$OneMerge *self)
        {
          OBJ_CALL(self->object.setAborted());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy$OneMerge_setMergeInfo(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeInfo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeInfo", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalBytesSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalNumDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MergePolicy$OneMerge_wrapForMerge(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::org::apache::lucene::index::CodecReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrapForMerge(a0));
            return ::org::apache::lucene::index::t_CodecReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrapForMerge", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_estimatedMergeBytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "estimatedMergeBytes", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segments());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__aborted(t_MergePolicy$OneMerge *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAborted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }
        static int t_MergePolicy$OneMerge_set__mergeInfo(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeInfo(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeInfo", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeProgress(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMergeProgress value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeProgress());
          return ::org::apache::lucene::index::t_MergePolicy$OneMergeProgress::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__storeMergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getStoreMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BulkScorer::class$ = NULL;
        jmethodID *BulkScorer::mids$ = NULL;
        bool BulkScorer::live$ = false;

        jclass BulkScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BulkScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_score_bbfd0c611bb5ebb7] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/LeafCollector;Lorg/apache/lucene/util/Bits;)V");
            mids$[mid_score_aa5aa19eac27f402] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/LeafCollector;Lorg/apache/lucene/util/Bits;II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BulkScorer::BulkScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jlong BulkScorer::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        void BulkScorer::score(const ::org::apache::lucene::search::LeafCollector & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_score_bbfd0c611bb5ebb7], a0.this$, a1.this$);
        }

        jint BulkScorer::score(const ::org::apache::lucene::search::LeafCollector & a0, const ::org::apache::lucene::util::Bits & a1, jint a2, jint a3) const
        {
          return env->callIntMethod(this$, mids$[mid_score_aa5aa19eac27f402], a0.this$, a1.this$, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BulkScorer_cost(t_BulkScorer *self);
        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args);

        static PyMethodDef t_BulkScorer__methods_[] = {
          DECLARE_METHOD(t_BulkScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, cost, METH_NOARGS),
          DECLARE_METHOD(t_BulkScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BulkScorer)[] = {
          { Py_tp_methods, t_BulkScorer__methods_ },
          { Py_tp_init, (void *) t_BulkScorer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BulkScorer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BulkScorer, t_BulkScorer, BulkScorer);

        void t_BulkScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(BulkScorer), &PY_TYPE_DEF(BulkScorer), module, "BulkScorer", 0);
        }

        void t_BulkScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BulkScorer), "class_", make_descriptor(BulkScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BulkScorer), "wrapfn_", make_descriptor(t_BulkScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BulkScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BulkScorer::initializeClass, 1)))
            return NULL;
          return t_BulkScorer::wrap_Object(BulkScorer(((t_BulkScorer *) arg)->object.this$));
        }
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BulkScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds)
        {
          BulkScorer object((jobject) NULL);

          INT_CALL(object = BulkScorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BulkScorer_cost(t_BulkScorer *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::LeafCollector a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::LeafCollector::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.score(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::LeafCollector a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "kkII", ::org::apache::lucene::search::LeafCollector::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.score(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/FiniteStringsIterator.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *FiniteStringsIterator::class$ = NULL;
          jmethodID *FiniteStringsIterator::mids$ = NULL;
          bool FiniteStringsIterator::live$ = false;

          jclass FiniteStringsIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/FiniteStringsIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_7d257ac22e5cb16e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;II)V");
              mids$[mid_next_ce9cdfb58d7a482b] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/IntsRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FiniteStringsIterator::FiniteStringsIterator(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          FiniteStringsIterator::FiniteStringsIterator(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d257ac22e5cb16e, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::IntsRef FiniteStringsIterator::next() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_next_ce9cdfb58d7a482b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_FiniteStringsIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FiniteStringsIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FiniteStringsIterator_init_(t_FiniteStringsIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FiniteStringsIterator_next(t_FiniteStringsIterator *self);

          static PyMethodDef t_FiniteStringsIterator__methods_[] = {
            DECLARE_METHOD(t_FiniteStringsIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FiniteStringsIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FiniteStringsIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FiniteStringsIterator)[] = {
            { Py_tp_methods, t_FiniteStringsIterator__methods_ },
            { Py_tp_init, (void *) t_FiniteStringsIterator_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_FiniteStringsIterator *)) get_next< t_FiniteStringsIterator,::org::apache::lucene::util::t_IntsRef,::org::apache::lucene::util::IntsRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FiniteStringsIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FiniteStringsIterator, t_FiniteStringsIterator, FiniteStringsIterator);

          void t_FiniteStringsIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(FiniteStringsIterator), &PY_TYPE_DEF(FiniteStringsIterator), module, "FiniteStringsIterator", 0);
          }

          void t_FiniteStringsIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FiniteStringsIterator), "class_", make_descriptor(FiniteStringsIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FiniteStringsIterator), "wrapfn_", make_descriptor(t_FiniteStringsIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FiniteStringsIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FiniteStringsIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FiniteStringsIterator::initializeClass, 1)))
              return NULL;
            return t_FiniteStringsIterator::wrap_Object(FiniteStringsIterator(((t_FiniteStringsIterator *) arg)->object.this$));
          }
          static PyObject *t_FiniteStringsIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FiniteStringsIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FiniteStringsIterator_init_(t_FiniteStringsIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                FiniteStringsIterator object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = FiniteStringsIterator(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                FiniteStringsIterator object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FiniteStringsIterator(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FiniteStringsIterator_next(t_FiniteStringsIterator *self)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexUpgrader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexUpgrader::class$ = NULL;
        jmethodID *IndexUpgrader::mids$ = NULL;
        bool IndexUpgrader::live$ = false;

        jclass IndexUpgrader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexUpgrader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_79f8840f807adb79] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
            mids$[mid_init$_e2ce032ffb8772dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/InfoStream;Z)V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_upgrade_f2cc1bce94666404] = env->getMethodID(cls, "upgrade", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_79f8840f807adb79, a0.this$, a1.this$, a2)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::InfoStream & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e2ce032ffb8772dc, a0.this$, a1.this$, a2)) {}

        void IndexUpgrader::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }

        void IndexUpgrader::upgrade() const
        {
          env->callVoidMethod(this$, mids$[mid_upgrade_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self);

        static PyMethodDef t_IndexUpgrader__methods_[] = {
          DECLARE_METHOD(t_IndexUpgrader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, upgrade, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexUpgrader)[] = {
          { Py_tp_methods, t_IndexUpgrader__methods_ },
          { Py_tp_init, (void *) t_IndexUpgrader_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexUpgrader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexUpgrader, t_IndexUpgrader, IndexUpgrader);

        void t_IndexUpgrader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexUpgrader), &PY_TYPE_DEF(IndexUpgrader), module, "IndexUpgrader", 0);
        }

        void t_IndexUpgrader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexUpgrader), "class_", make_descriptor(IndexUpgrader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexUpgrader), "wrapfn_", make_descriptor(t_IndexUpgrader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexUpgrader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexUpgrader::initializeClass, 1)))
            return NULL;
          return t_IndexUpgrader::wrap_Object(IndexUpgrader(((t_IndexUpgrader *) arg)->object.this$));
        }
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexUpgrader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = IndexUpgrader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::InfoStream a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::InfoStream::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexUpgrader::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self)
        {
          OBJ_CALL(self->object.upgrade());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *ReversePathHierarchyTokenizer::class$ = NULL;
          jmethodID *ReversePathHierarchyTokenizer::mids$ = NULL;
          bool ReversePathHierarchyTokenizer::live$ = false;
          jchar ReversePathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint ReversePathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass ReversePathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_f28e156a8b542ec8] = env->getMethodID(cls, "<init>", "(CC)V");
              mids$[mid_init$_15207c0a5b142a27] = env->getMethodID(cls, "<init>", "(CI)V");
              mids$[mid_init$_49eec491b83160ef] = env->getMethodID(cls, "<init>", "(IC)V");
              mids$[mid_init$_a749c2e31686c79c] = env->getMethodID(cls, "<init>", "(ICC)V");
              mids$[mid_init$_92254c745d1d56c8] = env->getMethodID(cls, "<init>", "(CCI)V");
              mids$[mid_init$_f7f4575bb0fb8a29] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;CCI)V");
              mids$[mid_init$_9643b5b77a650257] = env->getMethodID(cls, "<init>", "(ICCI)V");
              mids$[mid_init$_38dd631bad36a6f7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;ICCI)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jint a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jchar a0, jchar a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f28e156a8b542ec8, a0, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jchar a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_15207c0a5b142a27, a0, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jint a0, jchar a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_49eec491b83160ef, a0, a1)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jint a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a749c2e31686c79c, a0, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jchar a0, jchar a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92254c745d1d56c8, a0, a1, a2)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f7f4575bb0fb8a29, a0.this$, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(jint a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9643b5b77a650257, a0, a1, a2, a3)) {}

          ReversePathHierarchyTokenizer::ReversePathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_38dd631bad36a6f7, a0.this$, a1, a2, a3, a4)) {}

          void ReversePathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean ReversePathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ReversePathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_ReversePathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReversePathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ReversePathHierarchyTokenizer)[] = {
            { Py_tp_methods, t_ReversePathHierarchyTokenizer__methods_ },
            { Py_tp_init, (void *) t_ReversePathHierarchyTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ReversePathHierarchyTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(ReversePathHierarchyTokenizer, t_ReversePathHierarchyTokenizer, ReversePathHierarchyTokenizer);

          void t_ReversePathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ReversePathHierarchyTokenizer), &PY_TYPE_DEF(ReversePathHierarchyTokenizer), module, "ReversePathHierarchyTokenizer", 0);
          }

          void t_ReversePathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReversePathHierarchyTokenizer), "class_", make_descriptor(ReversePathHierarchyTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReversePathHierarchyTokenizer), "wrapfn_", make_descriptor(t_ReversePathHierarchyTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReversePathHierarchyTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ReversePathHierarchyTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReversePathHierarchyTokenizer), "DEFAULT_DELIMITER", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReversePathHierarchyTokenizer), "DEFAULT_SKIP", make_descriptor(ReversePathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_ReversePathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_ReversePathHierarchyTokenizer::wrap_Object(ReversePathHierarchyTokenizer(((t_ReversePathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ReversePathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReversePathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReversePathHierarchyTokenizer_init_(t_ReversePathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ReversePathHierarchyTokenizer object((jobject) NULL);

                INT_CALL(object = ReversePathHierarchyTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jchar a0;
                jchar a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "CC", &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jchar a0;
                jint a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "CI", &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                jchar a1;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "IC", &a0, &a1))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jchar a1;
                jchar a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "ICC", &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                jchar a0;
                jchar a1;
                jint a2;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "CCI", &a0, &a1, &a2))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                jchar a1;
                jchar a2;
                jint a3;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "ICCI", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                ReversePathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = ReversePathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReversePathHierarchyTokenizer_end(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_incrementToken(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReversePathHierarchyTokenizer_reset(t_ReversePathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ReversePathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SingleFragListBuilder::class$ = NULL;
          jmethodID *SingleFragListBuilder::mids$ = NULL;
          bool SingleFragListBuilder::live$ = false;

          jclass SingleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SingleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createFieldFragList_2f27b0bbe6847286] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleFragListBuilder::SingleFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SingleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_2f27b0bbe6847286], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SingleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SingleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SingleFragListBuilder)[] = {
            { Py_tp_methods, t_SingleFragListBuilder__methods_ },
            { Py_tp_init, (void *) t_SingleFragListBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SingleFragListBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SingleFragListBuilder, t_SingleFragListBuilder, SingleFragListBuilder);

          void t_SingleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleFragListBuilder), &PY_TYPE_DEF(SingleFragListBuilder), module, "SingleFragListBuilder", 0);
          }

          void t_SingleFragListBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFragListBuilder), "class_", make_descriptor(SingleFragListBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFragListBuilder), "wrapfn_", make_descriptor(t_SingleFragListBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFragListBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SingleFragListBuilder::wrap_Object(SingleFragListBuilder(((t_SingleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            SingleFragListBuilder object((jobject) NULL);

            INT_CALL(object = SingleFragListBuilder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianAnalyzer::class$ = NULL;
          jmethodID *IndonesianAnalyzer::mids$ = NULL;
          bool IndonesianAnalyzer::live$ = false;
          ::java::lang::String *IndonesianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IndonesianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianAnalyzer::IndonesianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet IndonesianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data);
          static PyGetSetDef t_IndonesianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IndonesianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndonesianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IndonesianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndonesianAnalyzer)[] = {
            { Py_tp_methods, t_IndonesianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_IndonesianAnalyzer_init_ },
            { Py_tp_getset, t_IndonesianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndonesianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(IndonesianAnalyzer, t_IndonesianAnalyzer, IndonesianAnalyzer);

          void t_IndonesianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianAnalyzer), &PY_TYPE_DEF(IndonesianAnalyzer), module, "IndonesianAnalyzer", 0);
          }

          void t_IndonesianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianAnalyzer), "class_", make_descriptor(IndonesianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianAnalyzer), "wrapfn_", make_descriptor(t_IndonesianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IndonesianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IndonesianAnalyzer::wrap_Object(IndonesianAnalyzer(((t_IndonesianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IndonesianAnalyzer object((jobject) NULL);

                INT_CALL(object = IndonesianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::id::IndonesianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeRateLimiter.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeRateLimiter::class$ = NULL;
        jmethodID *MergeRateLimiter::mids$ = NULL;
        bool MergeRateLimiter::live$ = false;

        jclass MergeRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3d9ee0c465d85423] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy$OneMergeProgress;)V");
            mids$[mid_getMBPerSec_8c74b787998ce4bc] = env->getMethodID(cls, "getMBPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_getTotalBytesWritten_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTotalBytesWritten", "()J");
            mids$[mid_getTotalPausedNS_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTotalPausedNS", "()J");
            mids$[mid_getTotalStoppedNS_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTotalStoppedNS", "()J");
            mids$[mid_pause_d711eecdc469624a] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMBPerSec_3c435f10a3b1e038] = env->getMethodID(cls, "setMBPerSec", "(D)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeRateLimiter::MergeRateLimiter(const ::org::apache::lucene::index::MergePolicy$OneMergeProgress & a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_3d9ee0c465d85423, a0.this$)) {}

        jdouble MergeRateLimiter::getMBPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMBPerSec_8c74b787998ce4bc]);
        }

        jlong MergeRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f]);
        }

        jlong MergeRateLimiter::getTotalBytesWritten() const
        {
          return env->callLongMethod(this$, mids$[mid_getTotalBytesWritten_2e5ae9edcb9b072f]);
        }

        jlong MergeRateLimiter::getTotalPausedNS() const
        {
          return env->callLongMethod(this$, mids$[mid_getTotalPausedNS_2e5ae9edcb9b072f]);
        }

        jlong MergeRateLimiter::getTotalStoppedNS() const
        {
          return env->callLongMethod(this$, mids$[mid_getTotalStoppedNS_2e5ae9edcb9b072f]);
        }

        jlong MergeRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_d711eecdc469624a], a0);
        }

        void MergeRateLimiter::setMBPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMBPerSec_3c435f10a3b1e038], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeRateLimiter_init_(t_MergeRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeRateLimiter_getMBPerSec(t_MergeRateLimiter *self, PyObject *args);
        static PyObject *t_MergeRateLimiter_getMinPauseCheckBytes(t_MergeRateLimiter *self, PyObject *args);
        static PyObject *t_MergeRateLimiter_getTotalBytesWritten(t_MergeRateLimiter *self);
        static PyObject *t_MergeRateLimiter_getTotalPausedNS(t_MergeRateLimiter *self);
        static PyObject *t_MergeRateLimiter_getTotalStoppedNS(t_MergeRateLimiter *self);
        static PyObject *t_MergeRateLimiter_pause(t_MergeRateLimiter *self, PyObject *args);
        static PyObject *t_MergeRateLimiter_setMBPerSec(t_MergeRateLimiter *self, PyObject *args);
        static PyObject *t_MergeRateLimiter_get__mBPerSec(t_MergeRateLimiter *self, void *data);
        static int t_MergeRateLimiter_set__mBPerSec(t_MergeRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_MergeRateLimiter_get__minPauseCheckBytes(t_MergeRateLimiter *self, void *data);
        static PyObject *t_MergeRateLimiter_get__totalBytesWritten(t_MergeRateLimiter *self, void *data);
        static PyObject *t_MergeRateLimiter_get__totalPausedNS(t_MergeRateLimiter *self, void *data);
        static PyObject *t_MergeRateLimiter_get__totalStoppedNS(t_MergeRateLimiter *self, void *data);
        static PyGetSetDef t_MergeRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergeRateLimiter, mBPerSec),
          DECLARE_GET_FIELD(t_MergeRateLimiter, minPauseCheckBytes),
          DECLARE_GET_FIELD(t_MergeRateLimiter, totalBytesWritten),
          DECLARE_GET_FIELD(t_MergeRateLimiter, totalPausedNS),
          DECLARE_GET_FIELD(t_MergeRateLimiter, totalStoppedNS),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeRateLimiter__methods_[] = {
          DECLARE_METHOD(t_MergeRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeRateLimiter, getMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_MergeRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_MergeRateLimiter, getTotalBytesWritten, METH_NOARGS),
          DECLARE_METHOD(t_MergeRateLimiter, getTotalPausedNS, METH_NOARGS),
          DECLARE_METHOD(t_MergeRateLimiter, getTotalStoppedNS, METH_NOARGS),
          DECLARE_METHOD(t_MergeRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_MergeRateLimiter, setMBPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeRateLimiter)[] = {
          { Py_tp_methods, t_MergeRateLimiter__methods_ },
          { Py_tp_init, (void *) t_MergeRateLimiter_init_ },
          { Py_tp_getset, t_MergeRateLimiter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeRateLimiter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::RateLimiter),
          NULL
        };

        DEFINE_TYPE(MergeRateLimiter, t_MergeRateLimiter, MergeRateLimiter);

        void t_MergeRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeRateLimiter), &PY_TYPE_DEF(MergeRateLimiter), module, "MergeRateLimiter", 0);
        }

        void t_MergeRateLimiter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeRateLimiter), "class_", make_descriptor(MergeRateLimiter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeRateLimiter), "wrapfn_", make_descriptor(t_MergeRateLimiter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeRateLimiter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeRateLimiter::initializeClass, 1)))
            return NULL;
          return t_MergeRateLimiter::wrap_Object(MergeRateLimiter(((t_MergeRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_MergeRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeRateLimiter_init_(t_MergeRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy$OneMergeProgress a0((jobject) NULL);
          MergeRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy$OneMergeProgress::initializeClass, &a0))
          {
            INT_CALL(object = MergeRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeRateLimiter_getMBPerSec(t_MergeRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMBPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(MergeRateLimiter), (PyObject *) self, "getMBPerSec", args, 2);
        }

        static PyObject *t_MergeRateLimiter_getMinPauseCheckBytes(t_MergeRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MergeRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_MergeRateLimiter_getTotalBytesWritten(t_MergeRateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTotalBytesWritten());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergeRateLimiter_getTotalPausedNS(t_MergeRateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTotalPausedNS());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergeRateLimiter_getTotalStoppedNS(t_MergeRateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTotalStoppedNS());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergeRateLimiter_pause(t_MergeRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MergeRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_MergeRateLimiter_setMBPerSec(t_MergeRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMBPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MergeRateLimiter), (PyObject *) self, "setMBPerSec", args, 2);
        }

        static PyObject *t_MergeRateLimiter_get__mBPerSec(t_MergeRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMBPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergeRateLimiter_set__mBPerSec(t_MergeRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMBPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mBPerSec", arg);
          return -1;
        }

        static PyObject *t_MergeRateLimiter_get__minPauseCheckBytes(t_MergeRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeRateLimiter_get__totalBytesWritten(t_MergeRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTotalBytesWritten());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeRateLimiter_get__totalPausedNS(t_MergeRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTotalPausedNS());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeRateLimiter_get__totalStoppedNS(t_MergeRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTotalStoppedNS());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoCircle.h"
#include "org/apache/lucene/spatial3d/geom/GeoSizeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoCircle::class$ = NULL;
          jmethodID *GeoCircle::mids$ = NULL;
          bool GeoCircle::live$ = false;

          jclass GeoCircle::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoCircle");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoCircle_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCircle_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_GeoCircle__methods_[] = {
            DECLARE_METHOD(t_GeoCircle, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCircle, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoCircle)[] = {
            { Py_tp_methods, t_GeoCircle__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoCircle)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoDistanceShape),
            NULL
          };

          DEFINE_TYPE(GeoCircle, t_GeoCircle, GeoCircle);

          void t_GeoCircle::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoCircle), &PY_TYPE_DEF(GeoCircle), module, "GeoCircle", 0);
          }

          void t_GeoCircle::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircle), "class_", make_descriptor(GeoCircle::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircle), "wrapfn_", make_descriptor(t_GeoCircle::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircle), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoCircle_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoCircle::initializeClass, 1)))
              return NULL;
            return t_GeoCircle::wrap_Object(GeoCircle(((t_GeoCircle *) arg)->object.this$));
          }
          static PyObject *t_GeoCircle_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoCircle::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordAnalyzer::class$ = NULL;
          jmethodID *KeywordAnalyzer::mids$ = NULL;
          bool KeywordAnalyzer::live$ = false;

          jclass KeywordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAnalyzer::KeywordAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KeywordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_KeywordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordAnalyzer)[] = {
            { Py_tp_methods, t_KeywordAnalyzer__methods_ },
            { Py_tp_init, (void *) t_KeywordAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(KeywordAnalyzer, t_KeywordAnalyzer, KeywordAnalyzer);

          void t_KeywordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAnalyzer), &PY_TYPE_DEF(KeywordAnalyzer), module, "KeywordAnalyzer", 0);
          }

          void t_KeywordAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAnalyzer), "class_", make_descriptor(KeywordAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAnalyzer), "wrapfn_", make_descriptor(t_KeywordAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_KeywordAnalyzer::wrap_Object(KeywordAnalyzer(((t_KeywordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_KeywordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAnalyzer_init_(t_KeywordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            KeywordAnalyzer object((jobject) NULL);

            INT_CALL(object = KeywordAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene60/Lucene60PointsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsWriter.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {

          ::java::lang::Class *Lucene60PointsFormat::class$ = NULL;
          jmethodID *Lucene60PointsFormat::mids$ = NULL;
          bool Lucene60PointsFormat::live$ = false;
          ::java::lang::String *Lucene60PointsFormat::DATA_EXTENSION = NULL;
          ::java::lang::String *Lucene60PointsFormat::INDEX_EXTENSION = NULL;

          jclass Lucene60PointsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene60/Lucene60PointsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_8abb687068409d66] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PointsReader;");
              mids$[mid_fieldsWriter_e285a7edd004a5e4] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PointsWriter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DATA_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DATA_EXTENSION", "Ljava/lang/String;"));
              INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene60PointsFormat::Lucene60PointsFormat() : ::org::apache::lucene::codecs::PointsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::PointsReader Lucene60PointsFormat::fieldsReader(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_8abb687068409d66], a0.this$));
          }

          ::org::apache::lucene::codecs::PointsWriter Lucene60PointsFormat::fieldsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e285a7edd004a5e4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {
          static PyObject *t_Lucene60PointsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene60PointsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene60PointsFormat_init_(t_Lucene60PointsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene60PointsFormat_fieldsReader(t_Lucene60PointsFormat *self, PyObject *args);
          static PyObject *t_Lucene60PointsFormat_fieldsWriter(t_Lucene60PointsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene60PointsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene60PointsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60PointsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60PointsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene60PointsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene60PointsFormat)[] = {
            { Py_tp_methods, t_Lucene60PointsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene60PointsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene60PointsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene60PointsFormat, t_Lucene60PointsFormat, Lucene60PointsFormat);

          void t_Lucene60PointsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene60PointsFormat), &PY_TYPE_DEF(Lucene60PointsFormat), module, "Lucene60PointsFormat", 0);
          }

          void t_Lucene60PointsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsFormat), "class_", make_descriptor(Lucene60PointsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsFormat), "wrapfn_", make_descriptor(t_Lucene60PointsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene60PointsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsFormat), "DATA_EXTENSION", make_descriptor(j2p(*Lucene60PointsFormat::DATA_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsFormat), "INDEX_EXTENSION", make_descriptor(j2p(*Lucene60PointsFormat::INDEX_EXTENSION)));
          }

          static PyObject *t_Lucene60PointsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene60PointsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene60PointsFormat::wrap_Object(Lucene60PointsFormat(((t_Lucene60PointsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene60PointsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene60PointsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene60PointsFormat_init_(t_Lucene60PointsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene60PointsFormat object((jobject) NULL);

            INT_CALL(object = Lucene60PointsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene60PointsFormat_fieldsReader(t_Lucene60PointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0));
              return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene60PointsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene60PointsFormat_fieldsWriter(t_Lucene60PointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsWriter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0));
              return ::org::apache::lucene::codecs::t_PointsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene60PointsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ro/RomanianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {

          ::java::lang::Class *RomanianAnalyzer::class$ = NULL;
          jmethodID *RomanianAnalyzer::mids$ = NULL;
          bool RomanianAnalyzer::live$ = false;
          ::java::lang::String *RomanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RomanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ro/RomanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RomanianAnalyzer::RomanianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet RomanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {
          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data);
          static PyGetSetDef t_RomanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RomanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RomanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RomanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RomanianAnalyzer)[] = {
            { Py_tp_methods, t_RomanianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_RomanianAnalyzer_init_ },
            { Py_tp_getset, t_RomanianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RomanianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(RomanianAnalyzer, t_RomanianAnalyzer, RomanianAnalyzer);

          void t_RomanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RomanianAnalyzer), &PY_TYPE_DEF(RomanianAnalyzer), module, "RomanianAnalyzer", 0);
          }

          void t_RomanianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianAnalyzer), "class_", make_descriptor(RomanianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianAnalyzer), "wrapfn_", make_descriptor(t_RomanianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(RomanianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RomanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RomanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RomanianAnalyzer::wrap_Object(RomanianAnalyzer(((t_RomanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RomanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                RomanianAnalyzer object((jobject) NULL);

                INT_CALL(object = RomanianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ro::RomanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanTermBuilder::class$ = NULL;
            jmethodID *SpanTermBuilder::mids$ = NULL;
            bool SpanTermBuilder::live$ = false;

            jclass SpanTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanTermBuilder::SpanTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanTermBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanTermBuilder)[] = {
              { Py_tp_methods, t_SpanTermBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanTermBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanTermBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanTermBuilder, t_SpanTermBuilder, SpanTermBuilder);

            void t_SpanTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanTermBuilder), &PY_TYPE_DEF(SpanTermBuilder), module, "SpanTermBuilder", 0);
            }

            void t_SpanTermBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermBuilder), "class_", make_descriptor(SpanTermBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermBuilder), "wrapfn_", make_descriptor(t_SpanTermBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanTermBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanTermBuilder::wrap_Object(SpanTermBuilder(((t_SpanTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              SpanTermBuilder object((jobject) NULL);

              INT_CALL(object = SpanTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
