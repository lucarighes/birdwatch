#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYRectangle.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/geo/XYRectangle.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYRectangle::class$ = NULL;
        jmethodID *XYRectangle::mids$ = NULL;
        jfieldID *XYRectangle::fids$ = NULL;
        bool XYRectangle::live$ = false;

        jclass XYRectangle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYRectangle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fe55cdfce7ef0110] = env->getMethodID(cls, "<init>", "(FFFF)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fromPointDistance_02b0e4181e20d364] = env->getStaticMethodID(cls, "fromPointDistance", "(FFF)Lorg/apache/lucene/geo/XYRectangle;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxX] = env->getFieldID(cls, "maxX", "F");
            fids$[fid_maxY] = env->getFieldID(cls, "maxY", "F");
            fids$[fid_minX] = env->getFieldID(cls, "minX", "F");
            fids$[fid_minY] = env->getFieldID(cls, "minY", "F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYRectangle::XYRectangle(jfloat a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::geo::XYGeometry(env->newObject(initializeClass, &mids$, mid_init$_fe55cdfce7ef0110, a0, a1, a2, a3)) {}

        jboolean XYRectangle::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        XYRectangle XYRectangle::fromPointDistance(jfloat a0, jfloat a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return XYRectangle(env->callStaticObjectMethod(cls, mids$[mid_fromPointDistance_02b0e4181e20d364], a0, a1, a2));
        }

        jint XYRectangle::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String XYRectangle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jfloat XYRectangle::_get_maxX() const
        {
          return env->getFloatField(this$, fids$[fid_maxX]);
        }

        jfloat XYRectangle::_get_maxY() const
        {
          return env->getFloatField(this$, fids$[fid_maxY]);
        }

        jfloat XYRectangle::_get_minX() const
        {
          return env->getFloatField(this$, fids$[fid_minX]);
        }

        jfloat XYRectangle::_get_minY() const
        {
          return env->getFloatField(this$, fids$[fid_minY]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYRectangle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYRectangle_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYRectangle_init_(t_XYRectangle *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYRectangle_equals(t_XYRectangle *self, PyObject *args);
        static PyObject *t_XYRectangle_fromPointDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYRectangle_hashCode(t_XYRectangle *self, PyObject *args);
        static PyObject *t_XYRectangle_toString(t_XYRectangle *self, PyObject *args);
        static PyObject *t_XYRectangle_get__maxX(t_XYRectangle *self, void *data);
        static PyObject *t_XYRectangle_get__maxY(t_XYRectangle *self, void *data);
        static PyObject *t_XYRectangle_get__minX(t_XYRectangle *self, void *data);
        static PyObject *t_XYRectangle_get__minY(t_XYRectangle *self, void *data);

        static PyGetSetDef t_XYRectangle__fields_[] = {
          DECLARE_GET_FIELD(t_XYRectangle, maxX),
          DECLARE_GET_FIELD(t_XYRectangle, maxY),
          DECLARE_GET_FIELD(t_XYRectangle, minX),
          DECLARE_GET_FIELD(t_XYRectangle, minY),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_XYRectangle__methods_[] = {
          DECLARE_METHOD(t_XYRectangle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYRectangle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYRectangle, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYRectangle, fromPointDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYRectangle, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYRectangle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYRectangle)[] = {
          { Py_tp_methods, t_XYRectangle__methods_ },
          { Py_tp_init, (void *) t_XYRectangle_init_ },
          { Py_tp_getset, t_XYRectangle__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYRectangle)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::XYGeometry),
          NULL
        };

        DEFINE_TYPE(XYRectangle, t_XYRectangle, XYRectangle);

        void t_XYRectangle::install(PyObject *module)
        {
          installType(&PY_TYPE(XYRectangle), &PY_TYPE_DEF(XYRectangle), module, "XYRectangle", 0);
        }

        void t_XYRectangle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYRectangle), "class_", make_descriptor(XYRectangle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYRectangle), "wrapfn_", make_descriptor(t_XYRectangle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYRectangle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYRectangle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYRectangle::initializeClass, 1)))
            return NULL;
          return t_XYRectangle::wrap_Object(XYRectangle(((t_XYRectangle *) arg)->object.this$));
        }
        static PyObject *t_XYRectangle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYRectangle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYRectangle_init_(t_XYRectangle *self, PyObject *args, PyObject *kwds)
        {
          jfloat a0;
          jfloat a1;
          jfloat a2;
          jfloat a3;
          XYRectangle object((jobject) NULL);

          if (!parseArgs(args, "FFFF", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = XYRectangle(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYRectangle_equals(t_XYRectangle *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYRectangle), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYRectangle_fromPointDistance(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jfloat a1;
          jfloat a2;
          XYRectangle result((jobject) NULL);

          if (!parseArgs(args, "FFF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::XYRectangle::fromPointDistance(a0, a1, a2));
            return t_XYRectangle::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromPointDistance", args);
          return NULL;
        }

        static PyObject *t_XYRectangle_hashCode(t_XYRectangle *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYRectangle), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYRectangle_toString(t_XYRectangle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYRectangle), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYRectangle_get__maxX(t_XYRectangle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYRectangle_get__maxY(t_XYRectangle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYRectangle_get__minX(t_XYRectangle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYRectangle_get__minY(t_XYRectangle *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minY());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/NGramDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *NGramDistance::class$ = NULL;
          jmethodID *NGramDistance::mids$ = NULL;
          bool NGramDistance::live$ = false;

          jclass NGramDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/NGramDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_31e45f475cca0d26] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramDistance::NGramDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NGramDistance::NGramDistance(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jboolean NGramDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat NGramDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_31e45f475cca0d26], a0.this$, a1.this$);
          }

          jint NGramDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String NGramDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args);

          static PyMethodDef t_NGramDistance__methods_[] = {
            DECLARE_METHOD(t_NGramDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NGramDistance)[] = {
            { Py_tp_methods, t_NGramDistance__methods_ },
            { Py_tp_init, (void *) t_NGramDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NGramDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NGramDistance, t_NGramDistance, NGramDistance);

          void t_NGramDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramDistance), &PY_TYPE_DEF(NGramDistance), module, "NGramDistance", 0);
          }

          void t_NGramDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramDistance), "class_", make_descriptor(NGramDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramDistance), "wrapfn_", make_descriptor(t_NGramDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramDistance::initializeClass, 1)))
              return NULL;
            return t_NGramDistance::wrap_Object(NGramDistance(((t_NGramDistance *) arg)->object.this$));
          }
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramDistance object((jobject) NULL);

                INT_CALL(object = NGramDistance());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                NGramDistance object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = NGramDistance(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NGramDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NGramDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NGramDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermCollectingRewrite.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermCollectingRewrite::class$ = NULL;
        jmethodID *TermCollectingRewrite::mids$ = NULL;
        bool TermCollectingRewrite::live$ = false;

        jclass TermCollectingRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermCollectingRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_7c1cc07c1b2c786f] = env->getMethodID(cls, "build", "(Ljava/lang/Object;)Lorg/apache/lucene/search/Query;");
            mids$[mid_addClause_9aaa439420a2e969] = env->getMethodID(cls, "addClause", "(Ljava/lang/Object;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermStates;)V");
            mids$[mid_addClause_a2290f9bf66eba77] = env->getMethodID(cls, "addClause", "(Ljava/lang/Object;Lorg/apache/lucene/index/Term;IF)V");
            mids$[mid_getTopLevelBuilder_d6bcd06f3102c4d9] = env->getMethodID(cls, "getTopLevelBuilder", "()Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args);
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data);
        static PyGetSetDef t_TermCollectingRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TermCollectingRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermCollectingRewrite__methods_[] = {
          DECLARE_METHOD(t_TermCollectingRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermCollectingRewrite)[] = {
          { Py_tp_methods, t_TermCollectingRewrite__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TermCollectingRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermCollectingRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiTermQuery$RewriteMethod),
          NULL
        };

        DEFINE_TYPE(TermCollectingRewrite, t_TermCollectingRewrite, TermCollectingRewrite);
        PyObject *t_TermCollectingRewrite::wrap_Object(const TermCollectingRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermCollectingRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermCollectingRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TermCollectingRewrite), &PY_TYPE_DEF(TermCollectingRewrite), module, "TermCollectingRewrite", 0);
        }

        void t_TermCollectingRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermCollectingRewrite), "class_", make_descriptor(TermCollectingRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermCollectingRewrite), "wrapfn_", make_descriptor(t_TermCollectingRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermCollectingRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermCollectingRewrite::initializeClass, 1)))
            return NULL;
          return t_TermCollectingRewrite::wrap_Object(TermCollectingRewrite(((t_TermCollectingRewrite *) arg)->object.this$));
        }
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermCollectingRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilter::class$ = NULL;
          jmethodID *CapitalizationFilter::mids$ = NULL;
          bool CapitalizationFilter::live$ = false;
          jint CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          jint CapitalizationFilter::DEFAULT_MAX_WORD_COUNT = (jint) 0;

          jclass CapitalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_e06523511074ac9d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZLorg/apache/lucene/analysis/CharArraySet;ZLjava/util/Collection;III)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              DEFAULT_MAX_WORD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_COUNT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const ::org::apache::lucene::analysis::CharArraySet & a2, jboolean a3, const ::java::util::Collection & a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e06523511074ac9d, a0.this$, a1, a2.this$, a3, a4.this$, a5, a6, a7)) {}

          jboolean CapitalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilter__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CapitalizationFilter)[] = {
            { Py_tp_methods, t_CapitalizationFilter__methods_ },
            { Py_tp_init, (void *) t_CapitalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CapitalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CapitalizationFilter, t_CapitalizationFilter, CapitalizationFilter);

          void t_CapitalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilter), &PY_TYPE_DEF(CapitalizationFilter), module, "CapitalizationFilter", 0);
          }

          void t_CapitalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilter), "class_", make_descriptor(CapitalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilter), "wrapfn_", make_descriptor(t_CapitalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilter), "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CapitalizationFilter), "DEFAULT_MAX_WORD_COUNT", make_descriptor(CapitalizationFilter::DEFAULT_MAX_WORD_COUNT));
          }

          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilter::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilter::wrap_Object(CapitalizationFilter(((t_CapitalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CapitalizationFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::util::Collection a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                jint a7;
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "kZKZKIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a3, &a4, &p4, ::java::util::t_Collection::parameters_, &a5, &a6, &a7))
                {
                  INT_CALL(object = CapitalizationFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CapitalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterFields.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterLeafReader$FilterFields::class$ = NULL;
        jmethodID *FilterLeafReader$FilterFields::mids$ = NULL;
        bool FilterLeafReader$FilterFields::live$ = false;

        jclass FilterLeafReader$FilterFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterLeafReader$FilterFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bcc5cab244539dca] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Fields;)V");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafReader$FilterFields::FilterLeafReader$FilterFields(const ::org::apache::lucene::index::Fields & a0) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_bcc5cab244539dca, a0.this$)) {}

        ::java::util::Iterator FilterLeafReader$FilterFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        jint FilterLeafReader$FilterFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Terms FilterLeafReader$FilterFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterLeafReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafReader$FilterFields_init_(t_FilterLeafReader$FilterFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafReader$FilterFields_iterator(t_FilterLeafReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterFields_size(t_FilterLeafReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterFields_terms(t_FilterLeafReader$FilterFields *self, PyObject *args);

        static PyMethodDef t_FilterLeafReader$FilterFields__methods_[] = {
          DECLARE_METHOD(t_FilterLeafReader$FilterFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterFields, size, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafReader$FilterFields)[] = {
          { Py_tp_methods, t_FilterLeafReader$FilterFields__methods_ },
          { Py_tp_init, (void *) t_FilterLeafReader$FilterFields_init_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_FilterLeafReader$FilterFields *)) get_iterator< t_FilterLeafReader$FilterFields >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafReader$FilterFields)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::Fields),
          NULL
        };

        DEFINE_TYPE(FilterLeafReader$FilterFields, t_FilterLeafReader$FilterFields, FilterLeafReader$FilterFields);

        void t_FilterLeafReader$FilterFields::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafReader$FilterFields), &PY_TYPE_DEF(FilterLeafReader$FilterFields), module, "FilterLeafReader$FilterFields", 0);
        }

        void t_FilterLeafReader$FilterFields::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterFields), "class_", make_descriptor(FilterLeafReader$FilterFields::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterFields), "wrapfn_", make_descriptor(t_FilterLeafReader$FilterFields::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterFields), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafReader$FilterFields::initializeClass, 1)))
            return NULL;
          return t_FilterLeafReader$FilterFields::wrap_Object(FilterLeafReader$FilterFields(((t_FilterLeafReader$FilterFields *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafReader$FilterFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafReader$FilterFields_init_(t_FilterLeafReader$FilterFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          FilterLeafReader$FilterFields object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Fields::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafReader$FilterFields(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafReader$FilterFields_iterator(t_FilterLeafReader$FilterFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterFields_size(t_FilterLeafReader$FilterFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterFields_terms(t_FilterLeafReader$FilterFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause::class$ = NULL;
        jmethodID *BooleanClause::mids$ = NULL;
        bool BooleanClause::live$ = false;

        jclass BooleanClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02bdd895d501317b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getOccur_d2a892ed3bcf0bb6] = env->getMethodID(cls, "getOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isProhibited_8454bd5aa23fd11e] = env->getMethodID(cls, "isProhibited", "()Z");
            mids$[mid_isRequired_8454bd5aa23fd11e] = env->getMethodID(cls, "isRequired", "()Z");
            mids$[mid_isScoring_8454bd5aa23fd11e] = env->getMethodID(cls, "isScoring", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause::BooleanClause(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_02bdd895d501317b, a0.this$, a1.this$)) {}

        jboolean BooleanClause::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::BooleanClause$Occur BooleanClause::getOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getOccur_d2a892ed3bcf0bb6]));
        }

        ::org::apache::lucene::search::Query BooleanClause::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        jint BooleanClause::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean BooleanClause::isProhibited() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isProhibited_8454bd5aa23fd11e]);
        }

        jboolean BooleanClause::isRequired() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isRequired_8454bd5aa23fd11e]);
        }

        jboolean BooleanClause::isScoring() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isScoring_8454bd5aa23fd11e]);
        }

        ::java::lang::String BooleanClause::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self);
        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self);
        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self);
        static PyObject *t_BooleanClause_isScoring(t_BooleanClause *self);
        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args);
        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data);
        static PyObject *t_BooleanClause_get__scoring(t_BooleanClause *self, void *data);
        static PyGetSetDef t_BooleanClause__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause, occur),
          DECLARE_GET_FIELD(t_BooleanClause, prohibited),
          DECLARE_GET_FIELD(t_BooleanClause, query),
          DECLARE_GET_FIELD(t_BooleanClause, required),
          DECLARE_GET_FIELD(t_BooleanClause, scoring),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause__methods_[] = {
          DECLARE_METHOD(t_BooleanClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, getOccur, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause, isProhibited, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isRequired, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, isScoring, METH_NOARGS),
          DECLARE_METHOD(t_BooleanClause, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanClause)[] = {
          { Py_tp_methods, t_BooleanClause__methods_ },
          { Py_tp_init, (void *) t_BooleanClause_init_ },
          { Py_tp_getset, t_BooleanClause__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanClause)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BooleanClause, t_BooleanClause, BooleanClause);

        void t_BooleanClause::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause), &PY_TYPE_DEF(BooleanClause), module, "BooleanClause", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause), "Occur", make_descriptor(&PY_TYPE_DEF(BooleanClause$Occur)));
        }

        void t_BooleanClause::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause), "class_", make_descriptor(BooleanClause::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause), "wrapfn_", make_descriptor(t_BooleanClause::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause::initializeClass, 1)))
            return NULL;
          return t_BooleanClause::wrap_Object(BooleanClause(((t_BooleanClause *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanClause_init_(t_BooleanClause *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          BooleanClause object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
          {
            INT_CALL(object = BooleanClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanClause_equals(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BooleanClause), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanClause_getOccur(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_getQuery(t_BooleanClause *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BooleanClause_hashCode(t_BooleanClause *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BooleanClause), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanClause_isProhibited(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isProhibited());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isRequired(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isRequired());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_isScoring(t_BooleanClause *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isScoring());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanClause_toString(t_BooleanClause *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BooleanClause), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanClause_get__occur(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }

        static PyObject *t_BooleanClause_get__prohibited(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isProhibited());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__query(t_BooleanClause *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_BooleanClause_get__required(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isRequired());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanClause_get__scoring(t_BooleanClause *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isScoring());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleFieldSource::class$ = NULL;
            jmethodID *DoubleFieldSource::mids$ = NULL;
            bool DoubleFieldSource::live$ = false;

            jclass DoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String DoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean DoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField DoubleFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint DoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getSortField(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_DoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_DoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DoubleFieldSource)[] = {
              { Py_tp_methods, t_DoubleFieldSource__methods_ },
              { Py_tp_init, (void *) t_DoubleFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DoubleFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(DoubleFieldSource, t_DoubleFieldSource, DoubleFieldSource);

            void t_DoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleFieldSource), &PY_TYPE_DEF(DoubleFieldSource), module, "DoubleFieldSource", 0);
            }

            void t_DoubleFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleFieldSource), "class_", make_descriptor(DoubleFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleFieldSource), "wrapfn_", make_descriptor(t_DoubleFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_DoubleFieldSource::wrap_Object(DoubleFieldSource(((t_DoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              DoubleFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = DoubleFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(DoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getSortField(t_DoubleFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DoubleFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "org/egothor/stemmer/Trie.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelStemmer::class$ = NULL;
          jmethodID *StempelStemmer::mids$ = NULL;
          bool StempelStemmer::live$ = false;

          jclass StempelStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_7aad1eee26c41e59] = env->getMethodID(cls, "<init>", "(Lorg/egothor/stemmer/Trie;)V");
              mids$[mid_load_46aed2cf2ad9600f] = env->getStaticMethodID(cls, "load", "(Ljava/io/InputStream;)Lorg/egothor/stemmer/Trie;");
              mids$[mid_stem_3ff255c2dd86108c] = env->getMethodID(cls, "stem", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelStemmer::StempelStemmer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

          StempelStemmer::StempelStemmer(const ::org::egothor::stemmer::Trie & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7aad1eee26c41e59, a0.this$)) {}

          ::org::egothor::stemmer::Trie StempelStemmer::load(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_load_46aed2cf2ad9600f], a0.this$));
          }

          ::java::lang::StringBuilder StempelStemmer::stem(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::StringBuilder(env->callObjectMethod(this$, mids$[mid_stem_3ff255c2dd86108c], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg);

          static PyMethodDef t_StempelStemmer__methods_[] = {
            DECLARE_METHOD(t_StempelStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, load, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StempelStemmer)[] = {
            { Py_tp_methods, t_StempelStemmer__methods_ },
            { Py_tp_init, (void *) t_StempelStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StempelStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StempelStemmer, t_StempelStemmer, StempelStemmer);

          void t_StempelStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelStemmer), &PY_TYPE_DEF(StempelStemmer), module, "StempelStemmer", 0);
          }

          void t_StempelStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelStemmer), "class_", make_descriptor(StempelStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelStemmer), "wrapfn_", make_descriptor(t_StempelStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelStemmer::initializeClass, 1)))
              return NULL;
            return t_StempelStemmer::wrap_Object(StempelStemmer(((t_StempelStemmer *) arg)->object.this$));
          }
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::egothor::stemmer::Trie a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::egothor::stemmer::Trie result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::stempel::StempelStemmer::load(a0));
              return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "load", arg);
            return NULL;
          }

          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::StringBuilder result((jobject) NULL);

            if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return ::java::lang::t_StringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF3LOG.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF3LOG::class$ = NULL;
          jmethodID *AxiomaticF3LOG::mids$ = NULL;
          bool AxiomaticF3LOG::live$ = false;

          jclass AxiomaticF3LOG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF3LOG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3cf0b46cc9375aa7] = env->getMethodID(cls, "<init>", "(FI)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF3LOG::AxiomaticF3LOG(jfloat a0, jint a1) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_3cf0b46cc9375aa7, a0, a1)) {}

          ::java::lang::String AxiomaticF3LOG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF3LOG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF3LOG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF3LOG_init_(t_AxiomaticF3LOG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF3LOG_toString(t_AxiomaticF3LOG *self, PyObject *args);

          static PyMethodDef t_AxiomaticF3LOG__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF3LOG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF3LOG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF3LOG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF3LOG)[] = {
            { Py_tp_methods, t_AxiomaticF3LOG__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF3LOG_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF3LOG)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF3LOG, t_AxiomaticF3LOG, AxiomaticF3LOG);

          void t_AxiomaticF3LOG::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF3LOG), &PY_TYPE_DEF(AxiomaticF3LOG), module, "AxiomaticF3LOG", 0);
          }

          void t_AxiomaticF3LOG::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3LOG), "class_", make_descriptor(AxiomaticF3LOG::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3LOG), "wrapfn_", make_descriptor(t_AxiomaticF3LOG::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3LOG), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF3LOG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF3LOG::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF3LOG::wrap_Object(AxiomaticF3LOG(((t_AxiomaticF3LOG *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF3LOG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF3LOG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF3LOG_init_(t_AxiomaticF3LOG *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jint a1;
            AxiomaticF3LOG object((jobject) NULL);

            if (!parseArgs(args, "FI", &a0, &a1))
            {
              INT_CALL(object = AxiomaticF3LOG(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF3LOG_toString(t_AxiomaticF3LOG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF3LOG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$DirectBytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$DirectBytesStartArray::mids$ = NULL;
        bool BytesRefHash$DirectBytesStartArray::live$ = false;

        jclass BytesRefHash$DirectBytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$DirectBytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_43c228f693b84817] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_9a5efba60e88cd95] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_d2c45ef07a322466] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_d2c45ef07a322466] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_d2c45ef07a322466] = env->getMethodID(cls, "init", "()[I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        BytesRefHash$DirectBytesStartArray::BytesRefHash$DirectBytesStartArray(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::BytesRefHash$BytesStartArray(env->newObject(initializeClass, &mids$, mid_init$_43c228f693b84817, a0, a1.this$)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$DirectBytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_9a5efba60e88cd95]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_d2c45ef07a322466]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_d2c45ef07a322466]));
        }

        JArray< jint > BytesRefHash$DirectBytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_d2c45ef07a322466]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);
        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args);

        static PyMethodDef t_BytesRefHash$DirectBytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, bytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, grow, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash$DirectBytesStartArray, init, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefHash$DirectBytesStartArray)[] = {
          { Py_tp_methods, t_BytesRefHash$DirectBytesStartArray__methods_ },
          { Py_tp_init, (void *) t_BytesRefHash$DirectBytesStartArray_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefHash$DirectBytesStartArray)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::BytesRefHash$BytesStartArray),
          NULL
        };

        DEFINE_TYPE(BytesRefHash$DirectBytesStartArray, t_BytesRefHash$DirectBytesStartArray, BytesRefHash$DirectBytesStartArray);

        void t_BytesRefHash$DirectBytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$DirectBytesStartArray), &PY_TYPE_DEF(BytesRefHash$DirectBytesStartArray), module, "BytesRefHash$DirectBytesStartArray", 0);
        }

        void t_BytesRefHash$DirectBytesStartArray::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$DirectBytesStartArray), "class_", make_descriptor(BytesRefHash$DirectBytesStartArray::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$DirectBytesStartArray), "wrapfn_", make_descriptor(t_BytesRefHash$DirectBytesStartArray::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash$DirectBytesStartArray), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$DirectBytesStartArray::wrap_Object(BytesRefHash$DirectBytesStartArray(((t_BytesRefHash$DirectBytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$DirectBytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$DirectBytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$DirectBytesStartArray_init_(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              BytesRefHash$DirectBytesStartArray object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BytesRefHash$DirectBytesStartArray(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_bytesUsed(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bytesUsed());
            return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "bytesUsed", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_clear(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clear());
            return result.wrap();
          }

          return callSuper(PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_grow(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.grow());
            return result.wrap();
          }

          return callSuper(PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "grow", args, 2);
        }

        static PyObject *t_BytesRefHash$DirectBytesStartArray_init(t_BytesRefHash$DirectBytesStartArray *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.init());
            return result.wrap();
          }

          return callSuper(PY_TYPE(BytesRefHash$DirectBytesStartArray), (PyObject *) self, "init", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues::class$ = NULL;
        jmethodID *MultiDocValues::mids$ = NULL;
        bool MultiDocValues::live$ = false;

        jclass MultiDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBinaryValues_8d2e3a46c7e4f5bc] = env->getStaticMethodID(cls, "getBinaryValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getNormValues_bfd782ef3edffc42] = env->getStaticMethodID(cls, "getNormValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericValues_bfd782ef3edffc42] = env->getStaticMethodID(cls, "getNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedNumericValues_c12cbbcc2d9418c8] = env->getStaticMethodID(cls, "getSortedNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetValues_46b1c179bbda9c81] = env->getStaticMethodID(cls, "getSortedSetValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSortedValues_534da1b01565bd8d] = env->getStaticMethodID(cls, "getSortedValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues MultiDocValues::getBinaryValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinaryValues_8d2e3a46c7e4f5bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNormValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNormValues_bfd782ef3edffc42], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumericValues_bfd782ef3edffc42], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues MultiDocValues::getSortedNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumericValues_c12cbbcc2d9418c8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues MultiDocValues::getSortedSetValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSetValues_46b1c179bbda9c81], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues MultiDocValues::getSortedValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedValues_534da1b01565bd8d], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getBinaryValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNormValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedSetValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedValues, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiDocValues)[] = {
          { Py_tp_methods, t_MultiDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiDocValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiDocValues, t_MultiDocValues, MultiDocValues);

        void t_MultiDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues), &PY_TYPE_DEF(MultiDocValues), module, "MultiDocValues", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues), "MultiSortedSetDocValues", make_descriptor(&PY_TYPE_DEF(MultiDocValues$MultiSortedSetDocValues)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues), "MultiSortedDocValues", make_descriptor(&PY_TYPE_DEF(MultiDocValues$MultiSortedDocValues)));
        }

        void t_MultiDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues), "class_", make_descriptor(MultiDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues), "wrapfn_", make_descriptor(t_MultiDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues::wrap_Object(MultiDocValues(((t_MultiDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getBinaryValues(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinaryValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNormValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNormValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedSetValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSetValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedValues", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Double::class$ = NULL;
    jmethodID *Double::mids$ = NULL;
    bool Double::live$ = false;
    jint Double::BYTES = (jint) 0;
    jint Double::MAX_EXPONENT = (jint) 0;
    jdouble Double::MAX_VALUE = (jdouble) 0;
    jint Double::MIN_EXPONENT = (jint) 0;
    jdouble Double::MIN_NORMAL = (jdouble) 0;
    jdouble Double::MIN_VALUE = (jdouble) 0;
    jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
    jdouble Double::NaN = (jdouble) 0;
    jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
    jint Double::SIZE = (jint) 0;
    ::java::lang::Class *Double::TYPE = NULL;

    jclass Double::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Double");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_3c435f10a3b1e038] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_75b868f0e5fe074e] = env->getStaticMethodID(cls, "compare", "(DD)I");
        mids$[mid_compareTo_e2e95bfd2f4abc24] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
        mids$[mid_doubleToLongBits_2cd17afd1ccbefb5] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
        mids$[mid_doubleToRawLongBits_2cd17afd1ccbefb5] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_c1957bf1459ac23a] = env->getStaticMethodID(cls, "hashCode", "(D)I");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_17ce67a573fe19e0] = env->getStaticMethodID(cls, "isFinite", "(D)Z");
        mids$[mid_isInfinite_8454bd5aa23fd11e] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_17ce67a573fe19e0] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
        mids$[mid_isNaN_8454bd5aa23fd11e] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_17ce67a573fe19e0] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
        mids$[mid_longBitsToDouble_d0db46799f607804] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_990b512583b70d91] = env->getStaticMethodID(cls, "max", "(DD)D");
        mids$[mid_min_990b512583b70d91] = env->getStaticMethodID(cls, "min", "(DD)D");
        mids$[mid_parseDouble_2bbda5860f5f88e3] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_990b512583b70d91] = env->getStaticMethodID(cls, "sum", "(DD)D");
        mids$[mid_toHexString_f4d984402e3bd258] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_f4d984402e3bd258] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_07cced247f2e5f4a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");
        mids$[mid_valueOf_607e707c1d96f796] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticDoubleField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3c435f10a3b1e038, a0)) {}

    jbyte Double::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Double::compare(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_75b868f0e5fe074e], a0, a1);
    }

    jint Double::compareTo(const Double & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_e2e95bfd2f4abc24], a0.this$);
    }

    jlong Double::doubleToLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_2cd17afd1ccbefb5], a0);
    }

    jlong Double::doubleToRawLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_2cd17afd1ccbefb5], a0);
    }

    jdouble Double::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Double::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jfloat Double::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    jint Double::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Double::hashCode(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c1957bf1459ac23a], a0);
    }

    jint Double::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jboolean Double::isFinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_17ce67a573fe19e0], a0);
    }

    jboolean Double::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_8454bd5aa23fd11e]);
    }

    jboolean Double::isInfinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_17ce67a573fe19e0], a0);
    }

    jboolean Double::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_8454bd5aa23fd11e]);
    }

    jboolean Double::isNaN(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_17ce67a573fe19e0], a0);
    }

    jdouble Double::longBitsToDouble(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_d0db46799f607804], a0);
    }

    jlong Double::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jdouble Double::max$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_max_990b512583b70d91], a0, a1);
    }

    jdouble Double::min$(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_min_990b512583b70d91], a0, a1);
    }

    jdouble Double::parseDouble(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_2bbda5860f5f88e3], a0.this$);
    }

    jshort Double::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    jdouble Double::sum(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_sum_990b512583b70d91], a0, a1);
    }

    ::java::lang::String Double::toHexString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_f4d984402e3bd258], a0));
    }

    ::java::lang::String Double::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Double::toString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f4d984402e3bd258], a0));
    }

    Double Double::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_07cced247f2e5f4a], a0.this$));
    }

    Double Double::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_607e707c1d96f796], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg);
    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_equals(t_Double *self, PyObject *args);
    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isInfinite(t_Double *self);
    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isNaN(t_Double *self);
    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_toString(t_Double *self, PyObject *args);
    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_get__infinite(t_Double *self, void *data);
    static PyObject *t_Double_get__naN(t_Double *self, void *data);
    static PyGetSetDef t_Double__fields_[] = {
      DECLARE_GET_FIELD(t_Double, infinite),
      DECLARE_GET_FIELD(t_Double, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Double__methods_[] = {
      DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, compareTo, METH_O),
      DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, equals, METH_VARARGS),
      DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, toString, METH_VARARGS),
      DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Double)[] = {
      { Py_tp_methods, t_Double__methods_ },
      { Py_tp_init, (void *) t_Double_init_ },
      { Py_tp_getset, t_Double__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Double)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Double, t_Double, Double);

    void t_Double::install(PyObject *module)
    {
      installType(&PY_TYPE(Double), &PY_TYPE_DEF(Double), module, "Double", 0);
    }

    void t_Double::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "class_", make_descriptor(Double::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "wrapfn_", make_descriptor(unboxDouble));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "boxfn_", make_descriptor(boxDouble));
      env->getClass(Double::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "BYTES", make_descriptor(Double::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "NaN", make_descriptor(Double::NaN));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "SIZE", make_descriptor(Double::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Double), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
    }

    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Double::initializeClass, 1)))
        return NULL;
      return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
    }
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Double::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Double object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Double object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jint result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg)
    {
      Double a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Double), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Double_equals(t_Double *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Double_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jint result;

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Double_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Double_isInfinite(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Double_isNaN(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jdouble result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "longBitsToDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Double_max(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Double_min(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jdouble result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Double_sum(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jdouble result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Double_toString(t_Double *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Double result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
        {
          jdouble a0;
          Double result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Double_get__infinite(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Double_get__naN(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArrayMap.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchAnalyzer::class$ = NULL;
          jmethodID *DutchAnalyzer::mids$ = NULL;
          bool DutchAnalyzer::live$ = false;
          ::java::lang::String *DutchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DutchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_215356ef52cda000] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArrayMap;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchAnalyzer::DutchAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1, const ::org::apache::lucene::analysis::CharArrayMap & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_215356ef52cda000, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet DutchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data);
          static PyGetSetDef t_DutchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DutchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DutchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DutchAnalyzer)[] = {
            { Py_tp_methods, t_DutchAnalyzer__methods_ },
            { Py_tp_init, (void *) t_DutchAnalyzer_init_ },
            { Py_tp_getset, t_DutchAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DutchAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(DutchAnalyzer, t_DutchAnalyzer, DutchAnalyzer);

          void t_DutchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchAnalyzer), &PY_TYPE_DEF(DutchAnalyzer), module, "DutchAnalyzer", 0);
          }

          void t_DutchAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DutchAnalyzer), "class_", make_descriptor(DutchAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DutchAnalyzer), "wrapfn_", make_descriptor(t_DutchAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DutchAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(DutchAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DutchAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DutchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DutchAnalyzer::wrap_Object(DutchAnalyzer(((t_DutchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DutchAnalyzer object((jobject) NULL);

                INT_CALL(object = DutchAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::CharArrayMap a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArrayMap::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::nl::DutchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {

          ::java::lang::Class *MemoryIndex::class$ = NULL;
          jmethodID *MemoryIndex::mids$ = NULL;
          bool MemoryIndex::live$ = false;

          jclass MemoryIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/index/memory/MemoryIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_init$_33bb9a5a88dc139c] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_addField_c5ab6d211d8d31bc] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addField_2b322655a8d444d6] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/IndexableField;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_e6c0692bedddc8ee] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_addField_fc6d1367e0b27988] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_b5bf5c0a1e9f5ef2] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_createSearcher_7ca5beb9bbb661b0] = env->getMethodID(cls, "createSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_freeze_f2cc1bce94666404] = env->getMethodID(cls, "freeze", "()V");
              mids$[mid_fromDocument_d28a879986211313] = env->getStaticMethodID(cls, "fromDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/index/memory/MemoryIndex;");
              mids$[mid_fromDocument_ab44c12725686388] = env->getStaticMethodID(cls, "fromDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;ZZ)Lorg/apache/lucene/index/memory/MemoryIndex;");
              mids$[mid_fromDocument_d9fca102a2e3ef61] = env->getStaticMethodID(cls, "fromDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;ZZJ)Lorg/apache/lucene/index/memory/MemoryIndex;");
              mids$[mid_keywordTokenStream_84c852cba894c7a7] = env->getMethodID(cls, "keywordTokenStream", "(Ljava/util/Collection;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_search_be984eeabd072611] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;)F");
              mids$[mid_setSimilarity_b66836c611a69874] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_toStringDebug_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringDebug", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndex::MemoryIndex() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          MemoryIndex::MemoryIndex(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

          MemoryIndex::MemoryIndex(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_33bb9a5a88dc139c, a0, a1)) {}

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_c5ab6d211d8d31bc], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::org::apache::lucene::index::IndexableField & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_2b322655a8d444d6], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_e6c0692bedddc8ee], a0.this$, a1.this$, a2);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_fc6d1367e0b27988], a0.this$, a1.this$, a2.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_b5bf5c0a1e9f5ef2], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::search::IndexSearcher MemoryIndex::createSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_createSearcher_7ca5beb9bbb661b0]));
          }

          void MemoryIndex::freeze() const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_f2cc1bce94666404]);
          }

          MemoryIndex MemoryIndex::fromDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return MemoryIndex(env->callStaticObjectMethod(cls, mids$[mid_fromDocument_d28a879986211313], a0.this$, a1.this$));
          }

          MemoryIndex MemoryIndex::fromDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            return MemoryIndex(env->callStaticObjectMethod(cls, mids$[mid_fromDocument_ab44c12725686388], a0.this$, a1.this$, a2, a3));
          }

          MemoryIndex MemoryIndex::fromDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jboolean a2, jboolean a3, jlong a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MemoryIndex(env->callStaticObjectMethod(cls, mids$[mid_fromDocument_d9fca102a2e3ef61], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::analysis::TokenStream MemoryIndex::keywordTokenStream(const ::java::util::Collection & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_keywordTokenStream_84c852cba894c7a7], a0.this$));
          }

          void MemoryIndex::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          jfloat MemoryIndex::search(const ::org::apache::lucene::search::Query & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_search_be984eeabd072611], a0.this$);
          }

          void MemoryIndex::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_b66836c611a69874], a0.this$);
          }

          ::java::lang::String MemoryIndex::toStringDebug() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringDebug_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {
          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args);
          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_freeze(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_fromDocument(PyTypeObject *type, PyObject *args);
          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_setSimilarity(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_toStringDebug(t_MemoryIndex *self);
          static int t_MemoryIndex_set__similarity(t_MemoryIndex *self, PyObject *arg, void *data);
          static PyGetSetDef t_MemoryIndex__fields_[] = {
            DECLARE_SET_FIELD(t_MemoryIndex, similarity),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MemoryIndex__methods_[] = {
            DECLARE_METHOD(t_MemoryIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, addField, METH_VARARGS),
            DECLARE_METHOD(t_MemoryIndex, createSearcher, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, freeze, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, fromDocument, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, keywordTokenStream, METH_O),
            DECLARE_METHOD(t_MemoryIndex, reset, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, search, METH_O),
            DECLARE_METHOD(t_MemoryIndex, setSimilarity, METH_O),
            DECLARE_METHOD(t_MemoryIndex, toStringDebug, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MemoryIndex)[] = {
            { Py_tp_methods, t_MemoryIndex__methods_ },
            { Py_tp_init, (void *) t_MemoryIndex_init_ },
            { Py_tp_getset, t_MemoryIndex__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MemoryIndex)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(MemoryIndex, t_MemoryIndex, MemoryIndex);

          void t_MemoryIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndex), &PY_TYPE_DEF(MemoryIndex), module, "MemoryIndex", 0);
          }

          void t_MemoryIndex::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndex), "class_", make_descriptor(MemoryIndex::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndex), "wrapfn_", make_descriptor(t_MemoryIndex::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryIndex), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndex::initializeClass, 1)))
              return NULL;
            return t_MemoryIndex::wrap_Object(MemoryIndex(((t_MemoryIndex *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MemoryIndex object((jobject) NULL);

                INT_CALL(object = MemoryIndex());
                self->object = object;
                break;
              }
             case 1:
              {
                jboolean a0;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = MemoryIndex(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jboolean a0;
                jboolean a1;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = MemoryIndex(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::index::IndexableField a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexableField::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;

                if (!parseArgs(args, "skI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;

                if (!parseArgs(args, "skII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.createSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_MemoryIndex_freeze(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.freeze());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_fromDocument(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::Iterable a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                MemoryIndex result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::index::memory::MemoryIndex::fromDocument(a0, a1));
                  return t_MemoryIndex::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::java::lang::Iterable a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                MemoryIndex result((jobject) NULL);

                if (!parseArgs(args, "KkZZ", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::index::memory::MemoryIndex::fromDocument(a0, a1, a2, a3));
                  return t_MemoryIndex::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::java::lang::Iterable a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                jlong a4;
                MemoryIndex result((jobject) NULL);

                if (!parseArgs(args, "KkZZJ", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::index::memory::MemoryIndex::fromDocument(a0, a1, a2, a3, a4));
                  return t_MemoryIndex::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "fromDocument", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.keywordTokenStream(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "keywordTokenStream", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.search(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_setSimilarity(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_toStringDebug(t_MemoryIndex *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toStringDebug());
            return j2p(result);
          }

          static int t_MemoryIndex_set__similarity(t_MemoryIndex *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanTokenizer$Type::class$ = NULL;
          jmethodID *KoreanTokenizer$Type::mids$ = NULL;
          bool KoreanTokenizer$Type::live$ = false;
          KoreanTokenizer$Type *KoreanTokenizer$Type::KNOWN = NULL;
          KoreanTokenizer$Type *KoreanTokenizer$Type::UNKNOWN = NULL;
          KoreanTokenizer$Type *KoreanTokenizer$Type::USER = NULL;

          jclass KoreanTokenizer$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanTokenizer$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_cf4d800eb8d82b8c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;");
              mids$[mid_values_e18da5871824b6c8] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              KNOWN = new KoreanTokenizer$Type(env->getStaticObjectField(cls, "KNOWN", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;"));
              UNKNOWN = new KoreanTokenizer$Type(env->getStaticObjectField(cls, "UNKNOWN", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;"));
              USER = new KoreanTokenizer$Type(env->getStaticObjectField(cls, "USER", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanTokenizer$Type KoreanTokenizer$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return KoreanTokenizer$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_cf4d800eb8d82b8c], a0.this$));
          }

          JArray< KoreanTokenizer$Type > KoreanTokenizer$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< KoreanTokenizer$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_e18da5871824b6c8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanTokenizer$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizer$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizer$Type_of_(t_KoreanTokenizer$Type *self, PyObject *args);
          static PyObject *t_KoreanTokenizer$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_KoreanTokenizer$Type_values(PyTypeObject *type);
          static PyObject *t_KoreanTokenizer$Type_get__parameters_(t_KoreanTokenizer$Type *self, void *data);
          static PyGetSetDef t_KoreanTokenizer$Type__fields_[] = {
            DECLARE_GET_FIELD(t_KoreanTokenizer$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KoreanTokenizer$Type__methods_[] = {
            DECLARE_METHOD(t_KoreanTokenizer$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanTokenizer$Type)[] = {
            { Py_tp_methods, t_KoreanTokenizer$Type__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_KoreanTokenizer$Type__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanTokenizer$Type)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(KoreanTokenizer$Type, t_KoreanTokenizer$Type, KoreanTokenizer$Type);
          PyObject *t_KoreanTokenizer$Type::wrap_Object(const KoreanTokenizer$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_KoreanTokenizer$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_KoreanTokenizer$Type *self = (t_KoreanTokenizer$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_KoreanTokenizer$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_KoreanTokenizer$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_KoreanTokenizer$Type *self = (t_KoreanTokenizer$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_KoreanTokenizer$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanTokenizer$Type), &PY_TYPE_DEF(KoreanTokenizer$Type), module, "KoreanTokenizer$Type", 0);
          }

          void t_KoreanTokenizer$Type::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "class_", make_descriptor(KoreanTokenizer$Type::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "wrapfn_", make_descriptor(t_KoreanTokenizer$Type::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanTokenizer$Type::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "KNOWN", make_descriptor(t_KoreanTokenizer$Type::wrap_Object(*KoreanTokenizer$Type::KNOWN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "UNKNOWN", make_descriptor(t_KoreanTokenizer$Type::wrap_Object(*KoreanTokenizer$Type::UNKNOWN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$Type), "USER", make_descriptor(t_KoreanTokenizer$Type::wrap_Object(*KoreanTokenizer$Type::USER)));
          }

          static PyObject *t_KoreanTokenizer$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanTokenizer$Type::initializeClass, 1)))
              return NULL;
            return t_KoreanTokenizer$Type::wrap_Object(KoreanTokenizer$Type(((t_KoreanTokenizer$Type *) arg)->object.this$));
          }
          static PyObject *t_KoreanTokenizer$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanTokenizer$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KoreanTokenizer$Type_of_(t_KoreanTokenizer$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_KoreanTokenizer$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            KoreanTokenizer$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type::valueOf(a0));
              return t_KoreanTokenizer$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_KoreanTokenizer$Type_values(PyTypeObject *type)
          {
            JArray< KoreanTokenizer$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type::values());
            return JArray<jobject>(result.this$).wrap(t_KoreanTokenizer$Type::wrap_jobject);
          }
          static PyObject *t_KoreanTokenizer$Type_get__parameters_(t_KoreanTokenizer$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygonFactory.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygon.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPolygonFactory::class$ = NULL;
          jmethodID *GeoPolygonFactory::mids$ = NULL;
          bool GeoPolygonFactory::live$ = false;

          jclass GeoPolygonFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPolygonFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoConcavePolygon_0cfe5d1551e943e2] = env->getStaticMethodID(cls, "makeGeoConcavePolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoConcavePolygon_732c9f158f6c7179] = env->getStaticMethodID(cls, "makeGeoConcavePolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoConvexPolygon_0cfe5d1551e943e2] = env->getStaticMethodID(cls, "makeGeoConvexPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoConvexPolygon_732c9f158f6c7179] = env->getStaticMethodID(cls, "makeGeoConvexPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoPolygon_f74f587aec9aef29] = env->getStaticMethodID(cls, "makeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoPolygon_0cfe5d1551e943e2] = env->getStaticMethodID(cls, "makeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoPolygon_a51dc86c212065ba] = env->getStaticMethodID(cls, "makeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription;D)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoPolygon_732c9f158f6c7179] = env->getStaticMethodID(cls, "makeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeGeoPolygon_9038c62929daa1b8] = env->getStaticMethodID(cls, "makeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;Ljava/util/List;D)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");
              mids$[mid_makeLargeGeoPolygon_0cfe5d1551e943e2] = env->getStaticMethodID(cls, "makeLargeGeoPolygon", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/util/List;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoConcavePolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoConcavePolygon_0cfe5d1551e943e2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoConcavePolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1, const ::java::util::List & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoConcavePolygon_732c9f158f6c7179], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoConvexPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoConvexPolygon_0cfe5d1551e943e2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoConvexPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1, const ::java::util::List & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoConvexPolygon_732c9f158f6c7179], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPolygon_f74f587aec9aef29], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPolygon_0cfe5d1551e943e2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription & a1, jdouble a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPolygon_a51dc86c212065ba], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1, const ::java::util::List & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPolygon_732c9f158f6c7179], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1, const ::java::util::List & a2, jdouble a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPolygon_9038c62929daa1b8], a0.this$, a1.this$, a2.this$, a3));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoPolygonFactory::makeLargeGeoPolygon(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeLargeGeoPolygon_0cfe5d1551e943e2], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPolygonFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPolygonFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPolygonFactory_makeGeoConcavePolygon(PyTypeObject *type, PyObject *args);
          static PyObject *t_GeoPolygonFactory_makeGeoConvexPolygon(PyTypeObject *type, PyObject *args);
          static PyObject *t_GeoPolygonFactory_makeGeoPolygon(PyTypeObject *type, PyObject *args);
          static PyObject *t_GeoPolygonFactory_makeLargeGeoPolygon(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoPolygonFactory__methods_[] = {
            DECLARE_METHOD(t_GeoPolygonFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory, makeGeoConcavePolygon, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory, makeGeoConvexPolygon, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory, makeGeoPolygon, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory, makeLargeGeoPolygon, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPolygonFactory)[] = {
            { Py_tp_methods, t_GeoPolygonFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPolygonFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoPolygonFactory, t_GeoPolygonFactory, GeoPolygonFactory);

          void t_GeoPolygonFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPolygonFactory), &PY_TYPE_DEF(GeoPolygonFactory), module, "GeoPolygonFactory", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory), "PolygonDescription", make_descriptor(&PY_TYPE_DEF(GeoPolygonFactory$PolygonDescription)));
          }

          void t_GeoPolygonFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory), "class_", make_descriptor(GeoPolygonFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory), "wrapfn_", make_descriptor(t_GeoPolygonFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPolygonFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPolygonFactory::initializeClass, 1)))
              return NULL;
            return t_GeoPolygonFactory::wrap_Object(GeoPolygonFactory(((t_GeoPolygonFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoPolygonFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPolygonFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoPolygonFactory_makeGeoConcavePolygon(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoConcavePolygon(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::util::List a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &p2, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoConcavePolygon(a0, a1, a2));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeGeoConcavePolygon", args);
            return NULL;
          }

          static PyObject *t_GeoPolygonFactory_makeGeoConvexPolygon(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoConvexPolygon(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::util::List a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &p2, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoConvexPolygon(a0, a1, a2));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeGeoConvexPolygon", args);
            return NULL;
          }

          static PyObject *t_GeoPolygonFactory_makeGeoPolygon(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoPolygon(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoPolygon(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription a1((jobject) NULL);
                jdouble a2;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kkD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory$PolygonDescription::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoPolygon(a0, a1, a2));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::util::List a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kKK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &p2, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoPolygon(a0, a1, a2));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::util::List a2((jobject) NULL);
                PyTypeObject **p2;
                jdouble a3;
                ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

                if (!parseArgs(args, "kKKD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &p2, ::java::util::t_List::parameters_, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeGeoPolygon(a0, a1, a2, a3));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeGeoPolygon", args);
            return NULL;
          }

          static PyObject *t_GeoPolygonFactory_makeLargeGeoPolygon(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPolygonFactory::makeLargeGeoPolygon(a0, a1));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeLargeGeoPolygon", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FieldMaskingSpanQuery::class$ = NULL;
          jmethodID *FieldMaskingSpanQuery::mids$ = NULL;
          bool FieldMaskingSpanQuery::live$ = false;

          jclass FieldMaskingSpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FieldMaskingSpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7825308d44347e54] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/String;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMaskedQuery_5a8903ceec80d1b9] = env->getMethodID(cls, "getMaskedQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMaskingSpanQuery::FieldMaskingSpanQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_7825308d44347e54, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight FieldMaskingSpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean FieldMaskingSpanQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String FieldMaskingSpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanQuery FieldMaskingSpanQuery::getMaskedQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMaskedQuery_5a8903ceec80d1b9]));
          }

          jint FieldMaskingSpanQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query FieldMaskingSpanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String FieldMaskingSpanQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FieldMaskingSpanQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self);
          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_visit(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data);
          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data);
          static PyGetSetDef t_FieldMaskingSpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, field),
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, maskedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMaskingSpanQuery__methods_[] = {
            DECLARE_METHOD(t_FieldMaskingSpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getMaskedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldMaskingSpanQuery)[] = {
            { Py_tp_methods, t_FieldMaskingSpanQuery__methods_ },
            { Py_tp_init, (void *) t_FieldMaskingSpanQuery_init_ },
            { Py_tp_getset, t_FieldMaskingSpanQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldMaskingSpanQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(FieldMaskingSpanQuery, t_FieldMaskingSpanQuery, FieldMaskingSpanQuery);

          void t_FieldMaskingSpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMaskingSpanQuery), &PY_TYPE_DEF(FieldMaskingSpanQuery), module, "FieldMaskingSpanQuery", 0);
          }

          void t_FieldMaskingSpanQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMaskingSpanQuery), "class_", make_descriptor(FieldMaskingSpanQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMaskingSpanQuery), "wrapfn_", make_descriptor(t_FieldMaskingSpanQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMaskingSpanQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMaskingSpanQuery::initializeClass, 1)))
              return NULL;
            return t_FieldMaskingSpanQuery::wrap_Object(FieldMaskingSpanQuery(((t_FieldMaskingSpanQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMaskingSpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            FieldMaskingSpanQuery object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FieldMaskingSpanQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_visit(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilterFactory::class$ = NULL;
          jmethodID *CommonGramsQueryFilterFactory::mids$ = NULL;
          bool CommonGramsQueryFilterFactory::live$ = false;
          ::java::lang::String *CommonGramsQueryFilterFactory::NAME = NULL;

          jclass CommonGramsQueryFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilterFactory::CommonGramsQueryFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsQueryFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args);

          static PyMethodDef t_CommonGramsQueryFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CommonGramsQueryFilterFactory)[] = {
            { Py_tp_methods, t_CommonGramsQueryFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CommonGramsQueryFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CommonGramsQueryFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory),
            NULL
          };

          DEFINE_TYPE(CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory, CommonGramsQueryFilterFactory);

          void t_CommonGramsQueryFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilterFactory), &PY_TYPE_DEF(CommonGramsQueryFilterFactory), module, "CommonGramsQueryFilterFactory", 0);
          }

          void t_CommonGramsQueryFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilterFactory), "class_", make_descriptor(CommonGramsQueryFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilterFactory), "wrapfn_", make_descriptor(t_CommonGramsQueryFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsQueryFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilterFactory), "NAME", make_descriptor(j2p(*CommonGramsQueryFilterFactory::NAME)));
          }

          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilterFactory::wrap_Object(CommonGramsQueryFilterFactory(((t_CommonGramsQueryFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsQueryFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsQueryFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CommonGramsQueryFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "org/apache/lucene/analysis/hunspell/DictEntries.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06593b1664eeea00] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/io/InputStream;Ljava/io/InputStream;)V");
              mids$[mid_init$_642b82fd6f7e6738] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/io/InputStream;Ljava/util/List;Z)V");
              mids$[mid_getIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "getIgnoreCase", "()Z");
              mids$[mid_lookupEntries_693f1402e9ab12d2] = env->getMethodID(cls, "lookupEntries", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/hunspell/DictEntries;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Dictionary::Dictionary(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::io::InputStream & a2, const ::java::io::InputStream & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_06593b1664eeea00, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          Dictionary::Dictionary(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::io::InputStream & a2, const ::java::util::List & a3, jboolean a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_642b82fd6f7e6738, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          jboolean Dictionary::getIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getIgnoreCase_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::analysis::hunspell::DictEntries Dictionary::lookupEntries(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::hunspell::DictEntries(env->callObjectMethod(this$, mids$[mid_lookupEntries_693f1402e9ab12d2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Dictionary_getIgnoreCase(t_Dictionary *self);
          static PyObject *t_Dictionary_lookupEntries(t_Dictionary *self, PyObject *arg);
          static PyObject *t_Dictionary_get__ignoreCase(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getIgnoreCase, METH_NOARGS),
            DECLARE_METHOD(t_Dictionary, lookupEntries, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Dictionary)[] = {
            { Py_tp_methods, t_Dictionary__methods_ },
            { Py_tp_init, (void *) t_Dictionary_init_ },
            { Py_tp_getset, t_Dictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Dictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Dictionary, t_Dictionary, Dictionary);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), &PY_TYPE_DEF(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::InputStream a2((jobject) NULL);
                ::java::io::InputStream a3((jobject) NULL);
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kskk", ::org::apache::lucene::store::Directory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::InputStream a2((jobject) NULL);
                ::java::util::List a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                Dictionary object((jobject) NULL);

                if (!parseArgs(args, "kskKZ", ::org::apache::lucene::store::Directory::initializeClass, ::java::io::InputStream::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_List::parameters_, &a4))
                {
                  INT_CALL(object = Dictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Dictionary_getIgnoreCase(t_Dictionary *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Dictionary_lookupEntries(t_Dictionary *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::hunspell::DictEntries result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.lookupEntries(a0));
              return ::org::apache::lucene::analysis::hunspell::t_DictEntries::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "lookupEntries", arg);
            return NULL;
          }

          static PyObject *t_Dictionary_get__ignoreCase(t_Dictionary *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilterFactory::class$ = NULL;
          jmethodID *BulgarianStemFilterFactory::mids$ = NULL;
          bool BulgarianStemFilterFactory::live$ = false;
          ::java::lang::String *BulgarianStemFilterFactory::NAME = NULL;

          jclass BulgarianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilterFactory::BulgarianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BulgarianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BulgarianStemFilterFactory)[] = {
            { Py_tp_methods, t_BulgarianStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_BulgarianStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BulgarianStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(BulgarianStemFilterFactory, t_BulgarianStemFilterFactory, BulgarianStemFilterFactory);

          void t_BulgarianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilterFactory), &PY_TYPE_DEF(BulgarianStemFilterFactory), module, "BulgarianStemFilterFactory", 0);
          }

          void t_BulgarianStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilterFactory), "class_", make_descriptor(BulgarianStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilterFactory), "wrapfn_", make_descriptor(t_BulgarianStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilterFactory), "NAME", make_descriptor(j2p(*BulgarianStemFilterFactory::NAME)));
          }

          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilterFactory::wrap_Object(BulgarianStemFilterFactory(((t_BulgarianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BulgarianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BulgarianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BulgarianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/GraphTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *GraphTokenFilter::class$ = NULL;
        jmethodID *GraphTokenFilter::mids$ = NULL;
        bool GraphTokenFilter::live$ = false;
        jint GraphTokenFilter::MAX_GRAPH_STACK_SIZE = (jint) 0;
        jint GraphTokenFilter::MAX_TOKEN_CACHE_SIZE = (jint) 0;

        jclass GraphTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/GraphTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_getTrailingPositions_9972fcc56b44e79d] = env->getMethodID(cls, "getTrailingPositions", "()I");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_incrementGraph_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementGraph", "()Z");
            mids$[mid_incrementBaseToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementBaseToken", "()Z");
            mids$[mid_incrementGraphToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementGraphToken", "()Z");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_GRAPH_STACK_SIZE = env->getStaticIntField(cls, "MAX_GRAPH_STACK_SIZE");
            MAX_TOKEN_CACHE_SIZE = env->getStaticIntField(cls, "MAX_TOKEN_CACHE_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GraphTokenFilter::GraphTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        void GraphTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        jint GraphTokenFilter::getTrailingPositions() const
        {
          return env->callIntMethod(this$, mids$[mid_getTrailingPositions_9972fcc56b44e79d]);
        }

        void GraphTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_GraphTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GraphTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GraphTokenFilter_init_(t_GraphTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GraphTokenFilter_end(t_GraphTokenFilter *self, PyObject *args);
        static PyObject *t_GraphTokenFilter_getTrailingPositions(t_GraphTokenFilter *self);
        static PyObject *t_GraphTokenFilter_reset(t_GraphTokenFilter *self, PyObject *args);
        static PyObject *t_GraphTokenFilter_get__trailingPositions(t_GraphTokenFilter *self, void *data);
        static PyGetSetDef t_GraphTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_GraphTokenFilter, trailingPositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GraphTokenFilter__methods_[] = {
          DECLARE_METHOD(t_GraphTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GraphTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GraphTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_GraphTokenFilter, getTrailingPositions, METH_NOARGS),
          DECLARE_METHOD(t_GraphTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GraphTokenFilter)[] = {
          { Py_tp_methods, t_GraphTokenFilter__methods_ },
          { Py_tp_init, (void *) t_GraphTokenFilter_init_ },
          { Py_tp_getset, t_GraphTokenFilter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GraphTokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
          NULL
        };

        DEFINE_TYPE(GraphTokenFilter, t_GraphTokenFilter, GraphTokenFilter);

        void t_GraphTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(GraphTokenFilter), &PY_TYPE_DEF(GraphTokenFilter), module, "GraphTokenFilter", 0);
        }

        void t_GraphTokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenFilter), "class_", make_descriptor(GraphTokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenFilter), "wrapfn_", make_descriptor(t_GraphTokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenFilter), "boxfn_", make_descriptor(boxObject));
          env->getClass(GraphTokenFilter::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenFilter), "MAX_GRAPH_STACK_SIZE", make_descriptor(GraphTokenFilter::MAX_GRAPH_STACK_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GraphTokenFilter), "MAX_TOKEN_CACHE_SIZE", make_descriptor(GraphTokenFilter::MAX_TOKEN_CACHE_SIZE));
        }

        static PyObject *t_GraphTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GraphTokenFilter::initializeClass, 1)))
            return NULL;
          return t_GraphTokenFilter::wrap_Object(GraphTokenFilter(((t_GraphTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_GraphTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GraphTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GraphTokenFilter_init_(t_GraphTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          GraphTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = GraphTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GraphTokenFilter_end(t_GraphTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(GraphTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_GraphTokenFilter_getTrailingPositions(t_GraphTokenFilter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTrailingPositions());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_GraphTokenFilter_reset(t_GraphTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(GraphTokenFilter), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_GraphTokenFilter_get__trailingPositions(t_GraphTokenFilter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTrailingPositions());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery$SpanNotWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery$SpanNotWeight::class$ = NULL;
          jmethodID *SpanNotQuery$SpanNotWeight::mids$ = NULL;
          bool SpanNotQuery$SpanNotWeight::live$ = false;

          jclass SpanNotQuery$SpanNotWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery$SpanNotWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8cfbe3ad1b441fcc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNotQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery$SpanNotWeight::SpanNotQuery$SpanNotWeight(const ::org::apache::lucene::search::spans::SpanNotQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::org::apache::lucene::search::spans::SpanWeight & a3, const ::org::apache::lucene::search::spans::SpanWeight & a4, jfloat a5) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_8cfbe3ad1b441fcc, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5)) {}

          void SpanNotQuery$SpanNotWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanNotQuery$SpanNotWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanNotQuery$SpanNotWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanNotQuery$SpanNotWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery$SpanNotWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery$SpanNotWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery$SpanNotWeight_init_(t_SpanNotQuery$SpanNotWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery$SpanNotWeight_extractTermStates(t_SpanNotQuery$SpanNotWeight *self, PyObject *args);
          static PyObject *t_SpanNotQuery$SpanNotWeight_extractTerms(t_SpanNotQuery$SpanNotWeight *self, PyObject *args);
          static PyObject *t_SpanNotQuery$SpanNotWeight_getSpans(t_SpanNotQuery$SpanNotWeight *self, PyObject *args);
          static PyObject *t_SpanNotQuery$SpanNotWeight_isCacheable(t_SpanNotQuery$SpanNotWeight *self, PyObject *args);

          static PyMethodDef t_SpanNotQuery$SpanNotWeight__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery$SpanNotWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanNotQuery$SpanNotWeight)[] = {
            { Py_tp_methods, t_SpanNotQuery$SpanNotWeight__methods_ },
            { Py_tp_init, (void *) t_SpanNotQuery$SpanNotWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanNotQuery$SpanNotWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanNotQuery$SpanNotWeight, t_SpanNotQuery$SpanNotWeight, SpanNotQuery$SpanNotWeight);

          void t_SpanNotQuery$SpanNotWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery$SpanNotWeight), &PY_TYPE_DEF(SpanNotQuery$SpanNotWeight), module, "SpanNotQuery$SpanNotWeight", 0);
          }

          void t_SpanNotQuery$SpanNotWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery$SpanNotWeight), "class_", make_descriptor(SpanNotQuery$SpanNotWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery$SpanNotWeight), "wrapfn_", make_descriptor(t_SpanNotQuery$SpanNotWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery$SpanNotWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery$SpanNotWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery$SpanNotWeight::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery$SpanNotWeight::wrap_Object(SpanNotQuery$SpanNotWeight(((t_SpanNotQuery$SpanNotWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery$SpanNotWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery$SpanNotWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery$SpanNotWeight_init_(t_SpanNotQuery$SpanNotWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNotQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::SpanWeight a3((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight a4((jobject) NULL);
            jfloat a5;
            SpanNotQuery$SpanNotWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKkkF", ::org::apache::lucene::search::spans::SpanNotQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &a4, &a5))
            {
              INT_CALL(object = SpanNotQuery$SpanNotWeight(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery$SpanNotWeight_extractTermStates(t_SpanNotQuery$SpanNotWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNotQuery$SpanNotWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanNotQuery$SpanNotWeight_extractTerms(t_SpanNotQuery$SpanNotWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNotQuery$SpanNotWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNotQuery$SpanNotWeight_getSpans(t_SpanNotQuery$SpanNotWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery$SpanNotWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNotQuery$SpanNotWeight_isCacheable(t_SpanNotQuery$SpanNotWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery$SpanNotWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/compress/LowercaseAsciiCompression.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {

          ::java::lang::Class *LowercaseAsciiCompression::class$ = NULL;
          jmethodID *LowercaseAsciiCompression::mids$ = NULL;
          bool LowercaseAsciiCompression::live$ = false;

          jclass LowercaseAsciiCompression::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/compress/LowercaseAsciiCompression");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_be789f4485462dbf] = env->getStaticMethodID(cls, "compress", "([BI[BLorg/apache/lucene/store/DataOutput;)Z");
              mids$[mid_decompress_6dfe96cc6e177151] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;[BI)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean LowercaseAsciiCompression::compress(const JArray< jbyte > & a0, jint a1, const JArray< jbyte > & a2, const ::org::apache::lucene::store::DataOutput & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_compress_be789f4485462dbf], a0.this$, a1, a2.this$, a3.this$);
          }

          void LowercaseAsciiCompression::decompress(const ::org::apache::lucene::store::DataInput & a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_decompress_6dfe96cc6e177151], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {
          static PyObject *t_LowercaseAsciiCompression_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowercaseAsciiCompression_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowercaseAsciiCompression_compress(PyTypeObject *type, PyObject *args);
          static PyObject *t_LowercaseAsciiCompression_decompress(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_LowercaseAsciiCompression__methods_[] = {
            DECLARE_METHOD(t_LowercaseAsciiCompression, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowercaseAsciiCompression, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowercaseAsciiCompression, compress, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_LowercaseAsciiCompression, decompress, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LowercaseAsciiCompression)[] = {
            { Py_tp_methods, t_LowercaseAsciiCompression__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LowercaseAsciiCompression)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LowercaseAsciiCompression, t_LowercaseAsciiCompression, LowercaseAsciiCompression);

          void t_LowercaseAsciiCompression::install(PyObject *module)
          {
            installType(&PY_TYPE(LowercaseAsciiCompression), &PY_TYPE_DEF(LowercaseAsciiCompression), module, "LowercaseAsciiCompression", 0);
          }

          void t_LowercaseAsciiCompression::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowercaseAsciiCompression), "class_", make_descriptor(LowercaseAsciiCompression::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowercaseAsciiCompression), "wrapfn_", make_descriptor(t_LowercaseAsciiCompression::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowercaseAsciiCompression), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowercaseAsciiCompression_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowercaseAsciiCompression::initializeClass, 1)))
              return NULL;
            return t_LowercaseAsciiCompression::wrap_Object(LowercaseAsciiCompression(((t_LowercaseAsciiCompression *) arg)->object.this$));
          }
          static PyObject *t_LowercaseAsciiCompression_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowercaseAsciiCompression::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LowercaseAsciiCompression_compress(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            JArray< jbyte > a2((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[BI[Bk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::compress::LowercaseAsciiCompression::compress(a0, a1, a2, a3));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "compress", args);
            return NULL;
          }

          static PyObject *t_LowercaseAsciiCompression_decompress(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            JArray< jbyte > a1((jobject) NULL);
            jint a2;

            if (!parseArgs(args, "k[BI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::util::compress::LowercaseAsciiCompression::decompress(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NamedMatches.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "org/apache/lucene/search/NamedMatches.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NamedMatches::class$ = NULL;
        jmethodID *NamedMatches::mids$ = NULL;
        bool NamedMatches::live$ = false;

        jclass NamedMatches::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NamedMatches");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8cad8bc7419f33f6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/Matches;)V");
            mids$[mid_findNamedMatches_9f0db6b673de6281] = env->getStaticMethodID(cls, "findNamedMatches", "(Lorg/apache/lucene/search/Matches;)Ljava/util/List;");
            mids$[mid_getMatches_c8ade3d4cb307f38] = env->getMethodID(cls, "getMatches", "(Ljava/lang/String;)Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getSubMatches_d4dfbf7a26ff41df] = env->getMethodID(cls, "getSubMatches", "()Ljava/util/Collection;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_wrapQuery_5304f30bb9d5ab9b] = env->getStaticMethodID(cls, "wrapQuery", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedMatches::NamedMatches(const ::java::lang::String & a0, const ::org::apache::lucene::search::Matches & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8cad8bc7419f33f6, a0.this$, a1.this$)) {}

        ::java::util::List NamedMatches::findNamedMatches(const ::org::apache::lucene::search::Matches & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_findNamedMatches_9f0db6b673de6281], a0.this$));
        }

        ::org::apache::lucene::search::MatchesIterator NamedMatches::getMatches(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::MatchesIterator(env->callObjectMethod(this$, mids$[mid_getMatches_c8ade3d4cb307f38], a0.this$));
        }

        ::java::lang::String NamedMatches::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        ::java::util::Collection NamedMatches::getSubMatches() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getSubMatches_d4dfbf7a26ff41df]));
        }

        ::java::util::Iterator NamedMatches::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::search::Query NamedMatches::wrapQuery(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_wrapQuery_5304f30bb9d5ab9b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NamedMatches_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedMatches_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedMatches_init_(t_NamedMatches *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedMatches_findNamedMatches(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedMatches_getMatches(t_NamedMatches *self, PyObject *arg);
        static PyObject *t_NamedMatches_getName(t_NamedMatches *self);
        static PyObject *t_NamedMatches_getSubMatches(t_NamedMatches *self);
        static PyObject *t_NamedMatches_iterator(t_NamedMatches *self);
        static PyObject *t_NamedMatches_wrapQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_NamedMatches_get__name(t_NamedMatches *self, void *data);
        static PyObject *t_NamedMatches_get__subMatches(t_NamedMatches *self, void *data);
        static PyGetSetDef t_NamedMatches__fields_[] = {
          DECLARE_GET_FIELD(t_NamedMatches, name),
          DECLARE_GET_FIELD(t_NamedMatches, subMatches),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedMatches__methods_[] = {
          DECLARE_METHOD(t_NamedMatches, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedMatches, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedMatches, findNamedMatches, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedMatches, getMatches, METH_O),
          DECLARE_METHOD(t_NamedMatches, getName, METH_NOARGS),
          DECLARE_METHOD(t_NamedMatches, getSubMatches, METH_NOARGS),
          DECLARE_METHOD(t_NamedMatches, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedMatches, wrapQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NamedMatches)[] = {
          { Py_tp_methods, t_NamedMatches__methods_ },
          { Py_tp_init, (void *) t_NamedMatches_init_ },
          { Py_tp_getset, t_NamedMatches__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_NamedMatches *)) get_iterator< t_NamedMatches >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NamedMatches)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NamedMatches, t_NamedMatches, NamedMatches);

        void t_NamedMatches::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedMatches), &PY_TYPE_DEF(NamedMatches), module, "NamedMatches", 0);
        }

        void t_NamedMatches::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedMatches), "class_", make_descriptor(NamedMatches::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedMatches), "wrapfn_", make_descriptor(t_NamedMatches::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedMatches), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedMatches_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedMatches::initializeClass, 1)))
            return NULL;
          return t_NamedMatches::wrap_Object(NamedMatches(((t_NamedMatches *) arg)->object.this$));
        }
        static PyObject *t_NamedMatches_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedMatches::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedMatches_init_(t_NamedMatches *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::Matches a1((jobject) NULL);
          NamedMatches object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::search::Matches::initializeClass, &a0, &a1))
          {
            INT_CALL(object = NamedMatches(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedMatches_findNamedMatches(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::Matches a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Matches::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::NamedMatches::findNamedMatches(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(NamedMatches));
          }

          PyErr_SetArgsError(type, "findNamedMatches", arg);
          return NULL;
        }

        static PyObject *t_NamedMatches_getMatches(t_NamedMatches *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::MatchesIterator result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getMatches(a0));
            return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMatches", arg);
          return NULL;
        }

        static PyObject *t_NamedMatches_getName(t_NamedMatches *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_NamedMatches_getSubMatches(t_NamedMatches *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubMatches());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Matches));
        }

        static PyObject *t_NamedMatches_iterator(t_NamedMatches *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedMatches_wrapQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::NamedMatches::wrapQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrapQuery", args);
          return NULL;
        }

        static PyObject *t_NamedMatches_get__name(t_NamedMatches *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_NamedMatches_get__subMatches(t_NamedMatches *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubMatches());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/Intervals.h"
#include "java/util/function/Predicate.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/intervals/IntervalsSource.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *Intervals::class$ = NULL;
          jmethodID *Intervals::mids$ = NULL;
          bool Intervals::live$ = false;

          jclass Intervals::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/Intervals");

              mids$ = new jmethodID[max_mid];
              mids$[mid_after_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "after", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_atLeast_579f6257879d5e04] = env->getStaticMethodID(cls, "atLeast", "(I[Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_before_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "before", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_containedBy_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "containedBy", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_containing_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "containing", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_extend_c62839a921da3f64] = env->getStaticMethodID(cls, "extend", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;II)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_fixField_6aa4fe2427e9c605] = env->getStaticMethodID(cls, "fixField", "(Ljava/lang/String;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_maxgaps_43073414fc587e52] = env->getStaticMethodID(cls, "maxgaps", "(ILorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_maxwidth_43073414fc587e52] = env->getStaticMethodID(cls, "maxwidth", "(ILorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_multiterm_988cddacba1ee5ff] = env->getStaticMethodID(cls, "multiterm", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_multiterm_e590e62509a0f68e] = env->getStaticMethodID(cls, "multiterm", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Ljava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_multiterm_0369b21e7abaaaf5] = env->getStaticMethodID(cls, "multiterm", "(Lorg/apache/lucene/util/automaton/Automaton;ILjava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_multiterm_6a877fab8428091a] = env->getStaticMethodID(cls, "multiterm", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;ILjava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_nonOverlapping_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "nonOverlapping", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_notContainedBy_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "notContainedBy", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_notContaining_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "notContaining", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_notWithin_0688928cde3bd839] = env->getStaticMethodID(cls, "notWithin", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;ILorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_or_0115693763c31807] = env->getStaticMethodID(cls, "or", "([Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_or_4b5a3abbf0298282] = env->getStaticMethodID(cls, "or", "(Ljava/util/List;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_or_dbbe2bcb2dd3eb63] = env->getStaticMethodID(cls, "or", "(Z[Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_or_1e2bd0f406ed78d2] = env->getStaticMethodID(cls, "or", "(ZLjava/util/List;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_ordered_0115693763c31807] = env->getStaticMethodID(cls, "ordered", "([Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_overlapping_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "overlapping", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_phrase_126b00664654e455] = env->getStaticMethodID(cls, "phrase", "([Ljava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_phrase_0115693763c31807] = env->getStaticMethodID(cls, "phrase", "([Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_prefix_f2af3639d1576282] = env->getStaticMethodID(cls, "prefix", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_prefix_ef50ee3a45b9bb31] = env->getStaticMethodID(cls, "prefix", "(Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_term_78f3b92eb4e4bb83] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_term_f2af3639d1576282] = env->getStaticMethodID(cls, "term", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_term_acc5bd202c5b4d89] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/util/function/Predicate;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_term_6bdf8e9b104c4c15] = env->getStaticMethodID(cls, "term", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/function/Predicate;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_unordered_0115693763c31807] = env->getStaticMethodID(cls, "unordered", "([Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_unorderedNoOverlaps_3ca5a622f3b2a0e7] = env->getStaticMethodID(cls, "unorderedNoOverlaps", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;Lorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_wildcard_f2af3639d1576282] = env->getStaticMethodID(cls, "wildcard", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_wildcard_ef50ee3a45b9bb31] = env->getStaticMethodID(cls, "wildcard", "(Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_within_0688928cde3bd839] = env->getStaticMethodID(cls, "within", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;ILorg/apache/lucene/queries/intervals/IntervalsSource;)Lorg/apache/lucene/queries/intervals/IntervalsSource;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::after(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_after_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::atLeast(jint a0, const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_atLeast_579f6257879d5e04], a0, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::before(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_before_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::containedBy(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_containedBy_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::containing(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_containing_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::extend(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_extend_c62839a921da3f64], a0.this$, a1, a2));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::fixField(const ::java::lang::String & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_fixField_6aa4fe2427e9c605], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::maxgaps(jint a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_maxgaps_43073414fc587e52], a0, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::maxwidth(jint a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_maxwidth_43073414fc587e52], a0, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::multiterm(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_multiterm_988cddacba1ee5ff], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::multiterm(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_multiterm_e590e62509a0f68e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::multiterm(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_multiterm_0369b21e7abaaaf5], a0.this$, a1, a2.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::multiterm(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_multiterm_6a877fab8428091a], a0.this$, a1, a2.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::nonOverlapping(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_nonOverlapping_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::notContainedBy(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_notContainedBy_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::notContaining(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_notContaining_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::notWithin(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, jint a1, const ::org::apache::lucene::queries::intervals::IntervalsSource & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_notWithin_0688928cde3bd839], a0.this$, a1, a2.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::or$(const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_or_0115693763c31807], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::or$(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_or_4b5a3abbf0298282], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::or$(jboolean a0, const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_or_dbbe2bcb2dd3eb63], a0, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::or$(jboolean a0, const ::java::util::List & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_or_1e2bd0f406ed78d2], a0, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::ordered(const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_ordered_0115693763c31807], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::overlapping(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_overlapping_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::phrase(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_phrase_126b00664654e455], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::phrase(const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_phrase_0115693763c31807], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::prefix(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_prefix_f2af3639d1576282], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::prefix(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_prefix_ef50ee3a45b9bb31], a0.this$, a1));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::term(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_term_78f3b92eb4e4bb83], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::term(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_term_f2af3639d1576282], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::term(const ::java::lang::String & a0, const ::java::util::function::Predicate & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_term_acc5bd202c5b4d89], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::term(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::function::Predicate & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_term_6bdf8e9b104c4c15], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::unordered(const JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_unordered_0115693763c31807], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::unorderedNoOverlaps(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_unorderedNoOverlaps_3ca5a622f3b2a0e7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::wildcard(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_wildcard_f2af3639d1576282], a0.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::wildcard(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_wildcard_ef50ee3a45b9bb31], a0.this$, a1));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource Intervals::within(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, jint a1, const ::org::apache::lucene::queries::intervals::IntervalsSource & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_within_0688928cde3bd839], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_Intervals_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Intervals_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Intervals_after(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_atLeast(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_before(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_containedBy(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_containing(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_extend(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_fixField(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_maxgaps(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_maxwidth(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_multiterm(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_nonOverlapping(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_notContainedBy(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_notContaining(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_notWithin(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_or(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_ordered(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Intervals_overlapping(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_phrase(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_prefix(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_term(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_unordered(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Intervals_unorderedNoOverlaps(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_wildcard(PyTypeObject *type, PyObject *args);
          static PyObject *t_Intervals_within(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Intervals__methods_[] = {
            DECLARE_METHOD(t_Intervals, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Intervals, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Intervals, after, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, atLeast, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, before, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, containedBy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, containing, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, extend, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, fixField, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, maxgaps, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, maxwidth, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, multiterm, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, nonOverlapping, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, notContainedBy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, notContaining, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, notWithin, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, or, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, ordered, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Intervals, overlapping, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, phrase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, prefix, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, term, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, unordered, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Intervals, unorderedNoOverlaps, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, wildcard, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Intervals, within, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Intervals)[] = {
            { Py_tp_methods, t_Intervals__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Intervals)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Intervals, t_Intervals, Intervals);

          void t_Intervals::install(PyObject *module)
          {
            installType(&PY_TYPE(Intervals), &PY_TYPE_DEF(Intervals), module, "Intervals", 0);
          }

          void t_Intervals::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Intervals), "class_", make_descriptor(Intervals::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Intervals), "wrapfn_", make_descriptor(t_Intervals::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Intervals), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Intervals_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Intervals::initializeClass, 1)))
              return NULL;
            return t_Intervals::wrap_Object(Intervals(((t_Intervals *) arg)->object.this$));
          }
          static PyObject *t_Intervals_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Intervals::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Intervals_after(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::after(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "after", args);
            return NULL;
          }

          static PyObject *t_Intervals_atLeast(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::atLeast(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "atLeast", args);
            return NULL;
          }

          static PyObject *t_Intervals_before(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::before(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "before", args);
            return NULL;
          }

          static PyObject *t_Intervals_containedBy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::containedBy(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "containedBy", args);
            return NULL;
          }

          static PyObject *t_Intervals_containing(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::containing(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "containing", args);
            return NULL;
          }

          static PyObject *t_Intervals_extend(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::extend(a0, a1, a2));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "extend", args);
            return NULL;
          }

          static PyObject *t_Intervals_fixField(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::fixField(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fixField", args);
            return NULL;
          }

          static PyObject *t_Intervals_maxgaps(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::maxgaps(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "maxgaps", args);
            return NULL;
          }

          static PyObject *t_Intervals_maxwidth(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::maxwidth(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "maxwidth", args);
            return NULL;
          }

          static PyObject *t_Intervals_multiterm(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::multiterm(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::multiterm(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "kIs", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::multiterm(a0, a1, a2));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "kIs", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::multiterm(a0, a1, a2));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "multiterm", args);
            return NULL;
          }

          static PyObject *t_Intervals_nonOverlapping(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::nonOverlapping(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "nonOverlapping", args);
            return NULL;
          }

          static PyObject *t_Intervals_notContainedBy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::notContainedBy(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "notContainedBy", args);
            return NULL;
          }

          static PyObject *t_Intervals_notContaining(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::notContaining(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "notContaining", args);
            return NULL;
          }

          static PyObject *t_Intervals_notWithin(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::queries::intervals::IntervalsSource a2((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kIk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::notWithin(a0, a1, a2));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "notWithin", args);
            return NULL;
          }

          static PyObject *t_Intervals_or(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::or$(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::or$(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jboolean a0;
                JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a1((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "Z[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::or$(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                jboolean a0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "ZK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::or$(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "or", args);
            return NULL;
          }

          static PyObject *t_Intervals_ordered(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::ordered(a0));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "ordered", arg);
            return NULL;
          }

          static PyObject *t_Intervals_overlapping(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::overlapping(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "overlapping", args);
            return NULL;
          }

          static PyObject *t_Intervals_phrase(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::phrase(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::phrase(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "phrase", args);
            return NULL;
          }

          static PyObject *t_Intervals_prefix(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::prefix(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::prefix(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "prefix", args);
            return NULL;
          }

          static PyObject *t_Intervals_term(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::term(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::term(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::function::Predicate a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::function::Predicate::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Predicate::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::term(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::java::util::function::Predicate a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::function::Predicate::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Predicate::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::term(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "term", args);
            return NULL;
          }

          static PyObject *t_Intervals_unordered(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::org::apache::lucene::queries::intervals::IntervalsSource > a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::unordered(a0));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unordered", arg);
            return NULL;
          }

          static PyObject *t_Intervals_unorderedNoOverlaps(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::unorderedNoOverlaps(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unorderedNoOverlaps", args);
            return NULL;
          }

          static PyObject *t_Intervals_wildcard(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::wildcard(a0));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::wildcard(a0, a1));
                  return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "wildcard", args);
            return NULL;
          }

          static PyObject *t_Intervals_within(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::queries::intervals::IntervalsSource a2((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kIk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::Intervals::within(a0, a1, a2));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "within", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterGraphFilter::class$ = NULL;
          jmethodID *WordDelimiterGraphFilter::mids$ = NULL;
          bool WordDelimiterGraphFilter::live$ = false;
          jint WordDelimiterGraphFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterGraphFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterGraphFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterGraphFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterGraphFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterGraphFilter::IGNORE_KEYWORDS = (jint) 0;
          jint WordDelimiterGraphFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterGraphFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterGraphFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterGraphFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;

          jclass WordDelimiterGraphFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dbdcafe10d75de60] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_eec49b702fc7662e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[BILorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_flagsToString_d7593acad64ef635] = env->getStaticMethodID(cls, "flagsToString", "(I)Ljava/lang/String;");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              IGNORE_KEYWORDS = env->getStaticIntField(cls, "IGNORE_KEYWORDS");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterGraphFilter::WordDelimiterGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_dbdcafe10d75de60, a0.this$, a1, a2.this$)) {}

          WordDelimiterGraphFilter::WordDelimiterGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< jbyte > & a2, jint a3, const ::org::apache::lucene::analysis::CharArraySet & a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_eec49b702fc7662e, a0.this$, a1, a2.this$, a3, a4.this$)) {}

          ::java::lang::String WordDelimiterGraphFilter::flagsToString(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_flagsToString_d7593acad64ef635], a0));
          }

          jboolean WordDelimiterGraphFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void WordDelimiterGraphFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          ::java::lang::String WordDelimiterGraphFilter::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterGraphFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterGraphFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterGraphFilter_init_(t_WordDelimiterGraphFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterGraphFilter_flagsToString(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterGraphFilter_incrementToken(t_WordDelimiterGraphFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterGraphFilter_reset(t_WordDelimiterGraphFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterGraphFilter_toString(t_WordDelimiterGraphFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterGraphFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterGraphFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterGraphFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterGraphFilter, flagsToString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterGraphFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterGraphFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterGraphFilter, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordDelimiterGraphFilter)[] = {
            { Py_tp_methods, t_WordDelimiterGraphFilter__methods_ },
            { Py_tp_init, (void *) t_WordDelimiterGraphFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordDelimiterGraphFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(WordDelimiterGraphFilter, t_WordDelimiterGraphFilter, WordDelimiterGraphFilter);

          void t_WordDelimiterGraphFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterGraphFilter), &PY_TYPE_DEF(WordDelimiterGraphFilter), module, "WordDelimiterGraphFilter", 0);
          }

          void t_WordDelimiterGraphFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "class_", make_descriptor(WordDelimiterGraphFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "wrapfn_", make_descriptor(t_WordDelimiterGraphFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterGraphFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "CATENATE_ALL", make_descriptor(WordDelimiterGraphFilter::CATENATE_ALL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "CATENATE_NUMBERS", make_descriptor(WordDelimiterGraphFilter::CATENATE_NUMBERS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "CATENATE_WORDS", make_descriptor(WordDelimiterGraphFilter::CATENATE_WORDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterGraphFilter::GENERATE_NUMBER_PARTS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterGraphFilter::GENERATE_WORD_PARTS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "IGNORE_KEYWORDS", make_descriptor(WordDelimiterGraphFilter::IGNORE_KEYWORDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterGraphFilter::PRESERVE_ORIGINAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterGraphFilter::SPLIT_ON_CASE_CHANGE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterGraphFilter::SPLIT_ON_NUMERICS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilter), "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterGraphFilter::STEM_ENGLISH_POSSESSIVE));
          }

          static PyObject *t_WordDelimiterGraphFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterGraphFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterGraphFilter::wrap_Object(WordDelimiterGraphFilter(((t_WordDelimiterGraphFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterGraphFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterGraphFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterGraphFilter_init_(t_WordDelimiterGraphFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                WordDelimiterGraphFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterGraphFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                ::org::apache::lucene::analysis::CharArraySet a4((jobject) NULL);
                PyTypeObject **p4;
                WordDelimiterGraphFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterGraphFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterGraphFilter_flagsToString(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterGraphFilter::flagsToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "flagsToString", arg);
            return NULL;
          }

          static PyObject *t_WordDelimiterGraphFilter_incrementToken(t_WordDelimiterGraphFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(WordDelimiterGraphFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterGraphFilter_reset(t_WordDelimiterGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WordDelimiterGraphFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_WordDelimiterGraphFilter_toString(t_WordDelimiterGraphFilter *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(WordDelimiterGraphFilter), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions::class$ = NULL;
          jmethodID *Extensions::mids$ = NULL;
          bool Extensions::live$ = false;
          jchar Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER = (jchar) 0;

          jclass Extensions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_b227b2c08d18d29e] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_add_18f6d5622911e242] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/ext/ParserExtension;)V");
              mids$[mid_buildExtensionField_9bfa75c9f141b67f] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_buildExtensionField_04b762e0ad33dcc5] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_escapeExtensionField_9bfa75c9f141b67f] = env->getMethodID(cls, "escapeExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getExtension_9a1278aab770bdea] = env->getMethodID(cls, "getExtension", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/ParserExtension;");
              mids$[mid_getExtensionFieldDelimiter_8eea1dd85c3239c3] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_splitExtensionField_da4ae0c58f1caabe] = env->getMethodID(cls, "splitExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/Extensions$Pair;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_EXTENSION_FIELD_DELIMITER = env->getStaticCharField(cls, "DEFAULT_EXTENSION_FIELD_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions::Extensions() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Extensions::Extensions(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b227b2c08d18d29e, a0)) {}

          void Extensions::add(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::ext::ParserExtension & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_18f6d5622911e242], a0.this$, a1.this$);
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_9bfa75c9f141b67f], a0.this$));
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_04b762e0ad33dcc5], a0.this$, a1.this$));
          }

          ::java::lang::String Extensions::escapeExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_escapeExtensionField_9bfa75c9f141b67f], a0.this$));
          }

          ::org::apache::lucene::queryparser::ext::ParserExtension Extensions::getExtension(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::ext::ParserExtension(env->callObjectMethod(this$, mids$[mid_getExtension_9a1278aab770bdea], a0.this$));
          }

          jchar Extensions::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_8eea1dd85c3239c3]);
          }

          ::org::apache::lucene::queryparser::ext::Extensions$Pair Extensions::splitExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::queryparser::ext::Extensions$Pair(env->callObjectMethod(this$, mids$[mid_splitExtensionField_da4ae0c58f1caabe], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self);
          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data);
          static PyGetSetDef t_Extensions__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions__methods_[] = {
            DECLARE_METHOD(t_Extensions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, add, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, buildExtensionField, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, escapeExtensionField, METH_O),
            DECLARE_METHOD(t_Extensions, getExtension, METH_O),
            DECLARE_METHOD(t_Extensions, getExtensionFieldDelimiter, METH_NOARGS),
            DECLARE_METHOD(t_Extensions, splitExtensionField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Extensions)[] = {
            { Py_tp_methods, t_Extensions__methods_ },
            { Py_tp_init, (void *) t_Extensions_init_ },
            { Py_tp_getset, t_Extensions__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Extensions)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Extensions, t_Extensions, Extensions);

          void t_Extensions::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions), &PY_TYPE_DEF(Extensions), module, "Extensions", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions), "Pair", make_descriptor(&PY_TYPE_DEF(Extensions$Pair)));
          }

          void t_Extensions::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions), "class_", make_descriptor(Extensions::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions), "wrapfn_", make_descriptor(t_Extensions::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions), "boxfn_", make_descriptor(boxObject));
            env->getClass(Extensions::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions), "DEFAULT_EXTENSION_FIELD_DELIMITER", make_descriptor(Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER));
          }

          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions::initializeClass, 1)))
              return NULL;
            return t_Extensions::wrap_Object(Extensions(((t_Extensions *) arg)->object.this$));
          }
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Extensions object((jobject) NULL);

                INT_CALL(object = Extensions());
                self->object = object;
                break;
              }
             case 1:
              {
                jchar a0;
                Extensions object((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  INT_CALL(object = Extensions(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::ext::ParserExtension::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "buildExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.escapeExtensionField(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "escapeExtensionField", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getExtension(a0));
              return ::org::apache::lucene::queryparser::ext::t_ParserExtension::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getExtension", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return c2p(result);
          }

          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::Extensions$Pair result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitExtensionField(a0, a1));
              return ::org::apache::lucene::queryparser::ext::t_Extensions$Pair::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "splitExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return c2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsReader::class$ = NULL;
          jmethodID *CompressingTermVectorsReader::mids$ = NULL;
          bool CompressingTermVectorsReader::live$ = false;

          jclass CompressingTermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f8f677347d54d3ca] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_f69eb90f55592154] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_9997c94b783ad8be] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsReader::CompressingTermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_f8f677347d54d3ca, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingTermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_f69eb90f55592154]));
          }

          void CompressingTermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::org::apache::lucene::index::Fields CompressingTermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_9997c94b783ad8be], a0));
          }

          ::java::util::Collection CompressingTermVectorsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          jlong CompressingTermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String CompressingTermVectorsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_getChildResources(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_toString(t_CompressingTermVectorsReader *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsReader_get__childResources(t_CompressingTermVectorsReader *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingTermVectorsReader)[] = {
            { Py_tp_methods, t_CompressingTermVectorsReader__methods_ },
            { Py_tp_init, (void *) t_CompressingTermVectorsReader_init_ },
            { Py_tp_getset, t_CompressingTermVectorsReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingTermVectorsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsReader),
            NULL
          };

          DEFINE_TYPE(CompressingTermVectorsReader, t_CompressingTermVectorsReader, CompressingTermVectorsReader);

          void t_CompressingTermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsReader), &PY_TYPE_DEF(CompressingTermVectorsReader), module, "CompressingTermVectorsReader", 0);
          }

          void t_CompressingTermVectorsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsReader), "class_", make_descriptor(CompressingTermVectorsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsReader), "wrapfn_", make_descriptor(t_CompressingTermVectorsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsReader::wrap_Object(CompressingTermVectorsReader(((t_CompressingTermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsReader_init_(t_CompressingTermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingTermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsReader_checkIntegrity(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_clone(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_close(t_CompressingTermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_getChildResources(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_ramBytesUsed(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_toString(t_CompressingTermVectorsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsReader_get__childResources(t_CompressingTermVectorsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *MessageImpl::class$ = NULL;
            jmethodID *MessageImpl::mids$ = NULL;
            bool MessageImpl::live$ = false;

            jclass MessageImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/MessageImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_f695dd5de47c6199] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Object;)V");
                mids$[mid_getArguments_6becf78ffd87a9bc] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_db9b55ba01e03e4b] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MessageImpl::MessageImpl(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            MessageImpl::MessageImpl(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f695dd5de47c6199, a0.this$, a1.this$)) {}

            JArray< ::java::lang::Object > MessageImpl::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_6becf78ffd87a9bc]));
            }

            ::java::lang::String MessageImpl::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_db9b55ba01e03e4b]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_db9b55ba01e03e4b]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c], a0.this$));
            }

            ::java::lang::String MessageImpl::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data);
            static PyGetSetDef t_MessageImpl__fields_[] = {
              DECLARE_GET_FIELD(t_MessageImpl, arguments),
              DECLARE_GET_FIELD(t_MessageImpl, key),
              DECLARE_GET_FIELD(t_MessageImpl, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MessageImpl__methods_[] = {
              DECLARE_METHOD(t_MessageImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getKey, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_MessageImpl, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MessageImpl)[] = {
              { Py_tp_methods, t_MessageImpl__methods_ },
              { Py_tp_init, (void *) t_MessageImpl_init_ },
              { Py_tp_getset, t_MessageImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MessageImpl)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(MessageImpl, t_MessageImpl, MessageImpl);

            void t_MessageImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(MessageImpl), &PY_TYPE_DEF(MessageImpl), module, "MessageImpl", 0);
            }

            void t_MessageImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MessageImpl), "class_", make_descriptor(MessageImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MessageImpl), "wrapfn_", make_descriptor(t_MessageImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MessageImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MessageImpl::initializeClass, 1)))
                return NULL;
              return t_MessageImpl::wrap_Object(MessageImpl(((t_MessageImpl *) arg)->object.this$));
            }
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MessageImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = MessageImpl(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    INT_CALL(object = MessageImpl(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MessageImpl), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilter::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilter::mids$ = NULL;
          bool PortugueseMinimalStemFilter::live$ = false;

          jclass PortugueseMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilter::PortugueseMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean PortugueseMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseMinimalStemFilter)[] = {
            { Py_tp_methods, t_PortugueseMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_PortugueseMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter, PortugueseMinimalStemFilter);

          void t_PortugueseMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilter), &PY_TYPE_DEF(PortugueseMinimalStemFilter), module, "PortugueseMinimalStemFilter", 0);
          }

          void t_PortugueseMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilter), "class_", make_descriptor(PortugueseMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilter), "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilter::wrap_Object(PortugueseMinimalStemFilter(((t_PortugueseMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PortugueseMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *BaseFormAttributeImpl::class$ = NULL;
            jmethodID *BaseFormAttributeImpl::mids$ = NULL;
            bool BaseFormAttributeImpl::live$ = false;

            jclass BaseFormAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getBaseForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getBaseForm", "()Ljava/lang/String;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BaseFormAttributeImpl::BaseFormAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void BaseFormAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void BaseFormAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::java::lang::String BaseFormAttributeImpl::getBaseForm() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_db9b55ba01e03e4b]));
            }

            void BaseFormAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void BaseFormAttributeImpl::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_BaseFormAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BaseFormAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BaseFormAttributeImpl_init_(t_BaseFormAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BaseFormAttributeImpl_clear(t_BaseFormAttributeImpl *self, PyObject *args);
            static PyObject *t_BaseFormAttributeImpl_copyTo(t_BaseFormAttributeImpl *self, PyObject *args);
            static PyObject *t_BaseFormAttributeImpl_getBaseForm(t_BaseFormAttributeImpl *self);
            static PyObject *t_BaseFormAttributeImpl_reflectWith(t_BaseFormAttributeImpl *self, PyObject *args);
            static PyObject *t_BaseFormAttributeImpl_setToken(t_BaseFormAttributeImpl *self, PyObject *arg);
            static PyObject *t_BaseFormAttributeImpl_get__baseForm(t_BaseFormAttributeImpl *self, void *data);
            static int t_BaseFormAttributeImpl_set__token(t_BaseFormAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_BaseFormAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_BaseFormAttributeImpl, baseForm),
              DECLARE_SET_FIELD(t_BaseFormAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BaseFormAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_BaseFormAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, getBaseForm, METH_NOARGS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_BaseFormAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BaseFormAttributeImpl)[] = {
              { Py_tp_methods, t_BaseFormAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_BaseFormAttributeImpl_init_ },
              { Py_tp_getset, t_BaseFormAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BaseFormAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(BaseFormAttributeImpl, t_BaseFormAttributeImpl, BaseFormAttributeImpl);

            void t_BaseFormAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(BaseFormAttributeImpl), &PY_TYPE_DEF(BaseFormAttributeImpl), module, "BaseFormAttributeImpl", 0);
            }

            void t_BaseFormAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttributeImpl), "class_", make_descriptor(BaseFormAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttributeImpl), "wrapfn_", make_descriptor(t_BaseFormAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BaseFormAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BaseFormAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_BaseFormAttributeImpl::wrap_Object(BaseFormAttributeImpl(((t_BaseFormAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_BaseFormAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BaseFormAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BaseFormAttributeImpl_init_(t_BaseFormAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              BaseFormAttributeImpl object((jobject) NULL);

              INT_CALL(object = BaseFormAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_BaseFormAttributeImpl_clear(t_BaseFormAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(BaseFormAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_BaseFormAttributeImpl_copyTo(t_BaseFormAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(BaseFormAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_BaseFormAttributeImpl_getBaseForm(t_BaseFormAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getBaseForm());
              return j2p(result);
            }

            static PyObject *t_BaseFormAttributeImpl_reflectWith(t_BaseFormAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(BaseFormAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_BaseFormAttributeImpl_setToken(t_BaseFormAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_BaseFormAttributeImpl_get__baseForm(t_BaseFormAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getBaseForm());
              return j2p(value);
            }

            static int t_BaseFormAttributeImpl_set__token(t_BaseFormAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BworContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BworContext::class$ = NULL;
          jmethodID *JavascriptParser$BworContext::mids$ = NULL;
          bool JavascriptParser$BworContext::live$ = false;

          jclass JavascriptParser$BworContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BworContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BworContext::JavascriptParser$BworContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BworContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BworContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BworContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BworContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BworContext_of_(t_JavascriptParser$BworContext *self, PyObject *args);
          static int t_JavascriptParser$BworContext_init_(t_JavascriptParser$BworContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BworContext_expression(t_JavascriptParser$BworContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BworContext_get__parameters_(t_JavascriptParser$BworContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BworContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BworContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BworContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BworContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BworContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BworContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BworContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BworContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BworContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BworContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BworContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BworContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BworContext, t_JavascriptParser$BworContext, JavascriptParser$BworContext);
          PyObject *t_JavascriptParser$BworContext::wrap_Object(const JavascriptParser$BworContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BworContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BworContext *self = (t_JavascriptParser$BworContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BworContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BworContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BworContext *self = (t_JavascriptParser$BworContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BworContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BworContext), &PY_TYPE_DEF(JavascriptParser$BworContext), module, "JavascriptParser$BworContext", 0);
          }

          void t_JavascriptParser$BworContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BworContext), "class_", make_descriptor(JavascriptParser$BworContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BworContext), "wrapfn_", make_descriptor(t_JavascriptParser$BworContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BworContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BworContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BworContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BworContext::wrap_Object(JavascriptParser$BworContext(((t_JavascriptParser$BworContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BworContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BworContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BworContext_of_(t_JavascriptParser$BworContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BworContext_init_(t_JavascriptParser$BworContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BworContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BworContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BworContext_expression(t_JavascriptParser$BworContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BworContext_get__parameters_(t_JavascriptParser$BworContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeReflector::class$ = NULL;
        jmethodID *AttributeReflector::mids$ = NULL;
        bool AttributeReflector::live$ = false;

        jclass AttributeReflector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeReflector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reflect_56880f9e3b5fb871] = env->getMethodID(cls, "reflect", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AttributeReflector::reflect(const ::java::lang::Class & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reflect_56880f9e3b5fb871], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args);

        static PyMethodDef t_AttributeReflector__methods_[] = {
          DECLARE_METHOD(t_AttributeReflector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, reflect, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeReflector)[] = {
          { Py_tp_methods, t_AttributeReflector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeReflector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(AttributeReflector, t_AttributeReflector, AttributeReflector);

        void t_AttributeReflector::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeReflector), &PY_TYPE_DEF(AttributeReflector), module, "AttributeReflector", 0);
        }

        void t_AttributeReflector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeReflector), "class_", make_descriptor(AttributeReflector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeReflector), "wrapfn_", make_descriptor(t_AttributeReflector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeReflector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeReflector::initializeClass, 1)))
            return NULL;
          return t_AttributeReflector::wrap_Object(AttributeReflector(((t_AttributeReflector *) arg)->object.this$));
        }
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeReflector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "Kso", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
          {
            OBJ_CALL(self->object.reflect(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflect", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *FieldsQuery::class$ = NULL;
            jmethodID *FieldsQuery::mids$ = NULL;
            bool FieldsQuery::live$ = false;

            jclass FieldsQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/FieldsQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_07be11e94e0310de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/lang/String;C)V");
                mids$[mid_init$_96ab657acabd39fc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List;C)V");
                mids$[mid_getFieldNames_49ec78390f08338a] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/List;");
                mids$[mid_getFieldOperator_8eea1dd85c3239c3] = env->getMethodID(cls, "getFieldOperator", "()C");
                mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryNoBoost_8e3835083753eaea] = env->getMethodID(cls, "makeLuceneQueryNoBoost", "(Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_fieldNamesToString_90aa63c10985f260] = env->getMethodID(cls, "fieldNamesToString", "(Ljava/lang/StringBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::lang::String & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_07be11e94e0310de, a0.this$, a1.this$, a2)) {}

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::util::List & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_96ab657acabd39fc, a0.this$, a1.this$, a2)) {}

            ::java::util::List FieldsQuery::getFieldNames() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFieldNames_49ec78390f08338a]));
            }

            jchar FieldsQuery::getFieldOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getFieldOperator_8eea1dd85c3239c3]);
            }

            jboolean FieldsQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_8454bd5aa23fd11e]);
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryNoBoost(const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryNoBoost_8e3835083753eaea], a0.this$));
            }

            ::java::lang::String FieldsQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg);
            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data);
            static PyGetSetDef t_FieldsQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FieldsQuery, fieldNames),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldOperator),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldsSubQueryAcceptable),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldsQuery__methods_[] = {
              DECLARE_METHOD(t_FieldsQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, getFieldNames, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryNoBoost, METH_O),
              DECLARE_METHOD(t_FieldsQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FieldsQuery)[] = {
              { Py_tp_methods, t_FieldsQuery__methods_ },
              { Py_tp_init, (void *) t_FieldsQuery_init_ },
              { Py_tp_getset, t_FieldsQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FieldsQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SrndQuery),
              NULL
            };

            DEFINE_TYPE(FieldsQuery, t_FieldsQuery, FieldsQuery);

            void t_FieldsQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldsQuery), &PY_TYPE_DEF(FieldsQuery), module, "FieldsQuery", 0);
            }

            void t_FieldsQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsQuery), "class_", make_descriptor(FieldsQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsQuery), "wrapfn_", make_descriptor(t_FieldsQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldsQuery::initializeClass, 1)))
                return NULL;
              return t_FieldsQuery::wrap_Object(FieldsQuery(((t_FieldsQuery *) arg)->object.this$));
            }
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldsQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "ksC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::util::List a1((jobject) NULL);
                  PyTypeObject **p1;
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "kKC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getFieldOperator());
              return c2p(result);
            }

            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FieldsQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FieldsQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryNoBoost(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryNoBoost", arg);
              return NULL;
            }

            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(FieldsQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(value);
            }

            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getFieldOperator());
              return c2p(value);
            }

            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatPointMultiRangeBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatPointMultiRangeBuilder::class$ = NULL;
        jmethodID *FloatPointMultiRangeBuilder::mids$ = NULL;
        bool FloatPointMultiRangeBuilder::live$ = false;

        jclass FloatPointMultiRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatPointMultiRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_add_890c72b2ae4788a0] = env->getMethodID(cls, "add", "([F[F)V");
            mids$[mid_build_03a96fdd31aca883] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiRangeQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatPointMultiRangeBuilder::FloatPointMultiRangeBuilder(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::MultiRangeQuery$Builder(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        void FloatPointMultiRangeBuilder::add(const JArray< jfloat > & a0, const JArray< jfloat > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_890c72b2ae4788a0], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::MultiRangeQuery FloatPointMultiRangeBuilder::build() const
        {
          return ::org::apache::lucene::search::MultiRangeQuery(env->callObjectMethod(this$, mids$[mid_build_03a96fdd31aca883]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatPointMultiRangeBuilder_init_(t_FloatPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatPointMultiRangeBuilder_add(t_FloatPointMultiRangeBuilder *self, PyObject *args);
        static PyObject *t_FloatPointMultiRangeBuilder_build(t_FloatPointMultiRangeBuilder *self, PyObject *args);

        static PyMethodDef t_FloatPointMultiRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_FloatPointMultiRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPointMultiRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPointMultiRangeBuilder, add, METH_VARARGS),
          DECLARE_METHOD(t_FloatPointMultiRangeBuilder, build, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatPointMultiRangeBuilder)[] = {
          { Py_tp_methods, t_FloatPointMultiRangeBuilder__methods_ },
          { Py_tp_init, (void *) t_FloatPointMultiRangeBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatPointMultiRangeBuilder)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiRangeQuery$Builder),
          NULL
        };

        DEFINE_TYPE(FloatPointMultiRangeBuilder, t_FloatPointMultiRangeBuilder, FloatPointMultiRangeBuilder);

        void t_FloatPointMultiRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatPointMultiRangeBuilder), &PY_TYPE_DEF(FloatPointMultiRangeBuilder), module, "FloatPointMultiRangeBuilder", 0);
        }

        void t_FloatPointMultiRangeBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointMultiRangeBuilder), "class_", make_descriptor(FloatPointMultiRangeBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointMultiRangeBuilder), "wrapfn_", make_descriptor(t_FloatPointMultiRangeBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointMultiRangeBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatPointMultiRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_FloatPointMultiRangeBuilder::wrap_Object(FloatPointMultiRangeBuilder(((t_FloatPointMultiRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_FloatPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatPointMultiRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatPointMultiRangeBuilder_init_(t_FloatPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          FloatPointMultiRangeBuilder object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = FloatPointMultiRangeBuilder(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatPointMultiRangeBuilder_add(t_FloatPointMultiRangeBuilder *self, PyObject *args)
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FloatPointMultiRangeBuilder), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_FloatPointMultiRangeBuilder_build(t_FloatPointMultiRangeBuilder *self, PyObject *args)
        {
          ::org::apache::lucene::search::MultiRangeQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::search::t_MultiRangeQuery::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FloatPointMultiRangeBuilder), (PyObject *) self, "build", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TypeAsSynonymFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TypeAsSynonymFilter::class$ = NULL;
          jmethodID *TypeAsSynonymFilter::mids$ = NULL;
          bool TypeAsSynonymFilter::live$ = false;

          jclass TypeAsSynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TypeAsSynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_b047379931b7623e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_5f57d74e24fc5b35] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Ljava/util/Set;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsSynonymFilter::TypeAsSynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          TypeAsSynonymFilter::TypeAsSynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_b047379931b7623e, a0.this$, a1.this$)) {}

          TypeAsSynonymFilter::TypeAsSynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, const ::java::util::Set & a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_5f57d74e24fc5b35, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean TypeAsSynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void TypeAsSynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TypeAsSynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsSynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsSynonymFilter_init_(t_TypeAsSynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsSynonymFilter_incrementToken(t_TypeAsSynonymFilter *self, PyObject *args);
          static PyObject *t_TypeAsSynonymFilter_reset(t_TypeAsSynonymFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsSynonymFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsSynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsSynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsSynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TypeAsSynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAsSynonymFilter)[] = {
            { Py_tp_methods, t_TypeAsSynonymFilter__methods_ },
            { Py_tp_init, (void *) t_TypeAsSynonymFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAsSynonymFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TypeAsSynonymFilter, t_TypeAsSynonymFilter, TypeAsSynonymFilter);

          void t_TypeAsSynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsSynonymFilter), &PY_TYPE_DEF(TypeAsSynonymFilter), module, "TypeAsSynonymFilter", 0);
          }

          void t_TypeAsSynonymFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilter), "class_", make_descriptor(TypeAsSynonymFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilter), "wrapfn_", make_descriptor(t_TypeAsSynonymFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsSynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsSynonymFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsSynonymFilter::wrap_Object(TypeAsSynonymFilter(((t_TypeAsSynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsSynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsSynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsSynonymFilter_init_(t_TypeAsSynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                TypeAsSynonymFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = TypeAsSynonymFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                TypeAsSynonymFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = TypeAsSynonymFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                TypeAsSynonymFilter object((jobject) NULL);

                if (!parseArgs(args, "ksKI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = TypeAsSynonymFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsSynonymFilter_incrementToken(t_TypeAsSynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TypeAsSynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TypeAsSynonymFilter_reset(t_TypeAsSynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TypeAsSynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadEncoder::class$ = NULL;
          jmethodID *PayloadEncoder::mids$ = NULL;
          bool PayloadEncoder::live$ = false;

          jclass PayloadEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_064e0007331fe5ea] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_encode_785adfa8e7d32a0b] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_064e0007331fe5ea], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_785adfa8e7d32a0b], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args);

          static PyMethodDef t_PayloadEncoder__methods_[] = {
            DECLARE_METHOD(t_PayloadEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadEncoder)[] = {
            { Py_tp_methods, t_PayloadEncoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PayloadEncoder, t_PayloadEncoder, PayloadEncoder);

          void t_PayloadEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadEncoder), &PY_TYPE_DEF(PayloadEncoder), module, "PayloadEncoder", 0);
          }

          void t_PayloadEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadEncoder), "class_", make_descriptor(PayloadEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadEncoder), "wrapfn_", make_descriptor(t_PayloadEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadEncoder::initializeClass, 1)))
              return NULL;
            return t_PayloadEncoder::wrap_Object(PayloadEncoder(((t_PayloadEncoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.encode(a0));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encode(a0, a1, a2));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisiWrapper.h"
#include "org/apache/lucene/search/DisiWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisiWrapper::class$ = NULL;
        jmethodID *DisiWrapper::mids$ = NULL;
        jfieldID *DisiWrapper::fids$ = NULL;
        bool DisiWrapper::live$ = false;

        jclass DisiWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisiWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_85e03ccf00a30406] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_init$_ad2ce5bf0c6a2883] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/Spans;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_approximation] = env->getFieldID(cls, "approximation", "Lorg/apache/lucene/search/DocIdSetIterator;");
            fids$[fid_cost] = env->getFieldID(cls, "cost", "J");
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_iterator] = env->getFieldID(cls, "iterator", "Lorg/apache/lucene/search/DocIdSetIterator;");
            fids$[fid_lastApproxMatchDoc] = env->getFieldID(cls, "lastApproxMatchDoc", "I");
            fids$[fid_lastApproxNonMatchDoc] = env->getFieldID(cls, "lastApproxNonMatchDoc", "I");
            fids$[fid_matchCost] = env->getFieldID(cls, "matchCost", "F");
            fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/search/DisiWrapper;");
            fids$[fid_scorer] = env->getFieldID(cls, "scorer", "Lorg/apache/lucene/search/Scorer;");
            fids$[fid_spans] = env->getFieldID(cls, "spans", "Lorg/apache/lucene/search/spans/Spans;");
            fids$[fid_twoPhaseView] = env->getFieldID(cls, "twoPhaseView", "Lorg/apache/lucene/search/TwoPhaseIterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisiWrapper::DisiWrapper(const ::org::apache::lucene::search::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_85e03ccf00a30406, a0.this$)) {}

        DisiWrapper::DisiWrapper(const ::org::apache::lucene::search::spans::Spans & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ad2ce5bf0c6a2883, a0.this$)) {}

        ::org::apache::lucene::search::DocIdSetIterator DisiWrapper::_get_approximation() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->getObjectField(this$, fids$[fid_approximation]));
        }

        jlong DisiWrapper::_get_cost() const
        {
          return env->getLongField(this$, fids$[fid_cost]);
        }

        jint DisiWrapper::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void DisiWrapper::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        ::org::apache::lucene::search::DocIdSetIterator DisiWrapper::_get_iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->getObjectField(this$, fids$[fid_iterator]));
        }

        jint DisiWrapper::_get_lastApproxMatchDoc() const
        {
          return env->getIntField(this$, fids$[fid_lastApproxMatchDoc]);
        }

        void DisiWrapper::_set_lastApproxMatchDoc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lastApproxMatchDoc], a0);
        }

        jint DisiWrapper::_get_lastApproxNonMatchDoc() const
        {
          return env->getIntField(this$, fids$[fid_lastApproxNonMatchDoc]);
        }

        void DisiWrapper::_set_lastApproxNonMatchDoc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lastApproxNonMatchDoc], a0);
        }

        jfloat DisiWrapper::_get_matchCost() const
        {
          return env->getFloatField(this$, fids$[fid_matchCost]);
        }

        DisiWrapper DisiWrapper::_get_next() const
        {
          return DisiWrapper(env->getObjectField(this$, fids$[fid_next]));
        }

        void DisiWrapper::_set_next(const DisiWrapper & a0) const
        {
          env->setObjectField(this$, fids$[fid_next], a0.this$);
        }

        ::org::apache::lucene::search::Scorer DisiWrapper::_get_scorer() const
        {
          return ::org::apache::lucene::search::Scorer(env->getObjectField(this$, fids$[fid_scorer]));
        }

        ::org::apache::lucene::search::spans::Spans DisiWrapper::_get_spans() const
        {
          return ::org::apache::lucene::search::spans::Spans(env->getObjectField(this$, fids$[fid_spans]));
        }

        ::org::apache::lucene::search::TwoPhaseIterator DisiWrapper::_get_twoPhaseView() const
        {
          return ::org::apache::lucene::search::TwoPhaseIterator(env->getObjectField(this$, fids$[fid_twoPhaseView]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisiWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisiWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisiWrapper_init_(t_DisiWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisiWrapper_get__approximation(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__cost(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__doc(t_DisiWrapper *self, void *data);
        static int t_DisiWrapper_set__doc(t_DisiWrapper *self, PyObject *arg, void *data);
        static PyObject *t_DisiWrapper_get__iterator(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__lastApproxMatchDoc(t_DisiWrapper *self, void *data);
        static int t_DisiWrapper_set__lastApproxMatchDoc(t_DisiWrapper *self, PyObject *arg, void *data);
        static PyObject *t_DisiWrapper_get__lastApproxNonMatchDoc(t_DisiWrapper *self, void *data);
        static int t_DisiWrapper_set__lastApproxNonMatchDoc(t_DisiWrapper *self, PyObject *arg, void *data);
        static PyObject *t_DisiWrapper_get__matchCost(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__next(t_DisiWrapper *self, void *data);
        static int t_DisiWrapper_set__next(t_DisiWrapper *self, PyObject *arg, void *data);
        static PyObject *t_DisiWrapper_get__scorer(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__spans(t_DisiWrapper *self, void *data);
        static PyObject *t_DisiWrapper_get__twoPhaseView(t_DisiWrapper *self, void *data);

        static PyGetSetDef t_DisiWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_DisiWrapper, approximation),
          DECLARE_GET_FIELD(t_DisiWrapper, cost),
          DECLARE_GETSET_FIELD(t_DisiWrapper, doc),
          DECLARE_GET_FIELD(t_DisiWrapper, iterator),
          DECLARE_GETSET_FIELD(t_DisiWrapper, lastApproxMatchDoc),
          DECLARE_GETSET_FIELD(t_DisiWrapper, lastApproxNonMatchDoc),
          DECLARE_GET_FIELD(t_DisiWrapper, matchCost),
          DECLARE_GETSET_FIELD(t_DisiWrapper, next),
          DECLARE_GET_FIELD(t_DisiWrapper, scorer),
          DECLARE_GET_FIELD(t_DisiWrapper, spans),
          DECLARE_GET_FIELD(t_DisiWrapper, twoPhaseView),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisiWrapper__methods_[] = {
          DECLARE_METHOD(t_DisiWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisiWrapper, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DisiWrapper)[] = {
          { Py_tp_methods, t_DisiWrapper__methods_ },
          { Py_tp_init, (void *) t_DisiWrapper_init_ },
          { Py_tp_getset, t_DisiWrapper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DisiWrapper)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DisiWrapper, t_DisiWrapper, DisiWrapper);

        void t_DisiWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(DisiWrapper), &PY_TYPE_DEF(DisiWrapper), module, "DisiWrapper", 0);
        }

        void t_DisiWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiWrapper), "class_", make_descriptor(DisiWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiWrapper), "wrapfn_", make_descriptor(t_DisiWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisiWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisiWrapper::initializeClass, 1)))
            return NULL;
          return t_DisiWrapper::wrap_Object(DisiWrapper(((t_DisiWrapper *) arg)->object.this$));
        }
        static PyObject *t_DisiWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisiWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisiWrapper_init_(t_DisiWrapper *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);
              DisiWrapper object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                INT_CALL(object = DisiWrapper(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::spans::Spans a0((jobject) NULL);
              DisiWrapper object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::Spans::initializeClass, &a0))
              {
                INT_CALL(object = DisiWrapper(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisiWrapper_get__approximation(t_DisiWrapper *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSetIterator value((jobject) NULL);
          OBJ_CALL(value = self->object._get_approximation());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(value);
        }

        static PyObject *t_DisiWrapper_get__cost(t_DisiWrapper *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_cost());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_DisiWrapper_get__doc(t_DisiWrapper *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyLong_FromLong((long) value);
        }
        static int t_DisiWrapper_set__doc(t_DisiWrapper *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_DisiWrapper_get__iterator(t_DisiWrapper *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSetIterator value((jobject) NULL);
          OBJ_CALL(value = self->object._get_iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(value);
        }

        static PyObject *t_DisiWrapper_get__lastApproxMatchDoc(t_DisiWrapper *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lastApproxMatchDoc());
          return PyLong_FromLong((long) value);
        }
        static int t_DisiWrapper_set__lastApproxMatchDoc(t_DisiWrapper *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lastApproxMatchDoc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lastApproxMatchDoc", arg);
          return -1;
        }

        static PyObject *t_DisiWrapper_get__lastApproxNonMatchDoc(t_DisiWrapper *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lastApproxNonMatchDoc());
          return PyLong_FromLong((long) value);
        }
        static int t_DisiWrapper_set__lastApproxNonMatchDoc(t_DisiWrapper *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lastApproxNonMatchDoc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lastApproxNonMatchDoc", arg);
          return -1;
        }

        static PyObject *t_DisiWrapper_get__matchCost(t_DisiWrapper *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_matchCost());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_DisiWrapper_get__next(t_DisiWrapper *self, void *data)
        {
          DisiWrapper value((jobject) NULL);
          OBJ_CALL(value = self->object._get_next());
          return t_DisiWrapper::wrap_Object(value);
        }
        static int t_DisiWrapper_set__next(t_DisiWrapper *self, PyObject *arg, void *data)
        {
          DisiWrapper value((jobject) NULL);
          if (!parseArg(arg, "k", DisiWrapper::initializeClass, &value))
          {
            INT_CALL(self->object._set_next(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "next", arg);
          return -1;
        }

        static PyObject *t_DisiWrapper_get__scorer(t_DisiWrapper *self, void *data)
        {
          ::org::apache::lucene::search::Scorer value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scorer());
          return ::org::apache::lucene::search::t_Scorer::wrap_Object(value);
        }

        static PyObject *t_DisiWrapper_get__spans(t_DisiWrapper *self, void *data)
        {
          ::org::apache::lucene::search::spans::Spans value((jobject) NULL);
          OBJ_CALL(value = self->object._get_spans());
          return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(value);
        }

        static PyObject *t_DisiWrapper_get__twoPhaseView(t_DisiWrapper *self, void *data)
        {
          ::org::apache::lucene::search::TwoPhaseIterator value((jobject) NULL);
          OBJ_CALL(value = self->object._get_twoPhaseView());
          return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SingleInstanceLockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SingleInstanceLockFactory::class$ = NULL;
        jmethodID *SingleInstanceLockFactory::mids$ = NULL;
        bool SingleInstanceLockFactory::live$ = false;

        jclass SingleInstanceLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SingleInstanceLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleInstanceLockFactory::SingleInstanceLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::store::Lock SingleInstanceLockFactory::obtainLock(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_6aee55f49034dd72], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SingleInstanceLockFactory_obtainLock(t_SingleInstanceLockFactory *self, PyObject *args);

        static PyMethodDef t_SingleInstanceLockFactory__methods_[] = {
          DECLARE_METHOD(t_SingleInstanceLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, obtainLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SingleInstanceLockFactory)[] = {
          { Py_tp_methods, t_SingleInstanceLockFactory__methods_ },
          { Py_tp_init, (void *) t_SingleInstanceLockFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SingleInstanceLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::LockFactory),
          NULL
        };

        DEFINE_TYPE(SingleInstanceLockFactory, t_SingleInstanceLockFactory, SingleInstanceLockFactory);

        void t_SingleInstanceLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleInstanceLockFactory), &PY_TYPE_DEF(SingleInstanceLockFactory), module, "SingleInstanceLockFactory", 0);
        }

        void t_SingleInstanceLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleInstanceLockFactory), "class_", make_descriptor(SingleInstanceLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleInstanceLockFactory), "wrapfn_", make_descriptor(t_SingleInstanceLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SingleInstanceLockFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleInstanceLockFactory::initializeClass, 1)))
            return NULL;
          return t_SingleInstanceLockFactory::wrap_Object(SingleInstanceLockFactory(((t_SingleInstanceLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleInstanceLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds)
        {
          SingleInstanceLockFactory object((jobject) NULL);

          INT_CALL(object = SingleInstanceLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SingleInstanceLockFactory_obtainLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.obtainLock(a0, a1));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "obtainLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Distribution::class$ = NULL;
          jmethodID *Distribution::mids$ = NULL;
          bool Distribution::live$ = false;

          jclass Distribution::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Distribution");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Distribution::Distribution() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation Distribution::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble Distribution::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String Distribution::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args);

          static PyMethodDef t_Distribution__methods_[] = {
            DECLARE_METHOD(t_Distribution, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, explain, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, score, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Distribution)[] = {
            { Py_tp_methods, t_Distribution__methods_ },
            { Py_tp_init, (void *) t_Distribution_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Distribution)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Distribution, t_Distribution, Distribution);

          void t_Distribution::install(PyObject *module)
          {
            installType(&PY_TYPE(Distribution), &PY_TYPE_DEF(Distribution), module, "Distribution", 0);
          }

          void t_Distribution::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Distribution), "class_", make_descriptor(Distribution::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Distribution), "wrapfn_", make_descriptor(t_Distribution::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Distribution), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Distribution::initializeClass, 1)))
              return NULL;
            return t_Distribution::wrap_Object(Distribution(((t_Distribution *) arg)->object.this$));
          }
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Distribution::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds)
          {
            Distribution object((jobject) NULL);

            INT_CALL(object = Distribution());
            self->object = object;

            return 0;
          }

          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Distribution), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedDocValues::class$ = NULL;
        jmethodID *SortedDocValues::mids$ = NULL;
        bool SortedDocValues::live$ = false;

        jclass SortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_intersect_2452e24ae7d5129f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_lookupOrd_83238e65a54c68bb] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_1c2e5fa34f4312de] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_ordValue_9972fcc56b44e79d] = env->getMethodID(cls, "ordValue", "()I");
            mids$[mid_termsEnum_3f9a21827903a65f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        jint SortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_2452e24ae7d5129f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_83238e65a54c68bb], a0));
        }

        jint SortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_1c2e5fa34f4312de], a0.this$);
        }

        jint SortedDocValues::ordValue() const
        {
          return env->callIntMethod(this$, mids$[mid_ordValue_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_3f9a21827903a65f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_binaryValue(t_SortedDocValues *self, PyObject *args);
        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_intersect(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_ordValue(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data);
        static PyGetSetDef t_SortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, binaryValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, intersect, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedDocValues, ordValue, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedDocValues)[] = {
          { Py_tp_methods, t_SortedDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortedDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BinaryDocValues),
          NULL
        };

        DEFINE_TYPE(SortedDocValues, t_SortedDocValues, SortedDocValues);

        void t_SortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValues), &PY_TYPE_DEF(SortedDocValues), module, "SortedDocValues", 0);
        }

        void t_SortedDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValues), "class_", make_descriptor(SortedDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValues), "wrapfn_", make_descriptor(t_SortedDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedDocValues::wrap_Object(SortedDocValues(((t_SortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedDocValues_binaryValue(t_SortedDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.binaryValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedDocValues), (PyObject *) self, "binaryValue", args, 2);
        }

        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_intersect(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersect(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_ordValue(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.ordValue());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/IrishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *IrishStemmer::class$ = NULL;
        jmethodID *IrishStemmer::mids$ = NULL;
        bool IrishStemmer::live$ = false;

        jclass IrishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/IrishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IrishStemmer::IrishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean IrishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint IrishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean IrishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args);
        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args);

        static PyMethodDef t_IrishStemmer__methods_[] = {
          DECLARE_METHOD(t_IrishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IrishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IrishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IrishStemmer)[] = {
          { Py_tp_methods, t_IrishStemmer__methods_ },
          { Py_tp_init, (void *) t_IrishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IrishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(IrishStemmer, t_IrishStemmer, IrishStemmer);

        void t_IrishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IrishStemmer), &PY_TYPE_DEF(IrishStemmer), module, "IrishStemmer", 0);
        }

        void t_IrishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IrishStemmer), "class_", make_descriptor(IrishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IrishStemmer), "wrapfn_", make_descriptor(t_IrishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IrishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IrishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IrishStemmer::initializeClass, 1)))
            return NULL;
          return t_IrishStemmer::wrap_Object(IrishStemmer(((t_IrishStemmer *) arg)->object.this$));
        }
        static PyObject *t_IrishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IrishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IrishStemmer_init_(t_IrishStemmer *self, PyObject *args, PyObject *kwds)
        {
          IrishStemmer object((jobject) NULL);

          INT_CALL(object = IrishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_IrishStemmer_equals(t_IrishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IrishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IrishStemmer_hashCode(t_IrishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IrishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IrishStemmer_stem(t_IrishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IrishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/LatLonBounds.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *LatLonBounds::class$ = NULL;
          jmethodID *LatLonBounds::mids$ = NULL;
          bool LatLonBounds::live$ = false;

          jclass LatLonBounds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/LatLonBounds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addHorizontalPlane_de702abaccff8809] = env->getMethodID(cls, "addHorizontalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addIntersection_d5756c2a9618cc36] = env->getMethodID(cls, "addIntersection", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPlane_2c04f33e2d449d53] = env->getMethodID(cls, "addPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPoint_deac40038f0b88f4] = env->getMethodID(cls, "addPoint", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addVerticalPlane_de702abaccff8809] = env->getMethodID(cls, "addVerticalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addXValue_deac40038f0b88f4] = env->getMethodID(cls, "addXValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addYValue_deac40038f0b88f4] = env->getMethodID(cls, "addYValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addZValue_deac40038f0b88f4] = env->getMethodID(cls, "addZValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_checkNoBottomLatitudeBound_8454bd5aa23fd11e] = env->getMethodID(cls, "checkNoBottomLatitudeBound", "()Z");
              mids$[mid_checkNoLongitudeBound_8454bd5aa23fd11e] = env->getMethodID(cls, "checkNoLongitudeBound", "()Z");
              mids$[mid_checkNoTopLatitudeBound_8454bd5aa23fd11e] = env->getMethodID(cls, "checkNoTopLatitudeBound", "()Z");
              mids$[mid_getLeftLongitude_a3794238a110f68c] = env->getMethodID(cls, "getLeftLongitude", "()Ljava/lang/Double;");
              mids$[mid_getMaxLatitude_a3794238a110f68c] = env->getMethodID(cls, "getMaxLatitude", "()Ljava/lang/Double;");
              mids$[mid_getMinLatitude_a3794238a110f68c] = env->getMethodID(cls, "getMinLatitude", "()Ljava/lang/Double;");
              mids$[mid_getRightLongitude_a3794238a110f68c] = env->getMethodID(cls, "getRightLongitude", "()Ljava/lang/Double;");
              mids$[mid_isWide_6f0a6687d3a83671] = env->getMethodID(cls, "isWide", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noBottomLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBound_650181d6a64cb6dd] = env->getMethodID(cls, "noBound", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noLongitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noLongitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noTopLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noTopLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatLonBounds::LatLonBounds() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addHorizontalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addHorizontalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addIntersection(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addIntersection_d5756c2a9618cc36], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addPlane_2c04f33e2d449d53], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addPoint(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addPoint_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addVerticalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addVerticalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addXValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addXValue_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addYValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addYValue_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::addZValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addZValue_deac40038f0b88f4], a0.this$));
          }

          jboolean LatLonBounds::checkNoBottomLatitudeBound() const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkNoBottomLatitudeBound_8454bd5aa23fd11e]);
          }

          jboolean LatLonBounds::checkNoLongitudeBound() const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkNoLongitudeBound_8454bd5aa23fd11e]);
          }

          jboolean LatLonBounds::checkNoTopLatitudeBound() const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkNoTopLatitudeBound_8454bd5aa23fd11e]);
          }

          ::java::lang::Double LatLonBounds::getLeftLongitude() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getLeftLongitude_a3794238a110f68c]));
          }

          ::java::lang::Double LatLonBounds::getMaxLatitude() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaxLatitude_a3794238a110f68c]));
          }

          ::java::lang::Double LatLonBounds::getMinLatitude() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMinLatitude_a3794238a110f68c]));
          }

          ::java::lang::Double LatLonBounds::getRightLongitude() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getRightLongitude_a3794238a110f68c]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::isWide() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_isWide_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::noBottomLatitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::noBound(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noBound_650181d6a64cb6dd], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::noLongitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noLongitudeBound_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds LatLonBounds::noTopLatitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noTopLatitudeBound_6f0a6687d3a83671]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_LatLonBounds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatLonBounds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatLonBounds_init_(t_LatLonBounds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatLonBounds_addHorizontalPlane(t_LatLonBounds *self, PyObject *args);
          static PyObject *t_LatLonBounds_addIntersection(t_LatLonBounds *self, PyObject *args);
          static PyObject *t_LatLonBounds_addPlane(t_LatLonBounds *self, PyObject *args);
          static PyObject *t_LatLonBounds_addPoint(t_LatLonBounds *self, PyObject *arg);
          static PyObject *t_LatLonBounds_addVerticalPlane(t_LatLonBounds *self, PyObject *args);
          static PyObject *t_LatLonBounds_addXValue(t_LatLonBounds *self, PyObject *arg);
          static PyObject *t_LatLonBounds_addYValue(t_LatLonBounds *self, PyObject *arg);
          static PyObject *t_LatLonBounds_addZValue(t_LatLonBounds *self, PyObject *arg);
          static PyObject *t_LatLonBounds_checkNoBottomLatitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_checkNoLongitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_checkNoTopLatitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_getLeftLongitude(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_getMaxLatitude(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_getMinLatitude(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_getRightLongitude(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_isWide(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_noBottomLatitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_noBound(t_LatLonBounds *self, PyObject *arg);
          static PyObject *t_LatLonBounds_noLongitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_noTopLatitudeBound(t_LatLonBounds *self);
          static PyObject *t_LatLonBounds_get__leftLongitude(t_LatLonBounds *self, void *data);
          static PyObject *t_LatLonBounds_get__maxLatitude(t_LatLonBounds *self, void *data);
          static PyObject *t_LatLonBounds_get__minLatitude(t_LatLonBounds *self, void *data);
          static PyObject *t_LatLonBounds_get__rightLongitude(t_LatLonBounds *self, void *data);
          static PyObject *t_LatLonBounds_get__wide(t_LatLonBounds *self, void *data);
          static PyGetSetDef t_LatLonBounds__fields_[] = {
            DECLARE_GET_FIELD(t_LatLonBounds, leftLongitude),
            DECLARE_GET_FIELD(t_LatLonBounds, maxLatitude),
            DECLARE_GET_FIELD(t_LatLonBounds, minLatitude),
            DECLARE_GET_FIELD(t_LatLonBounds, rightLongitude),
            DECLARE_GET_FIELD(t_LatLonBounds, wide),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatLonBounds__methods_[] = {
            DECLARE_METHOD(t_LatLonBounds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatLonBounds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatLonBounds, addHorizontalPlane, METH_VARARGS),
            DECLARE_METHOD(t_LatLonBounds, addIntersection, METH_VARARGS),
            DECLARE_METHOD(t_LatLonBounds, addPlane, METH_VARARGS),
            DECLARE_METHOD(t_LatLonBounds, addPoint, METH_O),
            DECLARE_METHOD(t_LatLonBounds, addVerticalPlane, METH_VARARGS),
            DECLARE_METHOD(t_LatLonBounds, addXValue, METH_O),
            DECLARE_METHOD(t_LatLonBounds, addYValue, METH_O),
            DECLARE_METHOD(t_LatLonBounds, addZValue, METH_O),
            DECLARE_METHOD(t_LatLonBounds, checkNoBottomLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, checkNoLongitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, checkNoTopLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, getLeftLongitude, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, getMaxLatitude, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, getMinLatitude, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, getRightLongitude, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, isWide, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, noBottomLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, noBound, METH_O),
            DECLARE_METHOD(t_LatLonBounds, noLongitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_LatLonBounds, noTopLatitudeBound, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LatLonBounds)[] = {
            { Py_tp_methods, t_LatLonBounds__methods_ },
            { Py_tp_init, (void *) t_LatLonBounds_init_ },
            { Py_tp_getset, t_LatLonBounds__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LatLonBounds)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LatLonBounds, t_LatLonBounds, LatLonBounds);

          void t_LatLonBounds::install(PyObject *module)
          {
            installType(&PY_TYPE(LatLonBounds), &PY_TYPE_DEF(LatLonBounds), module, "LatLonBounds", 0);
          }

          void t_LatLonBounds::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBounds), "class_", make_descriptor(LatLonBounds::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBounds), "wrapfn_", make_descriptor(t_LatLonBounds::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBounds), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatLonBounds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatLonBounds::initializeClass, 1)))
              return NULL;
            return t_LatLonBounds::wrap_Object(LatLonBounds(((t_LatLonBounds *) arg)->object.this$));
          }
          static PyObject *t_LatLonBounds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatLonBounds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatLonBounds_init_(t_LatLonBounds *self, PyObject *args, PyObject *kwds)
          {
            LatLonBounds object((jobject) NULL);

            INT_CALL(object = LatLonBounds());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatLonBounds_addHorizontalPlane(t_LatLonBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addHorizontalPlane(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addHorizontalPlane", args);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addIntersection(t_LatLonBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addIntersection(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addIntersection", args);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addPlane(t_LatLonBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.addPlane(a0, a1, a2));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPlane", args);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addPoint(t_LatLonBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addPoint(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPoint", arg);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addVerticalPlane(t_LatLonBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addVerticalPlane(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addVerticalPlane", args);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addXValue(t_LatLonBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addXValue(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addXValue", arg);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addYValue(t_LatLonBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addYValue(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addYValue", arg);
            return NULL;
          }

          static PyObject *t_LatLonBounds_addZValue(t_LatLonBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addZValue(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addZValue", arg);
            return NULL;
          }

          static PyObject *t_LatLonBounds_checkNoBottomLatitudeBound(t_LatLonBounds *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.checkNoBottomLatitudeBound());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_LatLonBounds_checkNoLongitudeBound(t_LatLonBounds *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.checkNoLongitudeBound());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_LatLonBounds_checkNoTopLatitudeBound(t_LatLonBounds *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.checkNoTopLatitudeBound());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_LatLonBounds_getLeftLongitude(t_LatLonBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getLeftLongitude());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_getMaxLatitude(t_LatLonBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaxLatitude());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_getMinLatitude(t_LatLonBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMinLatitude());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_getRightLongitude(t_LatLonBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getRightLongitude());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_isWide(t_LatLonBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.isWide());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_noBottomLatitudeBound(t_LatLonBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noBottomLatitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_noBound(t_LatLonBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.noBound(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "noBound", arg);
            return NULL;
          }

          static PyObject *t_LatLonBounds_noLongitudeBound(t_LatLonBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noLongitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_noTopLatitudeBound(t_LatLonBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noTopLatitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_LatLonBounds_get__leftLongitude(t_LatLonBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getLeftLongitude());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_LatLonBounds_get__maxLatitude(t_LatLonBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaxLatitude());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_LatLonBounds_get__minLatitude(t_LatLonBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMinLatitude());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_LatLonBounds_get__rightLongitude(t_LatLonBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getRightLongitude());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_LatLonBounds_get__wide(t_LatLonBounds *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds value((jobject) NULL);
            OBJ_CALL(value = self->object.isWide());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/DecompoundToken.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *DecompoundToken::class$ = NULL;
          jmethodID *DecompoundToken::mids$ = NULL;
          bool DecompoundToken::live$ = false;

          jclass DecompoundToken::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/DecompoundToken");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_10df34893e27a5b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/POS$Tag;Ljava/lang/String;II)V");
              mids$[mid_getLeftPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getLeftPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_getMorphemes_82c5e27eed5fc4af] = env->getMethodID(cls, "getMorphemes", "()[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
              mids$[mid_getPOSType_6e8b69211f216c5e] = env->getMethodID(cls, "getPOSType", "()Lorg/apache/lucene/analysis/ko/POS$Type;");
              mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
              mids$[mid_getRightPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getRightPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DecompoundToken::DecompoundToken(const ::org::apache::lucene::analysis::ko::POS$Tag & a0, const ::java::lang::String & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::ko::Token(env->newObject(initializeClass, &mids$, mid_init$_10df34893e27a5b4, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::analysis::ko::POS$Tag DecompoundToken::getLeftPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_6d27d9f5e0d7f31a]));
          }

          JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > DecompoundToken::getMorphemes() const
          {
            return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_82c5e27eed5fc4af]));
          }

          ::org::apache::lucene::analysis::ko::POS$Type DecompoundToken::getPOSType() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_6e8b69211f216c5e]));
          }

          ::java::lang::String DecompoundToken::getReading() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::ko::POS$Tag DecompoundToken::getRightPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_6d27d9f5e0d7f31a]));
          }

          ::java::lang::String DecompoundToken::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_DecompoundToken_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DecompoundToken_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DecompoundToken_init_(t_DecompoundToken *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DecompoundToken_getLeftPOS(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_getMorphemes(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_getPOSType(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_getReading(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_getRightPOS(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_toString(t_DecompoundToken *self, PyObject *args);
          static PyObject *t_DecompoundToken_get__leftPOS(t_DecompoundToken *self, void *data);
          static PyObject *t_DecompoundToken_get__morphemes(t_DecompoundToken *self, void *data);
          static PyObject *t_DecompoundToken_get__pOSType(t_DecompoundToken *self, void *data);
          static PyObject *t_DecompoundToken_get__reading(t_DecompoundToken *self, void *data);
          static PyObject *t_DecompoundToken_get__rightPOS(t_DecompoundToken *self, void *data);
          static PyGetSetDef t_DecompoundToken__fields_[] = {
            DECLARE_GET_FIELD(t_DecompoundToken, leftPOS),
            DECLARE_GET_FIELD(t_DecompoundToken, morphemes),
            DECLARE_GET_FIELD(t_DecompoundToken, pOSType),
            DECLARE_GET_FIELD(t_DecompoundToken, reading),
            DECLARE_GET_FIELD(t_DecompoundToken, rightPOS),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DecompoundToken__methods_[] = {
            DECLARE_METHOD(t_DecompoundToken, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecompoundToken, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecompoundToken, getLeftPOS, METH_VARARGS),
            DECLARE_METHOD(t_DecompoundToken, getMorphemes, METH_VARARGS),
            DECLARE_METHOD(t_DecompoundToken, getPOSType, METH_VARARGS),
            DECLARE_METHOD(t_DecompoundToken, getReading, METH_VARARGS),
            DECLARE_METHOD(t_DecompoundToken, getRightPOS, METH_VARARGS),
            DECLARE_METHOD(t_DecompoundToken, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DecompoundToken)[] = {
            { Py_tp_methods, t_DecompoundToken__methods_ },
            { Py_tp_init, (void *) t_DecompoundToken_init_ },
            { Py_tp_getset, t_DecompoundToken__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DecompoundToken)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::ko::Token),
            NULL
          };

          DEFINE_TYPE(DecompoundToken, t_DecompoundToken, DecompoundToken);

          void t_DecompoundToken::install(PyObject *module)
          {
            installType(&PY_TYPE(DecompoundToken), &PY_TYPE_DEF(DecompoundToken), module, "DecompoundToken", 0);
          }

          void t_DecompoundToken::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecompoundToken), "class_", make_descriptor(DecompoundToken::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecompoundToken), "wrapfn_", make_descriptor(t_DecompoundToken::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecompoundToken), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DecompoundToken_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DecompoundToken::initializeClass, 1)))
              return NULL;
            return t_DecompoundToken::wrap_Object(DecompoundToken(((t_DecompoundToken *) arg)->object.this$));
          }
          static PyObject *t_DecompoundToken_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DecompoundToken::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DecompoundToken_init_(t_DecompoundToken *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            DecompoundToken object((jobject) NULL);

            if (!parseArgs(args, "KsII", ::org::apache::lucene::analysis::ko::POS$Tag::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::t_POS$Tag::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = DecompoundToken(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DecompoundToken_getLeftPOS(t_DecompoundToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "getLeftPOS", args, 2);
          }

          static PyObject *t_DecompoundToken_getMorphemes(t_DecompoundToken *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMorphemes());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "getMorphemes", args, 2);
          }

          static PyObject *t_DecompoundToken_getPOSType(t_DecompoundToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "getPOSType", args, 2);
          }

          static PyObject *t_DecompoundToken_getReading(t_DecompoundToken *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "getReading", args, 2);
          }

          static PyObject *t_DecompoundToken_getRightPOS(t_DecompoundToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "getRightPOS", args, 2);
          }

          static PyObject *t_DecompoundToken_toString(t_DecompoundToken *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DecompoundToken), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DecompoundToken_get__leftPOS(t_DecompoundToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getLeftPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }

          static PyObject *t_DecompoundToken_get__morphemes(t_DecompoundToken *self, void *data)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMorphemes());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
          }

          static PyObject *t_DecompoundToken_get__pOSType(t_DecompoundToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Type value((jobject) NULL);
            OBJ_CALL(value = self->object.getPOSType());
            return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(value);
          }

          static PyObject *t_DecompoundToken_get__reading(t_DecompoundToken *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getReading());
            return j2p(value);
          }

          static PyObject *t_DecompoundToken_get__rightPOS(t_DecompoundToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getRightPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionPostingsFormat$FSTLoadMode::class$ = NULL;
            jmethodID *CompletionPostingsFormat$FSTLoadMode::mids$ = NULL;
            bool CompletionPostingsFormat$FSTLoadMode::live$ = false;
            CompletionPostingsFormat$FSTLoadMode *CompletionPostingsFormat$FSTLoadMode::AUTO = NULL;
            CompletionPostingsFormat$FSTLoadMode *CompletionPostingsFormat$FSTLoadMode::OFF_HEAP = NULL;
            CompletionPostingsFormat$FSTLoadMode *CompletionPostingsFormat$FSTLoadMode::ON_HEAP = NULL;

            jclass CompletionPostingsFormat$FSTLoadMode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_d0f227f3d7d715d3] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;");
                mids$[mid_values_2f160673a65aef43] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                AUTO = new CompletionPostingsFormat$FSTLoadMode(env->getStaticObjectField(cls, "AUTO", "Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;"));
                OFF_HEAP = new CompletionPostingsFormat$FSTLoadMode(env->getStaticObjectField(cls, "OFF_HEAP", "Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;"));
                ON_HEAP = new CompletionPostingsFormat$FSTLoadMode(env->getStaticObjectField(cls, "ON_HEAP", "Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompletionPostingsFormat$FSTLoadMode CompletionPostingsFormat$FSTLoadMode::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return CompletionPostingsFormat$FSTLoadMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d0f227f3d7d715d3], a0.this$));
            }

            JArray< CompletionPostingsFormat$FSTLoadMode > CompletionPostingsFormat$FSTLoadMode::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< CompletionPostingsFormat$FSTLoadMode >(env->callStaticObjectMethod(cls, mids$[mid_values_2f160673a65aef43]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_of_(t_CompletionPostingsFormat$FSTLoadMode *self, PyObject *args);
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_values(PyTypeObject *type);
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_get__parameters_(t_CompletionPostingsFormat$FSTLoadMode *self, void *data);
            static PyGetSetDef t_CompletionPostingsFormat$FSTLoadMode__fields_[] = {
              DECLARE_GET_FIELD(t_CompletionPostingsFormat$FSTLoadMode, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionPostingsFormat$FSTLoadMode__methods_[] = {
              DECLARE_METHOD(t_CompletionPostingsFormat$FSTLoadMode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionPostingsFormat$FSTLoadMode, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionPostingsFormat$FSTLoadMode, of_, METH_VARARGS),
              DECLARE_METHOD(t_CompletionPostingsFormat$FSTLoadMode, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_CompletionPostingsFormat$FSTLoadMode, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionPostingsFormat$FSTLoadMode)[] = {
              { Py_tp_methods, t_CompletionPostingsFormat$FSTLoadMode__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CompletionPostingsFormat$FSTLoadMode__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionPostingsFormat$FSTLoadMode)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(CompletionPostingsFormat$FSTLoadMode, t_CompletionPostingsFormat$FSTLoadMode, CompletionPostingsFormat$FSTLoadMode);
            PyObject *t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(const CompletionPostingsFormat$FSTLoadMode& object, PyTypeObject *p0)
            {
              PyObject *obj = t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_CompletionPostingsFormat$FSTLoadMode *self = (t_CompletionPostingsFormat$FSTLoadMode *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_CompletionPostingsFormat$FSTLoadMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_CompletionPostingsFormat$FSTLoadMode::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_CompletionPostingsFormat$FSTLoadMode *self = (t_CompletionPostingsFormat$FSTLoadMode *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_CompletionPostingsFormat$FSTLoadMode::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionPostingsFormat$FSTLoadMode), &PY_TYPE_DEF(CompletionPostingsFormat$FSTLoadMode), module, "CompletionPostingsFormat$FSTLoadMode", 0);
            }

            void t_CompletionPostingsFormat$FSTLoadMode::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "class_", make_descriptor(CompletionPostingsFormat$FSTLoadMode::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "wrapfn_", make_descriptor(t_CompletionPostingsFormat$FSTLoadMode::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "boxfn_", make_descriptor(boxObject));
              env->getClass(CompletionPostingsFormat$FSTLoadMode::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "AUTO", make_descriptor(t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(*CompletionPostingsFormat$FSTLoadMode::AUTO)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "OFF_HEAP", make_descriptor(t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(*CompletionPostingsFormat$FSTLoadMode::OFF_HEAP)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat$FSTLoadMode), "ON_HEAP", make_descriptor(t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(*CompletionPostingsFormat$FSTLoadMode::ON_HEAP)));
            }

            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionPostingsFormat$FSTLoadMode::initializeClass, 1)))
                return NULL;
              return t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(CompletionPostingsFormat$FSTLoadMode(((t_CompletionPostingsFormat$FSTLoadMode *) arg)->object.this$));
            }
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionPostingsFormat$FSTLoadMode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_of_(t_CompletionPostingsFormat$FSTLoadMode *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              CompletionPostingsFormat$FSTLoadMode result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::valueOf(a0));
                return t_CompletionPostingsFormat$FSTLoadMode::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_values(PyTypeObject *type)
            {
              JArray< CompletionPostingsFormat$FSTLoadMode > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::values());
              return JArray<jobject>(result.this$).wrap(t_CompletionPostingsFormat$FSTLoadMode::wrap_jobject);
            }
            static PyObject *t_CompletionPostingsFormat$FSTLoadMode_get__parameters_(t_CompletionPostingsFormat$FSTLoadMode *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser::class$ = NULL;
          jmethodID *QueryParser::mids$ = NULL;
          jfieldID *QueryParser::fids$ = NULL;
          bool QueryParser::live$ = false;
          jboolean QueryParser::DEFAULT_SPLIT_ON_WHITESPACE = (jboolean) 0;

          jclass QueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_Clause_1cf26fcf5e3c5839] = env->getMethodID(cls, "Clause", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Conjunction_9972fcc56b44e79d] = env->getMethodID(cls, "Conjunction", "()I");
              mids$[mid_Modifiers_9972fcc56b44e79d] = env->getMethodID(cls, "Modifiers", "()I");
              mids$[mid_MultiTerm_67a5409e07e72e46] = env->getMethodID(cls, "MultiTerm", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Query_1cf26fcf5e3c5839] = env->getMethodID(cls, "Query", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_ReInit_af9967c2adfe3980] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;)V");
              mids$[mid_ReInit_94838218118d13bf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_Term_1cf26fcf5e3c5839] = env->getMethodID(cls, "Term", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_TopLevelQuery_1cf26fcf5e3c5839] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_disable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "disable_tracing", "()V");
              mids$[mid_enable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "enable_tracing", "()V");
              mids$[mid_generateParseException_d32a9653def49a8c] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/classic/ParseException;");
              mids$[mid_getNextToken_292e526b93f036e3] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_getSplitOnWhitespace_8454bd5aa23fd11e] = env->getMethodID(cls, "getSplitOnWhitespace", "()Z");
              mids$[mid_getToken_9e9a7409044819d9] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_setAutoGeneratePhraseQueries_9d72768e8fdce2b7] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setSplitOnWhitespace_9d72768e8fdce2b7] = env->getMethodID(cls, "setSplitOnWhitespace", "(Z)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_SPLIT_ON_WHITESPACE = env->getStaticBooleanField(cls, "DEFAULT_SPLIT_ON_WHITESPACE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser::QueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Query QueryParser::Clause(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Clause_1cf26fcf5e3c5839], a0.this$));
          }

          jint QueryParser::Conjunction() const
          {
            return env->callIntMethod(this$, mids$[mid_Conjunction_9972fcc56b44e79d]);
          }

          jint QueryParser::Modifiers() const
          {
            return env->callIntMethod(this$, mids$[mid_Modifiers_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query QueryParser::MultiTerm(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_MultiTerm_67a5409e07e72e46], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::Query(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Query_1cf26fcf5e3c5839], a0.this$));
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_af9967c2adfe3980], a0.this$);
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_94838218118d13bf], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParser::Term(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Term_1cf26fcf5e3c5839], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_1cf26fcf5e3c5839], a0.this$));
          }

          void QueryParser::disable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_disable_tracing_f2cc1bce94666404]);
          }

          void QueryParser::enable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_enable_tracing_f2cc1bce94666404]);
          }

          ::org::apache::lucene::queryparser::classic::ParseException QueryParser::generateParseException() const
          {
            return ::org::apache::lucene::queryparser::classic::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_d32a9653def49a8c]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_292e526b93f036e3]));
          }

          jboolean QueryParser::getSplitOnWhitespace() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getSplitOnWhitespace_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getToken(jint a0) const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getToken_9e9a7409044819d9], a0));
          }

          void QueryParser::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_9d72768e8fdce2b7], a0);
          }

          void QueryParser::setSplitOnWhitespace(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSplitOnWhitespace_9d72768e8fdce2b7], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_jj_nt() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
          }

          void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_token() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_token]));
          }

          void QueryParser::_set_token(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_token], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::QueryParserTokenManager QueryParser::_get_token_source() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
          }

          void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->setObjectField(this$, fids$[fid_token_source], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self);
          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self);
          static PyObject *t_QueryParser_MultiTerm(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
          static PyObject *t_QueryParser_getSplitOnWhitespace(t_QueryParser *self);
          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_setAutoGeneratePhraseQueries(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_setSplitOnWhitespace(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

          static int t_QueryParser_set__autoGeneratePhraseQueries(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
          static PyObject *t_QueryParser_get__splitOnWhitespace(t_QueryParser *self, void *data);
          static int t_QueryParser_set__splitOnWhitespace(t_QueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
            DECLARE_GETSET_FIELD(t_QueryParser, token),
            DECLARE_GETSET_FIELD(t_QueryParser, token_source),
            DECLARE_SET_FIELD(t_QueryParser, autoGeneratePhraseQueries),
            DECLARE_GET_FIELD(t_QueryParser, nextToken),
            DECLARE_GETSET_FIELD(t_QueryParser, splitOnWhitespace),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser__methods_[] = {
            DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, Clause, METH_O),
            DECLARE_METHOD(t_QueryParser, Conjunction, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Modifiers, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, MultiTerm, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Query, METH_O),
            DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Term, METH_O),
            DECLARE_METHOD(t_QueryParser, TopLevelQuery, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getSplitOnWhitespace, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getToken, METH_O),
            DECLARE_METHOD(t_QueryParser, setAutoGeneratePhraseQueries, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, setSplitOnWhitespace, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryParser)[] = {
            { Py_tp_methods, t_QueryParser__methods_ },
            { Py_tp_init, (void *) t_QueryParser_init_ },
            { Py_tp_getset, t_QueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::QueryParserBase),
            NULL
          };

          DEFINE_TYPE(QueryParser, t_QueryParser, QueryParser);

          void t_QueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser), &PY_TYPE_DEF(QueryParser), module, "QueryParser", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "Operator", make_descriptor(&PY_TYPE_DEF(QueryParser$Operator)));
          }

          void t_QueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "class_", make_descriptor(QueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser), "DEFAULT_SPLIT_ON_WHITESPACE", make_descriptor(QueryParser::DEFAULT_SPLIT_ON_WHITESPACE));
          }

          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
              return NULL;
            return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
          }
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            QueryParser object((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = QueryParser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Clause(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Clause", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Conjunction());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Modifiers());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_QueryParser_MultiTerm(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.MultiTerm(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "MultiTerm", args);
            return NULL;
          }

          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Query(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Query", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::QueryParserTokenManager a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(PY_TYPE(QueryParser), (PyObject *) self, "ReInit", args, 2);
          }

          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Term(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Term", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(QueryParser), (PyObject *) self, "TopLevelQuery", args, 2);
          }

          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.disable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.enable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::ParseException result((jobject) NULL);
            OBJ_CALL(result = self->object.generateParseException());
            return ::org::apache::lucene::queryparser::classic::t_ParseException::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getSplitOnWhitespace(t_QueryParser *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getSplitOnWhitespace());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_setAutoGeneratePhraseQueries(t_QueryParser *self, PyObject *args)
          {
            jboolean a0;

            if (!parseArgs(args, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(QueryParser), (PyObject *) self, "setAutoGeneratePhraseQueries", args, 2);
          }

          static PyObject *t_QueryParser_setSplitOnWhitespace(t_QueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setSplitOnWhitespace(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSplitOnWhitespace", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_jj_nt());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_jj_nt(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_token(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token_source());
            return ::org::apache::lucene::queryparser::classic::t_QueryParserTokenManager::wrap_Object(value);
          }
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &value))
            {
              INT_CALL(self->object._set_token_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token_source", arg);
            return -1;
          }

          static int t_QueryParser_set__autoGeneratePhraseQueries(t_QueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }

          static PyObject *t_QueryParser_get__splitOnWhitespace(t_QueryParser *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getSplitOnWhitespace());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParser_set__splitOnWhitespace(t_QueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setSplitOnWhitespace(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "splitOnWhitespace", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseAnalyzer::class$ = NULL;
          jmethodID *PortugueseAnalyzer::mids$ = NULL;
          bool PortugueseAnalyzer::live$ = false;
          ::java::lang::String *PortugueseAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PortugueseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseAnalyzer::PortugueseAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet PortugueseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data);
          static PyGetSetDef t_PortugueseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PortugueseAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PortugueseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PortugueseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseAnalyzer)[] = {
            { Py_tp_methods, t_PortugueseAnalyzer__methods_ },
            { Py_tp_init, (void *) t_PortugueseAnalyzer_init_ },
            { Py_tp_getset, t_PortugueseAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(PortugueseAnalyzer, t_PortugueseAnalyzer, PortugueseAnalyzer);

          void t_PortugueseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseAnalyzer), &PY_TYPE_DEF(PortugueseAnalyzer), module, "PortugueseAnalyzer", 0);
          }

          void t_PortugueseAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseAnalyzer), "class_", make_descriptor(PortugueseAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseAnalyzer), "wrapfn_", make_descriptor(t_PortugueseAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PortugueseAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PortugueseAnalyzer::wrap_Object(PortugueseAnalyzer(((t_PortugueseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PortugueseAnalyzer object((jobject) NULL);

                INT_CALL(object = PortugueseAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pt::PortugueseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersIndexInput.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/ByteBuffersIndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/ByteBuffersDataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersIndexInput::class$ = NULL;
        jmethodID *ByteBuffersIndexInput::mids$ = NULL;
        bool ByteBuffersIndexInput::live$ = false;

        jclass ByteBuffersIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0bcdfaabb86f2aa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/ByteBuffersDataInput;Ljava/lang/String;)V");
            mids$[mid_clone_831b777072456914] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_0b9b799a40079550] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_2cb00acb3a58ec31] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_694afffd0eb7dc3c] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_d711eecdc469624a] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readMapOfStrings_1c3426541413a55d] = env->getMethodID(cls, "readMapOfStrings", "()Ljava/util/Map;");
            mids$[mid_readSetOfStrings_7dcf4034c6d1a92a] = env->getMethodID(cls, "readSetOfStrings", "()Ljava/util/Set;");
            mids$[mid_readShort_ec20af88366b851e] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_e963ff2cc414b347] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readString_db9b55ba01e03e4b] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readVInt_9972fcc56b44e79d] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_readZInt_9972fcc56b44e79d] = env->getMethodID(cls, "readZInt", "()I");
            mids$[mid_readZLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readZLong", "()J");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_skipBytes_9c778c9bce6694df] = env->getMethodID(cls, "skipBytes", "(J)V");
            mids$[mid_slice_94359d6c0c7b0525] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/ByteBuffersIndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBuffersIndexInput::ByteBuffersIndexInput(const ::org::apache::lucene::store::ByteBuffersDataInput & a0, const ::java::lang::String & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_0bcdfaabb86f2aa7, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput ByteBuffersIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_831b777072456914]));
        }

        void ByteBuffersIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong ByteBuffersIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong ByteBuffersIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::store::RandomAccessInput ByteBuffersIndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_0b9b799a40079550], a0, a1));
        }

        jbyte ByteBuffersIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        jbyte ByteBuffersIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        void ByteBuffersIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void ByteBuffersIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_2cb00acb3a58ec31], a0.this$, a1, a2, a3);
        }

        jint ByteBuffersIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        jint ByteBuffersIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_694afffd0eb7dc3c], a0);
        }

        jlong ByteBuffersIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_2e5ae9edcb9b072f]);
        }

        jlong ByteBuffersIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_d711eecdc469624a], a0);
        }

        ::java::util::Map ByteBuffersIndexInput::readMapOfStrings() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readMapOfStrings_1c3426541413a55d]));
        }

        ::java::util::Set ByteBuffersIndexInput::readSetOfStrings() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readSetOfStrings_7dcf4034c6d1a92a]));
        }

        jshort ByteBuffersIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_ec20af88366b851e]);
        }

        jshort ByteBuffersIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_e963ff2cc414b347], a0);
        }

        ::java::lang::String ByteBuffersIndexInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_db9b55ba01e03e4b]));
        }

        jint ByteBuffersIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_9972fcc56b44e79d]);
        }

        jlong ByteBuffersIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_2e5ae9edcb9b072f]);
        }

        jint ByteBuffersIndexInput::readZInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readZInt_9972fcc56b44e79d]);
        }

        jlong ByteBuffersIndexInput::readZLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readZLong_2e5ae9edcb9b072f]);
        }

        void ByteBuffersIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        void ByteBuffersIndexInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_9c778c9bce6694df], a0);
        }

        ByteBuffersIndexInput ByteBuffersIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ByteBuffersIndexInput(env->callObjectMethod(this$, mids$[mid_slice_94359d6c0c7b0525], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBuffersIndexInput_init_(t_ByteBuffersIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBuffersIndexInput_clone(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_close(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_getFilePointer(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_length(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_randomAccessSlice(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readByte(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readBytes(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readInt(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readLong(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readMapOfStrings(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readSetOfStrings(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readShort(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readString(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readVInt(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readVLong(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readZInt(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_readZLong(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_seek(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_skipBytes(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_slice(t_ByteBuffersIndexInput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexInput_get__filePointer(t_ByteBuffersIndexInput *self, void *data);
        static PyGetSetDef t_ByteBuffersIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBuffersIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBuffersIndexInput__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readMapOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readSetOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readString, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readZInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, readZLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, skipBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersIndexInput)[] = {
          { Py_tp_methods, t_ByteBuffersIndexInput__methods_ },
          { Py_tp_init, (void *) t_ByteBuffersIndexInput_init_ },
          { Py_tp_getset, t_ByteBuffersIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexInput),
          NULL
        };

        DEFINE_TYPE(ByteBuffersIndexInput, t_ByteBuffersIndexInput, ByteBuffersIndexInput);

        void t_ByteBuffersIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersIndexInput), &PY_TYPE_DEF(ByteBuffersIndexInput), module, "ByteBuffersIndexInput", 0);
        }

        void t_ByteBuffersIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexInput), "class_", make_descriptor(ByteBuffersIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexInput), "wrapfn_", make_descriptor(t_ByteBuffersIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBuffersIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersIndexInput::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersIndexInput::wrap_Object(ByteBuffersIndexInput(((t_ByteBuffersIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBuffersIndexInput_init_(t_ByteBuffersIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::ByteBuffersDataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ByteBuffersIndexInput object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::ByteBuffersDataInput::initializeClass, &a0, &a1))
          {
            INT_CALL(object = ByteBuffersIndexInput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBuffersIndexInput_clone(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_close(t_ByteBuffersIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_getFilePointer(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_length(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_randomAccessSlice(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "randomAccessSlice", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readByte(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readBytes(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readInt(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readLong(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readMapOfStrings(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          ::java::util::Map result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readMapOfStrings());
            return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readMapOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readSetOfStrings(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readSetOfStrings());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readSetOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readShort(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readString(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readString", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readVInt(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readVLong(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readZInt(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readZInt());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readZInt", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_readZLong(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readZLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "readZLong", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_seek(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_skipBytes(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_slice(t_ByteBuffersIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ByteBuffersIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_ByteBuffersIndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_ByteBuffersIndexInput_get__filePointer(t_ByteBuffersIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MappedMultiFields.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MappedMultiFields::class$ = NULL;
        jmethodID *MappedMultiFields::mids$ = NULL;
        bool MappedMultiFields::live$ = false;

        jclass MappedMultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MappedMultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_aa917a5d70b7ffc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/MultiFields;)V");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappedMultiFields::MappedMultiFields(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::MultiFields & a1) : ::org::apache::lucene::index::FilterLeafReader$FilterFields(env->newObject(initializeClass, &mids$, mid_init$_aa917a5d70b7ffc3, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::Terms MappedMultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MappedMultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappedMultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappedMultiFields_init_(t_MappedMultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappedMultiFields_terms(t_MappedMultiFields *self, PyObject *args);

        static PyMethodDef t_MappedMultiFields__methods_[] = {
          DECLARE_METHOD(t_MappedMultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappedMultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappedMultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MappedMultiFields)[] = {
          { Py_tp_methods, t_MappedMultiFields__methods_ },
          { Py_tp_init, (void *) t_MappedMultiFields_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MappedMultiFields)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader$FilterFields),
          NULL
        };

        DEFINE_TYPE(MappedMultiFields, t_MappedMultiFields, MappedMultiFields);

        void t_MappedMultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MappedMultiFields), &PY_TYPE_DEF(MappedMultiFields), module, "MappedMultiFields", 0);
        }

        void t_MappedMultiFields::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MappedMultiFields), "class_", make_descriptor(MappedMultiFields::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MappedMultiFields), "wrapfn_", make_descriptor(t_MappedMultiFields::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MappedMultiFields), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappedMultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappedMultiFields::initializeClass, 1)))
            return NULL;
          return t_MappedMultiFields::wrap_Object(MappedMultiFields(((t_MappedMultiFields *) arg)->object.this$));
        }
        static PyObject *t_MappedMultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappedMultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappedMultiFields_init_(t_MappedMultiFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::MultiFields a1((jobject) NULL);
          MappedMultiFields object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::MultiFields::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MappedMultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MappedMultiFields_terms(t_MappedMultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MappedMultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/CharacterDefinition.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/dict/CharacterDefinition.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *CharacterDefinition::class$ = NULL;
            jmethodID *CharacterDefinition::mids$ = NULL;
            bool CharacterDefinition::live$ = false;
            jbyte CharacterDefinition::ALPHA = (jbyte) 0;
            jint CharacterDefinition::CLASS_COUNT = (jint) 0;
            jbyte CharacterDefinition::CYRILLIC = (jbyte) 0;
            jbyte CharacterDefinition::DEFAULT = (jbyte) 0;
            ::java::lang::String *CharacterDefinition::FILENAME_SUFFIX = NULL;
            jbyte CharacterDefinition::GREEK = (jbyte) 0;
            ::java::lang::String *CharacterDefinition::HEADER = NULL;
            jbyte CharacterDefinition::HIRAGANA = (jbyte) 0;
            jbyte CharacterDefinition::KANJI = (jbyte) 0;
            jbyte CharacterDefinition::KANJINUMERIC = (jbyte) 0;
            jbyte CharacterDefinition::KATAKANA = (jbyte) 0;
            jbyte CharacterDefinition::NGRAM = (jbyte) 0;
            jbyte CharacterDefinition::NUMERIC = (jbyte) 0;
            jbyte CharacterDefinition::SPACE = (jbyte) 0;
            jbyte CharacterDefinition::SYMBOL = (jbyte) 0;
            jint CharacterDefinition::VERSION = (jint) 0;

            jclass CharacterDefinition::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/CharacterDefinition");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getCharacterClass_920874b8f5998fce] = env->getMethodID(cls, "getCharacterClass", "(C)B");
                mids$[mid_getInstance_130a12a2a5322fc2] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ja/dict/CharacterDefinition;");
                mids$[mid_isGroup_540573ecd04ffc16] = env->getMethodID(cls, "isGroup", "(C)Z");
                mids$[mid_isInvoke_540573ecd04ffc16] = env->getMethodID(cls, "isInvoke", "(C)Z");
                mids$[mid_isKanji_540573ecd04ffc16] = env->getMethodID(cls, "isKanji", "(C)Z");
                mids$[mid_lookupCharacterClass_5cc1cc3ee6dabd77] = env->getStaticMethodID(cls, "lookupCharacterClass", "(Ljava/lang/String;)B");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticByteField(cls, "ALPHA");
                CLASS_COUNT = env->getStaticIntField(cls, "CLASS_COUNT");
                CYRILLIC = env->getStaticByteField(cls, "CYRILLIC");
                DEFAULT = env->getStaticByteField(cls, "DEFAULT");
                FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FILENAME_SUFFIX", "Ljava/lang/String;"));
                GREEK = env->getStaticByteField(cls, "GREEK");
                HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "HEADER", "Ljava/lang/String;"));
                HIRAGANA = env->getStaticByteField(cls, "HIRAGANA");
                KANJI = env->getStaticByteField(cls, "KANJI");
                KANJINUMERIC = env->getStaticByteField(cls, "KANJINUMERIC");
                KATAKANA = env->getStaticByteField(cls, "KATAKANA");
                NGRAM = env->getStaticByteField(cls, "NGRAM");
                NUMERIC = env->getStaticByteField(cls, "NUMERIC");
                SPACE = env->getStaticByteField(cls, "SPACE");
                SYMBOL = env->getStaticByteField(cls, "SYMBOL");
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jbyte CharacterDefinition::getCharacterClass(jchar a0) const
            {
              return env->callByteMethod(this$, mids$[mid_getCharacterClass_920874b8f5998fce], a0);
            }

            CharacterDefinition CharacterDefinition::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return CharacterDefinition(env->callStaticObjectMethod(cls, mids$[mid_getInstance_130a12a2a5322fc2]));
            }

            jboolean CharacterDefinition::isGroup(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isGroup_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isInvoke(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isInvoke_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isKanji(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isKanji_540573ecd04ffc16], a0);
            }

            jbyte CharacterDefinition::lookupCharacterClass(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticByteMethod(cls, mids$[mid_lookupCharacterClass_5cc1cc3ee6dabd77], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_CharacterDefinition_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_getCharacterClass(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_getInstance(PyTypeObject *type);
            static PyObject *t_CharacterDefinition_isGroup(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isInvoke(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isKanji(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_lookupCharacterClass(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_get__instance(t_CharacterDefinition *self, void *data);
            static PyGetSetDef t_CharacterDefinition__fields_[] = {
              DECLARE_GET_FIELD(t_CharacterDefinition, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharacterDefinition__methods_[] = {
              DECLARE_METHOD(t_CharacterDefinition, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, getCharacterClass, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, getInstance, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, isGroup, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isInvoke, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isKanji, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, lookupCharacterClass, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CharacterDefinition)[] = {
              { Py_tp_methods, t_CharacterDefinition__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CharacterDefinition__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CharacterDefinition)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CharacterDefinition, t_CharacterDefinition, CharacterDefinition);

            void t_CharacterDefinition::install(PyObject *module)
            {
              installType(&PY_TYPE(CharacterDefinition), &PY_TYPE_DEF(CharacterDefinition), module, "CharacterDefinition", 0);
            }

            void t_CharacterDefinition::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "class_", make_descriptor(CharacterDefinition::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "wrapfn_", make_descriptor(t_CharacterDefinition::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "boxfn_", make_descriptor(boxObject));
              env->getClass(CharacterDefinition::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "ALPHA", make_descriptor(CharacterDefinition::ALPHA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "CLASS_COUNT", make_descriptor(CharacterDefinition::CLASS_COUNT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "CYRILLIC", make_descriptor(CharacterDefinition::CYRILLIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "DEFAULT", make_descriptor(CharacterDefinition::DEFAULT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "FILENAME_SUFFIX", make_descriptor(j2p(*CharacterDefinition::FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "GREEK", make_descriptor(CharacterDefinition::GREEK));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HEADER", make_descriptor(j2p(*CharacterDefinition::HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HIRAGANA", make_descriptor(CharacterDefinition::HIRAGANA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "KANJI", make_descriptor(CharacterDefinition::KANJI));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "KANJINUMERIC", make_descriptor(CharacterDefinition::KANJINUMERIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "KATAKANA", make_descriptor(CharacterDefinition::KATAKANA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "NGRAM", make_descriptor(CharacterDefinition::NGRAM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "NUMERIC", make_descriptor(CharacterDefinition::NUMERIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "SPACE", make_descriptor(CharacterDefinition::SPACE));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "SYMBOL", make_descriptor(CharacterDefinition::SYMBOL));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "VERSION", make_descriptor(CharacterDefinition::VERSION));
            }

            static PyObject *t_CharacterDefinition_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharacterDefinition::initializeClass, 1)))
                return NULL;
              return t_CharacterDefinition::wrap_Object(CharacterDefinition(((t_CharacterDefinition *) arg)->object.this$));
            }
            static PyObject *t_CharacterDefinition_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharacterDefinition::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharacterDefinition_getCharacterClass(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jbyte result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.getCharacterClass(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getCharacterClass", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_getInstance(PyTypeObject *type)
            {
              CharacterDefinition result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::CharacterDefinition::getInstance());
              return t_CharacterDefinition::wrap_Object(result);
            }

            static PyObject *t_CharacterDefinition_isGroup(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isGroup(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isGroup", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isInvoke(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isInvoke(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isInvoke", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isKanji(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isKanji(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isKanji", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_lookupCharacterClass(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jbyte result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::CharacterDefinition::lookupCharacterClass(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError(type, "lookupCharacterClass", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_get__instance(t_CharacterDefinition *self, void *data)
            {
              CharacterDefinition value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_CharacterDefinition::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap::class$ = NULL;
          jmethodID *NormalizeCharMap::mids$ = NULL;
          bool NormalizeCharMap::live$ = false;

          jclass NormalizeCharMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_NormalizeCharMap__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizeCharMap)[] = {
            { Py_tp_methods, t_NormalizeCharMap__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizeCharMap)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NormalizeCharMap, t_NormalizeCharMap, NormalizeCharMap);

          void t_NormalizeCharMap::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap), &PY_TYPE_DEF(NormalizeCharMap), module, "NormalizeCharMap", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap), "Builder", make_descriptor(&PY_TYPE_DEF(NormalizeCharMap$Builder)));
          }

          void t_NormalizeCharMap::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap), "class_", make_descriptor(NormalizeCharMap::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap), "wrapfn_", make_descriptor(t_NormalizeCharMap::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap::wrap_Object(NormalizeCharMap(((t_NormalizeCharMap *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/minhash/MinHashFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace minhash {

          ::java::lang::Class *MinHashFilter::class$ = NULL;
          jmethodID *MinHashFilter::mids$ = NULL;
          bool MinHashFilter::live$ = false;
          jint MinHashFilter::DEFAULT_BUCKET_COUNT = (jint) 0;
          jint MinHashFilter::DEFAULT_HASH_COUNT = (jint) 0;
          jint MinHashFilter::DEFAULT_HASH_SET_SIZE = (jint) 0;

          jclass MinHashFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/minhash/MinHashFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2db48f5e4913850] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IIIZ)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUCKET_COUNT = env->getStaticIntField(cls, "DEFAULT_BUCKET_COUNT");
              DEFAULT_HASH_COUNT = env->getStaticIntField(cls, "DEFAULT_HASH_COUNT");
              DEFAULT_HASH_SET_SIZE = env->getStaticIntField(cls, "DEFAULT_HASH_SET_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinHashFilter::MinHashFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_b2db48f5e4913850, a0.this$, a1, a2, a3, a4)) {}

          void MinHashFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean MinHashFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void MinHashFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace minhash {
          static PyObject *t_MinHashFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinHashFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinHashFilter_init_(t_MinHashFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinHashFilter_end(t_MinHashFilter *self, PyObject *args);
          static PyObject *t_MinHashFilter_incrementToken(t_MinHashFilter *self, PyObject *args);
          static PyObject *t_MinHashFilter_reset(t_MinHashFilter *self, PyObject *args);

          static PyMethodDef t_MinHashFilter__methods_[] = {
            DECLARE_METHOD(t_MinHashFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinHashFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinHashFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_MinHashFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_MinHashFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MinHashFilter)[] = {
            { Py_tp_methods, t_MinHashFilter__methods_ },
            { Py_tp_init, (void *) t_MinHashFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MinHashFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(MinHashFilter, t_MinHashFilter, MinHashFilter);

          void t_MinHashFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MinHashFilter), &PY_TYPE_DEF(MinHashFilter), module, "MinHashFilter", 0);
          }

          void t_MinHashFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "class_", make_descriptor(MinHashFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "wrapfn_", make_descriptor(t_MinHashFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(MinHashFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "DEFAULT_BUCKET_COUNT", make_descriptor(MinHashFilter::DEFAULT_BUCKET_COUNT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "DEFAULT_HASH_COUNT", make_descriptor(MinHashFilter::DEFAULT_HASH_COUNT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilter), "DEFAULT_HASH_SET_SIZE", make_descriptor(MinHashFilter::DEFAULT_HASH_SET_SIZE));
          }

          static PyObject *t_MinHashFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinHashFilter::initializeClass, 1)))
              return NULL;
            return t_MinHashFilter::wrap_Object(MinHashFilter(((t_MinHashFilter *) arg)->object.this$));
          }
          static PyObject *t_MinHashFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinHashFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinHashFilter_init_(t_MinHashFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jboolean a4;
            MinHashFilter object((jobject) NULL);

            if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = MinHashFilter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MinHashFilter_end(t_MinHashFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MinHashFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_MinHashFilter_incrementToken(t_MinHashFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MinHashFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_MinHashFilter_reset(t_MinHashFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MinHashFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Directory::class$ = NULL;
        jmethodID *Directory::mids$ = NULL;
        bool Directory::live$ = false;

        jclass Directory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Directory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copyFrom_a0726436aec3a466] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openChecksumInput_a7bd8e668fef7eee] = env->getMethodID(cls, "openChecksumInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/ChecksumIndexInput;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getTempFileName_1ccae75d8ea483b8] = env->getStaticMethodID(cls, "getTempFileName", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Directory::Directory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void Directory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void Directory::copyFrom(const Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_a0726436aec3a466], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput Directory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput Directory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void Directory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong Directory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::java::util::Set Directory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        JArray< ::java::lang::String > Directory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::Lock Directory::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        ::org::apache::lucene::store::ChecksumIndexInput Directory::openChecksumInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::ChecksumIndexInput(env->callObjectMethod(this$, mids$[mid_openChecksumInput_a7bd8e668fef7eee], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput Directory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        void Directory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void Directory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void Directory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }

        ::java::lang::String Directory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Directory_close(t_Directory *self);
        static PyObject *t_Directory_copyFrom(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createTempOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_getPendingDeletions(t_Directory *self);
        static PyObject *t_Directory_listAll(t_Directory *self);
        static PyObject *t_Directory_obtainLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_rename(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_syncMetaData(t_Directory *self);
        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_get__pendingDeletions(t_Directory *self, void *data);
        static PyGetSetDef t_Directory__fields_[] = {
          DECLARE_GET_FIELD(t_Directory, pendingDeletions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Directory__methods_[] = {
          DECLARE_METHOD(t_Directory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, close, METH_NOARGS),
          DECLARE_METHOD(t_Directory, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, deleteFile, METH_O),
          DECLARE_METHOD(t_Directory, fileLength, METH_O),
          DECLARE_METHOD(t_Directory, getPendingDeletions, METH_NOARGS),
          DECLARE_METHOD(t_Directory, listAll, METH_NOARGS),
          DECLARE_METHOD(t_Directory, obtainLock, METH_O),
          DECLARE_METHOD(t_Directory, openChecksumInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, rename, METH_VARARGS),
          DECLARE_METHOD(t_Directory, sync, METH_O),
          DECLARE_METHOD(t_Directory, syncMetaData, METH_NOARGS),
          DECLARE_METHOD(t_Directory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Directory)[] = {
          { Py_tp_methods, t_Directory__methods_ },
          { Py_tp_init, (void *) t_Directory_init_ },
          { Py_tp_getset, t_Directory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Directory)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Directory, t_Directory, Directory);

        void t_Directory::install(PyObject *module)
        {
          installType(&PY_TYPE(Directory), &PY_TYPE_DEF(Directory), module, "Directory", 0);
        }

        void t_Directory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Directory), "class_", make_descriptor(Directory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Directory), "wrapfn_", make_descriptor(t_Directory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Directory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Directory::initializeClass, 1)))
            return NULL;
          return t_Directory::wrap_Object(Directory(((t_Directory *) arg)->object.this$));
        }
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Directory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds)
        {
          Directory object((jobject) NULL);

          INT_CALL(object = Directory());
          self->object = object;

          return 0;
        }

        static PyObject *t_Directory_close(t_Directory *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_copyFrom(t_Directory *self, PyObject *args)
        {
          Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copyFrom(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", args);
          return NULL;
        }

        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_createTempOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createTempOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "deleteFile", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileLength", arg);
          return NULL;
        }

        static PyObject *t_Directory_getPendingDeletions(t_Directory *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Directory_listAll(t_Directory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listAll());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Directory_obtainLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "obtainLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::ChecksumIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openChecksumInput(a0, a1));
            return ::org::apache::lucene::store::t_ChecksumIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openChecksumInput", args);
          return NULL;
        }

        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openInput", args);
          return NULL;
        }

        static PyObject *t_Directory_rename(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "rename", args);
          return NULL;
        }

        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sync", arg);
          return NULL;
        }

        static PyObject *t_Directory_syncMetaData(t_Directory *self)
        {
          OBJ_CALL(self->object.syncMetaData());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Directory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Directory_get__pendingDeletions(t_Directory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Tessellator$Triangle.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Tessellator$Triangle::class$ = NULL;
        jmethodID *Tessellator$Triangle::mids$ = NULL;
        bool Tessellator$Triangle::live$ = false;

        jclass Tessellator$Triangle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Tessellator$Triangle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getEncodedX_1e143afe1894d213] = env->getMethodID(cls, "getEncodedX", "(I)I");
            mids$[mid_getEncodedY_1e143afe1894d213] = env->getMethodID(cls, "getEncodedY", "(I)I");
            mids$[mid_getX_f3ddedc0b6f18620] = env->getMethodID(cls, "getX", "(I)D");
            mids$[mid_getY_f3ddedc0b6f18620] = env->getMethodID(cls, "getY", "(I)D");
            mids$[mid_isEdgefromPolygon_a1d30e1ee40c89a2] = env->getMethodID(cls, "isEdgefromPolygon", "(I)Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_containsPoint_c5da2349848862f7] = env->getMethodID(cls, "containsPoint", "(DD)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint Tessellator$Triangle::getEncodedX(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getEncodedX_1e143afe1894d213], a0);
        }

        jint Tessellator$Triangle::getEncodedY(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getEncodedY_1e143afe1894d213], a0);
        }

        jdouble Tessellator$Triangle::getX(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getX_f3ddedc0b6f18620], a0);
        }

        jdouble Tessellator$Triangle::getY(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getY_f3ddedc0b6f18620], a0);
        }

        jboolean Tessellator$Triangle::isEdgefromPolygon(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEdgefromPolygon_a1d30e1ee40c89a2], a0);
        }

        ::java::lang::String Tessellator$Triangle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Tessellator$Triangle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_getEncodedX(t_Tessellator$Triangle *self, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_getEncodedY(t_Tessellator$Triangle *self, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_getX(t_Tessellator$Triangle *self, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_getY(t_Tessellator$Triangle *self, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_isEdgefromPolygon(t_Tessellator$Triangle *self, PyObject *arg);
        static PyObject *t_Tessellator$Triangle_toString(t_Tessellator$Triangle *self, PyObject *args);

        static PyMethodDef t_Tessellator$Triangle__methods_[] = {
          DECLARE_METHOD(t_Tessellator$Triangle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tessellator$Triangle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tessellator$Triangle, getEncodedX, METH_O),
          DECLARE_METHOD(t_Tessellator$Triangle, getEncodedY, METH_O),
          DECLARE_METHOD(t_Tessellator$Triangle, getX, METH_O),
          DECLARE_METHOD(t_Tessellator$Triangle, getY, METH_O),
          DECLARE_METHOD(t_Tessellator$Triangle, isEdgefromPolygon, METH_O),
          DECLARE_METHOD(t_Tessellator$Triangle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Tessellator$Triangle)[] = {
          { Py_tp_methods, t_Tessellator$Triangle__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Tessellator$Triangle)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Tessellator$Triangle, t_Tessellator$Triangle, Tessellator$Triangle);

        void t_Tessellator$Triangle::install(PyObject *module)
        {
          installType(&PY_TYPE(Tessellator$Triangle), &PY_TYPE_DEF(Tessellator$Triangle), module, "Tessellator$Triangle", 0);
        }

        void t_Tessellator$Triangle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator$Triangle), "class_", make_descriptor(Tessellator$Triangle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator$Triangle), "wrapfn_", make_descriptor(t_Tessellator$Triangle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator$Triangle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tessellator$Triangle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tessellator$Triangle::initializeClass, 1)))
            return NULL;
          return t_Tessellator$Triangle::wrap_Object(Tessellator$Triangle(((t_Tessellator$Triangle *) arg)->object.this$));
        }
        static PyObject *t_Tessellator$Triangle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tessellator$Triangle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tessellator$Triangle_getEncodedX(t_Tessellator$Triangle *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getEncodedX(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getEncodedX", arg);
          return NULL;
        }

        static PyObject *t_Tessellator$Triangle_getEncodedY(t_Tessellator$Triangle *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getEncodedY(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getEncodedY", arg);
          return NULL;
        }

        static PyObject *t_Tessellator$Triangle_getX(t_Tessellator$Triangle *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getX(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getX", arg);
          return NULL;
        }

        static PyObject *t_Tessellator$Triangle_getY(t_Tessellator$Triangle *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getY(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getY", arg);
          return NULL;
        }

        static PyObject *t_Tessellator$Triangle_isEdgefromPolygon(t_Tessellator$Triangle *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.isEdgefromPolygon(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEdgefromPolygon", arg);
          return NULL;
        }

        static PyObject *t_Tessellator$Triangle_toString(t_Tessellator$Triangle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Tessellator$Triangle), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoader::class$ = NULL;
          jmethodID *ResourceLoader::mids$ = NULL;
          bool ResourceLoader::live$ = false;

          jclass ResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findClass_bc8a5b553c7b1ff7] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_72d9f700c083286f] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_f9a3577e7bead470] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Class ResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_bc8a5b553c7b1ff7], a0.this$, a1.this$));
          }

          ::java::lang::Object ResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_72d9f700c083286f], a0.this$, a1.this$));
          }

          ::java::io::InputStream ResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_f9a3577e7bead470], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ResourceLoader)[] = {
            { Py_tp_methods, t_ResourceLoader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ResourceLoader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ResourceLoader, t_ResourceLoader, ResourceLoader);

          void t_ResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoader), &PY_TYPE_DEF(ResourceLoader), module, "ResourceLoader", 0);
          }

          void t_ResourceLoader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoader), "class_", make_descriptor(ResourceLoader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoader), "wrapfn_", make_descriptor(t_ResourceLoader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ResourceLoader::wrap_Object(ResourceLoader(((t_ResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Impact.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Impact::class$ = NULL;
        jmethodID *Impact::mids$ = NULL;
        jfieldID *Impact::fids$ = NULL;
        bool Impact::live$ = false;

        jclass Impact::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Impact");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7b2f5b9ddfcb9416] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
            fids$[fid_norm] = env->getFieldID(cls, "norm", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Impact::Impact(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7b2f5b9ddfcb9416, a0, a1)) {}

        jboolean Impact::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint Impact::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String Impact::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint Impact::_get_freq() const
        {
          return env->getIntField(this$, fids$[fid_freq]);
        }

        void Impact::_set_freq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_freq], a0);
        }

        jlong Impact::_get_norm() const
        {
          return env->getLongField(this$, fids$[fid_norm]);
        }

        void Impact::_set_norm(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_norm], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Impact_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Impact_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Impact_init_(t_Impact *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Impact_equals(t_Impact *self, PyObject *args);
        static PyObject *t_Impact_hashCode(t_Impact *self, PyObject *args);
        static PyObject *t_Impact_toString(t_Impact *self, PyObject *args);
        static PyObject *t_Impact_get__freq(t_Impact *self, void *data);
        static int t_Impact_set__freq(t_Impact *self, PyObject *arg, void *data);
        static PyObject *t_Impact_get__norm(t_Impact *self, void *data);
        static int t_Impact_set__norm(t_Impact *self, PyObject *arg, void *data);

        static PyGetSetDef t_Impact__fields_[] = {
          DECLARE_GETSET_FIELD(t_Impact, freq),
          DECLARE_GETSET_FIELD(t_Impact, norm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Impact__methods_[] = {
          DECLARE_METHOD(t_Impact, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Impact, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Impact, equals, METH_VARARGS),
          DECLARE_METHOD(t_Impact, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Impact, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Impact)[] = {
          { Py_tp_methods, t_Impact__methods_ },
          { Py_tp_init, (void *) t_Impact_init_ },
          { Py_tp_getset, t_Impact__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Impact)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Impact, t_Impact, Impact);

        void t_Impact::install(PyObject *module)
        {
          installType(&PY_TYPE(Impact), &PY_TYPE_DEF(Impact), module, "Impact", 0);
        }

        void t_Impact::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impact), "class_", make_descriptor(Impact::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impact), "wrapfn_", make_descriptor(t_Impact::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impact), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Impact_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Impact::initializeClass, 1)))
            return NULL;
          return t_Impact::wrap_Object(Impact(((t_Impact *) arg)->object.this$));
        }
        static PyObject *t_Impact_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Impact::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Impact_init_(t_Impact *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          Impact object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = Impact(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Impact_equals(t_Impact *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Impact), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Impact_hashCode(t_Impact *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Impact), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Impact_toString(t_Impact *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Impact), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Impact_get__freq(t_Impact *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_freq());
          return PyLong_FromLong((long) value);
        }
        static int t_Impact_set__freq(t_Impact *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_freq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "freq", arg);
          return -1;
        }

        static PyObject *t_Impact_get__norm(t_Impact *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_norm());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_Impact_set__norm(t_Impact *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_norm(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "norm", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNearBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNearBuilder::class$ = NULL;
            jmethodID *SpanNearBuilder::mids$ = NULL;
            bool SpanNearBuilder::live$ = false;

            jclass SpanNearBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNearBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a59cd39e7afcbd2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearBuilder::SpanNearBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_a59cd39e7afcbd2c, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNearBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNearBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanNearBuilder)[] = {
              { Py_tp_methods, t_SpanNearBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanNearBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanNearBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanNearBuilder, t_SpanNearBuilder, SpanNearBuilder);

            void t_SpanNearBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearBuilder), &PY_TYPE_DEF(SpanNearBuilder), module, "SpanNearBuilder", 0);
            }

            void t_SpanNearBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearBuilder), "class_", make_descriptor(SpanNearBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearBuilder), "wrapfn_", make_descriptor(t_SpanNearBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNearBuilder::wrap_Object(SpanNearBuilder(((t_SpanNearBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNearBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearBuilder_init_(t_SpanNearBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNearBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNearBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilter.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapanesePartOfSpeechStopFilter::class$ = NULL;
          jmethodID *JapanesePartOfSpeechStopFilter::mids$ = NULL;
          bool JapanesePartOfSpeechStopFilter::live$ = false;

          jclass JapanesePartOfSpeechStopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59f4cbc95aff88bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapanesePartOfSpeechStopFilter::JapanesePartOfSpeechStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_59f4cbc95aff88bf, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapanesePartOfSpeechStopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapanesePartOfSpeechStopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapanesePartOfSpeechStopFilter_init_(t_JapanesePartOfSpeechStopFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JapanesePartOfSpeechStopFilter__methods_[] = {
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapanesePartOfSpeechStopFilter)[] = {
            { Py_tp_methods, t_JapanesePartOfSpeechStopFilter__methods_ },
            { Py_tp_init, (void *) t_JapanesePartOfSpeechStopFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapanesePartOfSpeechStopFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(JapanesePartOfSpeechStopFilter, t_JapanesePartOfSpeechStopFilter, JapanesePartOfSpeechStopFilter);

          void t_JapanesePartOfSpeechStopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapanesePartOfSpeechStopFilter), &PY_TYPE_DEF(JapanesePartOfSpeechStopFilter), module, "JapanesePartOfSpeechStopFilter", 0);
          }

          void t_JapanesePartOfSpeechStopFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilter), "class_", make_descriptor(JapanesePartOfSpeechStopFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilter), "wrapfn_", make_descriptor(t_JapanesePartOfSpeechStopFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapanesePartOfSpeechStopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapanesePartOfSpeechStopFilter::initializeClass, 1)))
              return NULL;
            return t_JapanesePartOfSpeechStopFilter::wrap_Object(JapanesePartOfSpeechStopFilter(((t_JapanesePartOfSpeechStopFilter *) arg)->object.this$));
          }
          static PyObject *t_JapanesePartOfSpeechStopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapanesePartOfSpeechStopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapanesePartOfSpeechStopFilter_init_(t_JapanesePartOfSpeechStopFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            JapanesePartOfSpeechStopFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
            {
              INT_CALL(object = JapanesePartOfSpeechStopFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/StrDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *StrDocValues::class$ = NULL;
            jmethodID *StrDocValues::mids$ = NULL;
            bool StrDocValues::live$ = false;

            jclass StrDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/StrDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StrDocValues::StrDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jboolean StrDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller StrDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            ::java::lang::Object StrDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            ::java::lang::String StrDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String StrDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data);
            static PyGetSetDef t_StrDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_StrDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StrDocValues__methods_[] = {
              DECLARE_METHOD(t_StrDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(StrDocValues)[] = {
              { Py_tp_methods, t_StrDocValues__methods_ },
              { Py_tp_init, (void *) t_StrDocValues_init_ },
              { Py_tp_getset, t_StrDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(StrDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(StrDocValues, t_StrDocValues, StrDocValues);

            void t_StrDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(StrDocValues), &PY_TYPE_DEF(StrDocValues), module, "StrDocValues", 0);
            }

            void t_StrDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(StrDocValues), "class_", make_descriptor(StrDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(StrDocValues), "wrapfn_", make_descriptor(t_StrDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(StrDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StrDocValues::initializeClass, 1)))
                return NULL;
              return t_StrDocValues::wrap_Object(StrDocValues(((t_StrDocValues *) arg)->object.this$));
            }
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StrDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              StrDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = StrDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(StrDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(StrDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(StrDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(StrDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(StrDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs::class$ = NULL;
          jmethodID *PairOutputs::mids$ = NULL;
          bool PairOutputs::live$ = false;

          jclass PairOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5f96e338a4fa75e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_50ad5ecdcd1a2e61] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_common_50ad5ecdcd1a2e61] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_getNoOutput_64341ee2fa4b0034] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_newPair_6b46d5b4309ea1ca] = env->getMethodID(cls, "newPair", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_outputToString_8223744c3559b348] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_903d65b2a4a9d6a8] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)J");
              mids$[mid_read_698be66946d41810] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_50ad5ecdcd1a2e61] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_796f606ff5189284] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PairOutputs::PairOutputs(const ::org::apache::lucene::util::fst::Outputs & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_5f96e338a4fa75e6, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::add(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_add_50ad5ecdcd1a2e61], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::common(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_common_50ad5ecdcd1a2e61], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_getNoOutput_64341ee2fa4b0034]));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::newPair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_newPair_6b46d5b4309ea1ca], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::outputToString(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_8223744c3559b348], a0.this$));
          }

          jlong PairOutputs::ramBytesUsed(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_903d65b2a4a9d6a8], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_read_698be66946d41810], a0.this$));
          }

          void PairOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::subtract(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_subtract_50ad5ecdcd1a2e61], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void PairOutputs::write(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_796f606ff5189284], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args);
          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data);
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data);
          static PyGetSetDef t_PairOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs, noOutput),
            DECLARE_GET_FIELD(t_PairOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs__methods_[] = {
            DECLARE_METHOD(t_PairOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, newPair, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PairOutputs)[] = {
            { Py_tp_methods, t_PairOutputs__methods_ },
            { Py_tp_init, (void *) t_PairOutputs_init_ },
            { Py_tp_getset, t_PairOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PairOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(PairOutputs, t_PairOutputs, PairOutputs);
          PyObject *t_PairOutputs::wrap_Object(const PairOutputs& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs), &PY_TYPE_DEF(PairOutputs), module, "PairOutputs", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs), "Pair", make_descriptor(&PY_TYPE_DEF(PairOutputs$Pair)));
          }

          void t_PairOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs), "class_", make_descriptor(PairOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs), "wrapfn_", make_descriptor(t_PairOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs::initializeClass, 1)))
              return NULL;
            return t_PairOutputs::wrap_Object(PairOutputs(((t_PairOutputs *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            PairOutputs object((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = PairOutputs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
              OBJ_CALL(result = self->object.newPair(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            PyErr_SetArgsError((PyObject *) self, "newPair", args);
            return NULL;
          }

          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            jlong result;

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PairOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AndQueryNode::class$ = NULL;
              jmethodID *AndQueryNode::mids$ = NULL;
              bool AndQueryNode::live$ = false;

              jclass AndQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AndQueryNode::AndQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

              ::java::lang::CharSequence AndQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String AndQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args);
              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args);

              static PyMethodDef t_AndQueryNode__methods_[] = {
                DECLARE_METHOD(t_AndQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AndQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AndQueryNode)[] = {
                { Py_tp_methods, t_AndQueryNode__methods_ },
                { Py_tp_init, (void *) t_AndQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AndQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode),
                NULL
              };

              DEFINE_TYPE(AndQueryNode, t_AndQueryNode, AndQueryNode);

              void t_AndQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AndQueryNode), &PY_TYPE_DEF(AndQueryNode), module, "AndQueryNode", 0);
              }

              void t_AndQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AndQueryNode), "class_", make_descriptor(AndQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AndQueryNode), "wrapfn_", make_descriptor(t_AndQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AndQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AndQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AndQueryNode::wrap_Object(AndQueryNode(((t_AndQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AndQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                AndQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = AndQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AndQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(AndQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataOutput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataOutput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataOutput::live$ = false;

        jclass PagedBytes$PagedBytesDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2cdab95a0fa206a0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes;)V");
            mids$[mid_getPosition_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataOutput::PagedBytes$PagedBytesDataOutput(const ::org::apache::lucene::util::PagedBytes & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_2cdab95a0fa206a0, a0.this$)) {}

        jlong PagedBytes$PagedBytesDataOutput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_2e5ae9edcb9b072f]);
        }

        void PagedBytes$PagedBytesDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void PagedBytes$PagedBytesDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes$PagedBytesDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataOutput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PagedBytes$PagedBytesDataOutput)[] = {
          { Py_tp_methods, t_PagedBytes$PagedBytesDataOutput__methods_ },
          { Py_tp_init, (void *) t_PagedBytes$PagedBytesDataOutput_init_ },
          { Py_tp_getset, t_PagedBytes$PagedBytesDataOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PagedBytes$PagedBytesDataOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput, PagedBytes$PagedBytesDataOutput);

        void t_PagedBytes$PagedBytesDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataOutput), &PY_TYPE_DEF(PagedBytes$PagedBytesDataOutput), module, "PagedBytes$PagedBytesDataOutput", 0);
        }

        void t_PagedBytes$PagedBytesDataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataOutput), "class_", make_descriptor(PagedBytes$PagedBytesDataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataOutput), "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataOutput::wrap_Object(PagedBytes$PagedBytesDataOutput(((t_PagedBytes$PagedBytesDataOutput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes a0((jobject) NULL);
          PagedBytes$PagedBytesDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::PagedBytes::initializeClass, &a0))
          {
            INT_CALL(object = PagedBytes$PagedBytesDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/index/IndexRearranger$DocumentSelector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {

          ::java::lang::Class *IndexRearranger$DocumentSelector::class$ = NULL;
          jmethodID *IndexRearranger$DocumentSelector::mids$ = NULL;
          bool IndexRearranger$DocumentSelector::live$ = false;

          jclass IndexRearranger$DocumentSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/misc/index/IndexRearranger$DocumentSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFilteredLiveDocs_f08bfd32ceb5c39a] = env->getMethodID(cls, "getFilteredLiveDocs", "(Lorg/apache/lucene/index/CodecReader;)Lorg/apache/lucene/util/BitSet;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BitSet IndexRearranger$DocumentSelector::getFilteredLiveDocs(const ::org::apache::lucene::index::CodecReader & a0) const
          {
            return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_getFilteredLiveDocs_f08bfd32ceb5c39a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {
          static PyObject *t_IndexRearranger$DocumentSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexRearranger$DocumentSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexRearranger$DocumentSelector_getFilteredLiveDocs(t_IndexRearranger$DocumentSelector *self, PyObject *arg);

          static PyMethodDef t_IndexRearranger$DocumentSelector__methods_[] = {
            DECLARE_METHOD(t_IndexRearranger$DocumentSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexRearranger$DocumentSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexRearranger$DocumentSelector, getFilteredLiveDocs, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexRearranger$DocumentSelector)[] = {
            { Py_tp_methods, t_IndexRearranger$DocumentSelector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexRearranger$DocumentSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndexRearranger$DocumentSelector, t_IndexRearranger$DocumentSelector, IndexRearranger$DocumentSelector);

          void t_IndexRearranger$DocumentSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexRearranger$DocumentSelector), &PY_TYPE_DEF(IndexRearranger$DocumentSelector), module, "IndexRearranger$DocumentSelector", 0);
          }

          void t_IndexRearranger$DocumentSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger$DocumentSelector), "class_", make_descriptor(IndexRearranger$DocumentSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger$DocumentSelector), "wrapfn_", make_descriptor(t_IndexRearranger$DocumentSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger$DocumentSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexRearranger$DocumentSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexRearranger$DocumentSelector::initializeClass, 1)))
              return NULL;
            return t_IndexRearranger$DocumentSelector::wrap_Object(IndexRearranger$DocumentSelector(((t_IndexRearranger$DocumentSelector *) arg)->object.this$));
          }
          static PyObject *t_IndexRearranger$DocumentSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexRearranger$DocumentSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IndexRearranger$DocumentSelector_getFilteredLiveDocs(t_IndexRearranger$DocumentSelector *self, PyObject *arg)
          {
            ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
            ::org::apache::lucene::util::BitSet result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFilteredLiveDocs(a0));
              return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilteredLiveDocs", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Rescorer::class$ = NULL;
        jmethodID *Rescorer::mids$ = NULL;
        bool Rescorer::live$ = false;

        jclass Rescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Rescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_explain_57f4be869b47d9c5] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_41c4bd8204dbae81] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rescorer::Rescorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::Explanation Rescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_57f4be869b47d9c5], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs Rescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_41c4bd8204dbae81], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args);
        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args);

        static PyMethodDef t_Rescorer__methods_[] = {
          DECLARE_METHOD(t_Rescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_Rescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Rescorer)[] = {
          { Py_tp_methods, t_Rescorer__methods_ },
          { Py_tp_init, (void *) t_Rescorer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Rescorer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Rescorer, t_Rescorer, Rescorer);

        void t_Rescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Rescorer), &PY_TYPE_DEF(Rescorer), module, "Rescorer", 0);
        }

        void t_Rescorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rescorer), "class_", make_descriptor(Rescorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rescorer), "wrapfn_", make_descriptor(t_Rescorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rescorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rescorer::initializeClass, 1)))
            return NULL;
          return t_Rescorer::wrap_Object(Rescorer(((t_Rescorer *) arg)->object.this$));
        }
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds)
        {
          Rescorer object((jobject) NULL);

          INT_CALL(object = Rescorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rescore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *BasicQueryFactory::class$ = NULL;
            jmethodID *BasicQueryFactory::mids$ = NULL;
            bool BasicQueryFactory::live$ = false;

            jclass BasicQueryFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/BasicQueryFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getMaxBasicQueries_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxBasicQueries", "()I");
                mids$[mid_getNrQueriesMade_9972fcc56b44e79d] = env->getMethodID(cls, "getNrQueriesMade", "()I");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_newSpanTermQuery_0193cf0ff30cbd57] = env->getMethodID(cls, "newSpanTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/spans/SpanTermQuery;");
                mids$[mid_newTermQuery_cad4074aebeba958] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/TermQuery;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_checkMax_f2cc1bce94666404] = env->getMethodID(cls, "checkMax", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BasicQueryFactory::BasicQueryFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            BasicQueryFactory::BasicQueryFactory(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

            jboolean BasicQueryFactory::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint BasicQueryFactory::getMaxBasicQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxBasicQueries_9972fcc56b44e79d]);
            }

            jint BasicQueryFactory::getNrQueriesMade() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrQueriesMade_9972fcc56b44e79d]);
            }

            jint BasicQueryFactory::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::org::apache::lucene::search::spans::SpanTermQuery BasicQueryFactory::newSpanTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::spans::SpanTermQuery(env->callObjectMethod(this$, mids$[mid_newSpanTermQuery_0193cf0ff30cbd57], a0.this$));
            }

            ::org::apache::lucene::search::TermQuery BasicQueryFactory::newTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_newTermQuery_cad4074aebeba958], a0.this$));
            }

            ::java::lang::String BasicQueryFactory::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data);
            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data);
            static PyGetSetDef t_BasicQueryFactory__fields_[] = {
              DECLARE_GET_FIELD(t_BasicQueryFactory, maxBasicQueries),
              DECLARE_GET_FIELD(t_BasicQueryFactory, nrQueriesMade),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BasicQueryFactory__methods_[] = {
              DECLARE_METHOD(t_BasicQueryFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, equals, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getMaxBasicQueries, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getNrQueriesMade, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, newSpanTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, newTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BasicQueryFactory)[] = {
              { Py_tp_methods, t_BasicQueryFactory__methods_ },
              { Py_tp_init, (void *) t_BasicQueryFactory_init_ },
              { Py_tp_getset, t_BasicQueryFactory__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BasicQueryFactory)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(BasicQueryFactory, t_BasicQueryFactory, BasicQueryFactory);

            void t_BasicQueryFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(BasicQueryFactory), &PY_TYPE_DEF(BasicQueryFactory), module, "BasicQueryFactory", 0);
            }

            void t_BasicQueryFactory::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BasicQueryFactory), "class_", make_descriptor(BasicQueryFactory::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BasicQueryFactory), "wrapfn_", make_descriptor(t_BasicQueryFactory::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BasicQueryFactory), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BasicQueryFactory::initializeClass, 1)))
                return NULL;
              return t_BasicQueryFactory::wrap_Object(BasicQueryFactory(((t_BasicQueryFactory *) arg)->object.this$));
            }
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BasicQueryFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  BasicQueryFactory object((jobject) NULL);

                  INT_CALL(object = BasicQueryFactory());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  jint a0;
                  BasicQueryFactory object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = BasicQueryFactory(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(BasicQueryFactory), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxBasicQueries());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrQueriesMade());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(BasicQueryFactory), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::spans::SpanTermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newSpanTermQuery(a0));
                return ::org::apache::lucene::search::spans::t_SpanTermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newSpanTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::TermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newTermQuery(a0));
                return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(BasicQueryFactory), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxBasicQueries());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrQueriesMade());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemmer::class$ = NULL;
          jmethodID *GreekStemmer::mids$ = NULL;
          bool GreekStemmer::live$ = false;

          jclass GreekStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemmer::GreekStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint GreekStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args);

          static PyMethodDef t_GreekStemmer__methods_[] = {
            DECLARE_METHOD(t_GreekStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekStemmer)[] = {
            { Py_tp_methods, t_GreekStemmer__methods_ },
            { Py_tp_init, (void *) t_GreekStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GreekStemmer, t_GreekStemmer, GreekStemmer);

          void t_GreekStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemmer), &PY_TYPE_DEF(GreekStemmer), module, "GreekStemmer", 0);
          }

          void t_GreekStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemmer), "class_", make_descriptor(GreekStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemmer), "wrapfn_", make_descriptor(t_GreekStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemmer::initializeClass, 1)))
              return NULL;
            return t_GreekStemmer::wrap_Object(GreekStemmer(((t_GreekStemmer *) arg)->object.this$));
          }
          static PyObject *t_GreekStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemmer_init_(t_GreekStemmer *self, PyObject *args, PyObject *kwds)
          {
            GreekStemmer object((jobject) NULL);

            INT_CALL(object = GreekStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GreekStemmer_stem(t_GreekStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilder::class$ = NULL;
          jmethodID *QueryBuilder::mids$ = NULL;
          bool QueryBuilder::live$ = false;

          jclass QueryBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilder");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryBuilder__methods_[] = {
            DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryBuilder)[] = {
            { Py_tp_methods, t_QueryBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryBuilder, t_QueryBuilder, QueryBuilder);

          void t_QueryBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilder), &PY_TYPE_DEF(QueryBuilder), module, "QueryBuilder", 0);
          }

          void t_QueryBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "class_", make_descriptor(QueryBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
              return NULL;
            return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/SecurityException.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/Package.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/String.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/ClassLoader.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Class::class$ = NULL;
    jmethodID *Class::mids$ = NULL;
    bool Class::live$ = false;

    jclass Class::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Class");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asSubclass_d70fa93adb782e25] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
        mids$[mid_cast_e5ae0f8c04795fa9] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_desiredAssertionStatus_8454bd5aa23fd11e] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
        mids$[mid_forName_337d52b895d55b49] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        mids$[mid_forName_b391b4759aaedbd0] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
        mids$[mid_getCanonicalName_db9b55ba01e03e4b] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
        mids$[mid_getClassLoader_62052cb9b95d8b0c] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getClasses_2e0bbcab33cbe6ec] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
        mids$[mid_getComponentType_9df2cc6ebce035fe] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
        mids$[mid_getDeclaredClasses_2e0bbcab33cbe6ec] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
        mids$[mid_getDeclaringClass_9df2cc6ebce035fe] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_getEnclosingClass_9df2cc6ebce035fe] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
        mids$[mid_getEnumConstants_6becf78ffd87a9bc] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
        mids$[mid_getInterfaces_2e0bbcab33cbe6ec] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
        mids$[mid_getModifiers_9972fcc56b44e79d] = env->getMethodID(cls, "getModifiers", "()I");
        mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPackage_e23660d0b401e60d] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
        mids$[mid_getResourceAsStream_f9a3577e7bead470] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
        mids$[mid_getSigners_6becf78ffd87a9bc] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
        mids$[mid_getSimpleName_db9b55ba01e03e4b] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
        mids$[mid_getSuperclass_9df2cc6ebce035fe] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
        mids$[mid_getTypeName_db9b55ba01e03e4b] = env->getMethodID(cls, "getTypeName", "()Ljava/lang/String;");
        mids$[mid_isAnnotation_8454bd5aa23fd11e] = env->getMethodID(cls, "isAnnotation", "()Z");
        mids$[mid_isAnonymousClass_8454bd5aa23fd11e] = env->getMethodID(cls, "isAnonymousClass", "()Z");
        mids$[mid_isArray_8454bd5aa23fd11e] = env->getMethodID(cls, "isArray", "()Z");
        mids$[mid_isAssignableFrom_a895c7f53785ebe6] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
        mids$[mid_isEnum_8454bd5aa23fd11e] = env->getMethodID(cls, "isEnum", "()Z");
        mids$[mid_isInstance_8b72f2dcdde6fd1d] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
        mids$[mid_isInterface_8454bd5aa23fd11e] = env->getMethodID(cls, "isInterface", "()Z");
        mids$[mid_isLocalClass_8454bd5aa23fd11e] = env->getMethodID(cls, "isLocalClass", "()Z");
        mids$[mid_isMemberClass_8454bd5aa23fd11e] = env->getMethodID(cls, "isMemberClass", "()Z");
        mids$[mid_isPrimitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isPrimitive", "()Z");
        mids$[mid_isSynthetic_8454bd5aa23fd11e] = env->getMethodID(cls, "isSynthetic", "()Z");
        mids$[mid_newInstance_d6bcd06f3102c4d9] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
        mids$[mid_toGenericString_db9b55ba01e03e4b] = env->getMethodID(cls, "toGenericString", "()Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Class Class::asSubclass(const Class & a0) const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_d70fa93adb782e25], a0.this$));
    }

    ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_e5ae0f8c04795fa9], a0.this$));
    }

    jboolean Class::desiredAssertionStatus() const
    {
      return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_8454bd5aa23fd11e]);
    }

    Class Class::forName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_337d52b895d55b49], a0.this$));
    }

    Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_b391b4759aaedbd0], a0.this$, a1, a2.this$));
    }

    ::java::lang::String Class::getCanonicalName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_db9b55ba01e03e4b]));
    }

    ::java::lang::ClassLoader Class::getClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_62052cb9b95d8b0c]));
    }

    JArray< Class > Class::getClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_2e0bbcab33cbe6ec]));
    }

    Class Class::getComponentType() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_9df2cc6ebce035fe]));
    }

    JArray< Class > Class::getDeclaredClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_2e0bbcab33cbe6ec]));
    }

    Class Class::getDeclaringClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_9df2cc6ebce035fe]));
    }

    Class Class::getEnclosingClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_9df2cc6ebce035fe]));
    }

    JArray< ::java::lang::Object > Class::getEnumConstants() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_6becf78ffd87a9bc]));
    }

    JArray< Class > Class::getInterfaces() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_2e0bbcab33cbe6ec]));
    }

    jint Class::getModifiers() const
    {
      return env->callIntMethod(this$, mids$[mid_getModifiers_9972fcc56b44e79d]);
    }

    ::java::lang::String Class::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
    }

    ::java::lang::Package Class::getPackage() const
    {
      return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_e23660d0b401e60d]));
    }

    ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_f9a3577e7bead470], a0.this$));
    }

    JArray< ::java::lang::Object > Class::getSigners() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_6becf78ffd87a9bc]));
    }

    ::java::lang::String Class::getSimpleName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_db9b55ba01e03e4b]));
    }

    Class Class::getSuperclass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_9df2cc6ebce035fe]));
    }

    ::java::lang::String Class::getTypeName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTypeName_db9b55ba01e03e4b]));
    }

    jboolean Class::isAnnotation() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnnotation_8454bd5aa23fd11e]);
    }

    jboolean Class::isAnonymousClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_8454bd5aa23fd11e]);
    }

    jboolean Class::isArray() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isArray_8454bd5aa23fd11e]);
    }

    jboolean Class::isAssignableFrom(const Class & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a895c7f53785ebe6], a0.this$);
    }

    jboolean Class::isEnum() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEnum_8454bd5aa23fd11e]);
    }

    jboolean Class::isInstance(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInstance_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean Class::isInterface() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterface_8454bd5aa23fd11e]);
    }

    jboolean Class::isLocalClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLocalClass_8454bd5aa23fd11e]);
    }

    jboolean Class::isMemberClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isMemberClass_8454bd5aa23fd11e]);
    }

    jboolean Class::isPrimitive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isPrimitive_8454bd5aa23fd11e]);
    }

    jboolean Class::isSynthetic() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isSynthetic_8454bd5aa23fd11e]);
    }

    ::java::lang::Object Class::newInstance() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_d6bcd06f3102c4d9]));
    }

    ::java::lang::String Class::toGenericString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toGenericString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Class::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_of_(t_Class *self, PyObject *args);
    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
    static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
    static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
    static PyObject *t_Class_getCanonicalName(t_Class *self);
    static PyObject *t_Class_getClassLoader(t_Class *self);
    static PyObject *t_Class_getClasses(t_Class *self);
    static PyObject *t_Class_getComponentType(t_Class *self);
    static PyObject *t_Class_getDeclaredClasses(t_Class *self);
    static PyObject *t_Class_getDeclaringClass(t_Class *self);
    static PyObject *t_Class_getEnclosingClass(t_Class *self);
    static PyObject *t_Class_getEnumConstants(t_Class *self);
    static PyObject *t_Class_getInterfaces(t_Class *self);
    static PyObject *t_Class_getModifiers(t_Class *self);
    static PyObject *t_Class_getName(t_Class *self);
    static PyObject *t_Class_getPackage(t_Class *self);
    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
    static PyObject *t_Class_getSigners(t_Class *self);
    static PyObject *t_Class_getSimpleName(t_Class *self);
    static PyObject *t_Class_getSuperclass(t_Class *self);
    static PyObject *t_Class_getTypeName(t_Class *self);
    static PyObject *t_Class_isAnnotation(t_Class *self);
    static PyObject *t_Class_isAnonymousClass(t_Class *self);
    static PyObject *t_Class_isArray(t_Class *self);
    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isEnum(t_Class *self);
    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isInterface(t_Class *self);
    static PyObject *t_Class_isLocalClass(t_Class *self);
    static PyObject *t_Class_isMemberClass(t_Class *self);
    static PyObject *t_Class_isPrimitive(t_Class *self);
    static PyObject *t_Class_isSynthetic(t_Class *self);
    static PyObject *t_Class_newInstance(t_Class *self);
    static PyObject *t_Class_toGenericString(t_Class *self);
    static PyObject *t_Class_toString(t_Class *self, PyObject *args);
    static PyObject *t_Class_get__annotation(t_Class *self, void *data);
    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
    static PyObject *t_Class_get__array(t_Class *self, void *data);
    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
    static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
    static PyObject *t_Class_get__classes(t_Class *self, void *data);
    static PyObject *t_Class_get__componentType(t_Class *self, void *data);
    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enum(t_Class *self, void *data);
    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
    static PyObject *t_Class_get__interface(t_Class *self, void *data);
    static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
    static PyObject *t_Class_get__localClass(t_Class *self, void *data);
    static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
    static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
    static PyObject *t_Class_get__name(t_Class *self, void *data);
    static PyObject *t_Class_get__package(t_Class *self, void *data);
    static PyObject *t_Class_get__primitive(t_Class *self, void *data);
    static PyObject *t_Class_get__signers(t_Class *self, void *data);
    static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
    static PyObject *t_Class_get__superclass(t_Class *self, void *data);
    static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
    static PyObject *t_Class_get__typeName(t_Class *self, void *data);
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
    static PyGetSetDef t_Class__fields_[] = {
      DECLARE_GET_FIELD(t_Class, annotation),
      DECLARE_GET_FIELD(t_Class, anonymousClass),
      DECLARE_GET_FIELD(t_Class, array),
      DECLARE_GET_FIELD(t_Class, canonicalName),
      DECLARE_GET_FIELD(t_Class, classLoader),
      DECLARE_GET_FIELD(t_Class, classes),
      DECLARE_GET_FIELD(t_Class, componentType),
      DECLARE_GET_FIELD(t_Class, declaredClasses),
      DECLARE_GET_FIELD(t_Class, declaringClass),
      DECLARE_GET_FIELD(t_Class, enclosingClass),
      DECLARE_GET_FIELD(t_Class, enum),
      DECLARE_GET_FIELD(t_Class, enumConstants),
      DECLARE_GET_FIELD(t_Class, interface),
      DECLARE_GET_FIELD(t_Class, interfaces),
      DECLARE_GET_FIELD(t_Class, localClass),
      DECLARE_GET_FIELD(t_Class, memberClass),
      DECLARE_GET_FIELD(t_Class, modifiers),
      DECLARE_GET_FIELD(t_Class, name),
      DECLARE_GET_FIELD(t_Class, package),
      DECLARE_GET_FIELD(t_Class, primitive),
      DECLARE_GET_FIELD(t_Class, signers),
      DECLARE_GET_FIELD(t_Class, simpleName),
      DECLARE_GET_FIELD(t_Class, superclass),
      DECLARE_GET_FIELD(t_Class, synthetic),
      DECLARE_GET_FIELD(t_Class, typeName),
      DECLARE_GET_FIELD(t_Class, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Class__methods_[] = {
      DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, of_, METH_VARARGS),
      DECLARE_METHOD(t_Class, asSubclass, METH_O),
      DECLARE_METHOD(t_Class, cast, METH_O),
      DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
      DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
      DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
      DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
      DECLARE_METHOD(t_Class, getName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
      DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
      DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getTypeName, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
      DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
      DECLARE_METHOD(t_Class, isInstance, METH_O),
      DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
      DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
      DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
      DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
      DECLARE_METHOD(t_Class, toGenericString, METH_NOARGS),
      DECLARE_METHOD(t_Class, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Class)[] = {
      { Py_tp_methods, t_Class__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Class__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Class)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Class, t_Class, Class);
    PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Class::install(PyObject *module)
    {
      installType(&PY_TYPE(Class), &PY_TYPE_DEF(Class), module, "Class", 0);
    }

    void t_Class::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Class), "class_", make_descriptor(Class::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Class), "wrapfn_", make_descriptor(t_Class::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Class), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Class::initializeClass, 1)))
        return NULL;
      return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
    }
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Class::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Class_of_(t_Class *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      Class result((jobject) NULL);

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.asSubclass(a0));
        return t_Class::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
      return NULL;
    }

    static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.cast(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "cast", arg);
      return NULL;
    }

    static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.desiredAssertionStatus());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0));
            return t_Class::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          ::java::lang::ClassLoader a2((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
            return t_Class::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "forName", args);
      return NULL;
    }

    static PyObject *t_Class_getCanonicalName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getCanonicalName());
      return j2p(result);
    }

    static PyObject *t_Class_getClassLoader(t_Class *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Class_getClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getComponentType(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getComponentType());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getDeclaredClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaredClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getDeclaringClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnclosingClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnclosingClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnumConstants(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnumConstants());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getInterfaces(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getInterfaces());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getModifiers(t_Class *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getModifiers());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Class_getName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Class_getPackage(t_Class *self)
    {
      ::java::lang::Package result((jobject) NULL);
      OBJ_CALL(result = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(result);
    }

    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.getResourceAsStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
      return NULL;
    }

    static PyObject *t_Class_getSigners(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSigners());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getSimpleName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getSimpleName());
      return j2p(result);
    }

    static PyObject *t_Class_getSuperclass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuperclass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getTypeName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getTypeName());
      return j2p(result);
    }

    static PyObject *t_Class_isAnnotation(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnnotation());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAnonymousClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnonymousClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isArray(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isArray());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.isAssignableFrom(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
      return NULL;
    }

    static PyObject *t_Class_isEnum(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEnum());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.isInstance(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
      return NULL;
    }

    static PyObject *t_Class_isInterface(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterface());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isLocalClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLocalClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isMemberClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isMemberClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isPrimitive(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isPrimitive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isSynthetic(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isSynthetic());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_newInstance(t_Class *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.newInstance());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Class_toGenericString(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toGenericString());
      return j2p(result);
    }

    static PyObject *t_Class_toString(t_Class *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Class_get__annotation(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnnotation());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnonymousClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__array(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isArray());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getCanonicalName());
      return j2p(value);
    }

    static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }

    static PyObject *t_Class_get__classes(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__componentType(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getComponentType());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaredClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnclosingClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enum(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEnum());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnumConstants());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__interface(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInterface());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getInterfaces());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__localClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLocalClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isMemberClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getModifiers());
      return PyLong_FromLong((long) value);
    }

    static PyObject *t_Class_get__name(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }

    static PyObject *t_Class_get__package(t_Class *self, void *data)
    {
      ::java::lang::Package value((jobject) NULL);
      OBJ_CALL(value = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(value);
    }

    static PyObject *t_Class_get__primitive(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isPrimitive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__signers(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSigners());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getSimpleName());
      return j2p(value);
    }

    static PyObject *t_Class_get__superclass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuperclass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isSynthetic());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__typeName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getTypeName());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksum::class$ = NULL;
        jmethodID *BufferedChecksum::mids$ = NULL;
        bool BufferedChecksum::live$ = false;
        jint BufferedChecksum::DEFAULT_BUFFERSIZE = (jint) 0;

        jclass BufferedChecksum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "getValue", "()J");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_update_040c4cd0390c5aff] = env->getMethodID(cls, "update", "(I)V");
            mids$[mid_update_43fdd39c09bb2fad] = env->getMethodID(cls, "update", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERSIZE = env->getStaticIntField(cls, "DEFAULT_BUFFERSIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BufferedChecksum::getValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getValue_2e5ae9edcb9b072f]);
        }

        void BufferedChecksum::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void BufferedChecksum::update(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_update_040c4cd0390c5aff], a0);
        }

        void BufferedChecksum::update(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_update_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args);
        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data);
        static PyGetSetDef t_BufferedChecksum__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksum, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksum__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, getValue, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, reset, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, update, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BufferedChecksum)[] = {
          { Py_tp_methods, t_BufferedChecksum__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BufferedChecksum__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BufferedChecksum)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BufferedChecksum, t_BufferedChecksum, BufferedChecksum);

        void t_BufferedChecksum::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksum), &PY_TYPE_DEF(BufferedChecksum), module, "BufferedChecksum", 0);
        }

        void t_BufferedChecksum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksum), "class_", make_descriptor(BufferedChecksum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksum), "wrapfn_", make_descriptor(t_BufferedChecksum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksum), "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedChecksum::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksum), "DEFAULT_BUFFERSIZE", make_descriptor(BufferedChecksum::DEFAULT_BUFFERSIZE));
        }

        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksum::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksum::wrap_Object(BufferedChecksum(((t_BufferedChecksum *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.update(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.update(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "update", args);
          return NULL;
        }

        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiRangeQuery$RangeClause.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiRangeQuery$RangeClause::class$ = NULL;
        jmethodID *MultiRangeQuery$RangeClause::mids$ = NULL;
        bool MultiRangeQuery$RangeClause::live$ = false;

        jclass MultiRangeQuery$RangeClause::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiRangeQuery$RangeClause");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7ef234320623e23] = env->getMethodID(cls, "<init>", "([B[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiRangeQuery$RangeClause::MultiRangeQuery$RangeClause(const JArray< jbyte > & a0, const JArray< jbyte > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7ef234320623e23, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiRangeQuery$RangeClause_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiRangeQuery$RangeClause_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiRangeQuery$RangeClause_init_(t_MultiRangeQuery$RangeClause *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MultiRangeQuery$RangeClause__methods_[] = {
          DECLARE_METHOD(t_MultiRangeQuery$RangeClause, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiRangeQuery$RangeClause, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiRangeQuery$RangeClause)[] = {
          { Py_tp_methods, t_MultiRangeQuery$RangeClause__methods_ },
          { Py_tp_init, (void *) t_MultiRangeQuery$RangeClause_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiRangeQuery$RangeClause)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiRangeQuery$RangeClause, t_MultiRangeQuery$RangeClause, MultiRangeQuery$RangeClause);

        void t_MultiRangeQuery$RangeClause::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiRangeQuery$RangeClause), &PY_TYPE_DEF(MultiRangeQuery$RangeClause), module, "MultiRangeQuery$RangeClause", 0);
        }

        void t_MultiRangeQuery$RangeClause::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$RangeClause), "class_", make_descriptor(MultiRangeQuery$RangeClause::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$RangeClause), "wrapfn_", make_descriptor(t_MultiRangeQuery$RangeClause::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery$RangeClause), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiRangeQuery$RangeClause_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiRangeQuery$RangeClause::initializeClass, 1)))
            return NULL;
          return t_MultiRangeQuery$RangeClause::wrap_Object(MultiRangeQuery$RangeClause(((t_MultiRangeQuery$RangeClause *) arg)->object.this$));
        }
        static PyObject *t_MultiRangeQuery$RangeClause_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiRangeQuery$RangeClause::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiRangeQuery$RangeClause_init_(t_MultiRangeQuery$RangeClause *self, PyObject *args, PyObject *kwds)
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          MultiRangeQuery$RangeClause object((jobject) NULL);

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            INT_CALL(object = MultiRangeQuery$RangeClause(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_build_f9a1c1df37d5da9b] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/BooleanQuery$Builder;)Lorg/apache/lucene/search/Query;");
            mids$[mid_addClause_deba14d568ed29a2] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery$Builder;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermStates;)V");
            mids$[mid_getTopLevelBuilder_a51b33134513d073] = env->getMethodID(cls, "getTopLevelBuilder", "()Lorg/apache/lucene/search/BooleanQuery$Builder;");
            mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)[] = {
          { Py_tp_methods, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_ },
          { Py_tp_init, (void *) t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_ },
          { Py_tp_getset, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopTermsRewrite),
          NULL
        };

        DEFINE_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite);
        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), &PY_TYPE_DEF(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), module, "MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), "class_", make_descriptor(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(((t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(BooleanQuery$Builder);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/XYZBounds.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/LatLonBounds.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Plane::class$ = NULL;
          jmethodID *Plane::mids$ = NULL;
          jfieldID *Plane::fids$ = NULL;
          bool Plane::live$ = false;
          JArray< ::org::apache::lucene::spatial3d::geom::Membership > *Plane::NO_BOUNDS = NULL;
          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > *Plane::NO_POINTS = NULL;
          Plane *Plane::normalXPlane = NULL;
          Plane *Plane::normalYPlane = NULL;
          Plane *Plane::normalZPlane = NULL;

          jclass Plane::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Plane");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b360fa58f0f3aae0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Plane;Z)V");
              mids$[mid_init$_b51abdbbf62b08b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_4e7e13ed72cbd118] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)V");
              mids$[mid_init$_fcf4d015a2550579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;D)V");
              mids$[mid_init$_75a41c58a4d52f7d] = env->getMethodID(cls, "<init>", "(DD)V");
              mids$[mid_init$_8a692b267f78bb5c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;DDD)V");
              mids$[mid_init$_98b1cec09263a48f] = env->getMethodID(cls, "<init>", "(DDDD)V");
              mids$[mid_arcDistance_4cf3fddac81c90c5] = env->getMethodID(cls, "arcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_arcDistance_ef34cfa4bc9c8805] = env->getMethodID(cls, "arcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_arePointsCoplanar_bac27d94c684194b] = env->getStaticMethodID(cls, "arePointsCoplanar", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Z");
              mids$[mid_constructNormalizedXPlane_253ff0eeea349687] = env->getStaticMethodID(cls, "constructNormalizedXPlane", "([Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_constructNormalizedXPlane_b3497e1974a221d5] = env->getStaticMethodID(cls, "constructNormalizedXPlane", "(DDD)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_constructNormalizedYPlane_253ff0eeea349687] = env->getStaticMethodID(cls, "constructNormalizedYPlane", "([Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_constructNormalizedYPlane_b3497e1974a221d5] = env->getStaticMethodID(cls, "constructNormalizedYPlane", "(DDD)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_constructNormalizedZPlane_253ff0eeea349687] = env->getStaticMethodID(cls, "constructNormalizedZPlane", "([Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_constructNormalizedZPlane_0296f30435e5b334] = env->getStaticMethodID(cls, "constructNormalizedZPlane", "(DD)Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_crosses_248a108aff03bbd6] = env->getMethodID(cls, "crosses", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_evaluate_eeff1bdc68694797] = env->getMethodID(cls, "evaluate", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_evaluate_5fe2cd44fc854b0c] = env->getMethodID(cls, "evaluate", "(DDD)D");
              mids$[mid_evaluateIsZero_ac70289ee56608c0] = env->getMethodID(cls, "evaluateIsZero", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_evaluateIsZero_5afbc0f2c6478de6] = env->getMethodID(cls, "evaluateIsZero", "(DDD)Z");
              mids$[mid_findArcDistancePoints_29379348dbe6d7ae] = env->getMethodID(cls, "findArcDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findCrossings_babe76778ca3a59c] = env->getMethodID(cls, "findCrossings", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findIntersections_babe76778ca3a59c] = env->getMethodID(cls, "findIntersections", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_getSampleIntersectionPoint_d87ce8ba41cef00d] = env->getMethodID(cls, "getSampleIntersectionPoint", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_interpolate_98ebc17555d97b37] = env->getMethodID(cls, "interpolate", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[D)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_intersects_248a108aff03bbd6] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");
              mids$[mid_isFunctionallyIdentical_3edee074a62ede18] = env->getMethodID(cls, "isFunctionallyIdentical", "(Lorg/apache/lucene/spatial3d/geom/Plane;)Z");
              mids$[mid_isNumericallyIdentical_3edee074a62ede18] = env->getMethodID(cls, "isNumericallyIdentical", "(Lorg/apache/lucene/spatial3d/geom/Plane;)Z");
              mids$[mid_linearDistance_4cf3fddac81c90c5] = env->getMethodID(cls, "linearDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_linearDistance_ef34cfa4bc9c8805] = env->getMethodID(cls, "linearDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_linearDistanceSquared_4cf3fddac81c90c5] = env->getMethodID(cls, "linearDistanceSquared", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_linearDistanceSquared_ef34cfa4bc9c8805] = env->getMethodID(cls, "linearDistanceSquared", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_normalDistance_5d3f8351fb7c28a7] = env->getMethodID(cls, "normalDistance", "(Lorg/apache/lucene/spatial3d/geom/Vector;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_normalDistance_75ab824d48b58dcf] = env->getMethodID(cls, "normalDistance", "(DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_normalDistanceSquared_5d3f8351fb7c28a7] = env->getMethodID(cls, "normalDistanceSquared", "(Lorg/apache/lucene/spatial3d/geom/Vector;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_normalDistanceSquared_75ab824d48b58dcf] = env->getMethodID(cls, "normalDistanceSquared", "(DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_normalize_bde240becdc1550f] = env->getMethodID(cls, "normalize", "()Lorg/apache/lucene/spatial3d/geom/Plane;");
              mids$[mid_recordBounds_9a3f8ad5ae1aaf02] = env->getMethodID(cls, "recordBounds", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/LatLonBounds;[Lorg/apache/lucene/spatial3d/geom/Membership;)V");
              mids$[mid_recordBounds_a54e7fd0ad3e46e6] = env->getMethodID(cls, "recordBounds", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/XYZBounds;[Lorg/apache/lucene/spatial3d/geom/Membership;)V");
              mids$[mid_recordBounds_fb520c7ae835b925] = env->getMethodID(cls, "recordBounds", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/LatLonBounds;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)V");
              mids$[mid_recordBounds_326f8a52ccb9a8e1] = env->getMethodID(cls, "recordBounds", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/XYZBounds;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_modify_cc2b882c8942d91e] = env->getStaticMethodID(cls, "modify", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDDDDDD)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_findIntersectionBounds_b3a6b129fead006c] = env->getMethodID(cls, "findIntersectionBounds", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Bounds;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)V");
              mids$[mid_findIntersections_8246a710eac526d9] = env->getMethodID(cls, "findIntersections", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_reverseModify_eb74b7dd0109b894] = env->getStaticMethodID(cls, "reverseModify", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Vector;DDDDDDD)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findCrossings_8246a710eac526d9] = env->getMethodID(cls, "findCrossings", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_D] = env->getFieldID(cls, "D", "D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NO_BOUNDS = new JArray< ::org::apache::lucene::spatial3d::geom::Membership >(env->getStaticObjectField(cls, "NO_BOUNDS", "[Lorg/apache/lucene/spatial3d/geom/Membership;"));
              NO_POINTS = new JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->getStaticObjectField(cls, "NO_POINTS", "[Lorg/apache/lucene/spatial3d/geom/GeoPoint;"));
              normalXPlane = new Plane(env->getStaticObjectField(cls, "normalXPlane", "Lorg/apache/lucene/spatial3d/geom/Plane;"));
              normalYPlane = new Plane(env->getStaticObjectField(cls, "normalYPlane", "Lorg/apache/lucene/spatial3d/geom/Plane;"));
              normalZPlane = new Plane(env->getStaticObjectField(cls, "normalZPlane", "Lorg/apache/lucene/spatial3d/geom/Plane;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Plane::Plane(const Plane & a0, jboolean a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_b360fa58f0f3aae0, a0.this$, a1)) {}

          Plane::Plane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_b51abdbbf62b08b6, a0.this$, a1.this$)) {}

          Plane::Plane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_4e7e13ed72cbd118, a0.this$, a1)) {}

          Plane::Plane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, jdouble a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_fcf4d015a2550579, a0.this$, a1)) {}

          Plane::Plane(jdouble a0, jdouble a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_75a41c58a4d52f7d, a0, a1)) {}

          Plane::Plane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_8a692b267f78bb5c, a0.this$, a1, a2, a3)) {}

          Plane::Plane(jdouble a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_98b1cec09263a48f, a0, a1, a2, a3)) {}

          jdouble Plane::arcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_arcDistance_4cf3fddac81c90c5], a0.this$, a1.this$, a2.this$);
          }

          jdouble Plane::arcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return env->callDoubleMethod(this$, mids$[mid_arcDistance_ef34cfa4bc9c8805], a0.this$, a1, a2, a3, a4.this$);
          }

          jboolean Plane::arePointsCoplanar(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_arePointsCoplanar_bac27d94c684194b], a0.this$, a1.this$, a2.this$);
          }

          Plane Plane::constructNormalizedXPlane(const JArray< ::org::apache::lucene::spatial3d::geom::Vector > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedXPlane_253ff0eeea349687], a0.this$));
          }

          Plane Plane::constructNormalizedXPlane(jdouble a0, jdouble a1, jdouble a2)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedXPlane_b3497e1974a221d5], a0, a1, a2));
          }

          Plane Plane::constructNormalizedYPlane(const JArray< ::org::apache::lucene::spatial3d::geom::Vector > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedYPlane_253ff0eeea349687], a0.this$));
          }

          Plane Plane::constructNormalizedYPlane(jdouble a0, jdouble a1, jdouble a2)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedYPlane_b3497e1974a221d5], a0, a1, a2));
          }

          Plane Plane::constructNormalizedZPlane(const JArray< ::org::apache::lucene::spatial3d::geom::Vector > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedZPlane_253ff0eeea349687], a0.this$));
          }

          Plane Plane::constructNormalizedZPlane(jdouble a0, jdouble a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Plane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedZPlane_0296f30435e5b334], a0, a1));
          }

          jboolean Plane::crosses(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a2, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callBooleanMethod(this$, mids$[mid_crosses_248a108aff03bbd6], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
          }

          jboolean Plane::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jdouble Plane::evaluate(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_evaluate_eeff1bdc68694797], a0.this$);
          }

          jdouble Plane::evaluate(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_evaluate_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jboolean Plane::evaluateIsZero(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_evaluateIsZero_ac70289ee56608c0], a0.this$);
          }

          jboolean Plane::evaluateIsZero(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_evaluateIsZero_5afbc0f2c6478de6], a0, a1, a2);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > Plane::findArcDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findArcDistancePoints_29379348dbe6d7ae], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > Plane::findCrossings(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findCrossings_babe76778ca3a59c], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > Plane::findIntersections(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findIntersections_babe76778ca3a59c], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint Plane::getSampleIntersectionPoint(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const Plane & a1) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_getSampleIntersectionPoint_d87ce8ba41cef00d], a0.this$, a1.this$));
          }

          jint Plane::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > Plane::interpolate(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< jdouble > & a3) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_interpolate_98ebc17555d97b37], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean Plane::intersects(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a2, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_248a108aff03bbd6], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
          }

          jboolean Plane::isFunctionallyIdentical(const Plane & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFunctionallyIdentical_3edee074a62ede18], a0.this$);
          }

          jboolean Plane::isNumericallyIdentical(const Plane & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumericallyIdentical_3edee074a62ede18], a0.this$);
          }

          jdouble Plane::linearDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistance_4cf3fddac81c90c5], a0.this$, a1.this$, a2.this$);
          }

          jdouble Plane::linearDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistance_ef34cfa4bc9c8805], a0.this$, a1, a2, a3, a4.this$);
          }

          jdouble Plane::linearDistanceSquared(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistanceSquared_4cf3fddac81c90c5], a0.this$, a1.this$, a2.this$);
          }

          jdouble Plane::linearDistanceSquared(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistanceSquared_ef34cfa4bc9c8805], a0.this$, a1, a2, a3, a4.this$);
          }

          jdouble Plane::normalDistance(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistance_5d3f8351fb7c28a7], a0.this$, a1.this$);
          }

          jdouble Plane::normalDistance(jdouble a0, jdouble a1, jdouble a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistance_75ab824d48b58dcf], a0, a1, a2, a3.this$);
          }

          jdouble Plane::normalDistanceSquared(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistanceSquared_5d3f8351fb7c28a7], a0.this$, a1.this$);
          }

          jdouble Plane::normalDistanceSquared(jdouble a0, jdouble a1, jdouble a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistanceSquared_75ab824d48b58dcf], a0, a1, a2, a3.this$);
          }

          Plane Plane::normalize() const
          {
            return Plane(env->callObjectMethod(this$, mids$[mid_normalize_bde240becdc1550f]));
          }

          void Plane::recordBounds(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::LatLonBounds & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_recordBounds_9a3f8ad5ae1aaf02], a0.this$, a1.this$, a2.this$);
          }

          void Plane::recordBounds(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::XYZBounds & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_recordBounds_a54e7fd0ad3e46e6], a0.this$, a1.this$, a2.this$);
          }

          void Plane::recordBounds(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::LatLonBounds & a1, const Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_recordBounds_fb520c7ae835b925], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          void Plane::recordBounds(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::XYZBounds & a1, const Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_recordBounds_326f8a52ccb9a8e1], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          ::java::lang::String Plane::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jdouble Plane::_get_D() const
          {
            return env->getDoubleField(this$, fids$[fid_D]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Plane_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Plane_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Plane_init_(t_Plane *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Plane_arcDistance(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_arePointsCoplanar(PyTypeObject *type, PyObject *args);
          static PyObject *t_Plane_constructNormalizedXPlane(PyTypeObject *type, PyObject *args);
          static PyObject *t_Plane_constructNormalizedYPlane(PyTypeObject *type, PyObject *args);
          static PyObject *t_Plane_constructNormalizedZPlane(PyTypeObject *type, PyObject *args);
          static PyObject *t_Plane_crosses(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_equals(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_evaluate(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_evaluateIsZero(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_findArcDistancePoints(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_findCrossings(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_findIntersections(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_getSampleIntersectionPoint(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_hashCode(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_interpolate(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_intersects(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_isFunctionallyIdentical(t_Plane *self, PyObject *arg);
          static PyObject *t_Plane_isNumericallyIdentical(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_linearDistance(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_linearDistanceSquared(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_normalDistance(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_normalDistanceSquared(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_normalize(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_recordBounds(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_toString(t_Plane *self, PyObject *args);
          static PyObject *t_Plane_get__D(t_Plane *self, void *data);

          static PyGetSetDef t_Plane__fields_[] = {
            DECLARE_GET_FIELD(t_Plane, D),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Plane__methods_[] = {
            DECLARE_METHOD(t_Plane, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Plane, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Plane, arcDistance, METH_VARARGS),
            DECLARE_METHOD(t_Plane, arePointsCoplanar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Plane, constructNormalizedXPlane, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Plane, constructNormalizedYPlane, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Plane, constructNormalizedZPlane, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Plane, crosses, METH_VARARGS),
            DECLARE_METHOD(t_Plane, equals, METH_VARARGS),
            DECLARE_METHOD(t_Plane, evaluate, METH_VARARGS),
            DECLARE_METHOD(t_Plane, evaluateIsZero, METH_VARARGS),
            DECLARE_METHOD(t_Plane, findArcDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_Plane, findCrossings, METH_VARARGS),
            DECLARE_METHOD(t_Plane, findIntersections, METH_VARARGS),
            DECLARE_METHOD(t_Plane, getSampleIntersectionPoint, METH_VARARGS),
            DECLARE_METHOD(t_Plane, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Plane, interpolate, METH_VARARGS),
            DECLARE_METHOD(t_Plane, intersects, METH_VARARGS),
            DECLARE_METHOD(t_Plane, isFunctionallyIdentical, METH_O),
            DECLARE_METHOD(t_Plane, isNumericallyIdentical, METH_VARARGS),
            DECLARE_METHOD(t_Plane, linearDistance, METH_VARARGS),
            DECLARE_METHOD(t_Plane, linearDistanceSquared, METH_VARARGS),
            DECLARE_METHOD(t_Plane, normalDistance, METH_VARARGS),
            DECLARE_METHOD(t_Plane, normalDistanceSquared, METH_VARARGS),
            DECLARE_METHOD(t_Plane, normalize, METH_VARARGS),
            DECLARE_METHOD(t_Plane, recordBounds, METH_VARARGS),
            DECLARE_METHOD(t_Plane, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Plane)[] = {
            { Py_tp_methods, t_Plane__methods_ },
            { Py_tp_init, (void *) t_Plane_init_ },
            { Py_tp_getset, t_Plane__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Plane)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Vector),
            NULL
          };

          DEFINE_TYPE(Plane, t_Plane, Plane);

          void t_Plane::install(PyObject *module)
          {
            installType(&PY_TYPE(Plane), &PY_TYPE_DEF(Plane), module, "Plane", 0);
          }

          void t_Plane::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "class_", make_descriptor(Plane::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "wrapfn_", make_descriptor(t_Plane::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "boxfn_", make_descriptor(boxObject));
            env->getClass(Plane::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "NO_BOUNDS", make_descriptor(JArray<jobject>(Plane::NO_BOUNDS->this$).wrap(::org::apache::lucene::spatial3d::geom::t_Membership::wrap_jobject)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "NO_POINTS", make_descriptor(JArray<jobject>(Plane::NO_POINTS->this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "normalXPlane", make_descriptor(t_Plane::wrap_Object(*Plane::normalXPlane)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "normalYPlane", make_descriptor(t_Plane::wrap_Object(*Plane::normalYPlane)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Plane), "normalZPlane", make_descriptor(t_Plane::wrap_Object(*Plane::normalZPlane)));
          }

          static PyObject *t_Plane_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Plane::initializeClass, 1)))
              return NULL;
            return t_Plane::wrap_Object(Plane(((t_Plane *) arg)->object.this$));
          }
          static PyObject *t_Plane_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Plane::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Plane_init_(t_Plane *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                Plane a0((jobject) NULL);
                jboolean a1;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "kZ", Plane::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Plane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
                Plane object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Plane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Plane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble a1;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Plane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  INT_CALL(object = Plane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Plane(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble a3;
                Plane object((jobject) NULL);

                if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Plane(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Plane_arcDistance(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.arcDistance(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.arcDistance(a0, a1, a2, a3, a4));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "arcDistance", args);
            return NULL;
          }

          static PyObject *t_Plane_arePointsCoplanar(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kkk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::arePointsCoplanar(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "arePointsCoplanar", args);
            return NULL;
          }

          static PyObject *t_Plane_constructNormalizedXPlane(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::spatial3d::geom::Vector > a0((jobject) NULL);
                Plane result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedXPlane(a0));
                  return t_Plane::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                Plane result((jobject) NULL);

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedXPlane(a0, a1, a2));
                  return t_Plane::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "constructNormalizedXPlane", args);
            return NULL;
          }

          static PyObject *t_Plane_constructNormalizedYPlane(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::spatial3d::geom::Vector > a0((jobject) NULL);
                Plane result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedYPlane(a0));
                  return t_Plane::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                Plane result((jobject) NULL);

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedYPlane(a0, a1, a2));
                  return t_Plane::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "constructNormalizedYPlane", args);
            return NULL;
          }

          static PyObject *t_Plane_constructNormalizedZPlane(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::spatial3d::geom::Vector > a0((jobject) NULL);
                Plane result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedZPlane(a0));
                  return t_Plane::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jdouble a0;
                jdouble a1;
                Plane result((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Plane::constructNormalizedZPlane(a0, a1));
                  return t_Plane::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "constructNormalizedZPlane", args);
            return NULL;
          }

          static PyObject *t_Plane_crosses(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk[k[k[k[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.crosses(a0, a1, a2, a3, a4, a5));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "crosses", args);
            return NULL;
          }

          static PyObject *t_Plane_equals(t_Plane *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Plane_evaluate(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.evaluate(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.evaluate(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "evaluate", args);
            return NULL;
          }

          static PyObject *t_Plane_evaluateIsZero(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.evaluateIsZero(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.evaluateIsZero(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "evaluateIsZero", args);
            return NULL;
          }

          static PyObject *t_Plane_findArcDistancePoints(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.findArcDistancePoints(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findArcDistancePoints", args);
            return NULL;
          }

          static PyObject *t_Plane_findCrossings(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findCrossings(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findCrossings", args);
            return NULL;
          }

          static PyObject *t_Plane_findIntersections(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findIntersections(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findIntersections", args);
            return NULL;
          }

          static PyObject *t_Plane_getSampleIntersectionPoint(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Plane a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, Plane::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSampleIntersectionPoint(a0, a1));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSampleIntersectionPoint", args);
            return NULL;
          }

          static PyObject *t_Plane_hashCode(t_Plane *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Plane_interpolate(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            JArray< jdouble > a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kkk[D", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.interpolate(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "interpolate", args);
            return NULL;
          }

          static PyObject *t_Plane_intersects(t_Plane *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk[k[k[k[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.intersects(a0, a1, a2, a3, a4, a5));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersects", args);
            return NULL;
          }

          static PyObject *t_Plane_isFunctionallyIdentical(t_Plane *self, PyObject *arg)
          {
            Plane a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", Plane::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isFunctionallyIdentical(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isFunctionallyIdentical", arg);
            return NULL;
          }

          static PyObject *t_Plane_isNumericallyIdentical(t_Plane *self, PyObject *args)
          {
            Plane a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", Plane::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isNumericallyIdentical(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "isNumericallyIdentical", args, 2);
          }

          static PyObject *t_Plane_linearDistance(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.linearDistance(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.linearDistance(a0, a1, a2, a3, a4));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "linearDistance", args, 2);
          }

          static PyObject *t_Plane_linearDistanceSquared(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.linearDistanceSquared(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.linearDistanceSquared(a0, a1, a2, a3, a4));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "linearDistanceSquared", args, 2);
          }

          static PyObject *t_Plane_normalDistance(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k[k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.normalDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "DDD[k", ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.normalDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "normalDistance", args, 2);
          }

          static PyObject *t_Plane_normalDistanceSquared(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k[k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.normalDistanceSquared(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "DDD[k", ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.normalDistanceSquared(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "normalDistanceSquared", args, 2);
          }

          static PyObject *t_Plane_normalize(t_Plane *self, PyObject *args)
          {
            Plane result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normalize());
              return t_Plane::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_Plane_recordBounds(t_Plane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::LatLonBounds a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);

                if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::LatLonBounds::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.recordBounds(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::XYZBounds a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);

                if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::XYZBounds::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.recordBounds(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::LatLonBounds a1((jobject) NULL);
                Plane a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::LatLonBounds::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.recordBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::XYZBounds a1((jobject) NULL);
                Plane a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::XYZBounds::initializeClass, Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.recordBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "recordBounds", args);
            return NULL;
          }

          static PyObject *t_Plane_toString(t_Plane *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Plane), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Plane_get__D(t_Plane *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_D());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTAutocomplete.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTAutocomplete::class$ = NULL;
            jmethodID *TSTAutocomplete::mids$ = NULL;
            bool TSTAutocomplete::live$ = false;

            jclass TSTAutocomplete::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTAutocomplete");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balancedTree_ffea39987f134d41] = env->getMethodID(cls, "balancedTree", "([Ljava/lang/Object;[Ljava/lang/Object;IILorg/apache/lucene/search/suggest/tst/TernaryTreeNode;)V");
                mids$[mid_insert_73284699312d71ee] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;Ljava/lang/Object;I)Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;");
                mids$[mid_prefixCompletion_ffc4e26c1439772a] = env->getMethodID(cls, "prefixCompletion", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;I)Ljava/util/ArrayList;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TSTAutocomplete::balancedTree(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1, jint a2, jint a3, const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_balancedTree_ffea39987f134d41], a0.this$, a1.this$, a2, a3, a4.this$);
            }

            ::org::apache::lucene::search::suggest::tst::TernaryTreeNode TSTAutocomplete::insert(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, const ::java::lang::Object & a2, jint a3) const
            {
              return ::org::apache::lucene::search::suggest::tst::TernaryTreeNode(env->callObjectMethod(this$, mids$[mid_insert_73284699312d71ee], a0.this$, a1.this$, a2.this$, a3));
            }

            ::java::util::ArrayList TSTAutocomplete::prefixCompletion(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, jint a2) const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_prefixCompletion_ffc4e26c1439772a], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args);

            static PyMethodDef t_TSTAutocomplete__methods_[] = {
              DECLARE_METHOD(t_TSTAutocomplete, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, balancedTree, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, insert, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, prefixCompletion, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TSTAutocomplete)[] = {
              { Py_tp_methods, t_TSTAutocomplete__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TSTAutocomplete)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TSTAutocomplete, t_TSTAutocomplete, TSTAutocomplete);

            void t_TSTAutocomplete::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTAutocomplete), &PY_TYPE_DEF(TSTAutocomplete), module, "TSTAutocomplete", 0);
            }

            void t_TSTAutocomplete::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTAutocomplete), "class_", make_descriptor(TSTAutocomplete::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTAutocomplete), "wrapfn_", make_descriptor(t_TSTAutocomplete::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TSTAutocomplete), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTAutocomplete::initializeClass, 1)))
                return NULL;
              return t_TSTAutocomplete::wrap_Object(TSTAutocomplete(((t_TSTAutocomplete *) arg)->object.this$));
            }
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTAutocomplete::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args)
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              JArray< ::java::lang::Object > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a4((jobject) NULL);

              if (!parseArgs(args, "[o[oIIk", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(self->object.balancedTree(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "balancedTree", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::Object a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode result((jobject) NULL);

              if (!parseArgs(args, "kOoI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                return ::org::apache::lucene::search::suggest::tst::t_TernaryTreeNode::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              jint a2;
              ::java::util::ArrayList result((jobject) NULL);

              if (!parseArgs(args, "kOI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.prefixCompletion(a0, a1, a2));
                return ::java::util::t_ArrayList::wrap_Object(result, ::org::apache::lucene::search::suggest::tst::PY_TYPE(TernaryTreeNode));
              }

              PyErr_SetArgsError((PyObject *) self, "prefixCompletion", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumIntAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumIntAssociations::mids$ = NULL;
          bool TaxonomyFacetSumIntAssociations::live$ = false;

          jclass TaxonomyFacetSumIntAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumIntAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0279dbd5ca76e087] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_cf8e900354647cb2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_0279dbd5ca76e087, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumIntAssociations::TaxonomyFacetSumIntAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_cf8e900354647cb2, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumIntAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumIntAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetSumIntAssociations)[] = {
            { Py_tp_methods, t_TaxonomyFacetSumIntAssociations__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetSumIntAssociations_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetSumIntAssociations)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetSumIntAssociations, t_TaxonomyFacetSumIntAssociations, TaxonomyFacetSumIntAssociations);

          void t_TaxonomyFacetSumIntAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumIntAssociations), &PY_TYPE_DEF(TaxonomyFacetSumIntAssociations), module, "TaxonomyFacetSumIntAssociations", 0);
          }

          void t_TaxonomyFacetSumIntAssociations::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumIntAssociations), "class_", make_descriptor(TaxonomyFacetSumIntAssociations::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumIntAssociations), "wrapfn_", make_descriptor(t_TaxonomyFacetSumIntAssociations::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumIntAssociations), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumIntAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumIntAssociations::wrap_Object(TaxonomyFacetSumIntAssociations(((t_TaxonomyFacetSumIntAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumIntAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumIntAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumIntAssociations_init_(t_TaxonomyFacetSumIntAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumIntAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumIntAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterCodecReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterCodecReader::class$ = NULL;
        jmethodID *FilterCodecReader::mids$ = NULL;
        bool FilterCodecReader::live$ = false;

        jclass FilterCodecReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterCodecReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a681a30a093522b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/CodecReader;)V");
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getDelegate_e615b5c7a728716b] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/index/CodecReader;");
            mids$[mid_getDocValuesReader_2703cdf07eabd0a4] = env->getMethodID(cls, "getDocValuesReader", "()Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ba629b83d3686969] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormsReader_0502194d89d40c22] = env->getMethodID(cls, "getNormsReader", "()Lorg/apache/lucene/codecs/NormsProducer;");
            mids$[mid_getPointsReader_0a5d82ff6781f22b] = env->getMethodID(cls, "getPointsReader", "()Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_getPostingsReader_573c1a94549f7937] = env->getMethodID(cls, "getPostingsReader", "()Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_getTermVectorsReader_f69eb90f55592154] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_unwrap_5a4a763f0e786638] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/CodecReader;)Lorg/apache/lucene/index/CodecReader;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterCodecReader::FilterCodecReader(const ::org::apache::lucene::index::CodecReader & a0) : ::org::apache::lucene::index::CodecReader(env->newObject(initializeClass, &mids$, mid_init$_a681a30a093522b3, a0.this$)) {}

        void FilterCodecReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        ::java::util::Collection FilterCodecReader::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        ::org::apache::lucene::index::CodecReader FilterCodecReader::getDelegate() const
        {
          return ::org::apache::lucene::index::CodecReader(env->callObjectMethod(this$, mids$[mid_getDelegate_e615b5c7a728716b]));
        }

        ::org::apache::lucene::codecs::DocValuesProducer FilterCodecReader::getDocValuesReader() const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_getDocValuesReader_2703cdf07eabd0a4]));
        }

        ::org::apache::lucene::index::FieldInfos FilterCodecReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader FilterCodecReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ba629b83d3686969]));
        }

        ::org::apache::lucene::util::Bits FilterCodecReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData FilterCodecReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::codecs::NormsProducer FilterCodecReader::getNormsReader() const
        {
          return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_getNormsReader_0502194d89d40c22]));
        }

        ::org::apache::lucene::codecs::PointsReader FilterCodecReader::getPointsReader() const
        {
          return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_getPointsReader_0a5d82ff6781f22b]));
        }

        ::org::apache::lucene::codecs::FieldsProducer FilterCodecReader::getPostingsReader() const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_getPostingsReader_573c1a94549f7937]));
        }

        ::org::apache::lucene::codecs::TermVectorsReader FilterCodecReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_f69eb90f55592154]));
        }

        jint FilterCodecReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint FilterCodecReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        jlong FilterCodecReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::CodecReader FilterCodecReader::unwrap(const ::org::apache::lucene::index::CodecReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CodecReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_5a4a763f0e786638], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterCodecReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodecReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterCodecReader_init_(t_FilterCodecReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterCodecReader_checkIntegrity(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getChildResources(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getDelegate(t_FilterCodecReader *self);
        static PyObject *t_FilterCodecReader_getDocValuesReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getFieldInfos(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getFieldsReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getLiveDocs(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getMetaData(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getNormsReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getPointsReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getPostingsReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_getTermVectorsReader(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_maxDoc(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_numDocs(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_ramBytesUsed(t_FilterCodecReader *self, PyObject *args);
        static PyObject *t_FilterCodecReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodecReader_get__childResources(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__delegate(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__docValuesReader(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__fieldInfos(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__fieldsReader(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__liveDocs(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__metaData(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__normsReader(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__pointsReader(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__postingsReader(t_FilterCodecReader *self, void *data);
        static PyObject *t_FilterCodecReader_get__termVectorsReader(t_FilterCodecReader *self, void *data);
        static PyGetSetDef t_FilterCodecReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterCodecReader, childResources),
          DECLARE_GET_FIELD(t_FilterCodecReader, delegate),
          DECLARE_GET_FIELD(t_FilterCodecReader, docValuesReader),
          DECLARE_GET_FIELD(t_FilterCodecReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterCodecReader, fieldsReader),
          DECLARE_GET_FIELD(t_FilterCodecReader, liveDocs),
          DECLARE_GET_FIELD(t_FilterCodecReader, metaData),
          DECLARE_GET_FIELD(t_FilterCodecReader, normsReader),
          DECLARE_GET_FIELD(t_FilterCodecReader, pointsReader),
          DECLARE_GET_FIELD(t_FilterCodecReader, postingsReader),
          DECLARE_GET_FIELD(t_FilterCodecReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterCodecReader__methods_[] = {
          DECLARE_METHOD(t_FilterCodecReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodecReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodecReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getChildResources, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterCodecReader, getDocValuesReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getFieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getMetaData, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getNormsReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getPointsReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getPostingsReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, getTermVectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodecReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterCodecReader)[] = {
          { Py_tp_methods, t_FilterCodecReader__methods_ },
          { Py_tp_init, (void *) t_FilterCodecReader_init_ },
          { Py_tp_getset, t_FilterCodecReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterCodecReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::CodecReader),
          NULL
        };

        DEFINE_TYPE(FilterCodecReader, t_FilterCodecReader, FilterCodecReader);

        void t_FilterCodecReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodecReader), &PY_TYPE_DEF(FilterCodecReader), module, "FilterCodecReader", 0);
        }

        void t_FilterCodecReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodecReader), "class_", make_descriptor(FilterCodecReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodecReader), "wrapfn_", make_descriptor(t_FilterCodecReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCodecReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodecReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodecReader::initializeClass, 1)))
            return NULL;
          return t_FilterCodecReader::wrap_Object(FilterCodecReader(((t_FilterCodecReader *) arg)->object.this$));
        }
        static PyObject *t_FilterCodecReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodecReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterCodecReader_init_(t_FilterCodecReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          FilterCodecReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterCodecReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterCodecReader_checkIntegrity(t_FilterCodecReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterCodecReader_getChildResources(t_FilterCodecReader *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getChildResources", args, 2);
        }

        static PyObject *t_FilterCodecReader_getDelegate(t_FilterCodecReader *self)
        {
          ::org::apache::lucene::index::CodecReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::index::t_CodecReader::wrap_Object(result);
        }

        static PyObject *t_FilterCodecReader_getDocValuesReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocValuesReader());
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getDocValuesReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_getFieldInfos(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterCodecReader_getFieldsReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldsReader());
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getFieldsReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_getLiveDocs(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterCodecReader_getMetaData(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getMetaData", args, 2);
        }

        static PyObject *t_FilterCodecReader_getNormsReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getNormsReader());
            return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getNormsReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_getPointsReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPointsReader());
            return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getPointsReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_getPostingsReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPostingsReader());
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getPostingsReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_getTermVectorsReader(t_FilterCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermVectorsReader());
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "getTermVectorsReader", args, 2);
        }

        static PyObject *t_FilterCodecReader_maxDoc(t_FilterCodecReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterCodecReader_numDocs(t_FilterCodecReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterCodecReader_ramBytesUsed(t_FilterCodecReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterCodecReader), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FilterCodecReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::org::apache::lucene::index::CodecReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterCodecReader::unwrap(a0));
            return ::org::apache::lucene::index::t_CodecReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterCodecReader_get__childResources(t_FilterCodecReader *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__delegate(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::CodecReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::index::t_CodecReader::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__docValuesReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::DocValuesProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesReader());
          return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__fieldInfos(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__fieldsReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__liveDocs(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__metaData(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__normsReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::NormsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormsReader());
          return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__pointsReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::PointsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getPointsReader());
          return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__postingsReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getPostingsReader());
          return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(value);
        }

        static PyObject *t_FilterCodecReader_get__termVectorsReader(t_FilterCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/RegexCompletionQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *RegexCompletionQuery::class$ = NULL;
            jmethodID *RegexCompletionQuery::mids$ = NULL;
            bool RegexCompletionQuery::live$ = false;

            jclass RegexCompletionQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/RegexCompletionQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
                mids$[mid_init$_84fdfa8770fbaf5d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/suggest/BitsProducer;)V");
                mids$[mid_init$_2d22f4c380c508c4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
                mids$[mid_init$_798a374d46a0efc5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IILorg/apache/lucene/search/suggest/BitsProducer;)V");
                mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getFlags_9972fcc56b44e79d] = env->getMethodID(cls, "getFlags", "()I");
                mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDeterminizedStates", "()I");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexCompletionQuery::RegexCompletionQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

            RegexCompletionQuery::RegexCompletionQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::suggest::BitsProducer & a1) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_84fdfa8770fbaf5d, a0.this$, a1.this$)) {}

            RegexCompletionQuery::RegexCompletionQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_2d22f4c380c508c4, a0.this$, a1, a2)) {}

            RegexCompletionQuery::RegexCompletionQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, const ::org::apache::lucene::search::suggest::BitsProducer & a3) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_798a374d46a0efc5, a0.this$, a1, a2, a3.this$)) {}

            ::org::apache::lucene::search::Weight RegexCompletionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
            {
              return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
            }

            jboolean RegexCompletionQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint RegexCompletionQuery::getFlags() const
            {
              return env->callIntMethod(this$, mids$[mid_getFlags_9972fcc56b44e79d]);
            }

            jint RegexCompletionQuery::getMaxDeterminizedStates() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d]);
            }

            jint RegexCompletionQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            void RegexCompletionQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_RegexCompletionQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCompletionQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexCompletionQuery_init_(t_RegexCompletionQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RegexCompletionQuery_createWeight(t_RegexCompletionQuery *self, PyObject *args);
            static PyObject *t_RegexCompletionQuery_equals(t_RegexCompletionQuery *self, PyObject *args);
            static PyObject *t_RegexCompletionQuery_getFlags(t_RegexCompletionQuery *self);
            static PyObject *t_RegexCompletionQuery_getMaxDeterminizedStates(t_RegexCompletionQuery *self);
            static PyObject *t_RegexCompletionQuery_hashCode(t_RegexCompletionQuery *self, PyObject *args);
            static PyObject *t_RegexCompletionQuery_visit(t_RegexCompletionQuery *self, PyObject *args);
            static PyObject *t_RegexCompletionQuery_get__flags(t_RegexCompletionQuery *self, void *data);
            static PyObject *t_RegexCompletionQuery_get__maxDeterminizedStates(t_RegexCompletionQuery *self, void *data);
            static PyGetSetDef t_RegexCompletionQuery__fields_[] = {
              DECLARE_GET_FIELD(t_RegexCompletionQuery, flags),
              DECLARE_GET_FIELD(t_RegexCompletionQuery, maxDeterminizedStates),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexCompletionQuery__methods_[] = {
              DECLARE_METHOD(t_RegexCompletionQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCompletionQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCompletionQuery, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RegexCompletionQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_RegexCompletionQuery, getFlags, METH_NOARGS),
              DECLARE_METHOD(t_RegexCompletionQuery, getMaxDeterminizedStates, METH_NOARGS),
              DECLARE_METHOD(t_RegexCompletionQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_RegexCompletionQuery, visit, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(RegexCompletionQuery)[] = {
              { Py_tp_methods, t_RegexCompletionQuery__methods_ },
              { Py_tp_init, (void *) t_RegexCompletionQuery_init_ },
              { Py_tp_getset, t_RegexCompletionQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(RegexCompletionQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::CompletionQuery),
              NULL
            };

            DEFINE_TYPE(RegexCompletionQuery, t_RegexCompletionQuery, RegexCompletionQuery);

            void t_RegexCompletionQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCompletionQuery), &PY_TYPE_DEF(RegexCompletionQuery), module, "RegexCompletionQuery", 0);
            }

            void t_RegexCompletionQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(RegexCompletionQuery), "class_", make_descriptor(RegexCompletionQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RegexCompletionQuery), "wrapfn_", make_descriptor(t_RegexCompletionQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RegexCompletionQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCompletionQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCompletionQuery::initializeClass, 1)))
                return NULL;
              return t_RegexCompletionQuery::wrap_Object(RegexCompletionQuery(((t_RegexCompletionQuery *) arg)->object.this$));
            }
            static PyObject *t_RegexCompletionQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCompletionQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexCompletionQuery_init_(t_RegexCompletionQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::index::Term a0((jobject) NULL);
                  RegexCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                  {
                    INT_CALL(object = RegexCompletionQuery(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::index::Term a0((jobject) NULL);
                  ::org::apache::lucene::search::suggest::BitsProducer a1((jobject) NULL);
                  RegexCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::suggest::BitsProducer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = RegexCompletionQuery(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::index::Term a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  RegexCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = RegexCompletionQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::index::Term a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::search::suggest::BitsProducer a3((jobject) NULL);
                  RegexCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kIIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::suggest::BitsProducer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = RegexCompletionQuery(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RegexCompletionQuery_createWeight(t_RegexCompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              ::org::apache::lucene::search::Weight result((jobject) NULL);

              if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
                return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
              }

              return callSuper(PY_TYPE(RegexCompletionQuery), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RegexCompletionQuery_equals(t_RegexCompletionQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(RegexCompletionQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RegexCompletionQuery_getFlags(t_RegexCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFlags());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_RegexCompletionQuery_getMaxDeterminizedStates(t_RegexCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxDeterminizedStates());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_RegexCompletionQuery_hashCode(t_RegexCompletionQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(RegexCompletionQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_RegexCompletionQuery_visit(t_RegexCompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visit(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(RegexCompletionQuery), (PyObject *) self, "visit", args, 2);
            }

            static PyObject *t_RegexCompletionQuery_get__flags(t_RegexCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFlags());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_RegexCompletionQuery_get__maxDeterminizedStates(t_RegexCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxDeterminizedStates());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FlushInfo::class$ = NULL;
        jmethodID *FlushInfo::mids$ = NULL;
        jfieldID *FlushInfo::fids$ = NULL;
        bool FlushInfo::live$ = false;

        jclass FlushInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FlushInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7b2f5b9ddfcb9416] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedSegmentSize] = env->getFieldID(cls, "estimatedSegmentSize", "J");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FlushInfo::FlushInfo(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7b2f5b9ddfcb9416, a0, a1)) {}

        jboolean FlushInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint FlushInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String FlushInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong FlushInfo::_get_estimatedSegmentSize() const
        {
          return env->getLongField(this$, fids$[fid_estimatedSegmentSize]);
        }

        jint FlushInfo::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data);
        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data);

        static PyGetSetDef t_FlushInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FlushInfo, estimatedSegmentSize),
          DECLARE_GET_FIELD(t_FlushInfo, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FlushInfo__methods_[] = {
          DECLARE_METHOD(t_FlushInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FlushInfo)[] = {
          { Py_tp_methods, t_FlushInfo__methods_ },
          { Py_tp_init, (void *) t_FlushInfo_init_ },
          { Py_tp_getset, t_FlushInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FlushInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FlushInfo, t_FlushInfo, FlushInfo);

        void t_FlushInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FlushInfo), &PY_TYPE_DEF(FlushInfo), module, "FlushInfo", 0);
        }

        void t_FlushInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FlushInfo), "class_", make_descriptor(FlushInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FlushInfo), "wrapfn_", make_descriptor(t_FlushInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FlushInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FlushInfo::initializeClass, 1)))
            return NULL;
          return t_FlushInfo::wrap_Object(FlushInfo(((t_FlushInfo *) arg)->object.this$));
        }
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FlushInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          FlushInfo object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = FlushInfo(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FlushInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FlushInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FlushInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedSegmentSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$Allocator::class$ = NULL;
        jmethodID *IntBlockPool$Allocator::mids$ = NULL;
        bool IntBlockPool$Allocator::live$ = false;

        jclass IntBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getIntBlock_d2c45ef07a322466] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_recycleIntBlocks_8cce81c663fcf6f9] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$Allocator::IntBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        JArray< jint > IntBlockPool$Allocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_d2c45ef07a322466]));
        }

        void IntBlockPool$Allocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_8cce81c663fcf6f9], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self);
        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_IntBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$Allocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, getIntBlock, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntBlockPool$Allocator)[] = {
          { Py_tp_methods, t_IntBlockPool$Allocator__methods_ },
          { Py_tp_init, (void *) t_IntBlockPool$Allocator_init_ },
          { Py_tp_getset, t_IntBlockPool$Allocator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntBlockPool$Allocator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntBlockPool$Allocator, t_IntBlockPool$Allocator, IntBlockPool$Allocator);

        void t_IntBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$Allocator), &PY_TYPE_DEF(IntBlockPool$Allocator), module, "IntBlockPool$Allocator", 0);
        }

        void t_IntBlockPool$Allocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$Allocator), "class_", make_descriptor(IntBlockPool$Allocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$Allocator), "wrapfn_", make_descriptor(t_IntBlockPool$Allocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$Allocator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$Allocator::wrap_Object(IntBlockPool$Allocator(((t_IntBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          IntBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = IntBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getIntBlock());
          return result.wrap();
        }

        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "recycleIntBlocks", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/utils/NearestFuzzyQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {

          ::java::lang::Class *NearestFuzzyQuery::class$ = NULL;
          jmethodID *NearestFuzzyQuery::mids$ = NULL;
          bool NearestFuzzyQuery::live$ = false;

          jclass NearestFuzzyQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/utils/NearestFuzzyQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_15b72f6a44ff93f2] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearestFuzzyQuery::NearestFuzzyQuery(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

          void NearestFuzzyQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_15b72f6a44ff93f2], a0.this$, a1.this$);
          }

          jboolean NearestFuzzyQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint NearestFuzzyQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query NearestFuzzyQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String NearestFuzzyQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void NearestFuzzyQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {
          static PyObject *t_NearestFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearestFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearestFuzzyQuery_init_(t_NearestFuzzyQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearestFuzzyQuery_addTerms(t_NearestFuzzyQuery *self, PyObject *args);
          static PyObject *t_NearestFuzzyQuery_equals(t_NearestFuzzyQuery *self, PyObject *args);
          static PyObject *t_NearestFuzzyQuery_hashCode(t_NearestFuzzyQuery *self, PyObject *args);
          static PyObject *t_NearestFuzzyQuery_rewrite(t_NearestFuzzyQuery *self, PyObject *args);
          static PyObject *t_NearestFuzzyQuery_toString(t_NearestFuzzyQuery *self, PyObject *args);
          static PyObject *t_NearestFuzzyQuery_visit(t_NearestFuzzyQuery *self, PyObject *args);

          static PyMethodDef t_NearestFuzzyQuery__methods_[] = {
            DECLARE_METHOD(t_NearestFuzzyQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearestFuzzyQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearestFuzzyQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_NearestFuzzyQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_NearestFuzzyQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NearestFuzzyQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_NearestFuzzyQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_NearestFuzzyQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NearestFuzzyQuery)[] = {
            { Py_tp_methods, t_NearestFuzzyQuery__methods_ },
            { Py_tp_init, (void *) t_NearestFuzzyQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NearestFuzzyQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(NearestFuzzyQuery, t_NearestFuzzyQuery, NearestFuzzyQuery);

          void t_NearestFuzzyQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(NearestFuzzyQuery), &PY_TYPE_DEF(NearestFuzzyQuery), module, "NearestFuzzyQuery", 0);
          }

          void t_NearestFuzzyQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearestFuzzyQuery), "class_", make_descriptor(NearestFuzzyQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearestFuzzyQuery), "wrapfn_", make_descriptor(t_NearestFuzzyQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearestFuzzyQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearestFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearestFuzzyQuery::initializeClass, 1)))
              return NULL;
            return t_NearestFuzzyQuery::wrap_Object(NearestFuzzyQuery(((t_NearestFuzzyQuery *) arg)->object.this$));
          }
          static PyObject *t_NearestFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearestFuzzyQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearestFuzzyQuery_init_(t_NearestFuzzyQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
            NearestFuzzyQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              INT_CALL(object = NearestFuzzyQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearestFuzzyQuery_addTerms(t_NearestFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.addTerms(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_NearestFuzzyQuery_equals(t_NearestFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NearestFuzzyQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NearestFuzzyQuery_hashCode(t_NearestFuzzyQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearestFuzzyQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NearestFuzzyQuery_rewrite(t_NearestFuzzyQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NearestFuzzyQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_NearestFuzzyQuery_toString(t_NearestFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(NearestFuzzyQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearestFuzzyQuery_visit(t_NearestFuzzyQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NearestFuzzyQuery), (PyObject *) self, "visit", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FeatureField.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FeatureField::class$ = NULL;
        jmethodID *FeatureField::mids$ = NULL;
        bool FeatureField::live$ = false;

        jclass FeatureField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FeatureField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6873ae1485a7acdd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;F)V");
            mids$[mid_newDoubleValues_4d98d82207bb8f7a] = env->getStaticMethodID(cls, "newDoubleValues", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_newFeatureSort_df24281c3254b56a] = env->getStaticMethodID(cls, "newFeatureSort", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newLinearQuery_391b6230ae9c102d] = env->getStaticMethodID(cls, "newLinearQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newLogQuery_3635b2bd9103efa5] = env->getStaticMethodID(cls, "newLogQuery", "(Ljava/lang/String;Ljava/lang/String;FF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSaturationQuery_e08cfaa30c1cfbe9] = env->getStaticMethodID(cls, "newSaturationQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSaturationQuery_3635b2bd9103efa5] = env->getStaticMethodID(cls, "newSaturationQuery", "(Ljava/lang/String;Ljava/lang/String;FF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSigmoidQuery_d29429f1ea13293c] = env->getStaticMethodID(cls, "newSigmoidQuery", "(Ljava/lang/String;Ljava/lang/String;FFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_setFeatureValue_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFeatureValue", "(F)V");
            mids$[mid_tokenStream_c1cd9ee6ce43641f] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FeatureField::FeatureField(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6873ae1485a7acdd, a0.this$, a1.this$, a2)) {}

        ::org::apache::lucene::search::DoubleValuesSource FeatureField::newDoubleValues(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_newDoubleValues_4d98d82207bb8f7a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::SortField FeatureField::newFeatureSort(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newFeatureSort_df24281c3254b56a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query FeatureField::newLinearQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newLinearQuery_391b6230ae9c102d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query FeatureField::newLogQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newLogQuery_3635b2bd9103efa5], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::search::Query FeatureField::newSaturationQuery(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSaturationQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query FeatureField::newSaturationQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSaturationQuery_3635b2bd9103efa5], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::search::Query FeatureField::newSigmoidQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jfloat a3, jfloat a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSigmoidQuery_d29429f1ea13293c], a0.this$, a1.this$, a2, a3, a4));
        }

        void FeatureField::setFeatureValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFeatureValue_8e1d952dd65cdc3a], a0);
        }

        ::org::apache::lucene::analysis::TokenStream FeatureField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_c1cd9ee6ce43641f], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FeatureField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FeatureField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FeatureField_init_(t_FeatureField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FeatureField_newDoubleValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_newFeatureSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_newLinearQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_newLogQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_newSaturationQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_newSigmoidQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FeatureField_setFeatureValue(t_FeatureField *self, PyObject *arg);
        static PyObject *t_FeatureField_tokenStream(t_FeatureField *self, PyObject *args);
        static int t_FeatureField_set__featureValue(t_FeatureField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FeatureField__fields_[] = {
          DECLARE_SET_FIELD(t_FeatureField, featureValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FeatureField__methods_[] = {
          DECLARE_METHOD(t_FeatureField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newDoubleValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newFeatureSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newLinearQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newLogQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newSaturationQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, newSigmoidQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FeatureField, setFeatureValue, METH_O),
          DECLARE_METHOD(t_FeatureField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FeatureField)[] = {
          { Py_tp_methods, t_FeatureField__methods_ },
          { Py_tp_init, (void *) t_FeatureField_init_ },
          { Py_tp_getset, t_FeatureField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FeatureField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(FeatureField, t_FeatureField, FeatureField);

        void t_FeatureField::install(PyObject *module)
        {
          installType(&PY_TYPE(FeatureField), &PY_TYPE_DEF(FeatureField), module, "FeatureField", 0);
        }

        void t_FeatureField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FeatureField), "class_", make_descriptor(FeatureField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FeatureField), "wrapfn_", make_descriptor(t_FeatureField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FeatureField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FeatureField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FeatureField::initializeClass, 1)))
            return NULL;
          return t_FeatureField::wrap_Object(FeatureField(((t_FeatureField *) arg)->object.this$));
        }
        static PyObject *t_FeatureField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FeatureField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FeatureField_init_(t_FeatureField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          FeatureField object((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            INT_CALL(object = FeatureField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FeatureField_newDoubleValues(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newDoubleValues(a0, a1));
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDoubleValues", args);
          return NULL;
        }

        static PyObject *t_FeatureField_newFeatureSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newFeatureSort(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newFeatureSort", args);
          return NULL;
        }

        static PyObject *t_FeatureField_newLinearQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newLinearQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newLinearQuery", args);
          return NULL;
        }

        static PyObject *t_FeatureField_newLogQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          jfloat a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssFF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newLogQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newLogQuery", args);
          return NULL;
        }

        static PyObject *t_FeatureField_newSaturationQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newSaturationQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              jfloat a3;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssFF", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newSaturationQuery(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSaturationQuery", args);
          return NULL;
        }

        static PyObject *t_FeatureField_newSigmoidQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          jfloat a3;
          jfloat a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssFFF", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FeatureField::newSigmoidQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSigmoidQuery", args);
          return NULL;
        }

        static PyObject *t_FeatureField_setFeatureValue(t_FeatureField *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFeatureValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFeatureValue", arg);
          return NULL;
        }

        static PyObject *t_FeatureField_tokenStream(t_FeatureField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FeatureField), (PyObject *) self, "tokenStream", args, 2);
        }

        static int t_FeatureField_set__featureValue(t_FeatureField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFeatureValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "featureValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *TokenMgrError::class$ = NULL;
          jmethodID *TokenMgrError::mids$ = NULL;
          bool TokenMgrError::live$ = false;

          jclass TokenMgrError::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/TokenMgrError");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_995f32485faba072] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
              mids$[mid_getMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
              mids$[mid_addEscapes_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_LexicalError_22e55ea20d3997c4] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

          TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_995f32485faba072, a0, a1, a2, a3, a4.this$, a5, a6)) {}

          ::java::lang::String TokenMgrError::getMessage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
          static PyGetSetDef t_TokenMgrError__fields_[] = {
            DECLARE_GET_FIELD(t_TokenMgrError, message),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenMgrError__methods_[] = {
            DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenMgrError)[] = {
            { Py_tp_methods, t_TokenMgrError__methods_ },
            { Py_tp_init, (void *) t_TokenMgrError_init_ },
            { Py_tp_getset, t_TokenMgrError__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenMgrError)[] = {
            &PY_TYPE_DEF(::java::lang::Error),
            NULL
          };

          DEFINE_TYPE(TokenMgrError, t_TokenMgrError, TokenMgrError);

          void t_TokenMgrError::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenMgrError), &PY_TYPE_DEF(TokenMgrError), module, "TokenMgrError", 0);
          }

          void t_TokenMgrError::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "class_", make_descriptor(TokenMgrError::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
              return NULL;
            return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
          }
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenMgrError::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TokenMgrError object((jobject) NULL);

                INT_CALL(object = TokenMgrError());
                self->object = object;
                break;
              }
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = TokenMgrError(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                jboolean a0;
                jint a1;
                jint a2;
                jint a3;
                ::java::lang::String a4((jobject) NULL);
                jchar a5;
                jint a6;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMessage());
              return j2p(result);
            }

            return callSuper(PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
          }

          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseBBox.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseBBox::class$ = NULL;
          jmethodID *GeoBaseBBox::mids$ = NULL;
          bool GeoBaseBBox::live$ = false;

          jclass GeoBaseBBox::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseBBox");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseBBox::GeoBaseBBox(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseBBox_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseBBox_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoBaseBBox_init_(t_GeoBaseBBox *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GeoBaseBBox__methods_[] = {
            DECLARE_METHOD(t_GeoBaseBBox, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseBBox, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseBBox)[] = {
            { Py_tp_methods, t_GeoBaseBBox__methods_ },
            { Py_tp_init, (void *) t_GeoBaseBBox_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseBBox)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseBBox, t_GeoBaseBBox, GeoBaseBBox);

          void t_GeoBaseBBox::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseBBox), &PY_TYPE_DEF(GeoBaseBBox), module, "GeoBaseBBox", 0);
          }

          void t_GeoBaseBBox::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseBBox), "class_", make_descriptor(GeoBaseBBox::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseBBox), "wrapfn_", make_descriptor(t_GeoBaseBBox::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseBBox), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseBBox_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseBBox::initializeClass, 1)))
              return NULL;
            return t_GeoBaseBBox::wrap_Object(GeoBaseBBox(((t_GeoBaseBBox *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseBBox_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseBBox::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoBaseBBox_init_(t_GeoBaseBBox *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            GeoBaseBBox object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = GeoBaseBBox(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionQuery::class$ = NULL;
          jmethodID *FunctionQuery::mids$ = NULL;
          bool FunctionQuery::live$ = false;

          jclass FunctionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getValueSource_4e635fdab1789701] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionQuery::FunctionQuery(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

          ::org::apache::lucene::search::Weight FunctionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean FunctionQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_4e635fdab1789701]));
          }

          jint FunctionQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String FunctionQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FunctionQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self);
          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_visit(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data);
          static PyGetSetDef t_FunctionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionQuery)[] = {
            { Py_tp_methods, t_FunctionQuery__methods_ },
            { Py_tp_init, (void *) t_FunctionQuery_init_ },
            { Py_tp_getset, t_FunctionQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(FunctionQuery, t_FunctionQuery, FunctionQuery);

          void t_FunctionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionQuery), &PY_TYPE_DEF(FunctionQuery), module, "FunctionQuery", 0);
          }

          void t_FunctionQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionQuery), "class_", make_descriptor(FunctionQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionQuery), "wrapfn_", make_descriptor(t_FunctionQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionQuery::wrap_Object(FunctionQuery(((t_FunctionQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            FunctionQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
            {
              INT_CALL(object = FunctionQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FunctionQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FunctionQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FunctionQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FunctionQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionQuery_visit(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FunctionQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionAnalyzer::class$ = NULL;
            jmethodID *CompletionAnalyzer::mids$ = NULL;
            bool CompletionAnalyzer::live$ = false;

            jclass CompletionAnalyzer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionAnalyzer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_2bc54f6bb204f5dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_6b825c7d4394e60a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;ZZ)V");
                mids$[mid_init$_bab5f83d01ad8ce2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;ZZI)V");
                mids$[mid_preservePositionIncrements_8454bd5aa23fd11e] = env->getMethodID(cls, "preservePositionIncrements", "()Z");
                mids$[mid_preserveSep_8454bd5aa23fd11e] = env->getMethodID(cls, "preserveSep", "()Z");
                mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompletionAnalyzer::CompletionAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

            CompletionAnalyzer::CompletionAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2bc54f6bb204f5dc, a0.this$, a1)) {}

            CompletionAnalyzer::CompletionAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jboolean a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_6b825c7d4394e60a, a0.this$, a1, a2)) {}

            CompletionAnalyzer::CompletionAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jboolean a1, jboolean a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_bab5f83d01ad8ce2, a0.this$, a1, a2, a3)) {}

            jboolean CompletionAnalyzer::preservePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_preservePositionIncrements_8454bd5aa23fd11e]);
            }

            jboolean CompletionAnalyzer::preserveSep() const
            {
              return env->callBooleanMethod(this$, mids$[mid_preserveSep_8454bd5aa23fd11e]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompletionAnalyzer_init_(t_CompletionAnalyzer *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompletionAnalyzer_preservePositionIncrements(t_CompletionAnalyzer *self);
            static PyObject *t_CompletionAnalyzer_preserveSep(t_CompletionAnalyzer *self);

            static PyMethodDef t_CompletionAnalyzer__methods_[] = {
              DECLARE_METHOD(t_CompletionAnalyzer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionAnalyzer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionAnalyzer, preservePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CompletionAnalyzer, preserveSep, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionAnalyzer)[] = {
              { Py_tp_methods, t_CompletionAnalyzer__methods_ },
              { Py_tp_init, (void *) t_CompletionAnalyzer_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionAnalyzer)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::AnalyzerWrapper),
              NULL
            };

            DEFINE_TYPE(CompletionAnalyzer, t_CompletionAnalyzer, CompletionAnalyzer);

            void t_CompletionAnalyzer::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionAnalyzer), &PY_TYPE_DEF(CompletionAnalyzer), module, "CompletionAnalyzer", 0);
            }

            void t_CompletionAnalyzer::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionAnalyzer), "class_", make_descriptor(CompletionAnalyzer::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionAnalyzer), "wrapfn_", make_descriptor(t_CompletionAnalyzer::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionAnalyzer), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionAnalyzer::initializeClass, 1)))
                return NULL;
              return t_CompletionAnalyzer::wrap_Object(CompletionAnalyzer(((t_CompletionAnalyzer *) arg)->object.this$));
            }
            static PyObject *t_CompletionAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionAnalyzer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompletionAnalyzer_init_(t_CompletionAnalyzer *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  CompletionAnalyzer object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = CompletionAnalyzer(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  jint a1;
                  CompletionAnalyzer object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = CompletionAnalyzer(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  jboolean a1;
                  jboolean a2;
                  CompletionAnalyzer object((jobject) NULL);

                  if (!parseArgs(args, "kZZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = CompletionAnalyzer(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  jboolean a1;
                  jboolean a2;
                  jint a3;
                  CompletionAnalyzer object((jobject) NULL);

                  if (!parseArgs(args, "kZZI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = CompletionAnalyzer(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompletionAnalyzer_preservePositionIncrements(t_CompletionAnalyzer *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.preservePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CompletionAnalyzer_preserveSep(t_CompletionAnalyzer *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.preserveSep());
              Py_RETURN_BOOL(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionPostingsFormat::class$ = NULL;
            jmethodID *CompletionPostingsFormat::mids$ = NULL;
            bool CompletionPostingsFormat::live$ = false;

            jclass CompletionPostingsFormat::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionPostingsFormat");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_43b72e860685630c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;)V");
                mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
                mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
                mids$[mid_delegatePostingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "delegatePostingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompletionPostingsFormat::CompletionPostingsFormat(const ::java::lang::String & a0) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            CompletionPostingsFormat::CompletionPostingsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode & a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_43b72e860685630c, a0.this$, a1.this$)) {}

            ::org::apache::lucene::codecs::FieldsConsumer CompletionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
            {
              return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
            }

            ::org::apache::lucene::codecs::FieldsProducer CompletionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
            {
              return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompletionPostingsFormat_init_(t_CompletionPostingsFormat *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompletionPostingsFormat_fieldsConsumer(t_CompletionPostingsFormat *self, PyObject *args);
            static PyObject *t_CompletionPostingsFormat_fieldsProducer(t_CompletionPostingsFormat *self, PyObject *args);

            static PyMethodDef t_CompletionPostingsFormat__methods_[] = {
              DECLARE_METHOD(t_CompletionPostingsFormat, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionPostingsFormat, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionPostingsFormat, fieldsConsumer, METH_VARARGS),
              DECLARE_METHOD(t_CompletionPostingsFormat, fieldsProducer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionPostingsFormat)[] = {
              { Py_tp_methods, t_CompletionPostingsFormat__methods_ },
              { Py_tp_init, (void *) t_CompletionPostingsFormat_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionPostingsFormat)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
              NULL
            };

            DEFINE_TYPE(CompletionPostingsFormat, t_CompletionPostingsFormat, CompletionPostingsFormat);

            void t_CompletionPostingsFormat::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionPostingsFormat), &PY_TYPE_DEF(CompletionPostingsFormat), module, "CompletionPostingsFormat", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat), "FSTLoadMode", make_descriptor(&PY_TYPE_DEF(CompletionPostingsFormat$FSTLoadMode)));
            }

            void t_CompletionPostingsFormat::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat), "class_", make_descriptor(CompletionPostingsFormat::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat), "wrapfn_", make_descriptor(t_CompletionPostingsFormat::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionPostingsFormat), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionPostingsFormat::initializeClass, 1)))
                return NULL;
              return t_CompletionPostingsFormat::wrap_Object(CompletionPostingsFormat(((t_CompletionPostingsFormat *) arg)->object.this$));
            }
            static PyObject *t_CompletionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionPostingsFormat::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompletionPostingsFormat_init_(t_CompletionPostingsFormat *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  CompletionPostingsFormat object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = CompletionPostingsFormat(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  CompletionPostingsFormat object((jobject) NULL);

                  if (!parseArgs(args, "sK", ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::suggest::document::t_CompletionPostingsFormat$FSTLoadMode::parameters_))
                  {
                    INT_CALL(object = CompletionPostingsFormat(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompletionPostingsFormat_fieldsConsumer(t_CompletionPostingsFormat *self, PyObject *args)
            {
              ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
              ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.fieldsConsumer(a0));
                return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
            }

            static PyObject *t_CompletionPostingsFormat_fieldsProducer(t_CompletionPostingsFormat *self, PyObject *args)
            {
              ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
              ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.fieldsProducer(a0));
                return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosFormat::class$ = NULL;
        jmethodID *FieldInfosFormat::mids$ = NULL;
        bool FieldInfosFormat::live$ = false;

        jclass FieldInfosFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_1706310ddb242d67] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_write_226745c1985cb50a] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfos FieldInfosFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_1706310ddb242d67], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void FieldInfosFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_write_226745c1985cb50a], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_read(t_FieldInfosFormat *self, PyObject *args);
        static PyObject *t_FieldInfosFormat_write(t_FieldInfosFormat *self, PyObject *args);

        static PyMethodDef t_FieldInfosFormat__methods_[] = {
          DECLARE_METHOD(t_FieldInfosFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, read, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfosFormat, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldInfosFormat)[] = {
          { Py_tp_methods, t_FieldInfosFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldInfosFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldInfosFormat, t_FieldInfosFormat, FieldInfosFormat);

        void t_FieldInfosFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosFormat), &PY_TYPE_DEF(FieldInfosFormat), module, "FieldInfosFormat", 0);
        }

        void t_FieldInfosFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfosFormat), "class_", make_descriptor(FieldInfosFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfosFormat), "wrapfn_", make_descriptor(t_FieldInfosFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfosFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosFormat::initializeClass, 1)))
            return NULL;
          return t_FieldInfosFormat::wrap_Object(FieldInfosFormat(((t_FieldInfosFormat *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosFormat_read(t_FieldInfosFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, "kksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_FieldInfosFormat_write(t_FieldInfosFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *PrecedenceQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *PrecedenceQueryNodeProcessorPipeline::mids$ = NULL;
              bool PrecedenceQueryNodeProcessorPipeline::live$ = false;

              jclass PrecedenceQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrecedenceQueryNodeProcessorPipeline::PrecedenceQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PrecedenceQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PrecedenceQueryNodeProcessorPipeline)[] = {
                { Py_tp_methods, t_PrecedenceQueryNodeProcessorPipeline__methods_ },
                { Py_tp_init, (void *) t_PrecedenceQueryNodeProcessorPipeline_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PrecedenceQueryNodeProcessorPipeline)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline),
                NULL
              };

              DEFINE_TYPE(PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline, PrecedenceQueryNodeProcessorPipeline);

              void t_PrecedenceQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(PrecedenceQueryNodeProcessorPipeline), &PY_TYPE_DEF(PrecedenceQueryNodeProcessorPipeline), module, "PrecedenceQueryNodeProcessorPipeline", 0);
              }

              void t_PrecedenceQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryNodeProcessorPipeline), "class_", make_descriptor(PrecedenceQueryNodeProcessorPipeline::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryNodeProcessorPipeline), "wrapfn_", make_descriptor(t_PrecedenceQueryNodeProcessorPipeline::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrecedenceQueryNodeProcessorPipeline), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_PrecedenceQueryNodeProcessorPipeline::wrap_Object(PrecedenceQueryNodeProcessorPipeline(((t_PrecedenceQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PrecedenceQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PrecedenceQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder::live$ = false;

          jclass ScoreOrderFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_2c463cdfa06312df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_d48c3e85eaff05d2] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_68492bd2e5986041] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_2c463cdfa06312df, a0.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_d48c3e85eaff05d2, a0.this$, a1.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_68492bd2e5986041, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ScoreOrderFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScoreOrderFragmentsBuilder)[] = {
            { Py_tp_methods, t_ScoreOrderFragmentsBuilder__methods_ },
            { Py_tp_init, (void *) t_ScoreOrderFragmentsBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScoreOrderFragmentsBuilder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder),
            NULL
          };

          DEFINE_TYPE(ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder, ScoreOrderFragmentsBuilder);

          void t_ScoreOrderFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder), &PY_TYPE_DEF(ScoreOrderFragmentsBuilder), module, "ScoreOrderFragmentsBuilder", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder), "ScoreComparator", make_descriptor(&PY_TYPE_DEF(ScoreOrderFragmentsBuilder$ScoreComparator)));
          }

          void t_ScoreOrderFragmentsBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder), "class_", make_descriptor(ScoreOrderFragmentsBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder), "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreOrderFragmentsBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder::wrap_Object(ScoreOrderFragmentsBuilder(((t_ScoreOrderFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = ScoreOrderFragmentsBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(PY_TYPE(ScoreOrderFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *QueryNodeOperation::class$ = NULL;
              jmethodID *QueryNodeOperation::mids$ = NULL;
              bool QueryNodeOperation::live$ = false;

              jclass QueryNodeOperation::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/QueryNodeOperation");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_logicalAnd_aa7139907c01a7d7] = env->getStaticMethodID(cls, "logicalAnd", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeOperation::logicalAnd(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callStaticObjectMethod(cls, mids$[mid_logicalAnd_aa7139907c01a7d7], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_QueryNodeOperation__methods_[] = {
                DECLARE_METHOD(t_QueryNodeOperation, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeOperation, logicalAnd, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNodeOperation)[] = {
                { Py_tp_methods, t_QueryNodeOperation__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNodeOperation)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNodeOperation, t_QueryNodeOperation, QueryNodeOperation);

              void t_QueryNodeOperation::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeOperation), &PY_TYPE_DEF(QueryNodeOperation), module, "QueryNodeOperation", 0);
              }

              void t_QueryNodeOperation::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeOperation), "class_", make_descriptor(QueryNodeOperation::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeOperation), "wrapfn_", make_descriptor(t_QueryNodeOperation::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeOperation), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeOperation_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeOperation::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeOperation::wrap_Object(QueryNodeOperation(((t_QueryNodeOperation *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeOperation_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeOperation::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNodeOperation_logicalAnd(PyTypeObject *type, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::QueryNodeOperation::logicalAnd(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "logicalAnd", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilter::class$ = NULL;
          jmethodID *LowerCaseFilter::mids$ = NULL;
          bool LowerCaseFilter::live$ = false;

          jclass LowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::LowerCaseFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LowerCaseFilter)[] = {
            { Py_tp_methods, t_LowerCaseFilter__methods_ },
            { Py_tp_init, (void *) t_LowerCaseFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LowerCaseFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::LowerCaseFilter),
            NULL
          };

          DEFINE_TYPE(LowerCaseFilter, t_LowerCaseFilter, LowerCaseFilter);

          void t_LowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilter), &PY_TYPE_DEF(LowerCaseFilter), module, "LowerCaseFilter", 0);
          }

          void t_LowerCaseFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats::mids$ = NULL;
        bool DocValuesStats::live$ = false;

        jclass DocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_count_9972fcc56b44e79d] = env->getMethodID(cls, "count", "()I");
            mids$[mid_field_db9b55ba01e03e4b] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_max_d6bcd06f3102c4d9] = env->getMethodID(cls, "max", "()Ljava/lang/Object;");
            mids$[mid_min_d6bcd06f3102c4d9] = env->getMethodID(cls, "min", "()Ljava/lang/Object;");
            mids$[mid_missing_9972fcc56b44e79d] = env->getMethodID(cls, "missing", "()I");
            mids$[mid_hasValue_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasValue", "(I)Z");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");
            mids$[mid_init_07cae694a8cf1c6d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint DocValuesStats::count() const
        {
          return env->callIntMethod(this$, mids$[mid_count_9972fcc56b44e79d]);
        }

        ::java::lang::String DocValuesStats::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_db9b55ba01e03e4b]));
        }

        ::java::lang::Object DocValuesStats::max$() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_max_d6bcd06f3102c4d9]));
        }

        ::java::lang::Object DocValuesStats::min$() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_min_d6bcd06f3102c4d9]));
        }

        jint DocValuesStats::missing() const
        {
          return env->callIntMethod(this$, mids$[mid_missing_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/DocValuesStats$SortedSetDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$SortedDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$SortedDoubleDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$SortedLongDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$SortedNumericDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$DoubleDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$LongDocValuesStats.h"
#include "org/apache/lucene/search/DocValuesStats$NumericDocValuesStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats_of_(t_DocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats_count(t_DocValuesStats *self);
        static PyObject *t_DocValuesStats_field(t_DocValuesStats *self);
        static PyObject *t_DocValuesStats_max(t_DocValuesStats *self);
        static PyObject *t_DocValuesStats_min(t_DocValuesStats *self);
        static PyObject *t_DocValuesStats_missing(t_DocValuesStats *self);
        static PyObject *t_DocValuesStats_get__parameters_(t_DocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats, count, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats, field, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats, max, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats, min, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats, missing, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValuesStats, t_DocValuesStats, DocValuesStats);
        PyObject *t_DocValuesStats::wrap_Object(const DocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats *self = (t_DocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats *self = (t_DocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats), &PY_TYPE_DEF(DocValuesStats), module, "DocValuesStats", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "SortedSetDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$SortedSetDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "SortedDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$SortedDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "SortedDoubleDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$SortedDoubleDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "SortedLongDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$SortedLongDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "SortedNumericDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$SortedNumericDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "DoubleDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$DoubleDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "LongDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$LongDocValuesStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "NumericDocValuesStats", make_descriptor(&PY_TYPE_DEF(DocValuesStats$NumericDocValuesStats)));
        }

        void t_DocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "class_", make_descriptor(DocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats::wrap_Object(DocValuesStats(((t_DocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats_of_(t_DocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DocValuesStats_count(t_DocValuesStats *self)
        {
          jint result;
          OBJ_CALL(result = self->object.count());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DocValuesStats_field(t_DocValuesStats *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_DocValuesStats_max(t_DocValuesStats *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.max$());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_DocValuesStats_min(t_DocValuesStats *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.min$());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_DocValuesStats_missing(t_DocValuesStats *self)
        {
          jint result;
          OBJ_CALL(result = self->object.missing());
          return PyLong_FromLong((long) result);
        }
        static PyObject *t_DocValuesStats_get__parameters_(t_DocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianAnalyzer::class$ = NULL;
          jmethodID *HungarianAnalyzer::mids$ = NULL;
          bool HungarianAnalyzer::live$ = false;
          ::java::lang::String *HungarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HungarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianAnalyzer::HungarianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet HungarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data);
          static PyGetSetDef t_HungarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HungarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HungarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HungarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HungarianAnalyzer)[] = {
            { Py_tp_methods, t_HungarianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_HungarianAnalyzer_init_ },
            { Py_tp_getset, t_HungarianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HungarianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(HungarianAnalyzer, t_HungarianAnalyzer, HungarianAnalyzer);

          void t_HungarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianAnalyzer), &PY_TYPE_DEF(HungarianAnalyzer), module, "HungarianAnalyzer", 0);
          }

          void t_HungarianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianAnalyzer), "class_", make_descriptor(HungarianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianAnalyzer), "wrapfn_", make_descriptor(t_HungarianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HungarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HungarianAnalyzer::wrap_Object(HungarianAnalyzer(((t_HungarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                HungarianAnalyzer object((jobject) NULL);

                INT_CALL(object = HungarianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hu::HungarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SwedishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SwedishStemmer::class$ = NULL;
        jmethodID *SwedishStemmer::mids$ = NULL;
        bool SwedishStemmer::live$ = false;

        jclass SwedishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SwedishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SwedishStemmer::SwedishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean SwedishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint SwedishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean SwedishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args);

        static PyMethodDef t_SwedishStemmer__methods_[] = {
          DECLARE_METHOD(t_SwedishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SwedishStemmer)[] = {
          { Py_tp_methods, t_SwedishStemmer__methods_ },
          { Py_tp_init, (void *) t_SwedishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SwedishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(SwedishStemmer, t_SwedishStemmer, SwedishStemmer);

        void t_SwedishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SwedishStemmer), &PY_TYPE_DEF(SwedishStemmer), module, "SwedishStemmer", 0);
        }

        void t_SwedishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishStemmer), "class_", make_descriptor(SwedishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishStemmer), "wrapfn_", make_descriptor(t_SwedishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SwedishStemmer::initializeClass, 1)))
            return NULL;
          return t_SwedishStemmer::wrap_Object(SwedishStemmer(((t_SwedishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SwedishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SwedishStemmer object((jobject) NULL);

          INT_CALL(object = SwedishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SwedishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SwedishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SwedishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizer::class$ = NULL;
          jmethodID *EdgeNGramTokenizer::mids$ = NULL;
          bool EdgeNGramTokenizer::live$ = false;
          jint EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE = (jint) 0;

          jclass EdgeNGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_302276806b767fde] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;II)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizer::EdgeNGramTokenizer(jint a0, jint a1) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          EdgeNGramTokenizer::EdgeNGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::ngram::NGramTokenizer(env->newObject(initializeClass, &mids$, mid_init$_302276806b767fde, a0.this$, a1, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_EdgeNGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EdgeNGramTokenizer)[] = {
            { Py_tp_methods, t_EdgeNGramTokenizer__methods_ },
            { Py_tp_init, (void *) t_EdgeNGramTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EdgeNGramTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::ngram::NGramTokenizer),
            NULL
          };

          DEFINE_TYPE(EdgeNGramTokenizer, t_EdgeNGramTokenizer, EdgeNGramTokenizer);

          void t_EdgeNGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizer), &PY_TYPE_DEF(EdgeNGramTokenizer), module, "EdgeNGramTokenizer", 0);
          }

          void t_EdgeNGramTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizer), "class_", make_descriptor(EdgeNGramTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizer), "wrapfn_", make_descriptor(t_EdgeNGramTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizer), "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MAX_GRAM_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizer), "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenizer::DEFAULT_MIN_GRAM_SIZE));
          }

          static PyObject *t_EdgeNGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizer::wrap_Object(EdgeNGramTokenizer(((t_EdgeNGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizer_init_(t_EdgeNGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jint a1;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                jint a2;
                EdgeNGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = EdgeNGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash::class$ = NULL;
        jmethodID *BytesRefHash::mids$ = NULL;
        bool BytesRefHash::live$ = false;
        jint BytesRefHash::DEFAULT_CAPACITY = (jint) 0;

        jclass BytesRefHash::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_b9f6105a1b83c49f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;)V");
            mids$[mid_init$_12b0e1cf87e2cb2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;ILorg/apache/lucene/util/BytesRefHash$BytesStartArray;)V");
            mids$[mid_add_1c2e5fa34f4312de] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_addByPoolOffset_1e143afe1894d213] = env->getMethodID(cls, "addByPoolOffset", "(I)I");
            mids$[mid_byteStart_1e143afe1894d213] = env->getMethodID(cls, "byteStart", "(I)I");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clear_9d72768e8fdce2b7] = env->getMethodID(cls, "clear", "(Z)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_compact_d2c45ef07a322466] = env->getMethodID(cls, "compact", "()[I");
            mids$[mid_find_1c2e5fa34f4312de] = env->getMethodID(cls, "find", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_get_79b9a35851668850] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reinit_f2cc1bce94666404] = env->getMethodID(cls, "reinit", "()V");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_d2c45ef07a322466] = env->getMethodID(cls, "sort", "()[I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CAPACITY = env->getStaticIntField(cls, "DEFAULT_CAPACITY");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash::BytesRefHash() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b9f6105a1b83c49f, a0.this$)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0, jint a1, const ::org::apache::lucene::util::BytesRefHash$BytesStartArray & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_12b0e1cf87e2cb2c, a0.this$, a1, a2.this$)) {}

        jint BytesRefHash::add(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_add_1c2e5fa34f4312de], a0.this$);
        }

        jint BytesRefHash::addByPoolOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_addByPoolOffset_1e143afe1894d213], a0);
        }

        jint BytesRefHash::byteStart(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_byteStart_1e143afe1894d213], a0);
        }

        void BytesRefHash::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void BytesRefHash::clear(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_9d72768e8fdce2b7], a0);
        }

        void BytesRefHash::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        JArray< jint > BytesRefHash::compact() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_compact_d2c45ef07a322466]));
        }

        jint BytesRefHash::find(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_1c2e5fa34f4312de], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefHash::get(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_79b9a35851668850], a0, a1.this$));
        }

        jlong BytesRefHash::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void BytesRefHash::reinit() const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_f2cc1bce94666404]);
        }

        jint BytesRefHash::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        JArray< jint > BytesRefHash::sort() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_sort_d2c45ef07a322466]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_compact(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_ramBytesUsed(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self);

        static PyMethodDef t_BytesRefHash__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, add, METH_O),
          DECLARE_METHOD(t_BytesRefHash, addByPoolOffset, METH_O),
          DECLARE_METHOD(t_BytesRefHash, byteStart, METH_O),
          DECLARE_METHOD(t_BytesRefHash, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, close, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, compact, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, find, METH_O),
          DECLARE_METHOD(t_BytesRefHash, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, reinit, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, sort, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefHash)[] = {
          { Py_tp_methods, t_BytesRefHash__methods_ },
          { Py_tp_init, (void *) t_BytesRefHash_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefHash)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefHash, t_BytesRefHash, BytesRefHash);

        void t_BytesRefHash::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash), &PY_TYPE_DEF(BytesRefHash), module, "BytesRefHash", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "DirectBytesStartArray", make_descriptor(&PY_TYPE_DEF(BytesRefHash$DirectBytesStartArray)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "BytesStartArray", make_descriptor(&PY_TYPE_DEF(BytesRefHash$BytesStartArray)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "MaxBytesLengthExceededException", make_descriptor(&PY_TYPE_DEF(BytesRefHash$MaxBytesLengthExceededException)));
        }

        void t_BytesRefHash::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "class_", make_descriptor(BytesRefHash::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "wrapfn_", make_descriptor(t_BytesRefHash::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefHash::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefHash), "DEFAULT_CAPACITY", make_descriptor(BytesRefHash::DEFAULT_CAPACITY));
        }

        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash::wrap_Object(BytesRefHash(((t_BytesRefHash *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRefHash object((jobject) NULL);

              INT_CALL(object = BytesRefHash());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool::initializeClass, &a0))
              {
                INT_CALL(object = BytesRefHash(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::BytesRefHash$BytesStartArray a2((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::util::ByteBlockPool::initializeClass, ::org::apache::lucene::util::BytesRefHash$BytesStartArray::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRefHash(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.addByPoolOffset(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addByPoolOffset", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteStart(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteStart", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_compact(t_BytesRefHash *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.compact());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_ramBytesUsed(t_BytesRefHash *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.reinit());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.sort());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/POS.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *POS::class$ = NULL;
          jmethodID *POS::mids$ = NULL;
          bool POS::live$ = false;

          jclass POS::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/POS");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_resolveTag_e52ac50b8a1444da] = env->getStaticMethodID(cls, "resolveTag", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_resolveTag_ab2af570a7fd89e3] = env->getStaticMethodID(cls, "resolveTag", "(B)Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_resolveType_6c89cd379c969f98] = env->getStaticMethodID(cls, "resolveType", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/POS$Type;");
              mids$[mid_resolveType_455fefa575977430] = env->getStaticMethodID(cls, "resolveType", "(B)Lorg/apache/lucene/analysis/ko/POS$Type;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          POS::POS() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::analysis::ko::POS$Tag POS::resolveTag(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callStaticObjectMethod(cls, mids$[mid_resolveTag_e52ac50b8a1444da], a0.this$));
          }

          ::org::apache::lucene::analysis::ko::POS$Tag POS::resolveTag(jbyte a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callStaticObjectMethod(cls, mids$[mid_resolveTag_ab2af570a7fd89e3], a0));
          }

          ::org::apache::lucene::analysis::ko::POS$Type POS::resolveType(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::ko::POS$Type(env->callStaticObjectMethod(cls, mids$[mid_resolveType_6c89cd379c969f98], a0.this$));
          }

          ::org::apache::lucene::analysis::ko::POS$Type POS::resolveType(jbyte a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::ko::POS$Type(env->callStaticObjectMethod(cls, mids$[mid_resolveType_455fefa575977430], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_POS_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_POS_instance_(PyTypeObject *type, PyObject *arg);
          static int t_POS_init_(t_POS *self, PyObject *args, PyObject *kwds);
          static PyObject *t_POS_resolveTag(PyTypeObject *type, PyObject *args);
          static PyObject *t_POS_resolveType(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_POS__methods_[] = {
            DECLARE_METHOD(t_POS, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS, resolveTag, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_POS, resolveType, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(POS)[] = {
            { Py_tp_methods, t_POS__methods_ },
            { Py_tp_init, (void *) t_POS_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(POS)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(POS, t_POS, POS);

          void t_POS::install(PyObject *module)
          {
            installType(&PY_TYPE(POS), &PY_TYPE_DEF(POS), module, "POS", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS), "Tag", make_descriptor(&PY_TYPE_DEF(POS$Tag)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS), "Type", make_descriptor(&PY_TYPE_DEF(POS$Type)));
          }

          void t_POS::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS), "class_", make_descriptor(POS::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS), "wrapfn_", make_descriptor(t_POS::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_POS_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, POS::initializeClass, 1)))
              return NULL;
            return t_POS::wrap_Object(POS(((t_POS *) arg)->object.this$));
          }
          static PyObject *t_POS_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, POS::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_POS_init_(t_POS *self, PyObject *args, PyObject *kwds)
          {
            POS object((jobject) NULL);

            INT_CALL(object = POS());
            self->object = object;

            return 0;
          }

          static PyObject *t_POS_resolveTag(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS::resolveTag(a0));
                  return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
                }
              }
              {
                jbyte a0;
                ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

                if (!parseArgs(args, "B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS::resolveTag(a0));
                  return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "resolveTag", args);
            return NULL;
          }

          static PyObject *t_POS_resolveType(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS::resolveType(a0));
                  return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
                }
              }
              {
                jbyte a0;
                ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

                if (!parseArgs(args, "B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS::resolveType(a0));
                  return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "resolveType", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey.h"
#include "org/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey.h"
#include "java/lang/Long.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DiversifiedTopDocsCollector$ScoreDocKey::class$ = NULL;
        jmethodID *DiversifiedTopDocsCollector$ScoreDocKey::mids$ = NULL;
        bool DiversifiedTopDocsCollector$ScoreDocKey::live$ = false;

        jclass DiversifiedTopDocsCollector$ScoreDocKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getKey_24165e10e82b50a8] = env->getMethodID(cls, "getKey", "()Ljava/lang/Long;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Long DiversifiedTopDocsCollector$ScoreDocKey::getKey() const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getKey_24165e10e82b50a8]));
        }

        ::java::lang::String DiversifiedTopDocsCollector$ScoreDocKey::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_of_(t_DiversifiedTopDocsCollector$ScoreDocKey *self, PyObject *args);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_getKey(t_DiversifiedTopDocsCollector$ScoreDocKey *self);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_toString(t_DiversifiedTopDocsCollector$ScoreDocKey *self, PyObject *args);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_get__key(t_DiversifiedTopDocsCollector$ScoreDocKey *self, void *data);
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_get__parameters_(t_DiversifiedTopDocsCollector$ScoreDocKey *self, void *data);
        static PyGetSetDef t_DiversifiedTopDocsCollector$ScoreDocKey__fields_[] = {
          DECLARE_GET_FIELD(t_DiversifiedTopDocsCollector$ScoreDocKey, key),
          DECLARE_GET_FIELD(t_DiversifiedTopDocsCollector$ScoreDocKey, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DiversifiedTopDocsCollector$ScoreDocKey__methods_[] = {
          DECLARE_METHOD(t_DiversifiedTopDocsCollector$ScoreDocKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector$ScoreDocKey, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector$ScoreDocKey, of_, METH_VARARGS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector$ScoreDocKey, getKey, METH_NOARGS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector$ScoreDocKey, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DiversifiedTopDocsCollector$ScoreDocKey)[] = {
          { Py_tp_methods, t_DiversifiedTopDocsCollector$ScoreDocKey__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DiversifiedTopDocsCollector$ScoreDocKey__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DiversifiedTopDocsCollector$ScoreDocKey)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::ScoreDoc),
          NULL
        };

        DEFINE_TYPE(DiversifiedTopDocsCollector$ScoreDocKey, t_DiversifiedTopDocsCollector$ScoreDocKey, DiversifiedTopDocsCollector$ScoreDocKey);
        PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_Object(const DiversifiedTopDocsCollector$ScoreDocKey& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DiversifiedTopDocsCollector$ScoreDocKey *self = (t_DiversifiedTopDocsCollector$ScoreDocKey *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DiversifiedTopDocsCollector$ScoreDocKey *self = (t_DiversifiedTopDocsCollector$ScoreDocKey *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DiversifiedTopDocsCollector$ScoreDocKey::install(PyObject *module)
        {
          installType(&PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey), &PY_TYPE_DEF(DiversifiedTopDocsCollector$ScoreDocKey), module, "DiversifiedTopDocsCollector$ScoreDocKey", 0);
        }

        void t_DiversifiedTopDocsCollector$ScoreDocKey::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey), "class_", make_descriptor(DiversifiedTopDocsCollector$ScoreDocKey::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey), "wrapfn_", make_descriptor(t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DiversifiedTopDocsCollector$ScoreDocKey::initializeClass, 1)))
            return NULL;
          return t_DiversifiedTopDocsCollector$ScoreDocKey::wrap_Object(DiversifiedTopDocsCollector$ScoreDocKey(((t_DiversifiedTopDocsCollector$ScoreDocKey *) arg)->object.this$));
        }
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DiversifiedTopDocsCollector$ScoreDocKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_of_(t_DiversifiedTopDocsCollector$ScoreDocKey *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_getKey(t_DiversifiedTopDocsCollector$ScoreDocKey *self)
        {
          ::java::lang::Long result((jobject) NULL);
          OBJ_CALL(result = self->object.getKey());
          return ::java::lang::t_Long::wrap_Object(result);
        }

        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_toString(t_DiversifiedTopDocsCollector$ScoreDocKey *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_get__parameters_(t_DiversifiedTopDocsCollector$ScoreDocKey *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DiversifiedTopDocsCollector$ScoreDocKey_get__key(t_DiversifiedTopDocsCollector$ScoreDocKey *self, void *data)
        {
          ::java::lang::Long value((jobject) NULL);
          OBJ_CALL(value = self->object.getKey());
          return ::java::lang::t_Long::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/QueryCache.h"
#include "org/apache/lucene/index/TermStates.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/util/concurrent/Executor.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher::class$ = NULL;
        jmethodID *IndexSearcher::mids$ = NULL;
        bool IndexSearcher::live$ = false;

        jclass IndexSearcher::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c5103ca988341a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_436a8b1eb9db2e88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_2fd94eadc6dc8fbc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/concurrent/Executor;)V");
            mids$[mid_init$_3650edddec3c718a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Ljava/util/concurrent/Executor;)V");
            mids$[mid_collectionStatistics_bd4a76137b8f58e2] = env->getMethodID(cls, "collectionStatistics", "(Ljava/lang/String;)Lorg/apache/lucene/search/CollectionStatistics;");
            mids$[mid_count_5621be3d00acce07] = env->getMethodID(cls, "count", "(Lorg/apache/lucene/search/Query;)I");
            mids$[mid_createWeight_b7862260851a48fa] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_doc_ee5990b4c3dd7dcd] = env->getMethodID(cls, "doc", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_8f45e7464506ed2f] = env->getMethodID(cls, "doc", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_doc_e39e052dfc96e56b] = env->getMethodID(cls, "doc", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_explain_3d9a5d3b05848187] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getDefaultQueryCache_0ccbd261f96a6228] = env->getStaticMethodID(cls, "getDefaultQueryCache", "()Lorg/apache/lucene/search/QueryCache;");
            mids$[mid_getDefaultQueryCachingPolicy_968f4e5ff0f2e957] = env->getStaticMethodID(cls, "getDefaultQueryCachingPolicy", "()Lorg/apache/lucene/search/QueryCachingPolicy;");
            mids$[mid_getDefaultSimilarity_35e3c46e8ea97897] = env->getStaticMethodID(cls, "getDefaultSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getExecutor_31f52c7375ac683e] = env->getMethodID(cls, "getExecutor", "()Ljava/util/concurrent/Executor;");
            mids$[mid_getIndexReader_3268165ce941bf52] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
            mids$[mid_getQueryCache_0ccbd261f96a6228] = env->getMethodID(cls, "getQueryCache", "()Lorg/apache/lucene/search/QueryCache;");
            mids$[mid_getQueryCachingPolicy_968f4e5ff0f2e957] = env->getMethodID(cls, "getQueryCachingPolicy", "()Lorg/apache/lucene/search/QueryCachingPolicy;");
            mids$[mid_getSimilarity_35e3c46e8ea97897] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getSlices_5096dc88ccdf524f] = env->getMethodID(cls, "getSlices", "()[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_getTopReaderContext_f9451e8f83eb5b68] = env->getMethodID(cls, "getTopReaderContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_rewrite_34fc2030a347a2fb] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");
            mids$[mid_search_8c364ba58149169f] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_f6f7fcd6cb74198a] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_2d3dee1628de3139] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/CollectorManager;)Ljava/lang/Object;");
            mids$[mid_search_9cb446108965ead4] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_d5fab85428279a24] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;Z)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_a5524b0d4b549ece] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_48d6b31afe16fb23] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_874573edd9f8b597] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;Z)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_setDefaultQueryCache_46f26f9a9e59b47d] = env->getStaticMethodID(cls, "setDefaultQueryCache", "(Lorg/apache/lucene/search/QueryCache;)V");
            mids$[mid_setDefaultQueryCachingPolicy_02f5456ab9e69884] = env->getStaticMethodID(cls, "setDefaultQueryCachingPolicy", "(Lorg/apache/lucene/search/QueryCachingPolicy;)V");
            mids$[mid_setQueryCache_46f26f9a9e59b47d] = env->getMethodID(cls, "setQueryCache", "(Lorg/apache/lucene/search/QueryCache;)V");
            mids$[mid_setQueryCachingPolicy_02f5456ab9e69884] = env->getMethodID(cls, "setQueryCachingPolicy", "(Lorg/apache/lucene/search/QueryCachingPolicy;)V");
            mids$[mid_setSimilarity_b66836c611a69874] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
            mids$[mid_termStatistics_b8d718c4f4fcd27a] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermStates;)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_termStatistics_29949deb53274f10] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;IJ)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_explain_e89fd7fa3361a5ee] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Weight;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_slices_f5a412f2854c2a12] = env->getMethodID(cls, "slices", "(Ljava/util/List;)[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_search_9be054aab2583ea2] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/Collector;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c5103ca988341a1, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_436a8b1eb9db2e88, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::concurrent::Executor & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2fd94eadc6dc8fbc, a0.this$, a1.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::java::util::concurrent::Executor & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3650edddec3c718a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::CollectionStatistics IndexSearcher::collectionStatistics(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::CollectionStatistics(env->callObjectMethod(this$, mids$[mid_collectionStatistics_bd4a76137b8f58e2], a0.this$));
        }

        jint IndexSearcher::count(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_count_5621be3d00acce07], a0.this$);
        }

        ::org::apache::lucene::search::Weight IndexSearcher::createWeight(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_b7862260851a48fa], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_ee5990b4c3dd7dcd], a0));
        }

        void IndexSearcher::doc(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doc_8f45e7464506ed2f], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_e39e052dfc96e56b], a0, a1.this$));
        }

        ::org::apache::lucene::search::Explanation IndexSearcher::explain(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_3d9a5d3b05848187], a0.this$, a1));
        }

        ::org::apache::lucene::search::QueryCache IndexSearcher::getDefaultQueryCache()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::QueryCache(env->callStaticObjectMethod(cls, mids$[mid_getDefaultQueryCache_0ccbd261f96a6228]));
        }

        ::org::apache::lucene::search::QueryCachingPolicy IndexSearcher::getDefaultQueryCachingPolicy()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::QueryCachingPolicy(env->callStaticObjectMethod(cls, mids$[mid_getDefaultQueryCachingPolicy_968f4e5ff0f2e957]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getDefaultSimilarity()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::similarities::Similarity(env->callStaticObjectMethod(cls, mids$[mid_getDefaultSimilarity_35e3c46e8ea97897]));
        }

        ::java::util::concurrent::Executor IndexSearcher::getExecutor() const
        {
          return ::java::util::concurrent::Executor(env->callObjectMethod(this$, mids$[mid_getExecutor_31f52c7375ac683e]));
        }

        ::org::apache::lucene::index::IndexReader IndexSearcher::getIndexReader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_3268165ce941bf52]));
        }

        ::org::apache::lucene::search::QueryCache IndexSearcher::getQueryCache() const
        {
          return ::org::apache::lucene::search::QueryCache(env->callObjectMethod(this$, mids$[mid_getQueryCache_0ccbd261f96a6228]));
        }

        ::org::apache::lucene::search::QueryCachingPolicy IndexSearcher::getQueryCachingPolicy() const
        {
          return ::org::apache::lucene::search::QueryCachingPolicy(env->callObjectMethod(this$, mids$[mid_getQueryCachingPolicy_968f4e5ff0f2e957]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_35e3c46e8ea97897]));
        }

        JArray< ::org::apache::lucene::search::IndexSearcher$LeafSlice > IndexSearcher::getSlices() const
        {
          return JArray< ::org::apache::lucene::search::IndexSearcher$LeafSlice >(env->callObjectMethod(this$, mids$[mid_getSlices_5096dc88ccdf524f]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexSearcher::getTopReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getTopReaderContext_f9451e8f83eb5b68]));
        }

        ::org::apache::lucene::search::Query IndexSearcher::rewrite(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_34fc2030a347a2fb], a0.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_8c364ba58149169f], a0.this$, a1));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_search_f6f7fcd6cb74198a], a0.this$, a1.this$);
        }

        ::java::lang::Object IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::CollectorManager & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_search_2d3dee1628de3139], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_9cb446108965ead4], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_d5fab85428279a24], a0.this$, a1, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_a5524b0d4b549ece], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_48d6b31afe16fb23], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_874573edd9f8b597], a0.this$, a1.this$, a2, a3.this$, a4));
        }

        void IndexSearcher::setDefaultQueryCache(const ::org::apache::lucene::search::QueryCache & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultQueryCache_46f26f9a9e59b47d], a0.this$);
        }

        void IndexSearcher::setDefaultQueryCachingPolicy(const ::org::apache::lucene::search::QueryCachingPolicy & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultQueryCachingPolicy_02f5456ab9e69884], a0.this$);
        }

        void IndexSearcher::setQueryCache(const ::org::apache::lucene::search::QueryCache & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQueryCache_46f26f9a9e59b47d], a0.this$);
        }

        void IndexSearcher::setQueryCachingPolicy(const ::org::apache::lucene::search::QueryCachingPolicy & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setQueryCachingPolicy_02f5456ab9e69884], a0.this$);
        }

        void IndexSearcher::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSimilarity_b66836c611a69874], a0.this$);
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermStates & a1) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_b8d718c4f4fcd27a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, jint a1, jlong a2) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_29949deb53274f10], a0.this$, a1, a2));
        }

        ::java::lang::String IndexSearcher::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_count(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_createWeight(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_getDefaultQueryCache(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getDefaultQueryCachingPolicy(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getExecutor(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getQueryCache(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getQueryCachingPolicy(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSlices(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_setDefaultQueryCache(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_setDefaultQueryCachingPolicy(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_setQueryCache(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_setQueryCachingPolicy(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_get__defaultQueryCache(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__defaultQueryCache(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__defaultQueryCachingPolicy(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__defaultQueryCachingPolicy(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__executor(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__queryCache(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__queryCache(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__queryCachingPolicy(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__queryCachingPolicy(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__slices(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data);
        static PyGetSetDef t_IndexSearcher__fields_[] = {
          DECLARE_GETSET_FIELD(t_IndexSearcher, defaultQueryCache),
          DECLARE_GETSET_FIELD(t_IndexSearcher, defaultQueryCachingPolicy),
          DECLARE_GET_FIELD(t_IndexSearcher, defaultSimilarity),
          DECLARE_GET_FIELD(t_IndexSearcher, executor),
          DECLARE_GET_FIELD(t_IndexSearcher, indexReader),
          DECLARE_GETSET_FIELD(t_IndexSearcher, queryCache),
          DECLARE_GETSET_FIELD(t_IndexSearcher, queryCachingPolicy),
          DECLARE_GETSET_FIELD(t_IndexSearcher, similarity),
          DECLARE_GET_FIELD(t_IndexSearcher, slices),
          DECLARE_GET_FIELD(t_IndexSearcher, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, collectionStatistics, METH_O),
          DECLARE_METHOD(t_IndexSearcher, count, METH_O),
          DECLARE_METHOD(t_IndexSearcher, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, doc, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultQueryCache, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultQueryCachingPolicy, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultSimilarity, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getExecutor, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getIndexReader, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getQueryCache, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getQueryCachingPolicy, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSlices, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getTopReaderContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, rewrite, METH_O),
          DECLARE_METHOD(t_IndexSearcher, search, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, setDefaultQueryCache, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, setDefaultQueryCachingPolicy, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, setQueryCache, METH_O),
          DECLARE_METHOD(t_IndexSearcher, setQueryCachingPolicy, METH_O),
          DECLARE_METHOD(t_IndexSearcher, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexSearcher, termStatistics, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSearcher)[] = {
          { Py_tp_methods, t_IndexSearcher__methods_ },
          { Py_tp_init, (void *) t_IndexSearcher_init_ },
          { Py_tp_getset, t_IndexSearcher__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSearcher)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSearcher, t_IndexSearcher, IndexSearcher);

        void t_IndexSearcher::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher), &PY_TYPE_DEF(IndexSearcher), module, "IndexSearcher", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher), "LeafSlice", make_descriptor(&PY_TYPE_DEF(IndexSearcher$LeafSlice)));
        }

        void t_IndexSearcher::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher), "class_", make_descriptor(IndexSearcher::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher), "wrapfn_", make_descriptor(t_IndexSearcher::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher::wrap_Object(IndexSearcher(((t_IndexSearcher *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::util::concurrent::Executor a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::concurrent::Executor::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::java::util::concurrent::Executor a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::java::util::concurrent::Executor::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::CollectionStatistics result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.collectionStatistics(a0));
            return ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "collectionStatistics", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_count(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.count(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_createWeight(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doc(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.doc(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.doc(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "doc", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_getDefaultQueryCache(PyTypeObject *type)
        {
          ::org::apache::lucene::search::QueryCache result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultQueryCache());
          return ::org::apache::lucene::search::t_QueryCache::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getDefaultQueryCachingPolicy(PyTypeObject *type)
        {
          ::org::apache::lucene::search::QueryCachingPolicy result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultQueryCachingPolicy());
          return ::org::apache::lucene::search::t_QueryCachingPolicy::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getExecutor(t_IndexSearcher *self)
        {
          ::java::util::concurrent::Executor result((jobject) NULL);
          OBJ_CALL(result = self->object.getExecutor());
          return ::java::util::concurrent::t_Executor::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getQueryCache(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::QueryCache result((jobject) NULL);
          OBJ_CALL(result = self->object.getQueryCache());
          return ::org::apache::lucene::search::t_QueryCache::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getQueryCachingPolicy(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::QueryCachingPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getQueryCachingPolicy());
          return ::org::apache::lucene::search::t_QueryCachingPolicy::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSlices(t_IndexSearcher *self)
        {
          JArray< ::org::apache::lucene::search::IndexSearcher$LeafSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_IndexSearcher$LeafSlice::wrap_jobject);
        }

        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.search(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::CollectorManager a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::CollectorManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_CollectorManager::parameters_))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return p1 != NULL && p1[0] != NULL ? wrapType(p1[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIkZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setDefaultQueryCache(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::QueryCache a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCache::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::IndexSearcher::setDefaultQueryCache(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultQueryCache", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setDefaultQueryCachingPolicy(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::QueryCachingPolicy a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::IndexSearcher::setDefaultQueryCachingPolicy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultQueryCachingPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setQueryCache(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::QueryCache a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCache::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQueryCache(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQueryCache", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setQueryCachingPolicy(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::QueryCachingPolicy a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setQueryCachingPolicy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setQueryCachingPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setSimilarity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermStates a1((jobject) NULL);
              ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.termStatistics(a0, a1));
                return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jlong a2;
              ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

              if (!parseArgs(args, "kIJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.termStatistics(a0, a1, a2));
                return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "termStatistics", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexSearcher), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSearcher_get__defaultQueryCache(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::QueryCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultQueryCache());
          return ::org::apache::lucene::search::t_QueryCache::wrap_Object(value);
        }
        static int t_IndexSearcher_set__defaultQueryCache(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::QueryCache value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCache::initializeClass, &value))
            {
              INT_CALL(self->object.setDefaultQueryCache(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultQueryCache", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__defaultQueryCachingPolicy(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::QueryCachingPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultQueryCachingPolicy());
          return ::org::apache::lucene::search::t_QueryCachingPolicy::wrap_Object(value);
        }
        static int t_IndexSearcher_set__defaultQueryCachingPolicy(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::QueryCachingPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setDefaultQueryCachingPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultQueryCachingPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__executor(t_IndexSearcher *self, void *data)
        {
          ::java::util::concurrent::Executor value((jobject) NULL);
          OBJ_CALL(value = self->object.getExecutor());
          return ::java::util::concurrent::t_Executor::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__queryCache(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::QueryCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getQueryCache());
          return ::org::apache::lucene::search::t_QueryCache::wrap_Object(value);
        }
        static int t_IndexSearcher_set__queryCache(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::QueryCache value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCache::initializeClass, &value))
            {
              INT_CALL(self->object.setQueryCache(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "queryCache", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__queryCachingPolicy(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::QueryCachingPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getQueryCachingPolicy());
          return ::org::apache::lucene::search::t_QueryCachingPolicy::wrap_Object(value);
        }
        static int t_IndexSearcher_set__queryCachingPolicy(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::QueryCachingPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setQueryCachingPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "queryCachingPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__slices(t_IndexSearcher *self, void *data)
        {
          JArray< ::org::apache::lucene::search::IndexSearcher$LeafSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_IndexSearcher$LeafSlice::wrap_jobject);
        }

        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/CheckJoinIndex.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *CheckJoinIndex::class$ = NULL;
          jmethodID *CheckJoinIndex::mids$ = NULL;
          bool CheckJoinIndex::live$ = false;

          jclass CheckJoinIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/CheckJoinIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_check_ab55bc5143390b10] = env->getStaticMethodID(cls, "check", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/join/BitSetProducer;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CheckJoinIndex::check(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::join::BitSetProducer & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_check_ab55bc5143390b10], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_CheckJoinIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CheckJoinIndex_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CheckJoinIndex_check(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_CheckJoinIndex__methods_[] = {
            DECLARE_METHOD(t_CheckJoinIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CheckJoinIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CheckJoinIndex, check, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CheckJoinIndex)[] = {
            { Py_tp_methods, t_CheckJoinIndex__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CheckJoinIndex)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CheckJoinIndex, t_CheckJoinIndex, CheckJoinIndex);

          void t_CheckJoinIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(CheckJoinIndex), &PY_TYPE_DEF(CheckJoinIndex), module, "CheckJoinIndex", 0);
          }

          void t_CheckJoinIndex::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CheckJoinIndex), "class_", make_descriptor(CheckJoinIndex::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CheckJoinIndex), "wrapfn_", make_descriptor(t_CheckJoinIndex::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CheckJoinIndex), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CheckJoinIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CheckJoinIndex::initializeClass, 1)))
              return NULL;
            return t_CheckJoinIndex::wrap_Object(CheckJoinIndex(((t_CheckJoinIndex *) arg)->object.this$));
          }
          static PyObject *t_CheckJoinIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CheckJoinIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CheckJoinIndex_check(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::join::BitSetProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::search::join::CheckJoinIndex::check(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "check", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldTermIterator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldTermIterator::class$ = NULL;
        jmethodID *FieldTermIterator::mids$ = NULL;
        bool FieldTermIterator::live$ = false;

        jclass FieldTermIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldTermIterator");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldTermIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldTermIterator_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_FieldTermIterator__methods_[] = {
          DECLARE_METHOD(t_FieldTermIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldTermIterator, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldTermIterator)[] = {
          { Py_tp_methods, t_FieldTermIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldTermIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldTermIterator, t_FieldTermIterator, FieldTermIterator);

        void t_FieldTermIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldTermIterator), &PY_TYPE_DEF(FieldTermIterator), module, "FieldTermIterator", 0);
        }

        void t_FieldTermIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermIterator), "class_", make_descriptor(FieldTermIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermIterator), "wrapfn_", make_descriptor(t_FieldTermIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldTermIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldTermIterator::initializeClass, 1)))
            return NULL;
          return t_FieldTermIterator::wrap_Object(FieldTermIterator(((t_FieldTermIterator *) arg)->object.this$));
        }
        static PyObject *t_FieldTermIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldTermIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinSortField.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinSortField::class$ = NULL;
          jmethodID *ToParentBlockJoinSortField::mids$ = NULL;
          bool ToParentBlockJoinSortField::live$ = false;

          jclass ToParentBlockJoinSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2d99ba5d0707aed6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/join/BitSetProducer;Lorg/apache/lucene/search/join/BitSetProducer;)V");
              mids$[mid_init$_0941baf68e7d5ee9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZZLorg/apache/lucene/search/join/BitSetProducer;Lorg/apache/lucene/search/join/BitSetProducer;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getComparator_d36dcbe0af6d9ef2] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::join::BitSetProducer & a3, const ::org::apache::lucene::search::join::BitSetProducer & a4) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_2d99ba5d0707aed6, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::search::join::BitSetProducer & a4, const ::org::apache::lucene::search::join::BitSetProducer & a5) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_0941baf68e7d5ee9, a0.this$, a1.this$, a2, a3, a4.this$, a5.this$)) {}

          jboolean ToParentBlockJoinSortField::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_d36dcbe0af6d9ef2], a0, a1));
          }

          jint ToParentBlockJoinSortField::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinSortField_equals(t_ToParentBlockJoinSortField *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinSortField_hashCode(t_ToParentBlockJoinSortField *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinSortField__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ToParentBlockJoinSortField)[] = {
            { Py_tp_methods, t_ToParentBlockJoinSortField__methods_ },
            { Py_tp_init, (void *) t_ToParentBlockJoinSortField_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ToParentBlockJoinSortField)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SortField),
            NULL
          };

          DEFINE_TYPE(ToParentBlockJoinSortField, t_ToParentBlockJoinSortField, ToParentBlockJoinSortField);

          void t_ToParentBlockJoinSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinSortField), &PY_TYPE_DEF(ToParentBlockJoinSortField), module, "ToParentBlockJoinSortField", 0);
          }

          void t_ToParentBlockJoinSortField::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinSortField), "class_", make_descriptor(ToParentBlockJoinSortField::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinSortField), "wrapfn_", make_descriptor(t_ToParentBlockJoinSortField::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ToParentBlockJoinSortField), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinSortField::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinSortField::wrap_Object(ToParentBlockJoinSortField(((t_ToParentBlockJoinSortField *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::search::join::BitSetProducer a3((jobject) NULL);
                ::org::apache::lucene::search::join::BitSetProducer a4((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::search::join::BitSetProducer a4((jobject) NULL);
                ::org::apache::lucene::search::join::BitSetProducer a5((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, ::org::apache::lucene::search::join::BitSetProducer::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinSortField_equals(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_ToParentBlockJoinSortField_hashCode(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/minhash/MinHashFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace minhash {

          ::java::lang::Class *MinHashFilterFactory::class$ = NULL;
          jmethodID *MinHashFilterFactory::mids$ = NULL;
          bool MinHashFilterFactory::live$ = false;
          ::java::lang::String *MinHashFilterFactory::NAME = NULL;

          jclass MinHashFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/minhash/MinHashFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinHashFilterFactory::MinHashFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream MinHashFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace minhash {
          static PyObject *t_MinHashFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinHashFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinHashFilterFactory_init_(t_MinHashFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinHashFilterFactory_create(t_MinHashFilterFactory *self, PyObject *args);

          static PyMethodDef t_MinHashFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MinHashFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinHashFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinHashFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MinHashFilterFactory)[] = {
            { Py_tp_methods, t_MinHashFilterFactory__methods_ },
            { Py_tp_init, (void *) t_MinHashFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MinHashFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(MinHashFilterFactory, t_MinHashFilterFactory, MinHashFilterFactory);

          void t_MinHashFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MinHashFilterFactory), &PY_TYPE_DEF(MinHashFilterFactory), module, "MinHashFilterFactory", 0);
          }

          void t_MinHashFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilterFactory), "class_", make_descriptor(MinHashFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilterFactory), "wrapfn_", make_descriptor(t_MinHashFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(MinHashFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinHashFilterFactory), "NAME", make_descriptor(j2p(*MinHashFilterFactory::NAME)));
          }

          static PyObject *t_MinHashFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinHashFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MinHashFilterFactory::wrap_Object(MinHashFilterFactory(((t_MinHashFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MinHashFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinHashFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinHashFilterFactory_init_(t_MinHashFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MinHashFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MinHashFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MinHashFilterFactory_create(t_MinHashFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MinHashFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizer::class$ = NULL;
          jmethodID *WhitespaceTokenizer::mids$ = NULL;
          bool WhitespaceTokenizer::live$ = false;

          jclass WhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_541d20dfedf4268e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
              mids$[mid_isTokenChar_a1d30e1ee40c89a2] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizer::WhitespaceTokenizer() : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(jint a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_541d20dfedf4268e, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WhitespaceTokenizer)[] = {
            { Py_tp_methods, t_WhitespaceTokenizer__methods_ },
            { Py_tp_init, (void *) t_WhitespaceTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WhitespaceTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharTokenizer),
            NULL
          };

          DEFINE_TYPE(WhitespaceTokenizer, t_WhitespaceTokenizer, WhitespaceTokenizer);

          void t_WhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizer), &PY_TYPE_DEF(WhitespaceTokenizer), module, "WhitespaceTokenizer", 0);
          }

          void t_WhitespaceTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizer), "class_", make_descriptor(WhitespaceTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizer), "wrapfn_", make_descriptor(t_WhitespaceTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizer::wrap_Object(WhitespaceTokenizer(((t_WhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WhitespaceTokenizer object((jobject) NULL);

                INT_CALL(object = WhitespaceTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilter::class$ = NULL;
          jmethodID *SwedishLightStemFilter::mids$ = NULL;
          bool SwedishLightStemFilter::live$ = false;

          jclass SwedishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilter::SwedishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SwedishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SwedishLightStemFilter)[] = {
            { Py_tp_methods, t_SwedishLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_SwedishLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SwedishLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SwedishLightStemFilter, t_SwedishLightStemFilter, SwedishLightStemFilter);

          void t_SwedishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilter), &PY_TYPE_DEF(SwedishLightStemFilter), module, "SwedishLightStemFilter", 0);
          }

          void t_SwedishLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilter), "class_", make_descriptor(SwedishLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilter), "wrapfn_", make_descriptor(t_SwedishLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilter::wrap_Object(SwedishLightStemFilter(((t_SwedishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SwedishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SwedishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SwedishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTypingFilter.h"
#include "org/apache/lucene/analysis/pattern/PatternTypingFilter$PatternTypingRule.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTypingFilter::class$ = NULL;
          jmethodID *PatternTypingFilter::mids$ = NULL;
          bool PatternTypingFilter::live$ = false;

          jclass PatternTypingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTypingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8e91929cfc172587] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[Lorg/apache/lucene/analysis/pattern/PatternTypingFilter$PatternTypingRule;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTypingFilter::PatternTypingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< ::org::apache::lucene::analysis::pattern::PatternTypingFilter$PatternTypingRule > & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8e91929cfc172587, a0.this$, a1.this$)) {}

          jboolean PatternTypingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTypingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTypingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTypingFilter_init_(t_PatternTypingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTypingFilter_incrementToken(t_PatternTypingFilter *self, PyObject *args);

          static PyMethodDef t_PatternTypingFilter__methods_[] = {
            DECLARE_METHOD(t_PatternTypingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternTypingFilter)[] = {
            { Py_tp_methods, t_PatternTypingFilter__methods_ },
            { Py_tp_init, (void *) t_PatternTypingFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternTypingFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PatternTypingFilter, t_PatternTypingFilter, PatternTypingFilter);

          void t_PatternTypingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTypingFilter), &PY_TYPE_DEF(PatternTypingFilter), module, "PatternTypingFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter), "PatternTypingRule", make_descriptor(&PY_TYPE_DEF(PatternTypingFilter$PatternTypingRule)));
          }

          void t_PatternTypingFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter), "class_", make_descriptor(PatternTypingFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter), "wrapfn_", make_descriptor(t_PatternTypingFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTypingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTypingFilter::initializeClass, 1)))
              return NULL;
            return t_PatternTypingFilter::wrap_Object(PatternTypingFilter(((t_PatternTypingFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternTypingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTypingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTypingFilter_init_(t_PatternTypingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            JArray< ::org::apache::lucene::analysis::pattern::PatternTypingFilter$PatternTypingRule > a1((jobject) NULL);
            PatternTypingFilter object((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::pattern::PatternTypingFilter$PatternTypingRule::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternTypingFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTypingFilter_incrementToken(t_PatternTypingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PatternTypingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSLockFactory::class$ = NULL;
        jmethodID *FSLockFactory::mids$ = NULL;
        bool FSLockFactory::live$ = false;

        jclass FSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_c63b48861699a138] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/store/FSLockFactory;");
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_obtainFSLock_6e0f096ad0a821f7] = env->getMethodID(cls, "obtainFSLock", "(Lorg/apache/lucene/store/FSDirectory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FSLockFactory::FSLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        FSLockFactory FSLockFactory::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return FSLockFactory(env->callStaticObjectMethod(cls, mids$[mid_getDefault_c63b48861699a138]));
        }

        ::org::apache::lucene::store::Lock FSLockFactory::obtainLock(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_6aee55f49034dd72], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FSLockFactory_getDefault(PyTypeObject *type);
        static PyObject *t_FSLockFactory_obtainLock(t_FSLockFactory *self, PyObject *args);
        static PyObject *t_FSLockFactory_get__default(t_FSLockFactory *self, void *data);
        static PyGetSetDef t_FSLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_FSLockFactory, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSLockFactory__methods_[] = {
          DECLARE_METHOD(t_FSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, obtainLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FSLockFactory)[] = {
          { Py_tp_methods, t_FSLockFactory__methods_ },
          { Py_tp_init, (void *) t_FSLockFactory_init_ },
          { Py_tp_getset, t_FSLockFactory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FSLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::LockFactory),
          NULL
        };

        DEFINE_TYPE(FSLockFactory, t_FSLockFactory, FSLockFactory);

        void t_FSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSLockFactory), &PY_TYPE_DEF(FSLockFactory), module, "FSLockFactory", 0);
        }

        void t_FSLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSLockFactory), "class_", make_descriptor(FSLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSLockFactory), "wrapfn_", make_descriptor(t_FSLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSLockFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSLockFactory::initializeClass, 1)))
            return NULL;
          return t_FSLockFactory::wrap_Object(FSLockFactory(((t_FSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          FSLockFactory object((jobject) NULL);

          INT_CALL(object = FSLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_FSLockFactory_getDefault(PyTypeObject *type)
        {
          FSLockFactory result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::FSLockFactory::getDefault());
          return t_FSLockFactory::wrap_Object(result);
        }

        static PyObject *t_FSLockFactory_obtainLock(t_FSLockFactory *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.obtainLock(a0, a1));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FSLockFactory), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_FSLockFactory_get__default(t_FSLockFactory *self, void *data)
        {
          FSLockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_FSLockFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterPostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterLeafReader$FilterPostingsEnum::class$ = NULL;
        jmethodID *FilterLeafReader$FilterPostingsEnum::mids$ = NULL;
        bool FilterLeafReader$FilterPostingsEnum::live$ = false;

        jclass FilterLeafReader$FilterPostingsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterLeafReader$FilterPostingsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_00af2cc6e79e7447] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/PostingsEnum;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafReader$FilterPostingsEnum::FilterLeafReader$FilterPostingsEnum(const ::org::apache::lucene::index::PostingsEnum & a0) : ::org::apache::lucene::index::PostingsEnum(env->newObject(initializeClass, &mids$, mid_init$_00af2cc6e79e7447, a0.this$)) {}

        jint FilterLeafReader$FilterPostingsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong FilterLeafReader$FilterPostingsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterLeafReader$FilterPostingsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint FilterLeafReader$FilterPostingsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jint FilterLeafReader$FilterPostingsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef FilterLeafReader$FilterPostingsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
        }

        jint FilterLeafReader$FilterPostingsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint FilterLeafReader$FilterPostingsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_9972fcc56b44e79d]);
        }

        jint FilterLeafReader$FilterPostingsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafReader$FilterPostingsEnum_init_(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_advance(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_cost(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_docID(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_endOffset(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_freq(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_getPayload(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_nextDoc(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_nextPosition(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_startOffset(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_get__payload(t_FilterLeafReader$FilterPostingsEnum *self, void *data);
        static PyGetSetDef t_FilterLeafReader$FilterPostingsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterLeafReader$FilterPostingsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterLeafReader$FilterPostingsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterPostingsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafReader$FilterPostingsEnum)[] = {
          { Py_tp_methods, t_FilterLeafReader$FilterPostingsEnum__methods_ },
          { Py_tp_init, (void *) t_FilterLeafReader$FilterPostingsEnum_init_ },
          { Py_tp_getset, t_FilterLeafReader$FilterPostingsEnum__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafReader$FilterPostingsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::PostingsEnum),
          NULL
        };

        DEFINE_TYPE(FilterLeafReader$FilterPostingsEnum, t_FilterLeafReader$FilterPostingsEnum, FilterLeafReader$FilterPostingsEnum);

        void t_FilterLeafReader$FilterPostingsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafReader$FilterPostingsEnum), &PY_TYPE_DEF(FilterLeafReader$FilterPostingsEnum), module, "FilterLeafReader$FilterPostingsEnum", 0);
        }

        void t_FilterLeafReader$FilterPostingsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterPostingsEnum), "class_", make_descriptor(FilterLeafReader$FilterPostingsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterPostingsEnum), "wrapfn_", make_descriptor(t_FilterLeafReader$FilterPostingsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterPostingsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafReader$FilterPostingsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterLeafReader$FilterPostingsEnum::wrap_Object(FilterLeafReader$FilterPostingsEnum(((t_FilterLeafReader$FilterPostingsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafReader$FilterPostingsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafReader$FilterPostingsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafReader$FilterPostingsEnum_init_(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          FilterLeafReader$FilterPostingsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafReader$FilterPostingsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_advance(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_cost(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_docID(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_endOffset(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_freq(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_getPayload(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_nextDoc(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_nextPosition(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_startOffset(t_FilterLeafReader$FilterPostingsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterPostingsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterPostingsEnum_get__payload(t_FilterLeafReader$FilterPostingsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/ReadingAttribute.h"
#include "org/apache/lucene/analysis/ko/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {

            ::java::lang::Class *ReadingAttribute::class$ = NULL;
            jmethodID *ReadingAttribute::mids$ = NULL;
            bool ReadingAttribute::live$ = false;

            jclass ReadingAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/tokenattributes/ReadingAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
                mids$[mid_setToken_0ac49e59706c84c7] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ko/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String ReadingAttribute::getReading() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
            }

            void ReadingAttribute::setToken(const ::org::apache::lucene::analysis::ko::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_0ac49e59706c84c7], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {
            static PyObject *t_ReadingAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttribute_getReading(t_ReadingAttribute *self);
            static PyObject *t_ReadingAttribute_setToken(t_ReadingAttribute *self, PyObject *arg);
            static PyObject *t_ReadingAttribute_get__reading(t_ReadingAttribute *self, void *data);
            static int t_ReadingAttribute_set__token(t_ReadingAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_ReadingAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_ReadingAttribute, reading),
              DECLARE_SET_FIELD(t_ReadingAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReadingAttribute__methods_[] = {
              DECLARE_METHOD(t_ReadingAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttribute, getReading, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ReadingAttribute)[] = {
              { Py_tp_methods, t_ReadingAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_ReadingAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ReadingAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(ReadingAttribute, t_ReadingAttribute, ReadingAttribute);

            void t_ReadingAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(ReadingAttribute), &PY_TYPE_DEF(ReadingAttribute), module, "ReadingAttribute", 0);
            }

            void t_ReadingAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "class_", make_descriptor(ReadingAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "wrapfn_", make_descriptor(t_ReadingAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReadingAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReadingAttribute::initializeClass, 1)))
                return NULL;
              return t_ReadingAttribute::wrap_Object(ReadingAttribute(((t_ReadingAttribute *) arg)->object.this$));
            }
            static PyObject *t_ReadingAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReadingAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_ReadingAttribute_getReading(t_ReadingAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            static PyObject *t_ReadingAttribute_setToken(t_ReadingAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ko::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_ReadingAttribute_get__reading(t_ReadingAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getReading());
              return j2p(value);
            }

            static int t_ReadingAttribute_set__token(t_ReadingAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ko::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Scorer::class$ = NULL;
          jmethodID *Scorer::mids$ = NULL;
          bool Scorer::live$ = false;

          jclass Scorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Scorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFragmentScore_58aec2b64dff50c8] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getTokenScore_58aec2b64dff50c8] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_6de1e28d9d10cd9e] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_786a99056c1d5c74] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat Scorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_58aec2b64dff50c8]);
          }

          jfloat Scorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::analysis::TokenStream Scorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_6de1e28d9d10cd9e], a0.this$));
          }

          void Scorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_786a99056c1d5c74], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self);
          static PyObject *t_Scorer_getTokenScore(t_Scorer *self);
          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data);
          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data);
          static PyGetSetDef t_Scorer__fields_[] = {
            DECLARE_GET_FIELD(t_Scorer, fragmentScore),
            DECLARE_GET_FIELD(t_Scorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Scorer__methods_[] = {
            DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, init, METH_O),
            DECLARE_METHOD(t_Scorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Scorer)[] = {
            { Py_tp_methods, t_Scorer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Scorer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Scorer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Scorer, t_Scorer, Scorer);

          void t_Scorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Scorer), &PY_TYPE_DEF(Scorer), module, "Scorer", 0);
          }

          void t_Scorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "class_", make_descriptor(Scorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
              return NULL;
            return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
          }
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Scorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_getTokenScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchAllBits::class$ = NULL;
        jmethodID *Bits$MatchAllBits::mids$ = NULL;
        bool Bits$MatchAllBits::live$ = false;

        jclass Bits$MatchAllBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchAllBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchAllBits::Bits$MatchAllBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        jboolean Bits$MatchAllBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        jint Bits$MatchAllBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self);

        static PyMethodDef t_Bits$MatchAllBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchAllBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchAllBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchAllBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Bits$MatchAllBits)[] = {
          { Py_tp_methods, t_Bits$MatchAllBits__methods_ },
          { Py_tp_init, (void *) t_Bits$MatchAllBits_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Bits$MatchAllBits)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Bits$MatchAllBits, t_Bits$MatchAllBits, Bits$MatchAllBits);

        void t_Bits$MatchAllBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchAllBits), &PY_TYPE_DEF(Bits$MatchAllBits), module, "Bits$MatchAllBits", 0);
        }

        void t_Bits$MatchAllBits::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchAllBits), "class_", make_descriptor(Bits$MatchAllBits::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchAllBits), "wrapfn_", make_descriptor(t_Bits$MatchAllBits::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits$MatchAllBits), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchAllBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchAllBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchAllBits::wrap_Object(Bits$MatchAllBits(((t_Bits$MatchAllBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchAllBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchAllBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchAllBits_init_(t_Bits$MatchAllBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchAllBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchAllBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchAllBits_get(t_Bits$MatchAllBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchAllBits_length(t_Bits$MatchAllBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *ParseException::class$ = NULL;
            jmethodID *ParseException::mids$ = NULL;
            jfieldID *ParseException::fids$ = NULL;
            bool ParseException::live$ = false;

            jclass ParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/ParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_056168ac8e5dcda9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/Token;[[I[Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ParseException::ParseException(const ::org::apache::lucene::queryparser::surround::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_056168ac8e5dcda9, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::queryparser::surround::parser::Token ParseException::_get_currentToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
            }

            void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
            }

            JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
            {
              return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
            }

            void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
            {
              env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
            }

            JArray< ::java::lang::String > ParseException::_get_tokenImage() const
            {
              return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
            }

            void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
            {
              env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

            static PyGetSetDef t_ParseException__fields_[] = {
              DECLARE_GETSET_FIELD(t_ParseException, currentToken),
              DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
              DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ParseException__methods_[] = {
              DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ParseException)[] = {
              { Py_tp_methods, t_ParseException__methods_ },
              { Py_tp_init, (void *) t_ParseException_init_ },
              { Py_tp_getset, t_ParseException__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ParseException)[] = {
              &PY_TYPE_DEF(::java::lang::Exception),
              NULL
            };

            DEFINE_TYPE(ParseException, t_ParseException, ParseException);

            void t_ParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(ParseException), &PY_TYPE_DEF(ParseException), module, "ParseException", 0);
            }

            void t_ParseException::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "class_", make_descriptor(ParseException::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                return NULL;
              return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
            }
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ParseException object((jobject) NULL);

                  INT_CALL(object = ParseException());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::parser::Token a0((jobject) NULL);
                  JArray< JArray< jint > > a1((jobject) NULL);
                  JArray< ::java::lang::String > a2((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = ParseException(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_currentToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_currentToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_expectedTokenSequences());
              return JArray<jobject>(value.this$).wrap(NULL);
            }
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              if (!parseArg(arg, "[[I", &value))
              {
                INT_CALL(self->object._set_expectedTokenSequences(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_tokenImage());
              return JArray<jstring>(value.this$).wrap();
            }
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object._set_tokenImage(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymGraphFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymGraphFilterFactory::class$ = NULL;
          jmethodID *SynonymGraphFilterFactory::mids$ = NULL;
          bool SynonymGraphFilterFactory::live$ = false;
          ::java::lang::String *SynonymGraphFilterFactory::NAME = NULL;

          jclass SynonymGraphFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymGraphFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_loadSynonyms_ba672952b9f6ef60] = env->getMethodID(cls, "loadSynonyms", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;ZLorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/synonym/SynonymMap;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymGraphFilterFactory::SynonymGraphFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymGraphFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void SynonymGraphFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymGraphFilterFactory_init_(t_SynonymGraphFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymGraphFilterFactory_create(t_SynonymGraphFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymGraphFilterFactory_inform(t_SynonymGraphFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymGraphFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymGraphFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymGraphFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymGraphFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymGraphFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymGraphFilterFactory)[] = {
            { Py_tp_methods, t_SynonymGraphFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SynonymGraphFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymGraphFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SynonymGraphFilterFactory, t_SynonymGraphFilterFactory, SynonymGraphFilterFactory);

          void t_SynonymGraphFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymGraphFilterFactory), &PY_TYPE_DEF(SynonymGraphFilterFactory), module, "SynonymGraphFilterFactory", 0);
          }

          void t_SynonymGraphFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilterFactory), "class_", make_descriptor(SynonymGraphFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilterFactory), "wrapfn_", make_descriptor(t_SynonymGraphFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymGraphFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilterFactory), "NAME", make_descriptor(j2p(*SynonymGraphFilterFactory::NAME)));
          }

          static PyObject *t_SynonymGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymGraphFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymGraphFilterFactory::wrap_Object(SynonymGraphFilterFactory(((t_SynonymGraphFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymGraphFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymGraphFilterFactory_init_(t_SynonymGraphFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymGraphFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymGraphFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymGraphFilterFactory_create(t_SynonymGraphFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SynonymGraphFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymGraphFilterFactory_inform(t_SynonymGraphFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilter::class$ = NULL;
          jmethodID *IrishLowerCaseFilter::mids$ = NULL;
          bool IrishLowerCaseFilter::live$ = false;

          jclass IrishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilter::IrishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean IrishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IrishLowerCaseFilter)[] = {
            { Py_tp_methods, t_IrishLowerCaseFilter__methods_ },
            { Py_tp_init, (void *) t_IrishLowerCaseFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IrishLowerCaseFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(IrishLowerCaseFilter, t_IrishLowerCaseFilter, IrishLowerCaseFilter);

          void t_IrishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilter), &PY_TYPE_DEF(IrishLowerCaseFilter), module, "IrishLowerCaseFilter", 0);
          }

          void t_IrishLowerCaseFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilter), "class_", make_descriptor(IrishLowerCaseFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilter), "wrapfn_", make_descriptor(t_IrishLowerCaseFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilter::wrap_Object(IrishLowerCaseFilter(((t_IrishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IrishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IrishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(IrishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/BloomFilterFactory.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *BloomFilterFactory::class$ = NULL;
          jmethodID *BloomFilterFactory::mids$ = NULL;
          bool BloomFilterFactory::live$ = false;

          jclass BloomFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/BloomFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_downsize_1fab3db7085f2b17] = env->getMethodID(cls, "downsize", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/bloom/FuzzySet;)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_getSetForField_a88e25f1123572f0] = env->getMethodID(cls, "getSetForField", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_isSaturated_ac34470664e5294b] = env->getMethodID(cls, "isSaturated", "(Lorg/apache/lucene/codecs/bloom/FuzzySet;Lorg/apache/lucene/index/FieldInfo;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BloomFilterFactory::BloomFilterFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::bloom::FuzzySet BloomFilterFactory::downsize(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::bloom::FuzzySet & a1) const
          {
            return ::org::apache::lucene::codecs::bloom::FuzzySet(env->callObjectMethod(this$, mids$[mid_downsize_1fab3db7085f2b17], a0.this$, a1.this$));
          }

          ::org::apache::lucene::codecs::bloom::FuzzySet BloomFilterFactory::getSetForField(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::index::FieldInfo & a1) const
          {
            return ::org::apache::lucene::codecs::bloom::FuzzySet(env->callObjectMethod(this$, mids$[mid_getSetForField_a88e25f1123572f0], a0.this$, a1.this$));
          }

          jboolean BloomFilterFactory::isSaturated(const ::org::apache::lucene::codecs::bloom::FuzzySet & a0, const ::org::apache::lucene::index::FieldInfo & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSaturated_ac34470664e5294b], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_BloomFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BloomFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BloomFilterFactory_init_(t_BloomFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BloomFilterFactory_downsize(t_BloomFilterFactory *self, PyObject *args);
          static PyObject *t_BloomFilterFactory_getSetForField(t_BloomFilterFactory *self, PyObject *args);
          static PyObject *t_BloomFilterFactory_isSaturated(t_BloomFilterFactory *self, PyObject *args);

          static PyMethodDef t_BloomFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BloomFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BloomFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BloomFilterFactory, downsize, METH_VARARGS),
            DECLARE_METHOD(t_BloomFilterFactory, getSetForField, METH_VARARGS),
            DECLARE_METHOD(t_BloomFilterFactory, isSaturated, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BloomFilterFactory)[] = {
            { Py_tp_methods, t_BloomFilterFactory__methods_ },
            { Py_tp_init, (void *) t_BloomFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BloomFilterFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BloomFilterFactory, t_BloomFilterFactory, BloomFilterFactory);

          void t_BloomFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BloomFilterFactory), &PY_TYPE_DEF(BloomFilterFactory), module, "BloomFilterFactory", 0);
          }

          void t_BloomFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilterFactory), "class_", make_descriptor(BloomFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilterFactory), "wrapfn_", make_descriptor(t_BloomFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilterFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BloomFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BloomFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BloomFilterFactory::wrap_Object(BloomFilterFactory(((t_BloomFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BloomFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BloomFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BloomFilterFactory_init_(t_BloomFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            BloomFilterFactory object((jobject) NULL);

            INT_CALL(object = BloomFilterFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_BloomFilterFactory_downsize(t_BloomFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::bloom::FuzzySet a1((jobject) NULL);
            ::org::apache::lucene::codecs::bloom::FuzzySet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::bloom::FuzzySet::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.downsize(a0, a1));
              return ::org::apache::lucene::codecs::bloom::t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "downsize", args);
            return NULL;
          }

          static PyObject *t_BloomFilterFactory_getSetForField(t_BloomFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::bloom::FuzzySet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSetForField(a0, a1));
              return ::org::apache::lucene::codecs::bloom::t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSetForField", args);
            return NULL;
          }

          static PyObject *t_BloomFilterFactory_isSaturated(t_BloomFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::bloom::FuzzySet a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::bloom::FuzzySet::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isSaturated(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSaturated", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNotBuilder::class$ = NULL;
            jmethodID *SpanNotBuilder::mids$ = NULL;
            bool SpanNotBuilder::live$ = false;

            jclass SpanNotBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNotBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a59cd39e7afcbd2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNotBuilder::SpanNotBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_a59cd39e7afcbd2c, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNotBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNotBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNotBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanNotBuilder)[] = {
              { Py_tp_methods, t_SpanNotBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanNotBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanNotBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanNotBuilder, t_SpanNotBuilder, SpanNotBuilder);

            void t_SpanNotBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNotBuilder), &PY_TYPE_DEF(SpanNotBuilder), module, "SpanNotBuilder", 0);
            }

            void t_SpanNotBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotBuilder), "class_", make_descriptor(SpanNotBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotBuilder), "wrapfn_", make_descriptor(t_SpanNotBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNotBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNotBuilder::wrap_Object(SpanNotBuilder(((t_SpanNotBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNotBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNotBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNotBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/PartOfSpeechAttribute.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "org/apache/lucene/analysis/ko/Token.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {

            ::java::lang::Class *PartOfSpeechAttribute::class$ = NULL;
            jmethodID *PartOfSpeechAttribute::mids$ = NULL;
            bool PartOfSpeechAttribute::live$ = false;

            jclass PartOfSpeechAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/tokenattributes/PartOfSpeechAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLeftPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getLeftPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getMorphemes_82c5e27eed5fc4af] = env->getMethodID(cls, "getMorphemes", "()[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getPOSType_6e8b69211f216c5e] = env->getMethodID(cls, "getPOSType", "()Lorg/apache/lucene/analysis/ko/POS$Type;");
                mids$[mid_getRightPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getRightPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_setToken_0ac49e59706c84c7] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ko/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::analysis::ko::POS$Tag PartOfSpeechAttribute::getLeftPOS() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_6d27d9f5e0d7f31a]));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > PartOfSpeechAttribute::getMorphemes() const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_82c5e27eed5fc4af]));
            }

            ::org::apache::lucene::analysis::ko::POS$Type PartOfSpeechAttribute::getPOSType() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_6e8b69211f216c5e]));
            }

            ::org::apache::lucene::analysis::ko::POS$Tag PartOfSpeechAttribute::getRightPOS() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_6d27d9f5e0d7f31a]));
            }

            void PartOfSpeechAttribute::setToken(const ::org::apache::lucene::analysis::ko::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_0ac49e59706c84c7], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {
            static PyObject *t_PartOfSpeechAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_getLeftPOS(t_PartOfSpeechAttribute *self);
            static PyObject *t_PartOfSpeechAttribute_getMorphemes(t_PartOfSpeechAttribute *self);
            static PyObject *t_PartOfSpeechAttribute_getPOSType(t_PartOfSpeechAttribute *self);
            static PyObject *t_PartOfSpeechAttribute_getRightPOS(t_PartOfSpeechAttribute *self);
            static PyObject *t_PartOfSpeechAttribute_setToken(t_PartOfSpeechAttribute *self, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_get__leftPOS(t_PartOfSpeechAttribute *self, void *data);
            static PyObject *t_PartOfSpeechAttribute_get__morphemes(t_PartOfSpeechAttribute *self, void *data);
            static PyObject *t_PartOfSpeechAttribute_get__pOSType(t_PartOfSpeechAttribute *self, void *data);
            static PyObject *t_PartOfSpeechAttribute_get__rightPOS(t_PartOfSpeechAttribute *self, void *data);
            static int t_PartOfSpeechAttribute_set__token(t_PartOfSpeechAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_PartOfSpeechAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_PartOfSpeechAttribute, leftPOS),
              DECLARE_GET_FIELD(t_PartOfSpeechAttribute, morphemes),
              DECLARE_GET_FIELD(t_PartOfSpeechAttribute, pOSType),
              DECLARE_GET_FIELD(t_PartOfSpeechAttribute, rightPOS),
              DECLARE_SET_FIELD(t_PartOfSpeechAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PartOfSpeechAttribute__methods_[] = {
              DECLARE_METHOD(t_PartOfSpeechAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, getLeftPOS, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, getMorphemes, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, getPOSType, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, getRightPOS, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PartOfSpeechAttribute)[] = {
              { Py_tp_methods, t_PartOfSpeechAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_PartOfSpeechAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PartOfSpeechAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(PartOfSpeechAttribute, t_PartOfSpeechAttribute, PartOfSpeechAttribute);

            void t_PartOfSpeechAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(PartOfSpeechAttribute), &PY_TYPE_DEF(PartOfSpeechAttribute), module, "PartOfSpeechAttribute", 0);
            }

            void t_PartOfSpeechAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "class_", make_descriptor(PartOfSpeechAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "wrapfn_", make_descriptor(t_PartOfSpeechAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PartOfSpeechAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PartOfSpeechAttribute::initializeClass, 1)))
                return NULL;
              return t_PartOfSpeechAttribute::wrap_Object(PartOfSpeechAttribute(((t_PartOfSpeechAttribute *) arg)->object.this$));
            }
            static PyObject *t_PartOfSpeechAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PartOfSpeechAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PartOfSpeechAttribute_getLeftPOS(t_PartOfSpeechAttribute *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
              OBJ_CALL(result = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttribute_getMorphemes(t_PartOfSpeechAttribute *self)
            {
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMorphemes());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            static PyObject *t_PartOfSpeechAttribute_getPOSType(t_PartOfSpeechAttribute *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);
              OBJ_CALL(result = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttribute_getRightPOS(t_PartOfSpeechAttribute *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
              OBJ_CALL(result = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttribute_setToken(t_PartOfSpeechAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ko::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_PartOfSpeechAttribute_get__leftPOS(t_PartOfSpeechAttribute *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
              OBJ_CALL(value = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
            }

            static PyObject *t_PartOfSpeechAttribute_get__morphemes(t_PartOfSpeechAttribute *self, void *data)
            {
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMorphemes());
              return JArray<jobject>(value.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            static PyObject *t_PartOfSpeechAttribute_get__pOSType(t_PartOfSpeechAttribute *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Type value((jobject) NULL);
              OBJ_CALL(value = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(value);
            }

            static PyObject *t_PartOfSpeechAttribute_get__rightPOS(t_PartOfSpeechAttribute *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
              OBJ_CALL(value = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
            }

            static int t_PartOfSpeechAttribute_set__token(t_PartOfSpeechAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ko::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapanesePartOfSpeechStopFilterFactory::class$ = NULL;
          jmethodID *JapanesePartOfSpeechStopFilterFactory::mids$ = NULL;
          bool JapanesePartOfSpeechStopFilterFactory::live$ = false;
          ::java::lang::String *JapanesePartOfSpeechStopFilterFactory::NAME = NULL;

          jclass JapanesePartOfSpeechStopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapanesePartOfSpeechStopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapanesePartOfSpeechStopFilterFactory::JapanesePartOfSpeechStopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream JapanesePartOfSpeechStopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void JapanesePartOfSpeechStopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapanesePartOfSpeechStopFilterFactory_init_(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_create(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *args);
          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_inform(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *arg);

          static PyMethodDef t_JapanesePartOfSpeechStopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_JapanesePartOfSpeechStopFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapanesePartOfSpeechStopFilterFactory)[] = {
            { Py_tp_methods, t_JapanesePartOfSpeechStopFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapanesePartOfSpeechStopFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapanesePartOfSpeechStopFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapanesePartOfSpeechStopFilterFactory, t_JapanesePartOfSpeechStopFilterFactory, JapanesePartOfSpeechStopFilterFactory);

          void t_JapanesePartOfSpeechStopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapanesePartOfSpeechStopFilterFactory), &PY_TYPE_DEF(JapanesePartOfSpeechStopFilterFactory), module, "JapanesePartOfSpeechStopFilterFactory", 0);
          }

          void t_JapanesePartOfSpeechStopFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilterFactory), "class_", make_descriptor(JapanesePartOfSpeechStopFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilterFactory), "wrapfn_", make_descriptor(t_JapanesePartOfSpeechStopFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapanesePartOfSpeechStopFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapanesePartOfSpeechStopFilterFactory), "NAME", make_descriptor(j2p(*JapanesePartOfSpeechStopFilterFactory::NAME)));
          }

          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapanesePartOfSpeechStopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapanesePartOfSpeechStopFilterFactory::wrap_Object(JapanesePartOfSpeechStopFilterFactory(((t_JapanesePartOfSpeechStopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapanesePartOfSpeechStopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapanesePartOfSpeechStopFilterFactory_init_(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapanesePartOfSpeechStopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapanesePartOfSpeechStopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_create(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapanesePartOfSpeechStopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_JapanesePartOfSpeechStopFilterFactory_inform(t_JapanesePartOfSpeechStopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYLine.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYLine::class$ = NULL;
        jmethodID *XYLine::mids$ = NULL;
        jfieldID *XYLine::fids$ = NULL;
        bool XYLine::live$ = false;

        jclass XYLine::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYLine");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_890c72b2ae4788a0] = env->getMethodID(cls, "<init>", "([F[F)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getX_62fe0e50f01d1bcf] = env->getMethodID(cls, "getX", "()[F");
            mids$[mid_getX_384f078ef4b8f931] = env->getMethodID(cls, "getX", "(I)F");
            mids$[mid_getY_62fe0e50f01d1bcf] = env->getMethodID(cls, "getY", "()[F");
            mids$[mid_getY_384f078ef4b8f931] = env->getMethodID(cls, "getY", "(I)F");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_numPoints_9972fcc56b44e79d] = env->getMethodID(cls, "numPoints", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxX] = env->getFieldID(cls, "maxX", "F");
            fids$[fid_maxY] = env->getFieldID(cls, "maxY", "F");
            fids$[fid_minX] = env->getFieldID(cls, "minX", "F");
            fids$[fid_minY] = env->getFieldID(cls, "minY", "F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYLine::XYLine(const JArray< jfloat > & a0, const JArray< jfloat > & a1) : ::org::apache::lucene::geo::XYGeometry(env->newObject(initializeClass, &mids$, mid_init$_890c72b2ae4788a0, a0.this$, a1.this$)) {}

        jboolean XYLine::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        JArray< jfloat > XYLine::getX() const
        {
          return JArray< jfloat >(env->callObjectMethod(this$, mids$[mid_getX_62fe0e50f01d1bcf]));
        }

        jfloat XYLine::getX(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getX_384f078ef4b8f931], a0);
        }

        JArray< jfloat > XYLine::getY() const
        {
          return JArray< jfloat >(env->callObjectMethod(this$, mids$[mid_getY_62fe0e50f01d1bcf]));
        }

        jfloat XYLine::getY(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getY_384f078ef4b8f931], a0);
        }

        jint XYLine::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint XYLine::numPoints() const
        {
          return env->callIntMethod(this$, mids$[mid_numPoints_9972fcc56b44e79d]);
        }

        ::java::lang::String XYLine::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jfloat XYLine::_get_maxX() const
        {
          return env->getFloatField(this$, fids$[fid_maxX]);
        }

        jfloat XYLine::_get_maxY() const
        {
          return env->getFloatField(this$, fids$[fid_maxY]);
        }

        jfloat XYLine::_get_minX() const
        {
          return env->getFloatField(this$, fids$[fid_minX]);
        }

        jfloat XYLine::_get_minY() const
        {
          return env->getFloatField(this$, fids$[fid_minY]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYLine_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYLine_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYLine_init_(t_XYLine *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYLine_equals(t_XYLine *self, PyObject *args);
        static PyObject *t_XYLine_getX(t_XYLine *self, PyObject *args);
        static PyObject *t_XYLine_getY(t_XYLine *self, PyObject *args);
        static PyObject *t_XYLine_hashCode(t_XYLine *self, PyObject *args);
        static PyObject *t_XYLine_numPoints(t_XYLine *self);
        static PyObject *t_XYLine_toString(t_XYLine *self, PyObject *args);
        static PyObject *t_XYLine_get__maxX(t_XYLine *self, void *data);
        static PyObject *t_XYLine_get__maxY(t_XYLine *self, void *data);
        static PyObject *t_XYLine_get__minX(t_XYLine *self, void *data);
        static PyObject *t_XYLine_get__minY(t_XYLine *self, void *data);

        static PyObject *t_XYLine_get__x(t_XYLine *self, void *data);
        static PyObject *t_XYLine_get__y(t_XYLine *self, void *data);
        static PyGetSetDef t_XYLine__fields_[] = {
          DECLARE_GET_FIELD(t_XYLine, maxX),
          DECLARE_GET_FIELD(t_XYLine, maxY),
          DECLARE_GET_FIELD(t_XYLine, minX),
          DECLARE_GET_FIELD(t_XYLine, minY),
          DECLARE_GET_FIELD(t_XYLine, x),
          DECLARE_GET_FIELD(t_XYLine, y),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_XYLine__methods_[] = {
          DECLARE_METHOD(t_XYLine, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYLine, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYLine, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYLine, getX, METH_VARARGS),
          DECLARE_METHOD(t_XYLine, getY, METH_VARARGS),
          DECLARE_METHOD(t_XYLine, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYLine, numPoints, METH_NOARGS),
          DECLARE_METHOD(t_XYLine, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYLine)[] = {
          { Py_tp_methods, t_XYLine__methods_ },
          { Py_tp_init, (void *) t_XYLine_init_ },
          { Py_tp_getset, t_XYLine__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYLine)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::XYGeometry),
          NULL
        };

        DEFINE_TYPE(XYLine, t_XYLine, XYLine);

        void t_XYLine::install(PyObject *module)
        {
          installType(&PY_TYPE(XYLine), &PY_TYPE_DEF(XYLine), module, "XYLine", 0);
        }

        void t_XYLine::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYLine), "class_", make_descriptor(XYLine::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYLine), "wrapfn_", make_descriptor(t_XYLine::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYLine), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYLine_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYLine::initializeClass, 1)))
            return NULL;
          return t_XYLine::wrap_Object(XYLine(((t_XYLine *) arg)->object.this$));
        }
        static PyObject *t_XYLine_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYLine::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYLine_init_(t_XYLine *self, PyObject *args, PyObject *kwds)
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          XYLine object((jobject) NULL);

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            INT_CALL(object = XYLine(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYLine_equals(t_XYLine *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYLine), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYLine_getX(t_XYLine *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jfloat > result((jobject) NULL);
              OBJ_CALL(result = self->object.getX());
              return result.wrap();
            }
            break;
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getX(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getX", args);
          return NULL;
        }

        static PyObject *t_XYLine_getY(t_XYLine *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jfloat > result((jobject) NULL);
              OBJ_CALL(result = self->object.getY());
              return result.wrap();
            }
            break;
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getY(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getY", args);
          return NULL;
        }

        static PyObject *t_XYLine_hashCode(t_XYLine *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYLine), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYLine_numPoints(t_XYLine *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numPoints());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_XYLine_toString(t_XYLine *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYLine), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYLine_get__maxX(t_XYLine *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYLine_get__maxY(t_XYLine *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYLine_get__minX(t_XYLine *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYLine_get__minY(t_XYLine *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYLine_get__x(t_XYLine *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object.getX());
          return value.wrap();
        }

        static PyObject *t_XYLine_get__y(t_XYLine *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object.getY());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedSetDocValues::class$ = NULL;
        jmethodID *SortedSetDocValues::mids$ = NULL;
        bool SortedSetDocValues::live$ = false;
        jlong SortedSetDocValues::NO_MORE_ORDS = (jlong) 0;

        jclass SortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_intersect_2452e24ae7d5129f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_lookupOrd_9a5ffc0686333682] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_6f6ee5bba7f22d4c] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextOrd_2e5ae9edcb9b072f] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_termsEnum_3f9a21827903a65f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO_MORE_ORDS = env->getStaticLongField(cls, "NO_MORE_ORDS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong SortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_2452e24ae7d5129f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef SortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9a5ffc0686333682], a0));
        }

        jlong SortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_6f6ee5bba7f22d4c], a0.this$);
        }

        jlong SortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_3f9a21827903a65f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_intersect(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data);
        static PyGetSetDef t_SortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, intersect, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, nextOrd, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValues)[] = {
          { Py_tp_methods, t_SortedSetDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortedSetDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DocValuesIterator),
          NULL
        };

        DEFINE_TYPE(SortedSetDocValues, t_SortedSetDocValues, SortedSetDocValues);

        void t_SortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValues), &PY_TYPE_DEF(SortedSetDocValues), module, "SortedSetDocValues", 0);
        }

        void t_SortedSetDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValues), "class_", make_descriptor(SortedSetDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValues), "wrapfn_", make_descriptor(t_SortedSetDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValues), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValues::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValues), "NO_MORE_ORDS", make_descriptor(SortedSetDocValues::NO_MORE_ORDS));
        }

        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValues::wrap_Object(SortedSetDocValues(((t_SortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_intersect(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersect(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextOrd());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerFactory::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerFactory::mids$ = NULL;
          bool UAX29URLEmailTokenizerFactory::live$ = false;
          ::java::lang::String *UAX29URLEmailTokenizerFactory::NAME = NULL;

          jclass UAX29URLEmailTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_1ce961404f7f52b0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/standard/UAX29URLEmailTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerFactory::UAX29URLEmailTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer UAX29URLEmailTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer(env->callObjectMethod(this$, mids$[mid_create_1ce961404f7f52b0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_UAX29URLEmailTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UAX29URLEmailTokenizerFactory)[] = {
            { Py_tp_methods, t_UAX29URLEmailTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_UAX29URLEmailTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UAX29URLEmailTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory, UAX29URLEmailTokenizerFactory);

          void t_UAX29URLEmailTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerFactory), &PY_TYPE_DEF(UAX29URLEmailTokenizerFactory), module, "UAX29URLEmailTokenizerFactory", 0);
          }

          void t_UAX29URLEmailTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerFactory), "class_", make_descriptor(UAX29URLEmailTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerFactory), "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerFactory), "NAME", make_descriptor(j2p(*UAX29URLEmailTokenizerFactory::NAME)));
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerFactory::wrap_Object(UAX29URLEmailTokenizerFactory(((t_UAX29URLEmailTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UAX29URLEmailTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UAX29URLEmailTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_UAX29URLEmailTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UAX29URLEmailTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$Arc::class$ = NULL;
          jmethodID *FST$Arc::mids$ = NULL;
          bool FST$Arc::live$ = false;

          jclass FST$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_arcIdx_9972fcc56b44e79d] = env->getMethodID(cls, "arcIdx", "()I");
              mids$[mid_bytesPerArc_9972fcc56b44e79d] = env->getMethodID(cls, "bytesPerArc", "()I");
              mids$[mid_copyFrom_bfd8ca0b4a5c83d7] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_flags_871cd52a74f26213] = env->getMethodID(cls, "flags", "()B");
              mids$[mid_isFinal_8454bd5aa23fd11e] = env->getMethodID(cls, "isFinal", "()Z");
              mids$[mid_isLast_8454bd5aa23fd11e] = env->getMethodID(cls, "isLast", "()Z");
              mids$[mid_label_9972fcc56b44e79d] = env->getMethodID(cls, "label", "()I");
              mids$[mid_nextFinalOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "nextFinalOutput", "()Ljava/lang/Object;");
              mids$[mid_nodeFlags_871cd52a74f26213] = env->getMethodID(cls, "nodeFlags", "()B");
              mids$[mid_numArcs_9972fcc56b44e79d] = env->getMethodID(cls, "numArcs", "()I");
              mids$[mid_output_d6bcd06f3102c4d9] = env->getMethodID(cls, "output", "()Ljava/lang/Object;");
              mids$[mid_posArcsStart_2e5ae9edcb9b072f] = env->getMethodID(cls, "posArcsStart", "()J");
              mids$[mid_target_2e5ae9edcb9b072f] = env->getMethodID(cls, "target", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$Arc::FST$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint FST$Arc::arcIdx() const
          {
            return env->callIntMethod(this$, mids$[mid_arcIdx_9972fcc56b44e79d]);
          }

          jint FST$Arc::bytesPerArc() const
          {
            return env->callIntMethod(this$, mids$[mid_bytesPerArc_9972fcc56b44e79d]);
          }

          FST$Arc FST$Arc::copyFrom(const FST$Arc & a0) const
          {
            return FST$Arc(env->callObjectMethod(this$, mids$[mid_copyFrom_bfd8ca0b4a5c83d7], a0.this$));
          }

          jbyte FST$Arc::flags() const
          {
            return env->callByteMethod(this$, mids$[mid_flags_871cd52a74f26213]);
          }

          jboolean FST$Arc::isFinal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFinal_8454bd5aa23fd11e]);
          }

          jboolean FST$Arc::isLast() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLast_8454bd5aa23fd11e]);
          }

          jint FST$Arc::label() const
          {
            return env->callIntMethod(this$, mids$[mid_label_9972fcc56b44e79d]);
          }

          ::java::lang::Object FST$Arc::nextFinalOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextFinalOutput_d6bcd06f3102c4d9]));
          }

          jbyte FST$Arc::nodeFlags() const
          {
            return env->callByteMethod(this$, mids$[mid_nodeFlags_871cd52a74f26213]);
          }

          jint FST$Arc::numArcs() const
          {
            return env->callIntMethod(this$, mids$[mid_numArcs_9972fcc56b44e79d]);
          }

          ::java::lang::Object FST$Arc::output() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_output_d6bcd06f3102c4d9]));
          }

          jlong FST$Arc::posArcsStart() const
          {
            return env->callLongMethod(this$, mids$[mid_posArcsStart_2e5ae9edcb9b072f]);
          }

          jlong FST$Arc::target() const
          {
            return env->callLongMethod(this$, mids$[mid_target_2e5ae9edcb9b072f]);
          }

          ::java::lang::String FST$Arc::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args);
          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$Arc_arcIdx(t_FST$Arc *self);
          static PyObject *t_FST$Arc_bytesPerArc(t_FST$Arc *self);
          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg);
          static PyObject *t_FST$Arc_flags(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self);
          static PyObject *t_FST$Arc_label(t_FST$Arc *self);
          static PyObject *t_FST$Arc_nextFinalOutput(t_FST$Arc *self);
          static PyObject *t_FST$Arc_nodeFlags(t_FST$Arc *self);
          static PyObject *t_FST$Arc_numArcs(t_FST$Arc *self);
          static PyObject *t_FST$Arc_output(t_FST$Arc *self);
          static PyObject *t_FST$Arc_posArcsStart(t_FST$Arc *self);
          static PyObject *t_FST$Arc_target(t_FST$Arc *self);
          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args);
          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data);
          static PyGetSetDef t_FST$Arc__fields_[] = {
            DECLARE_GET_FIELD(t_FST$Arc, final),
            DECLARE_GET_FIELD(t_FST$Arc, last),
            DECLARE_GET_FIELD(t_FST$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$Arc__methods_[] = {
            DECLARE_METHOD(t_FST$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$Arc, arcIdx, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, bytesPerArc, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, copyFrom, METH_O),
            DECLARE_METHOD(t_FST$Arc, flags, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isFinal, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isLast, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, label, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, nextFinalOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, nodeFlags, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, numArcs, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, output, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, posArcsStart, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, target, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FST$Arc)[] = {
            { Py_tp_methods, t_FST$Arc__methods_ },
            { Py_tp_init, (void *) t_FST$Arc_init_ },
            { Py_tp_getset, t_FST$Arc__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FST$Arc)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FST$Arc, t_FST$Arc, FST$Arc);
          PyObject *t_FST$Arc::wrap_Object(const FST$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$Arc), &PY_TYPE_DEF(FST$Arc), module, "FST$Arc", 0);
          }

          void t_FST$Arc::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$Arc), "class_", make_descriptor(FST$Arc::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$Arc), "wrapfn_", make_descriptor(t_FST$Arc::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$Arc), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$Arc::initializeClass, 1)))
              return NULL;
            return t_FST$Arc::wrap_Object(FST$Arc(((t_FST$Arc *) arg)->object.this$));
          }
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds)
          {
            FST$Arc object((jobject) NULL);

            INT_CALL(object = FST$Arc());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$Arc_arcIdx(t_FST$Arc *self)
          {
            jint result;
            OBJ_CALL(result = self->object.arcIdx());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_bytesPerArc(t_FST$Arc *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bytesPerArc());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg)
          {
            FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", FST$Arc::initializeClass, &a0, &p0, t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.copyFrom(a0));
              return t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
            return NULL;
          }

          static PyObject *t_FST$Arc_flags(t_FST$Arc *self)
          {
            jbyte result;
            OBJ_CALL(result = self->object.flags());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFinal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLast());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_label(t_FST$Arc *self)
          {
            jint result;
            OBJ_CALL(result = self->object.label());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_nextFinalOutput(t_FST$Arc *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.nextFinalOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST$Arc_nodeFlags(t_FST$Arc *self)
          {
            jbyte result;
            OBJ_CALL(result = self->object.nodeFlags());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_numArcs(t_FST$Arc *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numArcs());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FST$Arc_output(t_FST$Arc *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.output());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST$Arc_posArcsStart(t_FST$Arc *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.posArcsStart());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$Arc_target(t_FST$Arc *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.target());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FST$Arc), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFinal());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLast());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *NoTokenFoundQueryNode::class$ = NULL;
              jmethodID *NoTokenFoundQueryNode::mids$ = NULL;
              bool NoTokenFoundQueryNode::live$ = false;

              jclass NoTokenFoundQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoTokenFoundQueryNode::NoTokenFoundQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode NoTokenFoundQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence NoTokenFoundQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String NoTokenFoundQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args);
              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args);

              static PyMethodDef t_NoTokenFoundQueryNode__methods_[] = {
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NoTokenFoundQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(NoTokenFoundQueryNode)[] = {
                { Py_tp_methods, t_NoTokenFoundQueryNode__methods_ },
                { Py_tp_init, (void *) t_NoTokenFoundQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(NoTokenFoundQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode),
                NULL
              };

              DEFINE_TYPE(NoTokenFoundQueryNode, t_NoTokenFoundQueryNode, NoTokenFoundQueryNode);

              void t_NoTokenFoundQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NoTokenFoundQueryNode), &PY_TYPE_DEF(NoTokenFoundQueryNode), module, "NoTokenFoundQueryNode", 0);
              }

              void t_NoTokenFoundQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoTokenFoundQueryNode), "class_", make_descriptor(NoTokenFoundQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoTokenFoundQueryNode), "wrapfn_", make_descriptor(t_NoTokenFoundQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoTokenFoundQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoTokenFoundQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoTokenFoundQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NoTokenFoundQueryNode::wrap_Object(NoTokenFoundQueryNode(((t_NoTokenFoundQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NoTokenFoundQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoTokenFoundQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoTokenFoundQueryNode_init_(t_NoTokenFoundQueryNode *self, PyObject *args, PyObject *kwds)
              {
                NoTokenFoundQueryNode object((jobject) NULL);

                INT_CALL(object = NoTokenFoundQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_NoTokenFoundQueryNode_cloneTree(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toQueryString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NoTokenFoundQueryNode_toString(t_NoTokenFoundQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(NoTokenFoundQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Provider.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Provider::class$ = NULL;
        jmethodID *SortField$Provider::mids$ = NULL;
        bool SortField$Provider::live$ = false;
        ::java::lang::String *SortField$Provider::NAME = NULL;

        jclass SortField$Provider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Provider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_readSortField_f5c813112fa668ab] = env->getMethodID(cls, "readSortField", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_writeSortField_d394f16dc9680504] = env->getMethodID(cls, "writeSortField", "(Lorg/apache/lucene/search/SortField;Lorg/apache/lucene/store/DataOutput;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Provider::SortField$Provider() : ::org::apache::lucene::index::SortFieldProvider(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::SortField SortField$Provider::readSortField(const ::org::apache::lucene::store::DataInput & a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_readSortField_f5c813112fa668ab], a0.this$));
        }

        void SortField$Provider::writeSortField(const ::org::apache::lucene::search::SortField & a0, const ::org::apache::lucene::store::DataOutput & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSortField_d394f16dc9680504], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Provider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Provider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField$Provider_init_(t_SortField$Provider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField$Provider_readSortField(t_SortField$Provider *self, PyObject *args);
        static PyObject *t_SortField$Provider_writeSortField(t_SortField$Provider *self, PyObject *args);

        static PyMethodDef t_SortField$Provider__methods_[] = {
          DECLARE_METHOD(t_SortField$Provider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Provider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Provider, readSortField, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Provider, writeSortField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortField$Provider)[] = {
          { Py_tp_methods, t_SortField$Provider__methods_ },
          { Py_tp_init, (void *) t_SortField$Provider_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortField$Provider)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortFieldProvider),
          NULL
        };

        DEFINE_TYPE(SortField$Provider, t_SortField$Provider, SortField$Provider);

        void t_SortField$Provider::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Provider), &PY_TYPE_DEF(SortField$Provider), module, "SortField$Provider", 0);
        }

        void t_SortField$Provider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Provider), "class_", make_descriptor(SortField$Provider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Provider), "wrapfn_", make_descriptor(t_SortField$Provider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Provider), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Provider::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Provider), "NAME", make_descriptor(j2p(*SortField$Provider::NAME)));
        }

        static PyObject *t_SortField$Provider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Provider::initializeClass, 1)))
            return NULL;
          return t_SortField$Provider::wrap_Object(SortField$Provider(((t_SortField$Provider *) arg)->object.this$));
        }
        static PyObject *t_SortField$Provider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Provider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField$Provider_init_(t_SortField$Provider *self, PyObject *args, PyObject *kwds)
        {
          SortField$Provider object((jobject) NULL);

          INT_CALL(object = SortField$Provider());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortField$Provider_readSortField(t_SortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.readSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortField$Provider), (PyObject *) self, "readSortField", args, 2);
        }

        static PyObject *t_SortField$Provider_writeSortField(t_SortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::search::SortField a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeSortField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SortField$Provider), (PyObject *) self, "writeSortField", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemmer::class$ = NULL;
          jmethodID *ItalianLightStemmer::mids$ = NULL;
          bool ItalianLightStemmer::live$ = false;

          jclass ItalianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemmer::ItalianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint ItalianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ItalianLightStemmer)[] = {
            { Py_tp_methods, t_ItalianLightStemmer__methods_ },
            { Py_tp_init, (void *) t_ItalianLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ItalianLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ItalianLightStemmer, t_ItalianLightStemmer, ItalianLightStemmer);

          void t_ItalianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemmer), &PY_TYPE_DEF(ItalianLightStemmer), module, "ItalianLightStemmer", 0);
          }

          void t_ItalianLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemmer), "class_", make_descriptor(ItalianLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemmer), "wrapfn_", make_descriptor(t_ItalianLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemmer::wrap_Object(ItalianLightStemmer(((t_ItalianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            ItalianLightStemmer object((jobject) NULL);

            INT_CALL(object = ItalianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Throwable::class$ = NULL;
    jmethodID *Throwable::mids$ = NULL;
    bool Throwable::live$ = false;

    jclass Throwable::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Throwable");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
        mids$[mid_addSuppressed_471cfbdb800444a7] = env->getMethodID(cls, "addSuppressed", "(Ljava/lang/Throwable;)V");
        mids$[mid_fillInStackTrace_4d6e2861e0be5c10] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
        mids$[mid_getCause_4d6e2861e0be5c10] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
        mids$[mid_getLocalizedMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
        mids$[mid_getMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
        mids$[mid_getStackTrace_e23550404f2bac73] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getSuppressed_2475b6565261b7f9] = env->getMethodID(cls, "getSuppressed", "()[Ljava/lang/Throwable;");
        mids$[mid_initCause_ddb33dca79461a7d] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
        mids$[mid_printStackTrace_f2cc1bce94666404] = env->getMethodID(cls, "printStackTrace", "()V");
        mids$[mid_printStackTrace_51d7bcb97eea24e3] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
        mids$[mid_printStackTrace_3df1c1d548bf22a4] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
        mids$[mid_setStackTrace_3545c29583e3dd29] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}

    void Throwable::addSuppressed(const Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addSuppressed_471cfbdb800444a7], a0.this$);
    }

    Throwable Throwable::fillInStackTrace() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_4d6e2861e0be5c10]));
    }

    Throwable Throwable::getCause() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_4d6e2861e0be5c10]));
    }

    ::java::lang::String Throwable::getLocalizedMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_db9b55ba01e03e4b]));
    }

    ::java::lang::String Throwable::getMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_db9b55ba01e03e4b]));
    }

    JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_e23550404f2bac73]));
    }

    JArray< Throwable > Throwable::getSuppressed() const
    {
      return JArray< Throwable >(env->callObjectMethod(this$, mids$[mid_getSuppressed_2475b6565261b7f9]));
    }

    Throwable Throwable::initCause(const Throwable & a0) const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_ddb33dca79461a7d], a0.this$));
    }

    void Throwable::printStackTrace() const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_f2cc1bce94666404]);
    }

    void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_51d7bcb97eea24e3], a0.this$);
    }

    void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_3df1c1d548bf22a4], a0.this$);
    }

    void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStackTrace_3545c29583e3dd29], a0.this$);
    }

    ::java::lang::String Throwable::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getCause(t_Throwable *self);
    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
    static PyObject *t_Throwable_getMessage(t_Throwable *self);
    static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getSuppressed(t_Throwable *self);
    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data);
    static PyGetSetDef t_Throwable__fields_[] = {
      DECLARE_GET_FIELD(t_Throwable, cause),
      DECLARE_GET_FIELD(t_Throwable, localizedMessage),
      DECLARE_GET_FIELD(t_Throwable, message),
      DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
      DECLARE_GET_FIELD(t_Throwable, suppressed),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Throwable__methods_[] = {
      DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, addSuppressed, METH_O),
      DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getSuppressed, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, initCause, METH_O),
      DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
      DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
      DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Throwable)[] = {
      { Py_tp_methods, t_Throwable__methods_ },
      { Py_tp_init, (void *) t_Throwable_init_ },
      { Py_tp_getset, t_Throwable__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Throwable)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Throwable, t_Throwable, Throwable);

    void t_Throwable::install(PyObject *module)
    {
      installType(&PY_TYPE(Throwable), &PY_TYPE_DEF(Throwable), module, "Throwable", 0);
    }

    void t_Throwable::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Throwable), "class_", make_descriptor(Throwable::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Throwable), "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Throwable), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
        return NULL;
      return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
    }
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Throwable::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Throwable object((jobject) NULL);

          INT_CALL(object = Throwable());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Throwable(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable a1((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Throwable(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addSuppressed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addSuppressed", arg);
      return NULL;
    }

    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.fillInStackTrace());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getCause(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.getCause());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getLocalizedMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Throwable_getSuppressed(t_Throwable *self)
    {
      JArray< Throwable > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuppressed());
      return JArray<jobject>(result.this$).wrap(t_Throwable::wrap_jobject);
    }

    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);
      Throwable result((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.initCause(a0));
        return t_Throwable::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "initCause", arg);
      return NULL;
    }

    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.printStackTrace());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::io::PrintWriter a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
      return NULL;
    }

    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
    {
      JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

      if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setStackTrace(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
      return NULL;
    }

    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
    {
      Throwable value((jobject) NULL);
      OBJ_CALL(value = self->object.getCause());
      return t_Throwable::wrap_Object(value);
    }

    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getLocalizedMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
    {
      {
        JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
        if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
        {
          INT_CALL(self->object.setStackTrace(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
      return -1;
    }

    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data)
    {
      JArray< Throwable > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuppressed());
      return JArray<jobject>(value.this$).wrap(t_Throwable::wrap_jobject);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilterFactory::class$ = NULL;
          jmethodID *EnglishPossessiveFilterFactory::mids$ = NULL;
          bool EnglishPossessiveFilterFactory::live$ = false;
          ::java::lang::String *EnglishPossessiveFilterFactory::NAME = NULL;

          jclass EnglishPossessiveFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilterFactory::EnglishPossessiveFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishPossessiveFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishPossessiveFilterFactory)[] = {
            { Py_tp_methods, t_EnglishPossessiveFilterFactory__methods_ },
            { Py_tp_init, (void *) t_EnglishPossessiveFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishPossessiveFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory, EnglishPossessiveFilterFactory);

          void t_EnglishPossessiveFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilterFactory), &PY_TYPE_DEF(EnglishPossessiveFilterFactory), module, "EnglishPossessiveFilterFactory", 0);
          }

          void t_EnglishPossessiveFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilterFactory), "class_", make_descriptor(EnglishPossessiveFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilterFactory), "wrapfn_", make_descriptor(t_EnglishPossessiveFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(EnglishPossessiveFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilterFactory), "NAME", make_descriptor(j2p(*EnglishPossessiveFilterFactory::NAME)));
          }

          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilterFactory::wrap_Object(EnglishPossessiveFilterFactory(((t_EnglishPossessiveFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishPossessiveFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishPossessiveFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(EnglishPossessiveFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaDF.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaDF::class$ = NULL;
          jmethodID *LambdaDF::mids$ = NULL;
          bool LambdaDF::live$ = false;

          jclass LambdaDF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaDF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_09b827167a29e9eb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_773a7ae7d4cf3ed2] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaDF::LambdaDF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation LambdaDF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_09b827167a29e9eb], a0.this$));
          }

          jfloat LambdaDF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_773a7ae7d4cf3ed2], a0.this$);
          }

          ::java::lang::String LambdaDF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args);

          static PyMethodDef t_LambdaDF__methods_[] = {
            DECLARE_METHOD(t_LambdaDF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LambdaDF)[] = {
            { Py_tp_methods, t_LambdaDF__methods_ },
            { Py_tp_init, (void *) t_LambdaDF_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LambdaDF)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Lambda),
            NULL
          };

          DEFINE_TYPE(LambdaDF, t_LambdaDF, LambdaDF);

          void t_LambdaDF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaDF), &PY_TYPE_DEF(LambdaDF), module, "LambdaDF", 0);
          }

          void t_LambdaDF::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaDF), "class_", make_descriptor(LambdaDF::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaDF), "wrapfn_", make_descriptor(t_LambdaDF::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaDF), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaDF::initializeClass, 1)))
              return NULL;
            return t_LambdaDF::wrap_Object(LambdaDF(((t_LambdaDF *) arg)->object.this$));
          }
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaDF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds)
          {
            LambdaDF object((jobject) NULL);

            INT_CALL(object = LambdaDF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LambdaDF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(LambdaDF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LambdaDF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery::class$ = NULL;
          jmethodID *FieldQuery::mids$ = NULL;
          bool FieldQuery::live$ = false;

          jclass FieldQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9c1b7728938fe13b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;ZZ)V");
              mids$[mid_getFieldTermMap_c85c9167b32436f3] = env->getMethodID(cls, "getFieldTermMap", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_searchPhrase_345d6631805d3ebb] = env->getMethodID(cls, "searchPhrase", "(Ljava/lang/String;Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_flatten_7d5e56430d6ffbc2] = env->getMethodID(cls, "flatten", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery::FieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, jboolean a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c1b7728938fe13b, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::getFieldTermMap(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getFieldTermMap_c85c9167b32436f3], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap FieldQuery::searchPhrase(const ::java::lang::String & a0, const ::java::util::List & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_345d6631805d3ebb], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery_init_(t_FieldQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args);
          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args);

          static PyMethodDef t_FieldQuery__methods_[] = {
            DECLARE_METHOD(t_FieldQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery, getFieldTermMap, METH_VARARGS),
            DECLARE_METHOD(t_FieldQuery, searchPhrase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldQuery)[] = {
            { Py_tp_methods, t_FieldQuery__methods_ },
            { Py_tp_init, (void *) t_FieldQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldQuery)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldQuery, t_FieldQuery, FieldQuery);

          void t_FieldQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery), &PY_TYPE_DEF(FieldQuery), module, "FieldQuery", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery), "QueryPhraseMap", make_descriptor(&PY_TYPE_DEF(FieldQuery$QueryPhraseMap)));
          }

          void t_FieldQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery), "class_", make_descriptor(FieldQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery), "wrapfn_", make_descriptor(t_FieldQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery::initializeClass, 1)))
              return NULL;
            return t_FieldQuery::wrap_Object(FieldQuery(((t_FieldQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery_init_(t_FieldQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            jboolean a2;
            jboolean a3;
            FieldQuery object((jobject) NULL);

            if (!parseArgs(args, "kkZZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery_getFieldTermMap(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFieldTermMap(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldTermMap", args);
            return NULL;
          }

          static PyObject *t_FieldQuery_searchPhrase(t_FieldQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::vectorhighlight::FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseAnalyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Mode.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/ja/dict/UserDictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseAnalyzer::class$ = NULL;
          jmethodID *JapaneseAnalyzer::mids$ = NULL;
          bool JapaneseAnalyzer::live$ = false;

          jclass JapaneseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_29694002bf5adcb4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/UserDictionary;Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;Lorg/apache/lucene/analysis/CharArraySet;Ljava/util/Set;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_getDefaultStopTags_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "getDefaultStopTags", "()Ljava/util/Set;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseAnalyzer::JapaneseAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          JapaneseAnalyzer::JapaneseAnalyzer(const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a0, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a1, const ::org::apache::lucene::analysis::CharArraySet & a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_29694002bf5adcb4, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet JapaneseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }

          ::java::util::Set JapaneseAnalyzer::getDefaultStopTags()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopTags_7dcf4034c6d1a92a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseAnalyzer_init_(t_JapaneseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_JapaneseAnalyzer_getDefaultStopTags(PyTypeObject *type);
          static PyObject *t_JapaneseAnalyzer_get__defaultStopSet(t_JapaneseAnalyzer *self, void *data);
          static PyObject *t_JapaneseAnalyzer_get__defaultStopTags(t_JapaneseAnalyzer *self, void *data);
          static PyGetSetDef t_JapaneseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_JapaneseAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_JapaneseAnalyzer, defaultStopTags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JapaneseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_JapaneseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_JapaneseAnalyzer, getDefaultStopTags, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseAnalyzer)[] = {
            { Py_tp_methods, t_JapaneseAnalyzer__methods_ },
            { Py_tp_init, (void *) t_JapaneseAnalyzer_init_ },
            { Py_tp_getset, t_JapaneseAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(JapaneseAnalyzer, t_JapaneseAnalyzer, JapaneseAnalyzer);

          void t_JapaneseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseAnalyzer), &PY_TYPE_DEF(JapaneseAnalyzer), module, "JapaneseAnalyzer", 0);
          }

          void t_JapaneseAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseAnalyzer), "class_", make_descriptor(JapaneseAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseAnalyzer), "wrapfn_", make_descriptor(t_JapaneseAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapaneseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_JapaneseAnalyzer::wrap_Object(JapaneseAnalyzer(((t_JapaneseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_JapaneseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseAnalyzer_init_(t_JapaneseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JapaneseAnalyzer object((jobject) NULL);

                INT_CALL(object = JapaneseAnalyzer());
                self->object = object;
                break;
              }
             case 4:
              {
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a0((jobject) NULL);
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                JapaneseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kKKK", ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = JapaneseAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_JapaneseAnalyzer_getDefaultStopTags(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseAnalyzer::getDefaultStopTags());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_JapaneseAnalyzer_get__defaultStopSet(t_JapaneseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_JapaneseAnalyzer_get__defaultStopTags(t_JapaneseAnalyzer *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopTags());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilter::class$ = NULL;
          jmethodID *HTMLStripCharFilter::mids$ = NULL;
          bool HTMLStripCharFilter::live$ = false;

          jclass HTMLStripCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_49a0b76d5b6e6353] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/Set;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_49a0b76d5b6e6353, a0.this$, a1.this$)) {}

          void HTMLStripCharFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jint HTMLStripCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint HTMLStripCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args);
          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilter__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_HTMLStripCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HTMLStripCharFilter)[] = {
            { Py_tp_methods, t_HTMLStripCharFilter__methods_ },
            { Py_tp_init, (void *) t_HTMLStripCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HTMLStripCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::charfilter::BaseCharFilter),
            NULL
          };

          DEFINE_TYPE(HTMLStripCharFilter, t_HTMLStripCharFilter, HTMLStripCharFilter);

          void t_HTMLStripCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilter), &PY_TYPE_DEF(HTMLStripCharFilter), module, "HTMLStripCharFilter", 0);
          }

          void t_HTMLStripCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilter), "class_", make_descriptor(HTMLStripCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilter), "wrapfn_", make_descriptor(t_HTMLStripCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilter::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilter::wrap_Object(HTMLStripCharFilter(((t_HTMLStripCharFilter *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilterFactory::class$ = NULL;
          jmethodID *HindiNormalizationFilterFactory::mids$ = NULL;
          bool HindiNormalizationFilterFactory::live$ = false;
          ::java::lang::String *HindiNormalizationFilterFactory::NAME = NULL;

          jclass HindiNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilterFactory::HindiNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_HindiNormalizationFilterFactory_normalize(t_HindiNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_HindiNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HindiNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory, HindiNormalizationFilterFactory);

          void t_HindiNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilterFactory), &PY_TYPE_DEF(HindiNormalizationFilterFactory), module, "HindiNormalizationFilterFactory", 0);
          }

          void t_HindiNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilterFactory), "class_", make_descriptor(HindiNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilterFactory), "wrapfn_", make_descriptor(t_HindiNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizationFilterFactory), "NAME", make_descriptor(j2p(*HindiNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilterFactory::wrap_Object(HindiNormalizationFilterFactory(((t_HindiNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HindiNormalizationFilterFactory_normalize(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldBoostMapFCListener::class$ = NULL;
              jmethodID *FieldBoostMapFCListener::mids$ = NULL;
              bool FieldBoostMapFCListener::live$ = false;

              jclass FieldBoostMapFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_4a2b3be8fbbde515] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldBoostMapFCListener::FieldBoostMapFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}

              void FieldBoostMapFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_4a2b3be8fbbde515], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldBoostMapFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldBoostMapFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldBoostMapFCListener)[] = {
                { Py_tp_methods, t_FieldBoostMapFCListener__methods_ },
                { Py_tp_init, (void *) t_FieldBoostMapFCListener_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldBoostMapFCListener)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FieldBoostMapFCListener, t_FieldBoostMapFCListener, FieldBoostMapFCListener);

              void t_FieldBoostMapFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldBoostMapFCListener), &PY_TYPE_DEF(FieldBoostMapFCListener), module, "FieldBoostMapFCListener", 0);
              }

              void t_FieldBoostMapFCListener::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldBoostMapFCListener), "class_", make_descriptor(FieldBoostMapFCListener::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldBoostMapFCListener), "wrapfn_", make_descriptor(t_FieldBoostMapFCListener::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldBoostMapFCListener), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldBoostMapFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldBoostMapFCListener::wrap_Object(FieldBoostMapFCListener(((t_FieldBoostMapFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldBoostMapFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldBoostMapFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldBoostMapFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermFrequencyAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PackedTokenAttributeImpl::class$ = NULL;
          jmethodID *PackedTokenAttributeImpl::mids$ = NULL;
          bool PackedTokenAttributeImpl::live$ = false;

          jclass PackedTokenAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_f8c0f74c939507d4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl;");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_getTermFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getTermFrequency", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_438c62480c481c65] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_setPositionIncrement_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_setTermFrequency_040c4cd0390c5aff] = env->getMethodID(cls, "setTermFrequency", "(I)V");
              mids$[mid_setType_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_type_db9b55ba01e03e4b] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedTokenAttributeImpl::PackedTokenAttributeImpl() : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PackedTokenAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          PackedTokenAttributeImpl PackedTokenAttributeImpl::clone() const
          {
            return PackedTokenAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_f8c0f74c939507d4]));
          }

          void PackedTokenAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          void PackedTokenAttributeImpl::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jint PackedTokenAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jboolean PackedTokenAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint PackedTokenAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_9972fcc56b44e79d]);
          }

          jint PackedTokenAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_9972fcc56b44e79d]);
          }

          jint PackedTokenAttributeImpl::getTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermFrequency_9972fcc56b44e79d]);
          }

          jint PackedTokenAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void PackedTokenAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void PackedTokenAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_438c62480c481c65], a0, a1);
          }

          void PackedTokenAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_040c4cd0390c5aff], a0);
          }

          void PackedTokenAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_040c4cd0390c5aff], a0);
          }

          void PackedTokenAttributeImpl::setTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTermFrequency_040c4cd0390c5aff], a0);
          }

          void PackedTokenAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_9fd2eb66a64e6f0f], a0.this$);
          }

          jint PackedTokenAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }

          ::java::lang::String PackedTokenAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_end(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getTermFrequency(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setTermFrequency(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__termFrequency(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__termFrequency(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PackedTokenAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionIncrement),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionLength),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, termFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedTokenAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PackedTokenAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, end, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionLength, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setTermFrequency, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedTokenAttributeImpl)[] = {
            { Py_tp_methods, t_PackedTokenAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_PackedTokenAttributeImpl_init_ },
            { Py_tp_getset, t_PackedTokenAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedTokenAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl),
            NULL
          };

          DEFINE_TYPE(PackedTokenAttributeImpl, t_PackedTokenAttributeImpl, PackedTokenAttributeImpl);

          void t_PackedTokenAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedTokenAttributeImpl), &PY_TYPE_DEF(PackedTokenAttributeImpl), module, "PackedTokenAttributeImpl", 0);
          }

          void t_PackedTokenAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedTokenAttributeImpl), "class_", make_descriptor(PackedTokenAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedTokenAttributeImpl), "wrapfn_", make_descriptor(t_PackedTokenAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedTokenAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedTokenAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PackedTokenAttributeImpl::wrap_Object(PackedTokenAttributeImpl(((t_PackedTokenAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedTokenAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PackedTokenAttributeImpl object((jobject) NULL);

            INT_CALL(object = PackedTokenAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            PackedTokenAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PackedTokenAttributeImpl::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_end(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getTermFrequency(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermFrequency());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setTermFrequency(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyLong_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyLong_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__termFrequency(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermFrequency());
            return PyLong_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__termFrequency(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "termFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/NotQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *NotQuery::class$ = NULL;
            jmethodID *NotQuery::mids$ = NULL;
            bool NotQuery::live$ = false;

            jclass NotQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/NotQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_700dac1f34624ce1] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NotQuery::NotQuery(const ::java::util::List & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_700dac1f34624ce1, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::Query NotQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args);

            static PyMethodDef t_NotQuery__methods_[] = {
              DECLARE_METHOD(t_NotQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NotQuery)[] = {
              { Py_tp_methods, t_NotQuery__methods_ },
              { Py_tp_init, (void *) t_NotQuery_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NotQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::ComposedQuery),
              NULL
            };

            DEFINE_TYPE(NotQuery, t_NotQuery, NotQuery);

            void t_NotQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(NotQuery), &PY_TYPE_DEF(NotQuery), module, "NotQuery", 0);
            }

            void t_NotQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NotQuery), "class_", make_descriptor(NotQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NotQuery), "wrapfn_", make_descriptor(t_NotQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NotQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NotQuery::initializeClass, 1)))
                return NULL;
              return t_NotQuery::wrap_Object(NotQuery(((t_NotQuery *) arg)->object.this$));
            }
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NotQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              NotQuery object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                INT_CALL(object = NotQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(NotQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DoubleValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DoubleValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DoubleValues::class$ = NULL;
        jmethodID *DoubleValues::mids$ = NULL;
        bool DoubleValues::live$ = false;
        DoubleValues *DoubleValues::EMPTY = NULL;

        jclass DoubleValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DoubleValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
            mids$[mid_withDefault_7080b70aeda423fd] = env->getStaticMethodID(cls, "withDefault", "(Lorg/apache/lucene/search/DoubleValues;D)Lorg/apache/lucene/search/DoubleValues;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DoubleValues(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DoubleValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleValues::DoubleValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean DoubleValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jdouble DoubleValues::doubleValue() const
        {
          return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
        }

        DoubleValues DoubleValues::withDefault(const DoubleValues & a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DoubleValues(env->callStaticObjectMethod(cls, mids$[mid_withDefault_7080b70aeda423fd], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DoubleValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleValues_init_(t_DoubleValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleValues_advanceExact(t_DoubleValues *self, PyObject *arg);
        static PyObject *t_DoubleValues_doubleValue(t_DoubleValues *self);
        static PyObject *t_DoubleValues_withDefault(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DoubleValues__methods_[] = {
          DECLARE_METHOD(t_DoubleValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleValues, advanceExact, METH_O),
          DECLARE_METHOD(t_DoubleValues, doubleValue, METH_NOARGS),
          DECLARE_METHOD(t_DoubleValues, withDefault, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoubleValues)[] = {
          { Py_tp_methods, t_DoubleValues__methods_ },
          { Py_tp_init, (void *) t_DoubleValues_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoubleValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DoubleValues, t_DoubleValues, DoubleValues);

        void t_DoubleValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleValues), &PY_TYPE_DEF(DoubleValues), module, "DoubleValues", 0);
        }

        void t_DoubleValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValues), "class_", make_descriptor(DoubleValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValues), "wrapfn_", make_descriptor(t_DoubleValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValues), "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleValues::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleValues), "EMPTY", make_descriptor(t_DoubleValues::wrap_Object(*DoubleValues::EMPTY)));
        }

        static PyObject *t_DoubleValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleValues::initializeClass, 1)))
            return NULL;
          return t_DoubleValues::wrap_Object(DoubleValues(((t_DoubleValues *) arg)->object.this$));
        }
        static PyObject *t_DoubleValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleValues_init_(t_DoubleValues *self, PyObject *args, PyObject *kwds)
        {
          DoubleValues object((jobject) NULL);

          INT_CALL(object = DoubleValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleValues_advanceExact(t_DoubleValues *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "advanceExact", arg);
          return NULL;
        }

        static PyObject *t_DoubleValues_doubleValue(t_DoubleValues *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.doubleValue());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DoubleValues_withDefault(PyTypeObject *type, PyObject *args)
        {
          DoubleValues a0((jobject) NULL);
          jdouble a1;
          DoubleValues result((jobject) NULL);

          if (!parseArgs(args, "kD", DoubleValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DoubleValues::withDefault(a0, a1));
            return t_DoubleValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "withDefault", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilter::class$ = NULL;
          jmethodID *TruncateTokenFilter::mids$ = NULL;
          bool TruncateTokenFilter::live$ = false;

          jclass TruncateTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilter::TruncateTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          jboolean TruncateTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TruncateTokenFilter)[] = {
            { Py_tp_methods, t_TruncateTokenFilter__methods_ },
            { Py_tp_init, (void *) t_TruncateTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TruncateTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TruncateTokenFilter, t_TruncateTokenFilter, TruncateTokenFilter);

          void t_TruncateTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilter), &PY_TYPE_DEF(TruncateTokenFilter), module, "TruncateTokenFilter", 0);
          }

          void t_TruncateTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilter), "class_", make_descriptor(TruncateTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilter), "wrapfn_", make_descriptor(t_TruncateTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilter::wrap_Object(TruncateTokenFilter(((t_TruncateTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            TruncateTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TruncateTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TruncateTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PointsReader::class$ = NULL;
        jmethodID *PointsReader::mids$ = NULL;
        bool PointsReader::live$ = false;

        jclass PointsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PointsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getMergeInstance_0a5d82ff6781f22b] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_getValues_72b990dbae0eea09] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PointsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        PointsReader PointsReader::getMergeInstance() const
        {
          return PointsReader(env->callObjectMethod(this$, mids$[mid_getMergeInstance_0a5d82ff6781f22b]));
        }

        ::org::apache::lucene::index::PointValues PointsReader::getValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getValues_72b990dbae0eea09], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PointsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsReader_checkIntegrity(t_PointsReader *self);
        static PyObject *t_PointsReader_getMergeInstance(t_PointsReader *self);
        static PyObject *t_PointsReader_getValues(t_PointsReader *self, PyObject *arg);
        static PyObject *t_PointsReader_get__mergeInstance(t_PointsReader *self, void *data);
        static PyGetSetDef t_PointsReader__fields_[] = {
          DECLARE_GET_FIELD(t_PointsReader, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PointsReader__methods_[] = {
          DECLARE_METHOD(t_PointsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PointsReader, getMergeInstance, METH_NOARGS),
          DECLARE_METHOD(t_PointsReader, getValues, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointsReader)[] = {
          { Py_tp_methods, t_PointsReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PointsReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointsReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointsReader, t_PointsReader, PointsReader);

        void t_PointsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(PointsReader), &PY_TYPE_DEF(PointsReader), module, "PointsReader", 0);
        }

        void t_PointsReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsReader), "class_", make_descriptor(PointsReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsReader), "wrapfn_", make_descriptor(t_PointsReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointsReader::initializeClass, 1)))
            return NULL;
          return t_PointsReader::wrap_Object(PointsReader(((t_PointsReader *) arg)->object.this$));
        }
        static PyObject *t_PointsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointsReader_checkIntegrity(t_PointsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PointsReader_getMergeInstance(t_PointsReader *self)
        {
          PointsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_PointsReader::wrap_Object(result);
        }

        static PyObject *t_PointsReader_getValues(t_PointsReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_PointsReader_get__mergeInstance(t_PointsReader *self, void *data)
        {
          PointsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_PointsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/ConnectionCosts.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/dict/ConnectionCosts.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *ConnectionCosts::class$ = NULL;
            jmethodID *ConnectionCosts::mids$ = NULL;
            bool ConnectionCosts::live$ = false;
            ::java::lang::String *ConnectionCosts::FILENAME_SUFFIX = NULL;
            ::java::lang::String *ConnectionCosts::HEADER = NULL;
            jint ConnectionCosts::VERSION = (jint) 0;

            jclass ConnectionCosts::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/ConnectionCosts");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6cf983c700d51b23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_get_57a58545eba514db] = env->getMethodID(cls, "get", "(II)I");
                mids$[mid_getInstance_3a1a34fbe62d2799] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ko/dict/ConnectionCosts;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FILENAME_SUFFIX", "Ljava/lang/String;"));
                HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "HEADER", "Ljava/lang/String;"));
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConnectionCosts::ConnectionCosts(const ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cf983c700d51b23, a0.this$, a1.this$)) {}

            jint ConnectionCosts::get(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_57a58545eba514db], a0, a1);
            }

            ConnectionCosts ConnectionCosts::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return ConnectionCosts(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3a1a34fbe62d2799]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_ConnectionCosts_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConnectionCosts_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConnectionCosts_init_(t_ConnectionCosts *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConnectionCosts_get(t_ConnectionCosts *self, PyObject *args);
            static PyObject *t_ConnectionCosts_getInstance(PyTypeObject *type);
            static PyObject *t_ConnectionCosts_get__instance(t_ConnectionCosts *self, void *data);
            static PyGetSetDef t_ConnectionCosts__fields_[] = {
              DECLARE_GET_FIELD(t_ConnectionCosts, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConnectionCosts__methods_[] = {
              DECLARE_METHOD(t_ConnectionCosts, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConnectionCosts, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConnectionCosts, get, METH_VARARGS),
              DECLARE_METHOD(t_ConnectionCosts, getInstance, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ConnectionCosts)[] = {
              { Py_tp_methods, t_ConnectionCosts__methods_ },
              { Py_tp_init, (void *) t_ConnectionCosts_init_ },
              { Py_tp_getset, t_ConnectionCosts__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ConnectionCosts)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ConnectionCosts, t_ConnectionCosts, ConnectionCosts);

            void t_ConnectionCosts::install(PyObject *module)
            {
              installType(&PY_TYPE(ConnectionCosts), &PY_TYPE_DEF(ConnectionCosts), module, "ConnectionCosts", 0);
            }

            void t_ConnectionCosts::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "class_", make_descriptor(ConnectionCosts::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "wrapfn_", make_descriptor(t_ConnectionCosts::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "boxfn_", make_descriptor(boxObject));
              env->getClass(ConnectionCosts::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "FILENAME_SUFFIX", make_descriptor(j2p(*ConnectionCosts::FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "HEADER", make_descriptor(j2p(*ConnectionCosts::HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "VERSION", make_descriptor(ConnectionCosts::VERSION));
            }

            static PyObject *t_ConnectionCosts_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConnectionCosts::initializeClass, 1)))
                return NULL;
              return t_ConnectionCosts::wrap_Object(ConnectionCosts(((t_ConnectionCosts *) arg)->object.this$));
            }
            static PyObject *t_ConnectionCosts_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConnectionCosts::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConnectionCosts_init_(t_ConnectionCosts *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ConnectionCosts object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = ConnectionCosts(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConnectionCosts_get(t_ConnectionCosts *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_ConnectionCosts_getInstance(PyTypeObject *type)
            {
              ConnectionCosts result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::ConnectionCosts::getInstance());
              return t_ConnectionCosts::wrap_Object(result);
            }

            static PyObject *t_ConnectionCosts_get__instance(t_ConnectionCosts *self, void *data)
            {
              ConnectionCosts value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_ConnectionCosts::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$SortedSetDocValuesStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$SortedSetDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$SortedSetDocValuesStats::mids$ = NULL;
        bool DocValuesStats$SortedSetDocValuesStats::live$ = false;

        jclass DocValuesStats$SortedSetDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$SortedSetDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_hasValue_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasValue", "(I)Z");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");
            mids$[mid_init_07cae694a8cf1c6d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_of_(t_DocValuesStats$SortedSetDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_get__parameters_(t_DocValuesStats$SortedSetDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$SortedSetDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$SortedSetDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$SortedSetDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$SortedSetDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedSetDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedSetDocValuesStats, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$SortedSetDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$SortedSetDocValuesStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesStats$SortedSetDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$SortedSetDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$SortedSetDocValuesStats, t_DocValuesStats$SortedSetDocValuesStats, DocValuesStats$SortedSetDocValuesStats);
        PyObject *t_DocValuesStats$SortedSetDocValuesStats::wrap_Object(const DocValuesStats$SortedSetDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedSetDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedSetDocValuesStats *self = (t_DocValuesStats$SortedSetDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$SortedSetDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedSetDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedSetDocValuesStats *self = (t_DocValuesStats$SortedSetDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$SortedSetDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$SortedSetDocValuesStats), &PY_TYPE_DEF(DocValuesStats$SortedSetDocValuesStats), module, "DocValuesStats$SortedSetDocValuesStats", 0);
        }

        void t_DocValuesStats$SortedSetDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedSetDocValuesStats), "class_", make_descriptor(DocValuesStats$SortedSetDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedSetDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$SortedSetDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedSetDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$SortedSetDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$SortedSetDocValuesStats::wrap_Object(DocValuesStats$SortedSetDocValuesStats(((t_DocValuesStats$SortedSetDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$SortedSetDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_of_(t_DocValuesStats$SortedSetDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_DocValuesStats$SortedSetDocValuesStats_get__parameters_(t_DocValuesStats$SortedSetDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LargeNumHitsTopDocsCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LargeNumHitsTopDocsCollector::class$ = NULL;
        jmethodID *LargeNumHitsTopDocsCollector::mids$ = NULL;
        bool LargeNumHitsTopDocsCollector::live$ = false;

        jclass LargeNumHitsTopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LargeNumHitsTopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_topDocs_45154c559b39de4e] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_a28828dc6b19e268] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_populateResults_22b73975846c3758] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_192d9e6ab68e411e] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;)Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LargeNumHitsTopDocsCollector::LargeNumHitsTopDocsCollector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        ::org::apache::lucene::search::LeafCollector LargeNumHitsTopDocsCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode LargeNumHitsTopDocsCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        ::org::apache::lucene::search::TopDocs LargeNumHitsTopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_45154c559b39de4e]));
        }

        ::org::apache::lucene::search::TopDocs LargeNumHitsTopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_a28828dc6b19e268], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LargeNumHitsTopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LargeNumHitsTopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LargeNumHitsTopDocsCollector_init_(t_LargeNumHitsTopDocsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LargeNumHitsTopDocsCollector_getLeafCollector(t_LargeNumHitsTopDocsCollector *self, PyObject *arg);
        static PyObject *t_LargeNumHitsTopDocsCollector_scoreMode(t_LargeNumHitsTopDocsCollector *self);
        static PyObject *t_LargeNumHitsTopDocsCollector_topDocs(t_LargeNumHitsTopDocsCollector *self, PyObject *args);

        static PyMethodDef t_LargeNumHitsTopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_LargeNumHitsTopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LargeNumHitsTopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LargeNumHitsTopDocsCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_LargeNumHitsTopDocsCollector, scoreMode, METH_NOARGS),
          DECLARE_METHOD(t_LargeNumHitsTopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LargeNumHitsTopDocsCollector)[] = {
          { Py_tp_methods, t_LargeNumHitsTopDocsCollector__methods_ },
          { Py_tp_init, (void *) t_LargeNumHitsTopDocsCollector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LargeNumHitsTopDocsCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LargeNumHitsTopDocsCollector, t_LargeNumHitsTopDocsCollector, LargeNumHitsTopDocsCollector);

        void t_LargeNumHitsTopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(LargeNumHitsTopDocsCollector), &PY_TYPE_DEF(LargeNumHitsTopDocsCollector), module, "LargeNumHitsTopDocsCollector", 0);
        }

        void t_LargeNumHitsTopDocsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LargeNumHitsTopDocsCollector), "class_", make_descriptor(LargeNumHitsTopDocsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LargeNumHitsTopDocsCollector), "wrapfn_", make_descriptor(t_LargeNumHitsTopDocsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LargeNumHitsTopDocsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LargeNumHitsTopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LargeNumHitsTopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_LargeNumHitsTopDocsCollector::wrap_Object(LargeNumHitsTopDocsCollector(((t_LargeNumHitsTopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_LargeNumHitsTopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LargeNumHitsTopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LargeNumHitsTopDocsCollector_init_(t_LargeNumHitsTopDocsCollector *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          LargeNumHitsTopDocsCollector object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LargeNumHitsTopDocsCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LargeNumHitsTopDocsCollector_getLeafCollector(t_LargeNumHitsTopDocsCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_LargeNumHitsTopDocsCollector_scoreMode(t_LargeNumHitsTopDocsCollector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }

        static PyObject *t_LargeNumHitsTopDocsCollector_topDocs(t_LargeNumHitsTopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF2LOG.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF2LOG::class$ = NULL;
          jmethodID *AxiomaticF2LOG::mids$ = NULL;
          bool AxiomaticF2LOG::live$ = false;

          jclass AxiomaticF2LOG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF2LOG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF2LOG::AxiomaticF2LOG() : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          AxiomaticF2LOG::AxiomaticF2LOG(jfloat a0) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::java::lang::String AxiomaticF2LOG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF2LOG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF2LOG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF2LOG_init_(t_AxiomaticF2LOG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF2LOG_toString(t_AxiomaticF2LOG *self, PyObject *args);

          static PyMethodDef t_AxiomaticF2LOG__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF2LOG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF2LOG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF2LOG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF2LOG)[] = {
            { Py_tp_methods, t_AxiomaticF2LOG__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF2LOG_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF2LOG)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF2LOG, t_AxiomaticF2LOG, AxiomaticF2LOG);

          void t_AxiomaticF2LOG::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF2LOG), &PY_TYPE_DEF(AxiomaticF2LOG), module, "AxiomaticF2LOG", 0);
          }

          void t_AxiomaticF2LOG::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2LOG), "class_", make_descriptor(AxiomaticF2LOG::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2LOG), "wrapfn_", make_descriptor(t_AxiomaticF2LOG::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF2LOG), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF2LOG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF2LOG::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF2LOG::wrap_Object(AxiomaticF2LOG(((t_AxiomaticF2LOG *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF2LOG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF2LOG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF2LOG_init_(t_AxiomaticF2LOG *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AxiomaticF2LOG object((jobject) NULL);

                INT_CALL(object = AxiomaticF2LOG());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                AxiomaticF2LOG object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AxiomaticF2LOG(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF2LOG_toString(t_AxiomaticF2LOG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF2LOG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils$IOFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils$IOFunction::class$ = NULL;
        jmethodID *IOUtils$IOFunction::mids$ = NULL;
        bool IOUtils$IOFunction::live$ = false;

        jclass IOUtils$IOFunction::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils$IOFunction");

            mids$ = new jmethodID[max_mid];
            mids$[mid_apply_e5ae0f8c04795fa9] = env->getMethodID(cls, "apply", "(Ljava/lang/Object;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Object IOUtils$IOFunction::apply(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_apply_e5ae0f8c04795fa9], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils$IOFunction_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils$IOFunction_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils$IOFunction_of_(t_IOUtils$IOFunction *self, PyObject *args);
        static PyObject *t_IOUtils$IOFunction_apply(t_IOUtils$IOFunction *self, PyObject *arg);
        static PyObject *t_IOUtils$IOFunction_get__parameters_(t_IOUtils$IOFunction *self, void *data);
        static PyGetSetDef t_IOUtils$IOFunction__fields_[] = {
          DECLARE_GET_FIELD(t_IOUtils$IOFunction, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOUtils$IOFunction__methods_[] = {
          DECLARE_METHOD(t_IOUtils$IOFunction, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils$IOFunction, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils$IOFunction, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOUtils$IOFunction, apply, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOUtils$IOFunction)[] = {
          { Py_tp_methods, t_IOUtils$IOFunction__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IOUtils$IOFunction__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOUtils$IOFunction)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IOUtils$IOFunction, t_IOUtils$IOFunction, IOUtils$IOFunction);
        PyObject *t_IOUtils$IOFunction::wrap_Object(const IOUtils$IOFunction& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_IOUtils$IOFunction::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOUtils$IOFunction *self = (t_IOUtils$IOFunction *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_IOUtils$IOFunction::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_IOUtils$IOFunction::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOUtils$IOFunction *self = (t_IOUtils$IOFunction *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_IOUtils$IOFunction::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils$IOFunction), &PY_TYPE_DEF(IOUtils$IOFunction), module, "IOUtils$IOFunction", 0);
        }

        void t_IOUtils$IOFunction::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOFunction), "class_", make_descriptor(IOUtils$IOFunction::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOFunction), "wrapfn_", make_descriptor(t_IOUtils$IOFunction::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOFunction), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IOUtils$IOFunction_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils$IOFunction::initializeClass, 1)))
            return NULL;
          return t_IOUtils$IOFunction::wrap_Object(IOUtils$IOFunction(((t_IOUtils$IOFunction *) arg)->object.this$));
        }
        static PyObject *t_IOUtils$IOFunction_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils$IOFunction::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils$IOFunction_of_(t_IOUtils$IOFunction *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOUtils$IOFunction_apply(t_IOUtils$IOFunction *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.apply(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "apply", arg);
          return NULL;
        }
        static PyObject *t_IOUtils$IOFunction_get__parameters_(t_IOUtils$IOFunction *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RegexpQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RegexpQueryNodeProcessor::class$ = NULL;
              jmethodID *RegexpQueryNodeProcessor::mids$ = NULL;
              bool RegexpQueryNodeProcessor::live$ = false;

              jclass RegexpQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RegexpQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeProcessor::RegexpQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RegexpQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeProcessor_init_(t_RegexpQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_RegexpQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RegexpQueryNodeProcessor)[] = {
                { Py_tp_methods, t_RegexpQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_RegexpQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RegexpQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(RegexpQueryNodeProcessor, t_RegexpQueryNodeProcessor, RegexpQueryNodeProcessor);

              void t_RegexpQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeProcessor), &PY_TYPE_DEF(RegexpQueryNodeProcessor), module, "RegexpQueryNodeProcessor", 0);
              }

              void t_RegexpQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeProcessor), "class_", make_descriptor(RegexpQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeProcessor), "wrapfn_", make_descriptor(t_RegexpQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeProcessor::wrap_Object(RegexpQueryNodeProcessor(((t_RegexpQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeProcessor_init_(t_RegexpQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/LinearDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/LinearDistance.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *LinearDistance::class$ = NULL;
          jmethodID *LinearDistance::mids$ = NULL;
          bool LinearDistance::live$ = false;
          LinearDistance *LinearDistance::INSTANCE = NULL;

          jclass LinearDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/LinearDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new LinearDistance(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/spatial3d/geom/LinearDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LinearDistance::LinearDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble LinearDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble LinearDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble LinearDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble LinearDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > LinearDistance::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble LinearDistance::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble LinearDistance::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_LinearDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LinearDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LinearDistance_init_(t_LinearDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LinearDistance_computeDistance(t_LinearDistance *self, PyObject *args);
          static PyObject *t_LinearDistance_findDistancePoints(t_LinearDistance *self, PyObject *args);
          static PyObject *t_LinearDistance_findMaximumArcDistance(t_LinearDistance *self, PyObject *args);
          static PyObject *t_LinearDistance_findMinimumArcDistance(t_LinearDistance *self, PyObject *args);

          static PyMethodDef t_LinearDistance__methods_[] = {
            DECLARE_METHOD(t_LinearDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LinearDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LinearDistance, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_LinearDistance, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_LinearDistance, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_LinearDistance, findMinimumArcDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LinearDistance)[] = {
            { Py_tp_methods, t_LinearDistance__methods_ },
            { Py_tp_init, (void *) t_LinearDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LinearDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LinearDistance, t_LinearDistance, LinearDistance);

          void t_LinearDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LinearDistance), &PY_TYPE_DEF(LinearDistance), module, "LinearDistance", 0);
          }

          void t_LinearDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearDistance), "class_", make_descriptor(LinearDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearDistance), "wrapfn_", make_descriptor(t_LinearDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearDistance), "boxfn_", make_descriptor(boxObject));
            env->getClass(LinearDistance::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearDistance), "INSTANCE", make_descriptor(t_LinearDistance::wrap_Object(*LinearDistance::INSTANCE)));
          }

          static PyObject *t_LinearDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LinearDistance::initializeClass, 1)))
              return NULL;
            return t_LinearDistance::wrap_Object(LinearDistance(((t_LinearDistance *) arg)->object.this$));
          }
          static PyObject *t_LinearDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LinearDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LinearDistance_init_(t_LinearDistance *self, PyObject *args, PyObject *kwds)
          {
            LinearDistance object((jobject) NULL);

            INT_CALL(object = LinearDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LinearDistance_computeDistance(t_LinearDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_LinearDistance_findDistancePoints(t_LinearDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_LinearDistance_findMaximumArcDistance(t_LinearDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_LinearDistance_findMinimumArcDistance(t_LinearDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause$Occur::class$ = NULL;
        jmethodID *BooleanClause$Occur::mids$ = NULL;
        bool BooleanClause$Occur::live$ = false;
        BooleanClause$Occur *BooleanClause$Occur::FILTER = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST_NOT = NULL;
        BooleanClause$Occur *BooleanClause$Occur::SHOULD = NULL;

        jclass BooleanClause$Occur::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause$Occur");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_d601e8335ce2ead2] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_values_83793cc967a852b6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/BooleanClause$Occur;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            FILTER = new BooleanClause$Occur(env->getStaticObjectField(cls, "FILTER", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST_NOT = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST_NOT", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            SHOULD = new BooleanClause$Occur(env->getStaticObjectField(cls, "SHOULD", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause$Occur BooleanClause$Occur::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BooleanClause$Occur(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d601e8335ce2ead2], a0.this$));
        }

        JArray< BooleanClause$Occur > BooleanClause$Occur::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< BooleanClause$Occur >(env->callStaticObjectMethod(cls, mids$[mid_values_83793cc967a852b6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args);
        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type);
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data);
        static PyGetSetDef t_BooleanClause$Occur__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause$Occur, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause$Occur__methods_[] = {
          DECLARE_METHOD(t_BooleanClause$Occur, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, of_, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause$Occur, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanClause$Occur)[] = {
          { Py_tp_methods, t_BooleanClause$Occur__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BooleanClause$Occur__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanClause$Occur)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(BooleanClause$Occur, t_BooleanClause$Occur, BooleanClause$Occur);
        PyObject *t_BooleanClause$Occur::wrap_Object(const BooleanClause$Occur& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BooleanClause$Occur::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BooleanClause$Occur::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause$Occur), &PY_TYPE_DEF(BooleanClause$Occur), module, "BooleanClause$Occur", 0);
        }

        void t_BooleanClause$Occur::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "class_", make_descriptor(BooleanClause$Occur::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "wrapfn_", make_descriptor(t_BooleanClause$Occur::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "boxfn_", make_descriptor(boxObject));
          env->getClass(BooleanClause$Occur::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "FILTER", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::FILTER)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "MUST", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "MUST_NOT", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST_NOT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanClause$Occur), "SHOULD", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::SHOULD)));
        }

        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause$Occur::initializeClass, 1)))
            return NULL;
          return t_BooleanClause$Occur::wrap_Object(BooleanClause$Occur(((t_BooleanClause$Occur *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause$Occur::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          BooleanClause$Occur result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::valueOf(a0));
            return t_BooleanClause$Occur::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type)
        {
          JArray< BooleanClause$Occur > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::values());
          return JArray<jobject>(result.this$).wrap(t_BooleanClause$Occur::wrap_jobject);
        }
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::suggest::InputIterator Dictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self);
          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Dictionary)[] = {
            { Py_tp_methods, t_Dictionary__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Dictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Dictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Dictionary, t_Dictionary, Dictionary);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), &PY_TYPE_DEF(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_98076c95b41eb3a1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JZJZ)V");
              mids$[mid_accept_129dd81483fb5856] = env->getMethodID(cls, "accept", "(J)Z");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getQuery_79ccc7b26832e36a] = env->getMethodID(cls, "getQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/LongValuesSource;)Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(const ::java::lang::String & a0, jlong a1, jboolean a2, jlong a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_98076c95b41eb3a1, a0.this$, a1, a2, a3, a4)) {}

          jboolean LongRange::accept(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_129dd81483fb5856], a0);
          }

          jboolean LongRange::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::Query LongRange::getQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::LongValuesSource & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_79ccc7b26832e36a], a0.this$, a1.this$));
          }

          jint LongRange::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg);
          static PyObject *t_LongRange_equals(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_getQuery(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_hashCode(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GET_FIELD(t_LongRange, max),
            DECLARE_GET_FIELD(t_LongRange, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, accept, METH_O),
            DECLARE_METHOD(t_LongRange, equals, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRange)[] = {
            { Py_tp_methods, t_LongRange__methods_ },
            { Py_tp_init, (void *) t_LongRange_init_ },
            { Py_tp_getset, t_LongRange__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRange)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::range::Range),
            NULL
          };

          DEFINE_TYPE(LongRange, t_LongRange, LongRange);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), &PY_TYPE_DEF(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "class_", make_descriptor(LongRange::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jlong a1;
            jboolean a2;
            jlong a3;
            jboolean a4;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "sJZJZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_LongRange_equals(t_LongRange *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LongRange_getQuery(t_LongRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::LongValuesSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQuery", args);
            return NULL;
          }

          static PyObject *t_LongRange_hashCode(t_LongRange *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressionMode::class$ = NULL;
          jmethodID *CompressionMode::mids$ = NULL;
          bool CompressionMode::live$ = false;
          CompressionMode *CompressionMode::FAST = NULL;
          CompressionMode *CompressionMode::FAST_DECOMPRESSION = NULL;
          CompressionMode *CompressionMode::HIGH_COMPRESSION = NULL;

          jclass CompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_newCompressor_d2c98bf6347b4a10] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_1fbc4f71d5e2b599] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FAST = new CompressionMode(env->getStaticObjectField(cls, "FAST", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              FAST_DECOMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "FAST_DECOMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              HIGH_COMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "HIGH_COMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::compressing::Compressor CompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_d2c98bf6347b4a10]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor CompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_1fbc4f71d5e2b599]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self);
          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self);

          static PyMethodDef t_CompressionMode__methods_[] = {
            DECLARE_METHOD(t_CompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, newCompressor, METH_NOARGS),
            DECLARE_METHOD(t_CompressionMode, newDecompressor, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressionMode)[] = {
            { Py_tp_methods, t_CompressionMode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressionMode)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CompressionMode, t_CompressionMode, CompressionMode);

          void t_CompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressionMode), &PY_TYPE_DEF(CompressionMode), module, "CompressionMode", 0);
          }

          void t_CompressionMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "class_", make_descriptor(CompressionMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "wrapfn_", make_descriptor(t_CompressionMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressionMode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "FAST", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "FAST_DECOMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST_DECOMPRESSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressionMode), "HIGH_COMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::HIGH_COMPRESSION)));
          }

          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressionMode::initializeClass, 1)))
              return NULL;
            return t_CompressionMode::wrap_Object(CompressionMode(((t_CompressionMode *) arg)->object.this$));
          }
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newCompressor());
            return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
          }

          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newDecompressor());
            return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilterFactory::class$ = NULL;
          jmethodID *CommonGramsFilterFactory::mids$ = NULL;
          bool CommonGramsFilterFactory::live$ = false;
          ::java::lang::String *CommonGramsFilterFactory::NAME = NULL;

          jclass CommonGramsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_getCommonWords_7aec8e69a9807ca1] = env->getMethodID(cls, "getCommonWords", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilterFactory::CommonGramsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }

          ::org::apache::lucene::analysis::CharArraySet CommonGramsFilterFactory::getCommonWords() const
          {
            return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getCommonWords_7aec8e69a9807ca1]));
          }

          void CommonGramsFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          jboolean CommonGramsFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args);
          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data);
          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data);
          static PyGetSetDef t_CommonGramsFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, commonWords),
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, getCommonWords, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_CommonGramsFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CommonGramsFilterFactory)[] = {
            { Py_tp_methods, t_CommonGramsFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CommonGramsFilterFactory_init_ },
            { Py_tp_getset, t_CommonGramsFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CommonGramsFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CommonGramsFilterFactory, t_CommonGramsFilterFactory, CommonGramsFilterFactory);

          void t_CommonGramsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilterFactory), &PY_TYPE_DEF(CommonGramsFilterFactory), module, "CommonGramsFilterFactory", 0);
          }

          void t_CommonGramsFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilterFactory), "class_", make_descriptor(CommonGramsFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilterFactory), "wrapfn_", make_descriptor(t_CommonGramsFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilterFactory), "NAME", make_descriptor(j2p(*CommonGramsFilterFactory::NAME)));
          }

          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilterFactory::wrap_Object(CommonGramsFilterFactory(((t_CommonGramsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CommonGramsFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Axiomatic.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Axiomatic::class$ = NULL;
          jmethodID *Axiomatic::mids$ = NULL;
          bool Axiomatic::live$ = false;

          jclass Axiomatic::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Axiomatic");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_3cf0b46cc9375aa7] = env->getMethodID(cls, "<init>", "(FI)V");
              mids$[mid_init$_6d2f7945f0f05cec] = env->getMethodID(cls, "<init>", "(FIF)V");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Axiomatic::Axiomatic() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Axiomatic::Axiomatic(jfloat a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          Axiomatic::Axiomatic(jfloat a0, jint a1) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_3cf0b46cc9375aa7, a0, a1)) {}

          Axiomatic::Axiomatic(jfloat a0, jint a1, jfloat a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_6d2f7945f0f05cec, a0, a1, a2)) {}

          jdouble Axiomatic::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String Axiomatic::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Axiomatic_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Axiomatic_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Axiomatic_init_(t_Axiomatic *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Axiomatic_score(t_Axiomatic *self, PyObject *args);
          static PyObject *t_Axiomatic_toString(t_Axiomatic *self, PyObject *args);

          static PyMethodDef t_Axiomatic__methods_[] = {
            DECLARE_METHOD(t_Axiomatic, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Axiomatic, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Axiomatic, score, METH_VARARGS),
            DECLARE_METHOD(t_Axiomatic, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Axiomatic)[] = {
            { Py_tp_methods, t_Axiomatic__methods_ },
            { Py_tp_init, (void *) t_Axiomatic_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Axiomatic)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::SimilarityBase),
            NULL
          };

          DEFINE_TYPE(Axiomatic, t_Axiomatic, Axiomatic);

          void t_Axiomatic::install(PyObject *module)
          {
            installType(&PY_TYPE(Axiomatic), &PY_TYPE_DEF(Axiomatic), module, "Axiomatic", 0);
          }

          void t_Axiomatic::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Axiomatic), "class_", make_descriptor(Axiomatic::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Axiomatic), "wrapfn_", make_descriptor(t_Axiomatic::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Axiomatic), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Axiomatic_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Axiomatic::initializeClass, 1)))
              return NULL;
            return t_Axiomatic::wrap_Object(Axiomatic(((t_Axiomatic *) arg)->object.this$));
          }
          static PyObject *t_Axiomatic_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Axiomatic::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Axiomatic_init_(t_Axiomatic *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Axiomatic object((jobject) NULL);

                INT_CALL(object = Axiomatic());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                Axiomatic object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Axiomatic(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jint a1;
                Axiomatic object((jobject) NULL);

                if (!parseArgs(args, "FI", &a0, &a1))
                {
                  INT_CALL(object = Axiomatic(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jint a1;
                jfloat a2;
                Axiomatic object((jobject) NULL);

                if (!parseArgs(args, "FIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = Axiomatic(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Axiomatic_score(t_Axiomatic *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Axiomatic_toString(t_Axiomatic *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Axiomatic), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Short.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jint Short::BYTES = (jint) 0;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_265bc0a0a1840315] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_62c62398434c3efb] = env->getStaticMethodID(cls, "compare", "(SS)I");
        mids$[mid_compareTo_8cdb7dec2fed099c] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_871278f1c8a1ad06] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_e51608fa7fa0b998] = env->getStaticMethodID(cls, "hashCode", "(S)I");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_c5bee6317a41dfb6] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_583c58009affa4ba] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_b01103324aa7c244] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_b51c4ac60c4ba205] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_e51608fa7fa0b998] = env->getStaticMethodID(cls, "toUnsignedInt", "(S)I");
        mids$[mid_toUnsignedLong_7c8c4477eea7df84] = env->getStaticMethodID(cls, "toUnsignedLong", "(S)J");
        mids$[mid_valueOf_871278f1c8a1ad06] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_3650fa7f22e3d3a5] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_99e61d6d5de66425] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_265bc0a0a1840315, a0)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Short::compare(jshort a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_62c62398434c3efb], a0, a1);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_8cdb7dec2fed099c], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_871278f1c8a1ad06], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Short::hashCode(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_e51608fa7fa0b998], a0);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_c5bee6317a41dfb6], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_583c58009affa4ba], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_b01103324aa7c244], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_b51c4ac60c4ba205], a0));
    }

    jint Short::toUnsignedInt(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_e51608fa7fa0b998], a0);
    }

    jlong Short::toUnsignedLong(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_7c8c4477eea7df84], a0);
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_871278f1c8a1ad06], a0.this$));
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3650fa7f22e3d3a5], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_99e61d6d5de66425], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Short)[] = {
      { Py_tp_methods, t_Short__methods_ },
      { Py_tp_init, (void *) t_Short_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Short)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Short, t_Short, Short);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), &PY_TYPE_DEF(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "class_", make_descriptor(Short::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "wrapfn_", make_descriptor(unboxShort));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "BYTES", make_descriptor(Short::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "SIZE", make_descriptor(Short::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Short), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jshort a1;
      jint result;

      if (!parseArgs(args, "SS", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Short::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jint result;

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jint result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedInt(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Short_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jlong result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/NormalDistance.h"
#include "org/apache/lucene/spatial3d/geom/NormalSquaredDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/LinearDistance.h"
#include "org/apache/lucene/spatial3d/geom/LinearSquaredDistance.h"
#include "org/apache/lucene/spatial3d/geom/ArcDistance.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *DistanceStyle::class$ = NULL;
          jmethodID *DistanceStyle::mids$ = NULL;
          bool DistanceStyle::live$ = false;
          ::org::apache::lucene::spatial3d::geom::ArcDistance *DistanceStyle::ARC = NULL;
          ::org::apache::lucene::spatial3d::geom::LinearDistance *DistanceStyle::LINEAR = NULL;
          ::org::apache::lucene::spatial3d::geom::LinearSquaredDistance *DistanceStyle::LINEAR_SQUARED = NULL;
          ::org::apache::lucene::spatial3d::geom::NormalDistance *DistanceStyle::NORMAL = NULL;
          ::org::apache::lucene::spatial3d::geom::NormalSquaredDistance *DistanceStyle::NORMAL_SQUARED = NULL;

          jclass DistanceStyle::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/DistanceStyle");

              mids$ = new jmethodID[max_mid];
              mids$[mid_aggregateDistances_990b512583b70d91] = env->getMethodID(cls, "aggregateDistances", "(DD)D");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_fromAggregationForm_d089f34703408a66] = env->getMethodID(cls, "fromAggregationForm", "(D)D");
              mids$[mid_toAggregationForm_d089f34703408a66] = env->getMethodID(cls, "toAggregationForm", "(D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ARC = new ::org::apache::lucene::spatial3d::geom::ArcDistance(env->getStaticObjectField(cls, "ARC", "Lorg/apache/lucene/spatial3d/geom/ArcDistance;"));
              LINEAR = new ::org::apache::lucene::spatial3d::geom::LinearDistance(env->getStaticObjectField(cls, "LINEAR", "Lorg/apache/lucene/spatial3d/geom/LinearDistance;"));
              LINEAR_SQUARED = new ::org::apache::lucene::spatial3d::geom::LinearSquaredDistance(env->getStaticObjectField(cls, "LINEAR_SQUARED", "Lorg/apache/lucene/spatial3d/geom/LinearSquaredDistance;"));
              NORMAL = new ::org::apache::lucene::spatial3d::geom::NormalDistance(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/spatial3d/geom/NormalDistance;"));
              NORMAL_SQUARED = new ::org::apache::lucene::spatial3d::geom::NormalSquaredDistance(env->getStaticObjectField(cls, "NORMAL_SQUARED", "Lorg/apache/lucene/spatial3d/geom/NormalSquaredDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble DistanceStyle::aggregateDistances(jdouble a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_aggregateDistances_990b512583b70d91], a0, a1);
          }

          jdouble DistanceStyle::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble DistanceStyle::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble DistanceStyle::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble DistanceStyle::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > DistanceStyle::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble DistanceStyle::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble DistanceStyle::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble DistanceStyle::fromAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_fromAggregationForm_d089f34703408a66], a0);
          }

          jdouble DistanceStyle::toAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_toAggregationForm_d089f34703408a66], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_DistanceStyle_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistanceStyle_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistanceStyle_aggregateDistances(t_DistanceStyle *self, PyObject *args);
          static PyObject *t_DistanceStyle_computeDistance(t_DistanceStyle *self, PyObject *args);
          static PyObject *t_DistanceStyle_findDistancePoints(t_DistanceStyle *self, PyObject *args);
          static PyObject *t_DistanceStyle_findMaximumArcDistance(t_DistanceStyle *self, PyObject *args);
          static PyObject *t_DistanceStyle_findMinimumArcDistance(t_DistanceStyle *self, PyObject *args);
          static PyObject *t_DistanceStyle_fromAggregationForm(t_DistanceStyle *self, PyObject *arg);
          static PyObject *t_DistanceStyle_toAggregationForm(t_DistanceStyle *self, PyObject *arg);

          static PyMethodDef t_DistanceStyle__methods_[] = {
            DECLARE_METHOD(t_DistanceStyle, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistanceStyle, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistanceStyle, aggregateDistances, METH_VARARGS),
            DECLARE_METHOD(t_DistanceStyle, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_DistanceStyle, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_DistanceStyle, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_DistanceStyle, findMinimumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_DistanceStyle, fromAggregationForm, METH_O),
            DECLARE_METHOD(t_DistanceStyle, toAggregationForm, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DistanceStyle)[] = {
            { Py_tp_methods, t_DistanceStyle__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DistanceStyle)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DistanceStyle, t_DistanceStyle, DistanceStyle);

          void t_DistanceStyle::install(PyObject *module)
          {
            installType(&PY_TYPE(DistanceStyle), &PY_TYPE_DEF(DistanceStyle), module, "DistanceStyle", 0);
          }

          void t_DistanceStyle::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "class_", make_descriptor(DistanceStyle::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "wrapfn_", make_descriptor(t_DistanceStyle::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "boxfn_", make_descriptor(boxObject));
            env->getClass(DistanceStyle::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "ARC", make_descriptor(::org::apache::lucene::spatial3d::geom::t_ArcDistance::wrap_Object(*DistanceStyle::ARC)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "LINEAR", make_descriptor(::org::apache::lucene::spatial3d::geom::t_LinearDistance::wrap_Object(*DistanceStyle::LINEAR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "LINEAR_SQUARED", make_descriptor(::org::apache::lucene::spatial3d::geom::t_LinearSquaredDistance::wrap_Object(*DistanceStyle::LINEAR_SQUARED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "NORMAL", make_descriptor(::org::apache::lucene::spatial3d::geom::t_NormalDistance::wrap_Object(*DistanceStyle::NORMAL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceStyle), "NORMAL_SQUARED", make_descriptor(::org::apache::lucene::spatial3d::geom::t_NormalSquaredDistance::wrap_Object(*DistanceStyle::NORMAL_SQUARED)));
          }

          static PyObject *t_DistanceStyle_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistanceStyle::initializeClass, 1)))
              return NULL;
            return t_DistanceStyle::wrap_Object(DistanceStyle(((t_DistanceStyle *) arg)->object.this$));
          }
          static PyObject *t_DistanceStyle_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistanceStyle::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DistanceStyle_aggregateDistances(t_DistanceStyle *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              OBJ_CALL(result = self->object.aggregateDistances(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "aggregateDistances", args);
            return NULL;
          }

          static PyObject *t_DistanceStyle_computeDistance(t_DistanceStyle *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_DistanceStyle_findDistancePoints(t_DistanceStyle *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_DistanceStyle_findMaximumArcDistance(t_DistanceStyle *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_DistanceStyle_findMinimumArcDistance(t_DistanceStyle *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }

          static PyObject *t_DistanceStyle_fromAggregationForm(t_DistanceStyle *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.fromAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "fromAggregationForm", arg);
            return NULL;
          }

          static PyObject *t_DistanceStyle_toAggregationForm(t_DistanceStyle *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.toAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAggregationForm", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermInSetQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/PrefixCodedTerms.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermInSetQuery::class$ = NULL;
        jmethodID *TermInSetQuery::mids$ = NULL;
        bool TermInSetQuery::live$ = false;

        jclass TermInSetQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermInSetQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_890b82217556b281] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_1933a485e060f4cd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getTermData_3329e7cdc497b63a] = env->getMethodID(cls, "getTermData", "()Lorg/apache/lucene/index/PrefixCodedTerms;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermInSetQuery::TermInSetQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_890b82217556b281, a0.this$, a1.this$)) {}

        TermInSetQuery::TermInSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_1933a485e060f4cd, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight TermInSetQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean TermInSetQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::Collection TermInSetQuery::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        ::org::apache::lucene::index::PrefixCodedTerms TermInSetQuery::getTermData() const
        {
          return ::org::apache::lucene::index::PrefixCodedTerms(env->callObjectMethod(this$, mids$[mid_getTermData_3329e7cdc497b63a]));
        }

        jint TermInSetQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong TermInSetQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::search::Query TermInSetQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String TermInSetQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void TermInSetQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermInSetQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermInSetQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermInSetQuery_init_(t_TermInSetQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermInSetQuery_createWeight(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_equals(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_getChildResources(t_TermInSetQuery *self);
        static PyObject *t_TermInSetQuery_getTermData(t_TermInSetQuery *self);
        static PyObject *t_TermInSetQuery_hashCode(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_ramBytesUsed(t_TermInSetQuery *self);
        static PyObject *t_TermInSetQuery_rewrite(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_toString(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_visit(t_TermInSetQuery *self, PyObject *args);
        static PyObject *t_TermInSetQuery_get__childResources(t_TermInSetQuery *self, void *data);
        static PyObject *t_TermInSetQuery_get__termData(t_TermInSetQuery *self, void *data);
        static PyGetSetDef t_TermInSetQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermInSetQuery, childResources),
          DECLARE_GET_FIELD(t_TermInSetQuery, termData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermInSetQuery__methods_[] = {
          DECLARE_METHOD(t_TermInSetQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermInSetQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermInSetQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermInSetQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermInSetQuery, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_TermInSetQuery, getTermData, METH_NOARGS),
          DECLARE_METHOD(t_TermInSetQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermInSetQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_TermInSetQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_TermInSetQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_TermInSetQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermInSetQuery)[] = {
          { Py_tp_methods, t_TermInSetQuery__methods_ },
          { Py_tp_init, (void *) t_TermInSetQuery_init_ },
          { Py_tp_getset, t_TermInSetQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermInSetQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(TermInSetQuery, t_TermInSetQuery, TermInSetQuery);

        void t_TermInSetQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermInSetQuery), &PY_TYPE_DEF(TermInSetQuery), module, "TermInSetQuery", 0);
        }

        void t_TermInSetQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermInSetQuery), "class_", make_descriptor(TermInSetQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermInSetQuery), "wrapfn_", make_descriptor(t_TermInSetQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermInSetQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermInSetQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermInSetQuery::initializeClass, 1)))
            return NULL;
          return t_TermInSetQuery::wrap_Object(TermInSetQuery(((t_TermInSetQuery *) arg)->object.this$));
        }
        static PyObject *t_TermInSetQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermInSetQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermInSetQuery_init_(t_TermInSetQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              TermInSetQuery object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermInSetQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              TermInSetQuery object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = TermInSetQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermInSetQuery_createWeight(t_TermInSetQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermInSetQuery_equals(t_TermInSetQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermInSetQuery_getChildResources(t_TermInSetQuery *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_TermInSetQuery_getTermData(t_TermInSetQuery *self)
        {
          ::org::apache::lucene::index::PrefixCodedTerms result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermData());
          return ::org::apache::lucene::index::t_PrefixCodedTerms::wrap_Object(result);
        }

        static PyObject *t_TermInSetQuery_hashCode(t_TermInSetQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermInSetQuery_ramBytesUsed(t_TermInSetQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermInSetQuery_rewrite(t_TermInSetQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_TermInSetQuery_toString(t_TermInSetQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermInSetQuery_visit(t_TermInSetQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TermInSetQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_TermInSetQuery_get__childResources(t_TermInSetQuery *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_TermInSetQuery_get__termData(t_TermInSetQuery *self, void *data)
        {
          ::org::apache::lucene::index::PrefixCodedTerms value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermData());
          return ::org::apache::lucene::index::t_PrefixCodedTerms::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiAnalyzer::class$ = NULL;
          jmethodID *HindiAnalyzer::mids$ = NULL;
          bool HindiAnalyzer::live$ = false;
          ::java::lang::String *HindiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HindiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiAnalyzer::HindiAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet HindiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data);
          static PyGetSetDef t_HindiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HindiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HindiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiAnalyzer)[] = {
            { Py_tp_methods, t_HindiAnalyzer__methods_ },
            { Py_tp_init, (void *) t_HindiAnalyzer_init_ },
            { Py_tp_getset, t_HindiAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(HindiAnalyzer, t_HindiAnalyzer, HindiAnalyzer);

          void t_HindiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiAnalyzer), &PY_TYPE_DEF(HindiAnalyzer), module, "HindiAnalyzer", 0);
          }

          void t_HindiAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiAnalyzer), "class_", make_descriptor(HindiAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiAnalyzer), "wrapfn_", make_descriptor(t_HindiAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HindiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HindiAnalyzer::wrap_Object(HindiAnalyzer(((t_HindiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                HindiAnalyzer object((jobject) NULL);

                INT_CALL(object = HindiAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hi::HindiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergePolicy::class$ = NULL;
        jmethodID *NoMergePolicy::mids$ = NULL;
        bool NoMergePolicy::live$ = false;
        ::org::apache::lucene::index::MergePolicy *NoMergePolicy::INSTANCE = NULL;

        jclass NoMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findFullFlushMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_8c74b787998ce4bc] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_keepFullyDeletedSegment_df61ce79f6884854] = env->getMethodID(cls, "keepFullyDeletedSegment", "(Lorg/apache/lucene/util/IOSupplier;)Z");
            mids$[mid_numDeletesToMerge_38410daa12d7ee1e] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/util/IOSupplier;)I");
            mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_3c435f10a3b1e038] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_f4dd668fee1c81b8] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");
            mids$[mid_size_ad7dad42a292eb83] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergePolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergePolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findFullFlushMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        jdouble NoMergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc]);
        }

        jdouble NoMergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_8c74b787998ce4bc]);
        }

        jboolean NoMergePolicy::keepFullyDeletedSegment(const ::org::apache::lucene::util::IOSupplier & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_keepFullyDeletedSegment_df61ce79f6884854], a0.this$);
        }

        jint NoMergePolicy::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::util::IOSupplier & a2) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_38410daa12d7ee1e], a0.this$, a1, a2.this$);
        }

        void NoMergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038], a0);
        }

        void NoMergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_3c435f10a3b1e038], a0);
        }

        ::java::lang::String NoMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jboolean NoMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_f4dd668fee1c81b8], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findFullFlushMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_getMaxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_getNoCFSRatio(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_keepFullyDeletedSegment(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_numDeletesToMerge(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_setMaxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_setNoCFSRatio(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_get__maxCFSSegmentSizeMB(t_NoMergePolicy *self, void *data);
        static int t_NoMergePolicy_set__maxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_NoMergePolicy_get__noCFSRatio(t_NoMergePolicy *self, void *data);
        static int t_NoMergePolicy_set__noCFSRatio(t_NoMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_NoMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_NoMergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_NoMergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NoMergePolicy__methods_[] = {
          DECLARE_METHOD(t_NoMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findFullFlushMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, getMaxCFSSegmentSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, getNoCFSRatio, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, keepFullyDeletedSegment, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, numDeletesToMerge, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, setMaxCFSSegmentSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, setNoCFSRatio, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NoMergePolicy)[] = {
          { Py_tp_methods, t_NoMergePolicy__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_NoMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NoMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergePolicy),
          NULL
        };

        DEFINE_TYPE(NoMergePolicy, t_NoMergePolicy, NoMergePolicy);

        void t_NoMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergePolicy), &PY_TYPE_DEF(NoMergePolicy), module, "NoMergePolicy", 0);
        }

        void t_NoMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergePolicy), "class_", make_descriptor(NoMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergePolicy), "wrapfn_", make_descriptor(t_NoMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergePolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergePolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergePolicy), "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergePolicy::wrap_Object(*NoMergePolicy::INSTANCE)));
        }

        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergePolicy::initializeClass, 1)))
            return NULL;
          return t_NoMergePolicy::wrap_Object(NoMergePolicy(((t_NoMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findFullFlushMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findFullFlushMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "findFullFlushMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_getMaxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "getMaxCFSSegmentSizeMB", args, 2);
        }

        static PyObject *t_NoMergePolicy_getNoCFSRatio(t_NoMergePolicy *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getNoCFSRatio());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "getNoCFSRatio", args, 2);
        }

        static PyObject *t_NoMergePolicy_keepFullyDeletedSegment(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::util::IOSupplier a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArgs(args, "K", ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.keepFullyDeletedSegment(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "keepFullyDeletedSegment", args, 2);
        }

        static PyObject *t_NoMergePolicy_numDeletesToMerge(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::IOSupplier a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "kIK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "numDeletesToMerge", args, 2);
        }

        static PyObject *t_NoMergePolicy_setMaxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "setMaxCFSSegmentSizeMB", args, 2);
        }

        static PyObject *t_NoMergePolicy_setNoCFSRatio(t_NoMergePolicy *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "setNoCFSRatio", args, 2);
        }

        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NoMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }

        static PyObject *t_NoMergePolicy_get__maxCFSSegmentSizeMB(t_NoMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_NoMergePolicy_set__maxCFSSegmentSizeMB(t_NoMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_NoMergePolicy_get__noCFSRatio(t_NoMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_NoMergePolicy_set__noCFSRatio(t_NoMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyMergeUtils.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyMergeUtils::class$ = NULL;
          jmethodID *TaxonomyMergeUtils::mids$ = NULL;
          bool TaxonomyMergeUtils::live$ = false;

          jclass TaxonomyMergeUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyMergeUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_merge_dd6512d2f5e2d588] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;Lorg/apache/lucene/facet/FacetsConfig;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TaxonomyMergeUtils::merge(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a2, const ::org::apache::lucene::index::IndexWriter & a3, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a4, const ::org::apache::lucene::facet::FacetsConfig & a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_merge_dd6512d2f5e2d588], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyMergeUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyMergeUtils_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyMergeUtils_merge(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TaxonomyMergeUtils__methods_[] = {
            DECLARE_METHOD(t_TaxonomyMergeUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyMergeUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyMergeUtils, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyMergeUtils)[] = {
            { Py_tp_methods, t_TaxonomyMergeUtils__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyMergeUtils)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TaxonomyMergeUtils, t_TaxonomyMergeUtils, TaxonomyMergeUtils);

          void t_TaxonomyMergeUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyMergeUtils), &PY_TYPE_DEF(TaxonomyMergeUtils), module, "TaxonomyMergeUtils", 0);
          }

          void t_TaxonomyMergeUtils::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyMergeUtils), "class_", make_descriptor(TaxonomyMergeUtils::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyMergeUtils), "wrapfn_", make_descriptor(t_TaxonomyMergeUtils::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyMergeUtils), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyMergeUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyMergeUtils::initializeClass, 1)))
              return NULL;
            return t_TaxonomyMergeUtils::wrap_Object(TaxonomyMergeUtils(((t_TaxonomyMergeUtils *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyMergeUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyMergeUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyMergeUtils_merge(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a2((jobject) NULL);
            ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a4((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a5((jobject) NULL);

            if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::TaxonomyMergeUtils::merge(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *UnicodeUtil::class$ = NULL;
        jmethodID *UnicodeUtil::mids$ = NULL;
        bool UnicodeUtil::live$ = false;
        ::org::apache::lucene::util::BytesRef *UnicodeUtil::BIG_TERM = NULL;
        jint UnicodeUtil::MAX_UTF8_BYTES_PER_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_REPLACEMENT_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_START = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_START = (jint) 0;

        jclass UnicodeUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/UnicodeUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_UTF16toUTF8_1638168431659046] = env->getStaticMethodID(cls, "UTF16toUTF8", "([CII[B)I");
            mids$[mid_UTF16toUTF8_ddd0ce25b5f0be2b] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;II[B)I");
            mids$[mid_UTF16toUTF8_e043a825e5ebeff1] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;II[BI)I");
            mids$[mid_UTF8toUTF16_0591bd57795e9b7c] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;[C)I");
            mids$[mid_UTF8toUTF16_7b948ae2b0818c23] = env->getStaticMethodID(cls, "UTF8toUTF16", "([BII[C)I");
            mids$[mid_UTF8toUTF32_dda6a6ca610a4dae] = env->getStaticMethodID(cls, "UTF8toUTF32", "(Lorg/apache/lucene/util/BytesRef;[I)I");
            mids$[mid_calcUTF16toUTF8Length_a0b845cd7e1b893f] = env->getStaticMethodID(cls, "calcUTF16toUTF8Length", "(Ljava/lang/CharSequence;II)I");
            mids$[mid_codePointCount_1c2e5fa34f4312de] = env->getStaticMethodID(cls, "codePointCount", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_maxUTF8Length_1e143afe1894d213] = env->getStaticMethodID(cls, "maxUTF8Length", "(I)I");
            mids$[mid_newString_843d19f003d86021] = env->getStaticMethodID(cls, "newString", "([III)Ljava/lang/String;");
            mids$[mid_toHexString_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "toHexString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_validUTF16String_2cd6b83cb18fe093] = env->getStaticMethodID(cls, "validUTF16String", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_validUTF16String_be9d4dcc5fee5f34] = env->getStaticMethodID(cls, "validUTF16String", "([CI)Z");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BIG_TERM = new ::org::apache::lucene::util::BytesRef(env->getStaticObjectField(cls, "BIG_TERM", "Lorg/apache/lucene/util/BytesRef;"));
            MAX_UTF8_BYTES_PER_CHAR = env->getStaticIntField(cls, "MAX_UTF8_BYTES_PER_CHAR");
            UNI_REPLACEMENT_CHAR = env->getStaticIntField(cls, "UNI_REPLACEMENT_CHAR");
            UNI_SUR_HIGH_END = env->getStaticIntField(cls, "UNI_SUR_HIGH_END");
            UNI_SUR_HIGH_START = env->getStaticIntField(cls, "UNI_SUR_HIGH_START");
            UNI_SUR_LOW_END = env->getStaticIntField(cls, "UNI_SUR_LOW_END");
            UNI_SUR_LOW_START = env->getStaticIntField(cls, "UNI_SUR_LOW_START");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint UnicodeUtil::UTF16toUTF8(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF16toUTF8_1638168431659046], a0.this$, a1, a2, a3.this$);
        }

        jint UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const JArray< jbyte > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF16toUTF8_ddd0ce25b5f0be2b], a0.this$, a1, a2, a3.this$);
        }

        jint UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF16toUTF8_e043a825e5ebeff1], a0.this$, a1, a2, a3.this$, a4);
        }

        jint UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const JArray< jchar > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF16_0591bd57795e9b7c], a0.this$, a1.this$);
        }

        jint UnicodeUtil::UTF8toUTF16(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF16_7b948ae2b0818c23], a0.this$, a1, a2, a3.this$);
        }

        jint UnicodeUtil::UTF8toUTF32(const ::org::apache::lucene::util::BytesRef & a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_UTF8toUTF32_dda6a6ca610a4dae], a0.this$, a1.this$);
        }

        jint UnicodeUtil::calcUTF16toUTF8Length(const ::java::lang::CharSequence & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_calcUTF16toUTF8Length_a0b845cd7e1b893f], a0.this$, a1, a2);
        }

        jint UnicodeUtil::codePointCount(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_codePointCount_1c2e5fa34f4312de], a0.this$);
        }

        jint UnicodeUtil::maxUTF8Length(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_maxUTF8Length_1e143afe1894d213], a0);
        }

        ::java::lang::String UnicodeUtil::newString(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_newString_843d19f003d86021], a0.this$, a1, a2));
        }

        ::java::lang::String UnicodeUtil::toHexString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_9bfa75c9f141b67f], a0.this$));
        }

        jboolean UnicodeUtil::validUTF16String(const ::java::lang::CharSequence & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_2cd6b83cb18fe093], a0.this$);
        }

        jboolean UnicodeUtil::validUTF16String(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_be9d4dcc5fee5f34], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_calcUTF16toUTF8Length(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_maxUTF8Length(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_UnicodeUtil__methods_[] = {
          DECLARE_METHOD(t_UnicodeUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF16toUTF8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, calcUTF16toUTF8Length, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, codePointCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, maxUTF8Length, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, newString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, toHexString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, validUTF16String, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(UnicodeUtil)[] = {
          { Py_tp_methods, t_UnicodeUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(UnicodeUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(UnicodeUtil, t_UnicodeUtil, UnicodeUtil);

        void t_UnicodeUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(UnicodeUtil), &PY_TYPE_DEF(UnicodeUtil), module, "UnicodeUtil", 0);
        }

        void t_UnicodeUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "class_", make_descriptor(UnicodeUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "wrapfn_", make_descriptor(t_UnicodeUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "boxfn_", make_descriptor(boxObject));
          env->getClass(UnicodeUtil::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "BIG_TERM", make_descriptor(::org::apache::lucene::util::t_BytesRef::wrap_Object(*UnicodeUtil::BIG_TERM)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "MAX_UTF8_BYTES_PER_CHAR", make_descriptor(UnicodeUtil::MAX_UTF8_BYTES_PER_CHAR));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "UNI_REPLACEMENT_CHAR", make_descriptor(UnicodeUtil::UNI_REPLACEMENT_CHAR));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "UNI_SUR_HIGH_END", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_END));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "UNI_SUR_HIGH_START", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_START));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "UNI_SUR_LOW_END", make_descriptor(UnicodeUtil::UNI_SUR_LOW_END));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeUtil), "UNI_SUR_LOW_START", make_descriptor(UnicodeUtil::UNI_SUR_LOW_START));
        }

        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UnicodeUtil::initializeClass, 1)))
            return NULL;
          return t_UnicodeUtil::wrap_Object(UnicodeUtil(((t_UnicodeUtil *) arg)->object.this$));
        }
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UnicodeUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[CII[B", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "OII[B", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
            break;
           case 5:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint a4;
              jint result;

              if (!parseArgs(args, "OII[BI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3, a4));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "UTF16toUTF8", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k[C", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                return PyLong_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > a3((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[BII[C", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "UTF8toUTF16", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k[I", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::UTF8toUTF32(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "UTF8toUTF32", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_calcUTF16toUTF8Length(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::calcUTF16toUTF8Length(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "calcUTF16toUTF8Length", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::codePointCount(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "codePointCount", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_maxUTF8Length(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::maxUTF8Length(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "maxUTF8Length", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::newString(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "newString", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::toHexString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toHexString", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "validUTF16String", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoringRewrite::class$ = NULL;
        jmethodID *ScoringRewrite::mids$ = NULL;
        bool ScoringRewrite::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *ScoringRewrite::CONSTANT_SCORE_BOOLEAN_REWRITE = NULL;
        ScoringRewrite *ScoringRewrite::SCORING_BOOLEAN_REWRITE = NULL;

        jclass ScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_9b63ebac49a26b30] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_checkMaxClauseCount_040c4cd0390c5aff] = env->getMethodID(cls, "checkMaxClauseCount", "(I)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_REWRITE = new ScoringRewrite(env->getStaticObjectField(cls, "SCORING_BOOLEAN_REWRITE", "Lorg/apache/lucene/search/ScoringRewrite;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoringRewrite::ScoringRewrite() : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::Query ScoringRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_9b63ebac49a26b30], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args);
        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args);
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data);
        static PyGetSetDef t_ScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_ScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_ScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoringRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoringRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ScoringRewrite)[] = {
          { Py_tp_methods, t_ScoringRewrite__methods_ },
          { Py_tp_init, (void *) t_ScoringRewrite_init_ },
          { Py_tp_getset, t_ScoringRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ScoringRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TermCollectingRewrite),
          NULL
        };

        DEFINE_TYPE(ScoringRewrite, t_ScoringRewrite, ScoringRewrite);
        PyObject *t_ScoringRewrite::wrap_Object(const ScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoringRewrite *self = (t_ScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoringRewrite), &PY_TYPE_DEF(ScoringRewrite), module, "ScoringRewrite", 0);
        }

        void t_ScoringRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoringRewrite), "class_", make_descriptor(ScoringRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoringRewrite), "wrapfn_", make_descriptor(t_ScoringRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoringRewrite), "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoringRewrite::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoringRewrite), "CONSTANT_SCORE_BOOLEAN_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*ScoringRewrite::CONSTANT_SCORE_BOOLEAN_REWRITE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoringRewrite), "SCORING_BOOLEAN_REWRITE", make_descriptor(t_ScoringRewrite::wrap_Object(*ScoringRewrite::SCORING_BOOLEAN_REWRITE)));
        }

        static PyObject *t_ScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_ScoringRewrite::wrap_Object(ScoringRewrite(((t_ScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_ScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoringRewrite_of_(t_ScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ScoringRewrite_init_(t_ScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          ScoringRewrite object((jobject) NULL);

          INT_CALL(object = ScoringRewrite());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScoringRewrite_rewrite(t_ScoringRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ScoringRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_ScoringRewrite_get__parameters_(t_ScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TextFragment::class$ = NULL;
          jmethodID *TextFragment::mids$ = NULL;
          bool TextFragment::live$ = false;

          jclass TextFragment::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TextFragment");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1a9fff4dae4e12f0] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
              mids$[mid_follows_e9b4754521c60f4b] = env->getMethodID(cls, "follows", "(Lorg/apache/lucene/search/highlight/TextFragment;)Z");
              mids$[mid_getFragNum_9972fcc56b44e79d] = env->getMethodID(cls, "getFragNum", "()I");
              mids$[mid_getScore_58aec2b64dff50c8] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_merge_786a99056c1d5c74] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TextFragment::TextFragment(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a9fff4dae4e12f0, a0.this$, a1, a2)) {}

          jboolean TextFragment::follows(const TextFragment & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_follows_e9b4754521c60f4b], a0.this$);
          }

          jint TextFragment::getFragNum() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragNum_9972fcc56b44e79d]);
          }

          jfloat TextFragment::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_58aec2b64dff50c8]);
          }

          void TextFragment::merge(const TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_786a99056c1d5c74], a0.this$);
          }

          ::java::lang::String TextFragment::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self);
          static PyObject *t_TextFragment_getScore(t_TextFragment *self);
          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args);
          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data);
          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data);
          static PyGetSetDef t_TextFragment__fields_[] = {
            DECLARE_GET_FIELD(t_TextFragment, fragNum),
            DECLARE_GET_FIELD(t_TextFragment, score),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TextFragment__methods_[] = {
            DECLARE_METHOD(t_TextFragment, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, follows, METH_O),
            DECLARE_METHOD(t_TextFragment, getFragNum, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, getScore, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, merge, METH_O),
            DECLARE_METHOD(t_TextFragment, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TextFragment)[] = {
            { Py_tp_methods, t_TextFragment__methods_ },
            { Py_tp_init, (void *) t_TextFragment_init_ },
            { Py_tp_getset, t_TextFragment__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TextFragment)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TextFragment, t_TextFragment, TextFragment);

          void t_TextFragment::install(PyObject *module)
          {
            installType(&PY_TYPE(TextFragment), &PY_TYPE_DEF(TextFragment), module, "TextFragment", 0);
          }

          void t_TextFragment::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TextFragment), "class_", make_descriptor(TextFragment::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TextFragment), "wrapfn_", make_descriptor(t_TextFragment::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TextFragment), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TextFragment::initializeClass, 1)))
              return NULL;
            return t_TextFragment::wrap_Object(TextFragment(((t_TextFragment *) arg)->object.this$));
          }
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TextFragment::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            TextFragment object((jobject) NULL);

            if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
            {
              INT_CALL(object = TextFragment(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.follows(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "follows", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragNum());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TextFragment_getScore(t_TextFragment *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "merge", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(TextFragment), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragNum());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/PointsConfig.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *StandardQueryParser::class$ = NULL;
            jmethodID *StandardQueryParser::mids$ = NULL;
            bool StandardQueryParser::live$ = false;

            jclass StandardQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/StandardQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getDateResolution_1778a3bc39ff9c3b] = env->getMethodID(cls, "getDateResolution", "()Lorg/apache/lucene/document/DateTools$Resolution;");
                mids$[mid_getDateResolutionMap_1c3426541413a55d] = env->getMethodID(cls, "getDateResolutionMap", "()Ljava/util/Map;");
                mids$[mid_getDefaultOperator_77b325ea7d4ff3dd] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFieldsBoost_1c3426541413a55d] = env->getMethodID(cls, "getFieldsBoost", "()Ljava/util/Map;");
                mids$[mid_getFuzzyMinSim_58aec2b64dff50c8] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_bd9770023d5e622d] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getMultiFields_b3d47ed6e78728f2] = env->getMethodID(cls, "getMultiFields", "()[Ljava/lang/CharSequence;");
                mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getPointsConfigMap_1c3426541413a55d] = env->getMethodID(cls, "getPointsConfigMap", "()Ljava/util/Map;");
                mids$[mid_getTimeZone_a00e8b2cc21b09d1] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_parse_e08cfaa30c1cfbe9] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setAnalyzer_651b708fb3f85e6e] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_setDateResolution_51afa6f891f6b9d8] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setDateResolutionMap_408bd889ee3beae5] = env->getMethodID(cls, "setDateResolutionMap", "(Ljava/util/Map;)V");
                mids$[mid_setDefaultOperator_0013096f92c97e2f] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;)V");
                mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFieldsBoost_408bd889ee3beae5] = env->getMethodID(cls, "setFieldsBoost", "(Ljava/util/Map;)V");
                mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_8b005052a37adc8a] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setMultiFields_a9238846954db8e0] = env->getMethodID(cls, "setMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_040c4cd0390c5aff] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setPointsConfigMap_408bd889ee3beae5] = env->getMethodID(cls, "setPointsConfigMap", "(Ljava/util/Map;)V");
                mids$[mid_setTimeZone_62cba443b119095c] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardQueryParser::StandardQueryParser() : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            StandardQueryParser::StandardQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

            jboolean StandardQueryParser::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e]);
            }

            ::org::apache::lucene::analysis::Analyzer StandardQueryParser::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
            }

            ::org::apache::lucene::document::DateTools$Resolution StandardQueryParser::getDateResolution() const
            {
              return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_1778a3bc39ff9c3b]));
            }

            ::java::util::Map StandardQueryParser::getDateResolutionMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDateResolutionMap_1c3426541413a55d]));
            }

            ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator StandardQueryParser::getDefaultOperator() const
            {
              return ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_77b325ea7d4ff3dd]));
            }

            jboolean StandardQueryParser::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e]);
            }

            ::java::util::Map StandardQueryParser::getFieldsBoost() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getFieldsBoost_1c3426541413a55d]));
            }

            jfloat StandardQueryParser::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_58aec2b64dff50c8]);
            }

            jint StandardQueryParser::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d]);
            }

            ::java::util::Locale StandardQueryParser::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_bd9770023d5e622d]));
            }

            JArray< ::java::lang::CharSequence > StandardQueryParser::getMultiFields() const
            {
              return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getMultiFields_b3d47ed6e78728f2]));
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod StandardQueryParser::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7]));
            }

            jint StandardQueryParser::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_9972fcc56b44e79d]);
            }

            ::java::util::Map StandardQueryParser::getPointsConfigMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPointsConfigMap_1c3426541413a55d]));
            }

            ::java::util::TimeZone StandardQueryParser::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_a00e8b2cc21b09d1]));
            }

            ::org::apache::lucene::search::Query StandardQueryParser::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_e08cfaa30c1cfbe9], a0.this$, a1.this$));
            }

            void StandardQueryParser::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7], a0);
            }

            void StandardQueryParser::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAnalyzer_651b708fb3f85e6e], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_51afa6f891f6b9d8], a0.this$);
            }

            void StandardQueryParser::setDateResolutionMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolutionMap_408bd889ee3beae5], a0.this$);
            }

            void StandardQueryParser::setDefaultOperator(const ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultOperator_0013096f92c97e2f], a0.this$);
            }

            void StandardQueryParser::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7], a0);
            }

            void StandardQueryParser::setFieldsBoost(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFieldsBoost_408bd889ee3beae5], a0.this$);
            }

            void StandardQueryParser::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a], a0);
            }

            void StandardQueryParser::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff], a0);
            }

            void StandardQueryParser::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_8b005052a37adc8a], a0.this$);
            }

            void StandardQueryParser::setMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiFields_a9238846954db8e0], a0.this$);
            }

            void StandardQueryParser::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220], a0.this$);
            }

            void StandardQueryParser::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_040c4cd0390c5aff], a0);
            }

            void StandardQueryParser::setPointsConfigMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPointsConfigMap_408bd889ee3beae5], a0.this$);
            }

            void StandardQueryParser::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_62cba443b119095c], a0.this$);
            }

            ::java::lang::String StandardQueryParser::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPointsConfigMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPointsConfigMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiFields(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__pointsConfigMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__pointsConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_StandardQueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_StandardQueryParser, allowLeadingWildcard),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, analyzer),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolution),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolutionMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, defaultOperator),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fieldsBoost),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, locale),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiFields),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, phraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, pointsConfigMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardQueryParser__methods_[] = {
              DECLARE_METHOD(t_StandardQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolution, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolutionMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDefaultOperator, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFieldsBoost, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiFields, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPointsConfigMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setAnalyzer, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolution, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolutionMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultOperator, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFieldsBoost, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLocale, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPointsConfigMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setTimeZone, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(StandardQueryParser)[] = {
              { Py_tp_methods, t_StandardQueryParser__methods_ },
              { Py_tp_init, (void *) t_StandardQueryParser_init_ },
              { Py_tp_getset, t_StandardQueryParser__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(StandardQueryParser)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::QueryParserHelper),
              NULL
            };

            DEFINE_TYPE(StandardQueryParser, t_StandardQueryParser, StandardQueryParser);

            void t_StandardQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardQueryParser), &PY_TYPE_DEF(StandardQueryParser), module, "StandardQueryParser", 0);
            }

            void t_StandardQueryParser::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryParser), "class_", make_descriptor(StandardQueryParser::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryParser), "wrapfn_", make_descriptor(t_StandardQueryParser::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryParser), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardQueryParser::initializeClass, 1)))
                return NULL;
              return t_StandardQueryParser::wrap_Object(StandardQueryParser(((t_StandardQueryParser *) arg)->object.this$));
            }
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  StandardQueryParser object((jobject) NULL);

                  INT_CALL(object = StandardQueryParser());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  StandardQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = StandardQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::document::PY_TYPE(DateTools$Resolution));
            }

            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator result((jobject) NULL);
              OBJ_CALL(result = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Float));
            }

            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self)
            {
              JArray< ::java::lang::CharSequence > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiFields());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
            }

            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getPointsConfigMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getPointsConfigMap());
              return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::queryparser::flexible::standard::config::PY_TYPE(PointsConfig));
            }

            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(StandardQueryParser), (PyObject *) self, "parse", args, 2);
            }

            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setAnalyzer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setDateResolutionMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolutionMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::parameters_))
              {
                OBJ_CALL(self->object.setDefaultOperator(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setFieldsBoost(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFieldsBoost", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPointsConfigMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setPointsConfigMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPointsConfigMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(StandardQueryParser), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
                {
                  INT_CALL(self->object.setAnalyzer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolutionMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolutionMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
              OBJ_CALL(value = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &value))
                {
                  INT_CALL(self->object.setDefaultOperator(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setFieldsBoost(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fieldsBoost", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyLong_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiFields(t_StandardQueryParser *self, void *data)
            {
              JArray< ::java::lang::CharSequence > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiFields());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
            }
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                JArray< ::java::lang::CharSequence > value((jobject) NULL);
                if (!parseArg(arg, "[O", ::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setMultiFields(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiFields", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyLong_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__pointsConfigMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getPointsConfigMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__pointsConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setPointsConfigMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "pointsConfigMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldDocValuesFormat::class$ = NULL;
          jmethodID *PerFieldDocValuesFormat::mids$ = NULL;
          bool PerFieldDocValuesFormat::live$ = false;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_4d0d89459a33e411] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_4fca71c324f605dc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
              mids$[mid_getDocValuesFormatForField_6b92af620136a934] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldDocValuesFormat::PerFieldDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer PerFieldDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_4d0d89459a33e411], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer PerFieldDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_4fca71c324f605dc], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesFormat PerFieldDocValuesFormat::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_6b92af620136a934], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, getDocValuesFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PerFieldDocValuesFormat)[] = {
            { Py_tp_methods, t_PerFieldDocValuesFormat__methods_ },
            { Py_tp_init, (void *) t_PerFieldDocValuesFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PerFieldDocValuesFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::DocValuesFormat),
            NULL
          };

          DEFINE_TYPE(PerFieldDocValuesFormat, t_PerFieldDocValuesFormat, PerFieldDocValuesFormat);

          void t_PerFieldDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldDocValuesFormat), &PY_TYPE_DEF(PerFieldDocValuesFormat), module, "PerFieldDocValuesFormat", 0);
          }

          void t_PerFieldDocValuesFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "class_", make_descriptor(PerFieldDocValuesFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "wrapfn_", make_descriptor(t_PerFieldDocValuesFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldDocValuesFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldDocValuesFormat), "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldDocValuesFormat::wrap_Object(PerFieldDocValuesFormat(((t_PerFieldDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldDocValuesFormat object((jobject) NULL);

            INT_CALL(object = PerFieldDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *TopSuggestDocsCollector::class$ = NULL;
            jmethodID *TopSuggestDocsCollector::mids$ = NULL;
            bool TopSuggestDocsCollector::live$ = false;

            jclass TopSuggestDocsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/TopSuggestDocsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b8f283cdbda5c964] = env->getMethodID(cls, "<init>", "(IZ)V");
                mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_collect_4e826ed75ee3fa30] = env->getMethodID(cls, "collect", "(ILjava/lang/CharSequence;Ljava/lang/CharSequence;F)V");
                mids$[mid_get_408d6ab1be516d38] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/search/suggest/document/TopSuggestDocs;");
                mids$[mid_getCountToCollect_9972fcc56b44e79d] = env->getMethodID(cls, "getCountToCollect", "()I");
                mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
                mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
                mids$[mid_doSkipDuplicates_8454bd5aa23fd11e] = env->getMethodID(cls, "doSkipDuplicates", "()Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TopSuggestDocsCollector::TopSuggestDocsCollector(jint a0, jboolean a1) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_b8f283cdbda5c964, a0, a1)) {}

            void TopSuggestDocsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
            }

            void TopSuggestDocsCollector::collect(jint a0, const ::java::lang::CharSequence & a1, const ::java::lang::CharSequence & a2, jfloat a3) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_4e826ed75ee3fa30], a0, a1.this$, a2.this$, a3);
            }

            ::org::apache::lucene::search::suggest::document::TopSuggestDocs TopSuggestDocsCollector::get() const
            {
              return ::org::apache::lucene::search::suggest::document::TopSuggestDocs(env->callObjectMethod(this$, mids$[mid_get_408d6ab1be516d38]));
            }

            jint TopSuggestDocsCollector::getCountToCollect() const
            {
              return env->callIntMethod(this$, mids$[mid_getCountToCollect_9972fcc56b44e79d]);
            }

            ::org::apache::lucene::search::ScoreMode TopSuggestDocsCollector::scoreMode() const
            {
              return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_TopSuggestDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TopSuggestDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TopSuggestDocsCollector_init_(t_TopSuggestDocsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TopSuggestDocsCollector_collect(t_TopSuggestDocsCollector *self, PyObject *args);
            static PyObject *t_TopSuggestDocsCollector_get(t_TopSuggestDocsCollector *self);
            static PyObject *t_TopSuggestDocsCollector_getCountToCollect(t_TopSuggestDocsCollector *self);
            static PyObject *t_TopSuggestDocsCollector_scoreMode(t_TopSuggestDocsCollector *self, PyObject *args);
            static PyObject *t_TopSuggestDocsCollector_get__countToCollect(t_TopSuggestDocsCollector *self, void *data);
            static PyGetSetDef t_TopSuggestDocsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TopSuggestDocsCollector, countToCollect),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TopSuggestDocsCollector__methods_[] = {
              DECLARE_METHOD(t_TopSuggestDocsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TopSuggestDocsCollector, get, METH_NOARGS),
              DECLARE_METHOD(t_TopSuggestDocsCollector, getCountToCollect, METH_NOARGS),
              DECLARE_METHOD(t_TopSuggestDocsCollector, scoreMode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TopSuggestDocsCollector)[] = {
              { Py_tp_methods, t_TopSuggestDocsCollector__methods_ },
              { Py_tp_init, (void *) t_TopSuggestDocsCollector_init_ },
              { Py_tp_getset, t_TopSuggestDocsCollector__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TopSuggestDocsCollector)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
              NULL
            };

            DEFINE_TYPE(TopSuggestDocsCollector, t_TopSuggestDocsCollector, TopSuggestDocsCollector);

            void t_TopSuggestDocsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TopSuggestDocsCollector), &PY_TYPE_DEF(TopSuggestDocsCollector), module, "TopSuggestDocsCollector", 0);
            }

            void t_TopSuggestDocsCollector::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocsCollector), "class_", make_descriptor(TopSuggestDocsCollector::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocsCollector), "wrapfn_", make_descriptor(t_TopSuggestDocsCollector::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocsCollector), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TopSuggestDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TopSuggestDocsCollector::initializeClass, 1)))
                return NULL;
              return t_TopSuggestDocsCollector::wrap_Object(TopSuggestDocsCollector(((t_TopSuggestDocsCollector *) arg)->object.this$));
            }
            static PyObject *t_TopSuggestDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TopSuggestDocsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TopSuggestDocsCollector_init_(t_TopSuggestDocsCollector *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jboolean a1;
              TopSuggestDocsCollector object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = TopSuggestDocsCollector(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TopSuggestDocsCollector_collect(t_TopSuggestDocsCollector *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(self->object.collect(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 4:
                {
                  jint a0;
                  ::java::lang::CharSequence a1((jobject) NULL);
                  ::java::lang::CharSequence a2((jobject) NULL);
                  jfloat a3;

                  if (!parseArgs(args, "IOOF", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(self->object.collect(a0, a1, a2, a3));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(PY_TYPE(TopSuggestDocsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TopSuggestDocsCollector_get(t_TopSuggestDocsCollector *self)
            {
              ::org::apache::lucene::search::suggest::document::TopSuggestDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.get());
              return ::org::apache::lucene::search::suggest::document::t_TopSuggestDocs::wrap_Object(result);
            }

            static PyObject *t_TopSuggestDocsCollector_getCountToCollect(t_TopSuggestDocsCollector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getCountToCollect());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_TopSuggestDocsCollector_scoreMode(t_TopSuggestDocsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.scoreMode());
                return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
              }

              return callSuper(PY_TYPE(TopSuggestDocsCollector), (PyObject *) self, "scoreMode", args, 2);
            }

            static PyObject *t_TopSuggestDocsCollector_get__countToCollect(t_TopSuggestDocsCollector *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getCountToCollect());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automata.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automata::class$ = NULL;
          jmethodID *Automata::mids$ = NULL;
          bool Automata::live$ = false;

          jclass Automata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_appendAnyChar_b67ef6b3ccd5f3c9] = env->getStaticMethodID(cls, "appendAnyChar", "(Lorg/apache/lucene/util/automaton/Automaton;I)I");
              mids$[mid_appendChar_26ae65911e32943d] = env->getStaticMethodID(cls, "appendChar", "(Lorg/apache/lucene/util/automaton/Automaton;II)I");
              mids$[mid_makeAnyBinary_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeAnyBinary", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyChar_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeAnyChar", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeAnyString_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeAnyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeBinary_dc87bd8740894cf4] = env->getStaticMethodID(cls, "makeBinary", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeBinaryInterval_5c981984f005c472] = env->getStaticMethodID(cls, "makeBinaryInterval", "(Lorg/apache/lucene/util/BytesRef;ZLorg/apache/lucene/util/BytesRef;Z)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeChar_577098ea686d0440] = env->getStaticMethodID(cls, "makeChar", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeCharRange_607f15865c262dc4] = env->getStaticMethodID(cls, "makeCharRange", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeDecimalInterval_513db806f6a2ed20] = env->getStaticMethodID(cls, "makeDecimalInterval", "(III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmpty_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeEmpty", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeEmptyString_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeEmptyString", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeNonEmptyBinary_d9f5c446a29ec187] = env->getStaticMethodID(cls, "makeNonEmptyBinary", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_4af768456c0d501c] = env->getStaticMethodID(cls, "makeString", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeString_92035af895c3280e] = env->getStaticMethodID(cls, "makeString", "([III)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_makeStringUnion_1673d25b84e453fc] = env->getStaticMethodID(cls, "makeStringUnion", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint Automata::appendAnyChar(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_appendAnyChar_b67ef6b3ccd5f3c9], a0.this$, a1);
          }

          jint Automata::appendChar(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_appendChar_26ae65911e32943d], a0.this$, a1, a2);
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeAnyBinary()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyBinary_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeAnyChar()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyChar_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeAnyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeAnyString_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeBinary(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeBinary_dc87bd8740894cf4], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeBinaryInterval(const ::org::apache::lucene::util::BytesRef & a0, jboolean a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeBinaryInterval_5c981984f005c472], a0.this$, a1, a2.this$, a3));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeChar(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeChar_577098ea686d0440], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeCharRange(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeCharRange_607f15865c262dc4], a0, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeDecimalInterval(jint a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeDecimalInterval_513db806f6a2ed20], a0, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeEmpty()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmpty_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeEmptyString()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeEmptyString_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeNonEmptyBinary()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeNonEmptyBinary_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeString(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_4af768456c0d501c], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeString(const JArray< jint > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeString_92035af895c3280e], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Automata::makeStringUnion(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_makeStringUnion_1673d25b84e453fc], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_appendAnyChar(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_appendChar(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeAnyBinary(PyTypeObject *type);
          static PyObject *t_Automata_makeAnyChar(PyTypeObject *type);
          static PyObject *t_Automata_makeAnyString(PyTypeObject *type);
          static PyObject *t_Automata_makeBinary(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_makeBinaryInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeChar(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automata_makeCharRange(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeDecimalInterval(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeEmpty(PyTypeObject *type);
          static PyObject *t_Automata_makeEmptyString(PyTypeObject *type);
          static PyObject *t_Automata_makeNonEmptyBinary(PyTypeObject *type);
          static PyObject *t_Automata_makeString(PyTypeObject *type, PyObject *args);
          static PyObject *t_Automata_makeStringUnion(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_Automata__methods_[] = {
            DECLARE_METHOD(t_Automata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, appendAnyChar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, appendChar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeAnyBinary, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeAnyChar, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeAnyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeBinary, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeBinaryInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeChar, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeCharRange, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeDecimalInterval, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeEmpty, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeEmptyString, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeNonEmptyBinary, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeString, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Automata, makeStringUnion, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Automata)[] = {
            { Py_tp_methods, t_Automata__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Automata)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Automata, t_Automata, Automata);

          void t_Automata::install(PyObject *module)
          {
            installType(&PY_TYPE(Automata), &PY_TYPE_DEF(Automata), module, "Automata", 0);
          }

          void t_Automata::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automata), "class_", make_descriptor(Automata::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automata), "wrapfn_", make_descriptor(t_Automata::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automata), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automata::initializeClass, 1)))
              return NULL;
            return t_Automata::wrap_Object(Automata(((t_Automata *) arg)->object.this$));
          }
          static PyObject *t_Automata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Automata_appendAnyChar(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::appendAnyChar(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "appendAnyChar", args);
            return NULL;
          }

          static PyObject *t_Automata_appendChar(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::appendChar(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "appendChar", args);
            return NULL;
          }

          static PyObject *t_Automata_makeAnyBinary(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeAnyBinary());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeAnyChar(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeAnyChar());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeAnyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeAnyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeBinary(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeBinary(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeBinary", arg);
            return NULL;
          }

          static PyObject *t_Automata_makeBinaryInterval(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jboolean a1;
            ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
            jboolean a3;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kZkZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeBinaryInterval(a0, a1, a2, a3));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeBinaryInterval", args);
            return NULL;
          }

          static PyObject *t_Automata_makeChar(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeChar(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeChar", arg);
            return NULL;
          }

          static PyObject *t_Automata_makeCharRange(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeCharRange(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeCharRange", args);
            return NULL;
          }

          static PyObject *t_Automata_makeDecimalInterval(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeDecimalInterval(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeDecimalInterval", args);
            return NULL;
          }

          static PyObject *t_Automata_makeEmpty(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeEmpty());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeEmptyString(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeEmptyString());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeNonEmptyBinary(PyTypeObject *type)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeNonEmptyBinary());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automata_makeString(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeString(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeString(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeString", args);
            return NULL;
          }

          static PyObject *t_Automata_makeStringUnion(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automata::makeStringUnion(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeStringUnion", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_8454bd5aa23fd11e] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_d6bcd06f3102c4d9] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_8454bd5aa23fd11e]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_d6bcd06f3102c4d9]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Enumeration)[] = {
      { Py_tp_methods, t_Enumeration__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Enumeration__fields_ },
      { Py_tp_iter, (void *) PyObject_SelfIter },
      { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >) },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Enumeration)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Enumeration, t_Enumeration, Enumeration);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), &PY_TYPE_DEF(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enumeration), "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enumeration), "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enumeration), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *DefaultSortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *DefaultSortedSetDocValuesReaderState::mids$ = NULL;
          jfieldID *DefaultSortedSetDocValuesReaderState::fids$ = NULL;
          bool DefaultSortedSetDocValuesReaderState::live$ = false;

          jclass DefaultSortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9c5103ca988341a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_456f925f19f7f45c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getDocValues_cc5882347cd85c5c] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_c1709242723c0a04] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getPrefixToOrdRange_1c3426541413a55d] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getReader_3268165ce941bf52] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_reader] = env->getFieldID(cls, "reader", "Lorg/apache/lucene/index/IndexReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_9c5103ca988341a1, a0.this$)) {}

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_456f925f19f7f45c, a0.this$, a1.this$)) {}

          ::java::util::Collection DefaultSortedSetDocValuesReaderState::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::index::SortedSetDocValues DefaultSortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_cc5882347cd85c5c]));
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange DefaultSortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_c1709242723c0a04], a0.this$));
          }

          ::java::util::Map DefaultSortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_1c3426541413a55d]));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_3268165ce941bf52]));
          }

          jint DefaultSortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }

          jlong DefaultSortedSetDocValuesReaderState::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::_get_reader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->getObjectField(this$, fids$[fid_reader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getChildResources(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_ramBytesUsed(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_toString(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__childResources(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__reader(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_DefaultSortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, childResources),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, reader),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getDocValues, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getPrefixToOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getReader, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getSize, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DefaultSortedSetDocValuesReaderState)[] = {
            { Py_tp_methods, t_DefaultSortedSetDocValuesReaderState__methods_ },
            { Py_tp_init, (void *) t_DefaultSortedSetDocValuesReaderState_init_ },
            { Py_tp_getset, t_DefaultSortedSetDocValuesReaderState__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DefaultSortedSetDocValuesReaderState)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState),
            NULL
          };

          DEFINE_TYPE(DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState, DefaultSortedSetDocValuesReaderState);

          void t_DefaultSortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSortedSetDocValuesReaderState), &PY_TYPE_DEF(DefaultSortedSetDocValuesReaderState), module, "DefaultSortedSetDocValuesReaderState", 0);
          }

          void t_DefaultSortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultSortedSetDocValuesReaderState), "class_", make_descriptor(DefaultSortedSetDocValuesReaderState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultSortedSetDocValuesReaderState), "wrapfn_", make_descriptor(t_DefaultSortedSetDocValuesReaderState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultSortedSetDocValuesReaderState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_DefaultSortedSetDocValuesReaderState::wrap_Object(DefaultSortedSetDocValuesReaderState(((t_DefaultSortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getChildResources(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocValues());
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getDocValues", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPrefixToOrdRange());
              return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getPrefixToOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSize());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getSize", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_ramBytesUsed(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_toString(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__childResources(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__reader(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanCollector::class$ = NULL;
          jmethodID *SpanCollector::mids$ = NULL;
          bool SpanCollector::live$ = false;

          jclass SpanCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_collectLeaf_a1c6efa50e122f38] = env->getMethodID(cls, "collectLeaf", "(Lorg/apache/lucene/index/PostingsEnum;ILorg/apache/lucene/index/Term;)V");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void SpanCollector::collectLeaf(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1, const ::org::apache::lucene::index::Term & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_collectLeaf_a1c6efa50e122f38], a0.this$, a1, a2.this$);
          }

          void SpanCollector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanCollector_collectLeaf(t_SpanCollector *self, PyObject *args);
          static PyObject *t_SpanCollector_reset(t_SpanCollector *self);

          static PyMethodDef t_SpanCollector__methods_[] = {
            DECLARE_METHOD(t_SpanCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanCollector, collectLeaf, METH_VARARGS),
            DECLARE_METHOD(t_SpanCollector, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanCollector)[] = {
            { Py_tp_methods, t_SpanCollector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanCollector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SpanCollector, t_SpanCollector, SpanCollector);

          void t_SpanCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanCollector), &PY_TYPE_DEF(SpanCollector), module, "SpanCollector", 0);
          }

          void t_SpanCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanCollector), "class_", make_descriptor(SpanCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanCollector), "wrapfn_", make_descriptor(t_SpanCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanCollector::initializeClass, 1)))
              return NULL;
            return t_SpanCollector::wrap_Object(SpanCollector(((t_SpanCollector *) arg)->object.this$));
          }
          static PyObject *t_SpanCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanCollector_collectLeaf(t_SpanCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::Term a2((jobject) NULL);

            if (!parseArgs(args, "kIk", ::org::apache::lucene::index::PostingsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.collectLeaf(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "collectLeaf", args);
            return NULL;
          }

          static PyObject *t_SpanCollector_reset(t_SpanCollector *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseWildcardQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseWildcardQuery::class$ = NULL;
        jmethodID *PhraseWildcardQuery::mids$ = NULL;
        bool PhraseWildcardQuery::live$ = false;

        jclass PhraseWildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseWildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_createTermsData_07b42928ada57c3a] = env->getMethodID(cls, "createTermsData", "(I)Lorg/apache/lucene/search/PhraseWildcardQuery$TermsData;");
            mids$[mid_earlyStopWeight_f9ac4832bc7a84ae] = env->getMethodID(cls, "earlyStopWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_noMatchWeight_f9ac4832bc7a84ae] = env->getMethodID(cls, "noMatchWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_collectSingleTermData_cf7ba295cc9ae199] = env->getMethodID(cls, "collectSingleTermData", "(Lorg/apache/lucene/search/PhraseWildcardQuery$SingleTerm;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/List;Lorg/apache/lucene/search/PhraseWildcardQuery$TermsData;)I");
            mids$[mid_collectMultiTermData_5b9c799ec0297093] = env->getMethodID(cls, "collectMultiTermData", "(Lorg/apache/lucene/search/PhraseWildcardQuery$MultiTerm;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/List;IILorg/apache/lucene/search/PhraseWildcardQuery$TermsData;)I");
            mids$[mid_shouldOptimizeSegments_8454bd5aa23fd11e] = env->getMethodID(cls, "shouldOptimizeSegments", "()Z");
            mids$[mid_createTermStatsMap_9e211369ca0f12dd] = env->getMethodID(cls, "createTermStatsMap", "(Lorg/apache/lucene/search/PhraseWildcardQuery$MultiTerm;)Ljava/util/Map;");
            mids$[mid_createTermsEnum_a3d96f9a8e297e2a] = env->getMethodID(cls, "createTermsEnum", "(Lorg/apache/lucene/search/PhraseWildcardQuery$MultiTerm;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_collectMultiTermDataForSegment_b0dd7fb1c20eb221] = env->getMethodID(cls, "collectMultiTermDataForSegment", "(Lorg/apache/lucene/search/PhraseWildcardQuery$MultiTerm;Lorg/apache/lucene/index/LeafReaderContext;ILorg/apache/lucene/util/mutable/MutableValueBool;Ljava/util/Map;)Ljava/util/List;");
            mids$[mid_collectMultiTermStats_a25238f346df13ad] = env->getMethodID(cls, "collectMultiTermStats", "(Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/PhraseWildcardQuery$TermsData;Lorg/apache/lucene/search/PhraseWildcardQuery$TermData;)V");
            mids$[mid_checkTermsHavePositions_4b02001141791c28] = env->getMethodID(cls, "checkTermsHavePositions", "(Lorg/apache/lucene/index/Terms;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight PhraseWildcardQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean PhraseWildcardQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String PhraseWildcardQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        jint PhraseWildcardQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query PhraseWildcardQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String PhraseWildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void PhraseWildcardQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$TermStats.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$TermBytesTermState.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseWildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery_createWeight(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_equals(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_getField(t_PhraseWildcardQuery *self);
        static PyObject *t_PhraseWildcardQuery_hashCode(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_rewrite(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_toString(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_visit(t_PhraseWildcardQuery *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery_get__field(t_PhraseWildcardQuery *self, void *data);
        static PyGetSetDef t_PhraseWildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseWildcardQuery, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseWildcardQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseWildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseWildcardQuery)[] = {
          { Py_tp_methods, t_PhraseWildcardQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PhraseWildcardQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseWildcardQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(PhraseWildcardQuery, t_PhraseWildcardQuery, PhraseWildcardQuery);

        void t_PhraseWildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseWildcardQuery), &PY_TYPE_DEF(PhraseWildcardQuery), module, "PhraseWildcardQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "TermStats", make_descriptor(&PY_TYPE_DEF(PhraseWildcardQuery$TermStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "TermBytesTermState", make_descriptor(&PY_TYPE_DEF(PhraseWildcardQuery$TermBytesTermState)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "Builder", make_descriptor(&PY_TYPE_DEF(PhraseWildcardQuery$Builder)));
        }

        void t_PhraseWildcardQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "class_", make_descriptor(PhraseWildcardQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "wrapfn_", make_descriptor(t_PhraseWildcardQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseWildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseWildcardQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseWildcardQuery::wrap_Object(PhraseWildcardQuery(((t_PhraseWildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseWildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseWildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PhraseWildcardQuery_createWeight(t_PhraseWildcardQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_equals(t_PhraseWildcardQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_getField(t_PhraseWildcardQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_PhraseWildcardQuery_hashCode(t_PhraseWildcardQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_rewrite(t_PhraseWildcardQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_toString(t_PhraseWildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_visit(t_PhraseWildcardQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_PhraseWildcardQuery_get__field(t_PhraseWildcardQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STIntersectBlockReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STIntersectBlockReader::class$ = NULL;
            jmethodID *STIntersectBlockReader::mids$ = NULL;
            bool STIntersectBlockReader::live$ = false;

            jclass STIntersectBlockReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STIntersectBlockReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_212dd48bc36edd1d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier;Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Lorg/apache/lucene/index/FieldInfos;)V");
                mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_createBlockLineSerializer_b823d7b540bbfc47] = env->getMethodID(cls, "createBlockLineSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine$Serializer;");
                mids$[mid_readTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "readTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STIntersectBlockReader::STIntersectBlockReader(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier & a2, const ::org::apache::lucene::store::IndexInput & a3, const ::org::apache::lucene::codecs::PostingsReaderBase & a4, const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a5, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a6, const ::org::apache::lucene::index::FieldInfos & a7) : ::org::apache::lucene::codecs::uniformsplit::IntersectBlockReader(env->newObject(initializeClass, &mids$, mid_init$_212dd48bc36edd1d, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$, a7.this$)) {}

            ::org::apache::lucene::util::BytesRef STIntersectBlockReader::next() const
            {
              return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STIntersectBlockReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STIntersectBlockReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STIntersectBlockReader_init_(t_STIntersectBlockReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STIntersectBlockReader_next(t_STIntersectBlockReader *self, PyObject *args);

            static PyMethodDef t_STIntersectBlockReader__methods_[] = {
              DECLARE_METHOD(t_STIntersectBlockReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STIntersectBlockReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STIntersectBlockReader, next, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STIntersectBlockReader)[] = {
              { Py_tp_methods, t_STIntersectBlockReader__methods_ },
              { Py_tp_init, (void *) t_STIntersectBlockReader_init_ },
              { Py_tp_iter, (void *) PyObject_SelfIter },
              { Py_tp_iternext, (void *) ((PyObject *(*)(t_STIntersectBlockReader *)) get_next< t_STIntersectBlockReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STIntersectBlockReader)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::IntersectBlockReader),
              NULL
            };

            DEFINE_TYPE(STIntersectBlockReader, t_STIntersectBlockReader, STIntersectBlockReader);

            void t_STIntersectBlockReader::install(PyObject *module)
            {
              installType(&PY_TYPE(STIntersectBlockReader), &PY_TYPE_DEF(STIntersectBlockReader), module, "STIntersectBlockReader", 0);
            }

            void t_STIntersectBlockReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STIntersectBlockReader), "class_", make_descriptor(STIntersectBlockReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STIntersectBlockReader), "wrapfn_", make_descriptor(t_STIntersectBlockReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STIntersectBlockReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STIntersectBlockReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STIntersectBlockReader::initializeClass, 1)))
                return NULL;
              return t_STIntersectBlockReader::wrap_Object(STIntersectBlockReader(((t_STIntersectBlockReader *) arg)->object.this$));
            }
            static PyObject *t_STIntersectBlockReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STIntersectBlockReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STIntersectBlockReader_init_(t_STIntersectBlockReader *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier a2((jobject) NULL);
              ::org::apache::lucene::store::IndexInput a3((jobject) NULL);
              ::org::apache::lucene::codecs::PostingsReaderBase a4((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a5((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a6((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a7((jobject) NULL);
              STIntersectBlockReader object((jobject) NULL);

              if (!parseArgs(args, "kkkkkkkk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = STIntersectBlockReader(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STIntersectBlockReader_next(t_STIntersectBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.next());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STIntersectBlockReader), (PyObject *) self, "next", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50CompoundReader$FileEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50CompoundReader$FileEntry::class$ = NULL;
          jmethodID *Lucene50CompoundReader$FileEntry::mids$ = NULL;
          bool Lucene50CompoundReader$FileEntry::live$ = false;

          jclass Lucene50CompoundReader$FileEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50CompoundReader$FileEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50CompoundReader$FileEntry::Lucene50CompoundReader$FileEntry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50CompoundReader$FileEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50CompoundReader$FileEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50CompoundReader$FileEntry_init_(t_Lucene50CompoundReader$FileEntry *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene50CompoundReader$FileEntry__methods_[] = {
            DECLARE_METHOD(t_Lucene50CompoundReader$FileEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50CompoundReader$FileEntry, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50CompoundReader$FileEntry)[] = {
            { Py_tp_methods, t_Lucene50CompoundReader$FileEntry__methods_ },
            { Py_tp_init, (void *) t_Lucene50CompoundReader$FileEntry_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50CompoundReader$FileEntry)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Lucene50CompoundReader$FileEntry, t_Lucene50CompoundReader$FileEntry, Lucene50CompoundReader$FileEntry);

          void t_Lucene50CompoundReader$FileEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50CompoundReader$FileEntry), &PY_TYPE_DEF(Lucene50CompoundReader$FileEntry), module, "Lucene50CompoundReader$FileEntry", 0);
          }

          void t_Lucene50CompoundReader$FileEntry::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundReader$FileEntry), "class_", make_descriptor(Lucene50CompoundReader$FileEntry::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundReader$FileEntry), "wrapfn_", make_descriptor(t_Lucene50CompoundReader$FileEntry::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundReader$FileEntry), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50CompoundReader$FileEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50CompoundReader$FileEntry::initializeClass, 1)))
              return NULL;
            return t_Lucene50CompoundReader$FileEntry::wrap_Object(Lucene50CompoundReader$FileEntry(((t_Lucene50CompoundReader$FileEntry *) arg)->object.this$));
          }
          static PyObject *t_Lucene50CompoundReader$FileEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50CompoundReader$FileEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50CompoundReader$FileEntry_init_(t_Lucene50CompoundReader$FileEntry *self, PyObject *args, PyObject *kwds)
          {
            Lucene50CompoundReader$FileEntry object((jobject) NULL);

            INT_CALL(object = Lucene50CompoundReader$FileEntry());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanTokenizerFactory::class$ = NULL;
          jmethodID *KoreanTokenizerFactory::mids$ = NULL;
          bool KoreanTokenizerFactory::live$ = false;
          ::java::lang::String *KoreanTokenizerFactory::NAME = NULL;

          jclass KoreanTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ce27de4aba28e64a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/ko/KoreanTokenizer;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanTokenizerFactory::KoreanTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::ko::KoreanTokenizer KoreanTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::ko::KoreanTokenizer(env->callObjectMethod(this$, mids$[mid_create_ce27de4aba28e64a], a0.this$));
          }

          void KoreanTokenizerFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanTokenizerFactory_init_(t_KoreanTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanTokenizerFactory_create(t_KoreanTokenizerFactory *self, PyObject *args);
          static PyObject *t_KoreanTokenizerFactory_inform(t_KoreanTokenizerFactory *self, PyObject *arg);

          static PyMethodDef t_KoreanTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KoreanTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizerFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanTokenizerFactory)[] = {
            { Py_tp_methods, t_KoreanTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_KoreanTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(KoreanTokenizerFactory, t_KoreanTokenizerFactory, KoreanTokenizerFactory);

          void t_KoreanTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanTokenizerFactory), &PY_TYPE_DEF(KoreanTokenizerFactory), module, "KoreanTokenizerFactory", 0);
          }

          void t_KoreanTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizerFactory), "class_", make_descriptor(KoreanTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizerFactory), "wrapfn_", make_descriptor(t_KoreanTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizerFactory), "NAME", make_descriptor(j2p(*KoreanTokenizerFactory::NAME)));
          }

          static PyObject *t_KoreanTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KoreanTokenizerFactory::wrap_Object(KoreanTokenizerFactory(((t_KoreanTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KoreanTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanTokenizerFactory_init_(t_KoreanTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KoreanTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KoreanTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanTokenizerFactory_create(t_KoreanTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::ko::KoreanTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ko::t_KoreanTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KoreanTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KoreanTokenizerFactory_inform(t_KoreanTokenizerFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilterFactory::class$ = NULL;
          jmethodID *ArabicNormalizationFilterFactory::mids$ = NULL;
          bool ArabicNormalizationFilterFactory::live$ = false;
          ::java::lang::String *ArabicNormalizationFilterFactory::NAME = NULL;

          jclass ArabicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilterFactory::ArabicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ArabicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream ArabicNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ArabicNormalizationFilterFactory_normalize(t_ArabicNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_ArabicNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ArabicNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory, ArabicNormalizationFilterFactory);

          void t_ArabicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilterFactory), &PY_TYPE_DEF(ArabicNormalizationFilterFactory), module, "ArabicNormalizationFilterFactory", 0);
          }

          void t_ArabicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilterFactory), "class_", make_descriptor(ArabicNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilterFactory), "wrapfn_", make_descriptor(t_ArabicNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilterFactory), "NAME", make_descriptor(j2p(*ArabicNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilterFactory::wrap_Object(ArabicNormalizationFilterFactory(((t_ArabicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_normalize(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$Builder.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilterFactory.h"
#include "java/util/function/Predicate.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$Builder.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {

          ::java::lang::Class *CustomAnalyzer$Builder::class$ = NULL;
          jmethodID *CustomAnalyzer$Builder::mids$ = NULL;
          bool CustomAnalyzer$Builder::live$ = false;

          jclass CustomAnalyzer$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/custom/CustomAnalyzer$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCharFilter_97bce99fec323e59] = env->getMethodID(cls, "addCharFilter", "(Ljava/lang/Class;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addCharFilter_342fceef2cc644ae] = env->getMethodID(cls, "addCharFilter", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addCharFilter_1162bfb0f725f5aa] = env->getMethodID(cls, "addCharFilter", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addCharFilter_126dc67063c5e81b] = env->getMethodID(cls, "addCharFilter", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addTokenFilter_97bce99fec323e59] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/Class;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addTokenFilter_342fceef2cc644ae] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addTokenFilter_1162bfb0f725f5aa] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_addTokenFilter_126dc67063c5e81b] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_build_0a14afaf8c9097b6] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/custom/CustomAnalyzer;");
              mids$[mid_when_0600069d9206f4b8] = env->getMethodID(cls, "when", "(Lorg/apache/lucene/analysis/miscellaneous/ConditionalTokenFilterFactory;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_when_b5659315bc690c84] = env->getMethodID(cls, "when", "(Ljava/lang/Class;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_when_e2f75fcc1afd6e92] = env->getMethodID(cls, "when", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_when_eec22e805046d7ff] = env->getMethodID(cls, "when", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_when_f0669183a51fd5f6] = env->getMethodID(cls, "when", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_whenTerm_898aa5c1d3f81f59] = env->getMethodID(cls, "whenTerm", "(Ljava/util/function/Predicate;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_withDefaultMatchVersion_a788560561eb7010] = env->getMethodID(cls, "withDefaultMatchVersion", "(Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withOffsetGap_7fcec7141d7f3e26] = env->getMethodID(cls, "withOffsetGap", "(I)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withPositionIncrementGap_7fcec7141d7f3e26] = env->getMethodID(cls, "withPositionIncrementGap", "(I)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withTokenizer_97bce99fec323e59] = env->getMethodID(cls, "withTokenizer", "(Ljava/lang/Class;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withTokenizer_342fceef2cc644ae] = env->getMethodID(cls, "withTokenizer", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withTokenizer_1162bfb0f725f5aa] = env->getMethodID(cls, "withTokenizer", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_withTokenizer_126dc67063c5e81b] = env->getMethodID(cls, "withTokenizer", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addCharFilter(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addCharFilter_97bce99fec323e59], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addCharFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addCharFilter_342fceef2cc644ae], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addCharFilter(const ::java::lang::Class & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addCharFilter_1162bfb0f725f5aa], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addCharFilter(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addCharFilter_126dc67063c5e81b], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addTokenFilter(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_97bce99fec323e59], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addTokenFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_342fceef2cc644ae], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addTokenFilter(const ::java::lang::Class & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_1162bfb0f725f5aa], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::addTokenFilter(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_126dc67063c5e81b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer CustomAnalyzer$Builder::build() const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer(env->callObjectMethod(this$, mids$[mid_build_0a14afaf8c9097b6]));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::when(const ::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilterFactory & a0) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_when_0600069d9206f4b8], a0.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::when(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_when_b5659315bc690c84], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::when(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_when_e2f75fcc1afd6e92], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::when(const ::java::lang::Class & a0, const ::java::util::Map & a1) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_when_eec22e805046d7ff], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::when(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_when_f0669183a51fd5f6], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder CustomAnalyzer$Builder::whenTerm(const ::java::util::function::Predicate & a0) const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_whenTerm_898aa5c1d3f81f59], a0.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withDefaultMatchVersion(const ::org::apache::lucene::util::Version & a0) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withDefaultMatchVersion_a788560561eb7010], a0.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withOffsetGap(jint a0) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withOffsetGap_7fcec7141d7f3e26], a0));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withPositionIncrementGap(jint a0) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withPositionIncrementGap_7fcec7141d7f3e26], a0));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withTokenizer(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withTokenizer_97bce99fec323e59], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withTokenizer(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withTokenizer_342fceef2cc644ae], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withTokenizer(const ::java::lang::Class & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withTokenizer_1162bfb0f725f5aa], a0.this$, a1.this$));
          }

          CustomAnalyzer$Builder CustomAnalyzer$Builder::withTokenizer(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_withTokenizer_126dc67063c5e81b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {
          static PyObject *t_CustomAnalyzer$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_addCharFilter(t_CustomAnalyzer$Builder *self, PyObject *args);
          static PyObject *t_CustomAnalyzer$Builder_addTokenFilter(t_CustomAnalyzer$Builder *self, PyObject *args);
          static PyObject *t_CustomAnalyzer$Builder_build(t_CustomAnalyzer$Builder *self);
          static PyObject *t_CustomAnalyzer$Builder_when(t_CustomAnalyzer$Builder *self, PyObject *args);
          static PyObject *t_CustomAnalyzer$Builder_whenTerm(t_CustomAnalyzer$Builder *self, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_withDefaultMatchVersion(t_CustomAnalyzer$Builder *self, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_withOffsetGap(t_CustomAnalyzer$Builder *self, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_withPositionIncrementGap(t_CustomAnalyzer$Builder *self, PyObject *arg);
          static PyObject *t_CustomAnalyzer$Builder_withTokenizer(t_CustomAnalyzer$Builder *self, PyObject *args);

          static PyMethodDef t_CustomAnalyzer$Builder__methods_[] = {
            DECLARE_METHOD(t_CustomAnalyzer$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, addCharFilter, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, addTokenFilter, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, when, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, whenTerm, METH_O),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, withDefaultMatchVersion, METH_O),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, withOffsetGap, METH_O),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, withPositionIncrementGap, METH_O),
            DECLARE_METHOD(t_CustomAnalyzer$Builder, withTokenizer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CustomAnalyzer$Builder)[] = {
            { Py_tp_methods, t_CustomAnalyzer$Builder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CustomAnalyzer$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CustomAnalyzer$Builder, t_CustomAnalyzer$Builder, CustomAnalyzer$Builder);

          void t_CustomAnalyzer$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(CustomAnalyzer$Builder), &PY_TYPE_DEF(CustomAnalyzer$Builder), module, "CustomAnalyzer$Builder", 0);
          }

          void t_CustomAnalyzer$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$Builder), "class_", make_descriptor(CustomAnalyzer$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$Builder), "wrapfn_", make_descriptor(t_CustomAnalyzer$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CustomAnalyzer$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CustomAnalyzer$Builder::initializeClass, 1)))
              return NULL;
            return t_CustomAnalyzer$Builder::wrap_Object(CustomAnalyzer$Builder(((t_CustomAnalyzer$Builder *) arg)->object.this$));
          }
          static PyObject *t_CustomAnalyzer$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CustomAnalyzer$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CustomAnalyzer$Builder_addCharFilter(t_CustomAnalyzer$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.addCharFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.addCharFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addCharFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addCharFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addCharFilter", args);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_addTokenFilter(t_CustomAnalyzer$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTokenFilter", args);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_build(t_CustomAnalyzer$Builder *self)
          {
            ::org::apache::lucene::analysis::custom::CustomAnalyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer::wrap_Object(result);
          }

          static PyObject *t_CustomAnalyzer$Builder_when(t_CustomAnalyzer$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilterFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilterFactory::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.when(a0));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.when(a0, a1));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.when(a0, a1));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.when(a0, a1));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.when(a0, a1));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "when", args);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_whenTerm(t_CustomAnalyzer$Builder *self, PyObject *arg)
          {
            ::java::util::function::Predicate a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::custom::CustomAnalyzer$ConditionBuilder result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::function::Predicate::initializeClass, &a0, &p0, ::java::util::function::t_Predicate::parameters_))
            {
              OBJ_CALL(result = self->object.whenTerm(a0));
              return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "whenTerm", arg);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_withDefaultMatchVersion(t_CustomAnalyzer$Builder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            CustomAnalyzer$Builder result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.withDefaultMatchVersion(a0));
              return t_CustomAnalyzer$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "withDefaultMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_withOffsetGap(t_CustomAnalyzer$Builder *self, PyObject *arg)
          {
            jint a0;
            CustomAnalyzer$Builder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.withOffsetGap(a0));
              return t_CustomAnalyzer$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "withOffsetGap", arg);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_withPositionIncrementGap(t_CustomAnalyzer$Builder *self, PyObject *arg)
          {
            jint a0;
            CustomAnalyzer$Builder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.withPositionIncrementGap(a0));
              return t_CustomAnalyzer$Builder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "withPositionIncrementGap", arg);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$Builder_withTokenizer(t_CustomAnalyzer$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.withTokenizer(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.withTokenizer(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.withTokenizer(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.withTokenizer(a0, a1));
                  return t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "withTokenizer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RadixSelector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RadixSelector::class$ = NULL;
        jmethodID *RadixSelector::mids$ = NULL;
        bool RadixSelector::live$ = false;

        jclass RadixSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RadixSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_select_db3e97653d3683f3] = env->getMethodID(cls, "select", "(III)V");
            mids$[mid_getFallbackSelector_fead393e30e0bc51] = env->getMethodID(cls, "getFallbackSelector", "(I)Lorg/apache/lucene/util/Selector;");
            mids$[mid_byteAt_57a58545eba514db] = env->getMethodID(cls, "byteAt", "(II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RadixSelector::select(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_select_db3e97653d3683f3], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RadixSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RadixSelector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RadixSelector_select(t_RadixSelector *self, PyObject *args);

        static PyMethodDef t_RadixSelector__methods_[] = {
          DECLARE_METHOD(t_RadixSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RadixSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RadixSelector, select, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RadixSelector)[] = {
          { Py_tp_methods, t_RadixSelector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RadixSelector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Selector),
          NULL
        };

        DEFINE_TYPE(RadixSelector, t_RadixSelector, RadixSelector);

        void t_RadixSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(RadixSelector), &PY_TYPE_DEF(RadixSelector), module, "RadixSelector", 0);
        }

        void t_RadixSelector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RadixSelector), "class_", make_descriptor(RadixSelector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RadixSelector), "wrapfn_", make_descriptor(t_RadixSelector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RadixSelector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RadixSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RadixSelector::initializeClass, 1)))
            return NULL;
          return t_RadixSelector::wrap_Object(RadixSelector(((t_RadixSelector *) arg)->object.this$));
        }
        static PyObject *t_RadixSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RadixSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RadixSelector_select(t_RadixSelector *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.select(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RadixSelector), (PyObject *) self, "select", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Impacts.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Impact.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Impacts::class$ = NULL;
        jmethodID *Impacts::mids$ = NULL;
        bool Impacts::live$ = false;

        jclass Impacts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Impacts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getDocIdUpTo_1e143afe1894d213] = env->getMethodID(cls, "getDocIdUpTo", "(I)I");
            mids$[mid_getImpacts_d82aee015ceb4d93] = env->getMethodID(cls, "getImpacts", "(I)Ljava/util/List;");
            mids$[mid_numLevels_9972fcc56b44e79d] = env->getMethodID(cls, "numLevels", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint Impacts::getDocIdUpTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocIdUpTo_1e143afe1894d213], a0);
        }

        ::java::util::List Impacts::getImpacts(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getImpacts_d82aee015ceb4d93], a0));
        }

        jint Impacts::numLevels() const
        {
          return env->callIntMethod(this$, mids$[mid_numLevels_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Impacts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Impacts_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Impacts_getDocIdUpTo(t_Impacts *self, PyObject *arg);
        static PyObject *t_Impacts_getImpacts(t_Impacts *self, PyObject *arg);
        static PyObject *t_Impacts_numLevels(t_Impacts *self);

        static PyMethodDef t_Impacts__methods_[] = {
          DECLARE_METHOD(t_Impacts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Impacts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Impacts, getDocIdUpTo, METH_O),
          DECLARE_METHOD(t_Impacts, getImpacts, METH_O),
          DECLARE_METHOD(t_Impacts, numLevels, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Impacts)[] = {
          { Py_tp_methods, t_Impacts__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Impacts)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Impacts, t_Impacts, Impacts);

        void t_Impacts::install(PyObject *module)
        {
          installType(&PY_TYPE(Impacts), &PY_TYPE_DEF(Impacts), module, "Impacts", 0);
        }

        void t_Impacts::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impacts), "class_", make_descriptor(Impacts::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impacts), "wrapfn_", make_descriptor(t_Impacts::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Impacts), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Impacts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Impacts::initializeClass, 1)))
            return NULL;
          return t_Impacts::wrap_Object(Impacts(((t_Impacts *) arg)->object.this$));
        }
        static PyObject *t_Impacts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Impacts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Impacts_getDocIdUpTo(t_Impacts *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getDocIdUpTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocIdUpTo", arg);
          return NULL;
        }

        static PyObject *t_Impacts_getImpacts(t_Impacts *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getImpacts(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Impact));
          }

          PyErr_SetArgsError((PyObject *) self, "getImpacts", arg);
          return NULL;
        }

        static PyObject *t_Impacts_numLevels(t_Impacts *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numLevels());
          return PyLong_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBoxFactory.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "org/apache/lucene/spatial3d/geom/LatLonBounds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBBoxFactory::class$ = NULL;
          jmethodID *GeoBBoxFactory::mids$ = NULL;
          bool GeoBBoxFactory::live$ = false;

          jclass GeoBBoxFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBBoxFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoBBox_d1190951764d3a47] = env->getStaticMethodID(cls, "makeGeoBBox", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/LatLonBounds;)Lorg/apache/lucene/spatial3d/geom/GeoBBox;");
              mids$[mid_makeGeoBBox_d1e0bbc9fe8d88b9] = env->getStaticMethodID(cls, "makeGeoBBox", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDD)Lorg/apache/lucene/spatial3d/geom/GeoBBox;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoBBox GeoBBoxFactory::makeGeoBBox(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::LatLonBounds & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoBBox(env->callStaticObjectMethod(cls, mids$[mid_makeGeoBBox_d1190951764d3a47], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoBBox GeoBBoxFactory::makeGeoBBox(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoBBox(env->callStaticObjectMethod(cls, mids$[mid_makeGeoBBox_d1e0bbc9fe8d88b9], a0.this$, a1, a2, a3, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBBoxFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBBoxFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBBoxFactory_makeGeoBBox(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoBBoxFactory__methods_[] = {
            DECLARE_METHOD(t_GeoBBoxFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBBoxFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBBoxFactory, makeGeoBBox, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBBoxFactory)[] = {
            { Py_tp_methods, t_GeoBBoxFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBBoxFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoBBoxFactory, t_GeoBBoxFactory, GeoBBoxFactory);

          void t_GeoBBoxFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBBoxFactory), &PY_TYPE_DEF(GeoBBoxFactory), module, "GeoBBoxFactory", 0);
          }

          void t_GeoBBoxFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBoxFactory), "class_", make_descriptor(GeoBBoxFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBoxFactory), "wrapfn_", make_descriptor(t_GeoBBoxFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBBoxFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBBoxFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBBoxFactory::initializeClass, 1)))
              return NULL;
            return t_GeoBBoxFactory::wrap_Object(GeoBBoxFactory(((t_GeoBBoxFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoBBoxFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBBoxFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoBBoxFactory_makeGeoBBox(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::LatLonBounds a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoBBox result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::LatLonBounds::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoBBoxFactory::makeGeoBBox(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoBBox::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                ::org::apache::lucene::spatial3d::geom::GeoBBox result((jobject) NULL);

                if (!parseArgs(args, "kDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoBBoxFactory::makeGeoBBox(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoBBox::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeGeoBBox", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *RemoveDeletedQueryNodesProcessor::class$ = NULL;
              jmethodID *RemoveDeletedQueryNodesProcessor::mids$ = NULL;
              bool RemoveDeletedQueryNodesProcessor::live$ = false;

              jclass RemoveDeletedQueryNodesProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveDeletedQueryNodesProcessor::RemoveDeletedQueryNodesProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveDeletedQueryNodesProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveDeletedQueryNodesProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RemoveDeletedQueryNodesProcessor)[] = {
                { Py_tp_methods, t_RemoveDeletedQueryNodesProcessor__methods_ },
                { Py_tp_init, (void *) t_RemoveDeletedQueryNodesProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RemoveDeletedQueryNodesProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor, RemoveDeletedQueryNodesProcessor);

              void t_RemoveDeletedQueryNodesProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveDeletedQueryNodesProcessor), &PY_TYPE_DEF(RemoveDeletedQueryNodesProcessor), module, "RemoveDeletedQueryNodesProcessor", 0);
              }

              void t_RemoveDeletedQueryNodesProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDeletedQueryNodesProcessor), "class_", make_descriptor(RemoveDeletedQueryNodesProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDeletedQueryNodesProcessor), "wrapfn_", make_descriptor(t_RemoveDeletedQueryNodesProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDeletedQueryNodesProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveDeletedQueryNodesProcessor::wrap_Object(RemoveDeletedQueryNodesProcessor(((t_RemoveDeletedQueryNodesProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveDeletedQueryNodesProcessor object((jobject) NULL);

                INT_CALL(object = RemoveDeletedQueryNodesProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(RemoveDeletedQueryNodesProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/util/Map$Entry.h"
#include "java/util/function/BiConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/function/BiFunction.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *LinkedHashMap::class$ = NULL;
    jmethodID *LinkedHashMap::mids$ = NULL;
    bool LinkedHashMap::live$ = false;

    jclass LinkedHashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/LinkedHashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_da161bce5801b190] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_init$_288f4efe31babf8a] = env->getMethodID(cls, "<init>", "(IFZ)V");
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsValue_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_forEach_94704ed6ccc48468] = env->getMethodID(cls, "forEach", "(Ljava/util/function/BiConsumer;)V");
        mids$[mid_get_e5ae0f8c04795fa9] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_128a89bbc17a8b69] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_keySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_replaceAll_22221e328874bd4f] = env->getMethodID(cls, "replaceAll", "(Ljava/util/function/BiFunction;)V");
        mids$[mid_values_d4dfbf7a26ff41df] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_removeEldestEntry_7076d39f0bf8c708] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    LinkedHashMap::LinkedHashMap() : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    LinkedHashMap::LinkedHashMap(jint a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

    LinkedHashMap::LinkedHashMap(const ::java::util::Map & a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_da161bce5801b190, a0, a1)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_288f4efe31babf8a, a0, a1, a2)) {}

    void LinkedHashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    jboolean LinkedHashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Set LinkedHashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_7dcf4034c6d1a92a]));
    }

    void LinkedHashMap::forEach(const ::java::util::function::BiConsumer & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_forEach_94704ed6ccc48468], a0.this$);
    }

    ::java::lang::Object LinkedHashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_e5ae0f8c04795fa9], a0.this$));
    }

    ::java::lang::Object LinkedHashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    ::java::util::Set LinkedHashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_7dcf4034c6d1a92a]));
    }

    void LinkedHashMap::replaceAll(const ::java::util::function::BiFunction & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_replaceAll_22221e328874bd4f], a0.this$);
    }

    ::java::util::Collection LinkedHashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_d4dfbf7a26ff41df]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args);
    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_forEach(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_replaceAll(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data);
    static PyGetSetDef t_LinkedHashMap__fields_[] = {
      DECLARE_GET_FIELD(t_LinkedHashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_LinkedHashMap__methods_[] = {
      DECLARE_METHOD(t_LinkedHashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, forEach, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(LinkedHashMap)[] = {
      { Py_tp_methods, t_LinkedHashMap__methods_ },
      { Py_tp_init, (void *) t_LinkedHashMap_init_ },
      { Py_tp_getset, t_LinkedHashMap__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(LinkedHashMap)[] = {
      &PY_TYPE_DEF(::java::util::HashMap),
      NULL
    };

    DEFINE_TYPE(LinkedHashMap, t_LinkedHashMap, LinkedHashMap);
    PyObject *t_LinkedHashMap::wrap_Object(const LinkedHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_LinkedHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_LinkedHashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(LinkedHashMap), &PY_TYPE_DEF(LinkedHashMap), module, "LinkedHashMap", 0);
    }

    void t_LinkedHashMap::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(LinkedHashMap), "class_", make_descriptor(LinkedHashMap::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(LinkedHashMap), "wrapfn_", make_descriptor(t_LinkedHashMap::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(LinkedHashMap), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, LinkedHashMap::initializeClass, 1)))
        return NULL;
      return t_LinkedHashMap::wrap_Object(LinkedHashMap(((t_LinkedHashMap *) arg)->object.this$));
    }
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, LinkedHashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          LinkedHashMap object((jobject) NULL);

          INT_CALL(object = LinkedHashMap());
          self->object = object;
          break;
        }
       case 1:
        {
          jint a0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = LinkedHashMap(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          jint a0;
          jfloat a1;
          jboolean a2;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IFZ", &a0, &a1, &a2))
          {
            INT_CALL(object = LinkedHashMap(a0, a1, a2));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_forEach(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::function::BiConsumer a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::function::BiConsumer::initializeClass, &a0, &p0, ::java::util::function::t_BiConsumer::parameters_))
      {
        OBJ_CALL(self->object.forEach(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "forEach", args, 2);
    }

    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_replaceAll(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::function::BiFunction a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::function::BiFunction::initializeClass, &a0, &p0, ::java::util::function::t_BiFunction::parameters_))
      {
        OBJ_CALL(self->object.replaceAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "replaceAll", args, 2);
    }

    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(PY_TYPE(LinkedHashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/compress/LZ4$FastCompressionHashTable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {

          ::java::lang::Class *LZ4$FastCompressionHashTable::class$ = NULL;
          jmethodID *LZ4$FastCompressionHashTable::mids$ = NULL;
          bool LZ4$FastCompressionHashTable::live$ = false;

          jclass LZ4$FastCompressionHashTable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/compress/LZ4$FastCompressionHashTable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_previous_1e143afe1894d213] = env->getMethodID(cls, "previous", "(I)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LZ4$FastCompressionHashTable::LZ4$FastCompressionHashTable() : ::org::apache::lucene::util::compress::LZ4$HashTable(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint LZ4$FastCompressionHashTable::previous(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_previous_1e143afe1894d213], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {
          static PyObject *t_LZ4$FastCompressionHashTable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4$FastCompressionHashTable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LZ4$FastCompressionHashTable_init_(t_LZ4$FastCompressionHashTable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LZ4$FastCompressionHashTable_previous(t_LZ4$FastCompressionHashTable *self, PyObject *arg);

          static PyMethodDef t_LZ4$FastCompressionHashTable__methods_[] = {
            DECLARE_METHOD(t_LZ4$FastCompressionHashTable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4$FastCompressionHashTable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4$FastCompressionHashTable, previous, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LZ4$FastCompressionHashTable)[] = {
            { Py_tp_methods, t_LZ4$FastCompressionHashTable__methods_ },
            { Py_tp_init, (void *) t_LZ4$FastCompressionHashTable_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LZ4$FastCompressionHashTable)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::compress::LZ4$HashTable),
            NULL
          };

          DEFINE_TYPE(LZ4$FastCompressionHashTable, t_LZ4$FastCompressionHashTable, LZ4$FastCompressionHashTable);

          void t_LZ4$FastCompressionHashTable::install(PyObject *module)
          {
            installType(&PY_TYPE(LZ4$FastCompressionHashTable), &PY_TYPE_DEF(LZ4$FastCompressionHashTable), module, "LZ4$FastCompressionHashTable", 0);
          }

          void t_LZ4$FastCompressionHashTable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$FastCompressionHashTable), "class_", make_descriptor(LZ4$FastCompressionHashTable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$FastCompressionHashTable), "wrapfn_", make_descriptor(t_LZ4$FastCompressionHashTable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$FastCompressionHashTable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LZ4$FastCompressionHashTable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LZ4$FastCompressionHashTable::initializeClass, 1)))
              return NULL;
            return t_LZ4$FastCompressionHashTable::wrap_Object(LZ4$FastCompressionHashTable(((t_LZ4$FastCompressionHashTable *) arg)->object.this$));
          }
          static PyObject *t_LZ4$FastCompressionHashTable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LZ4$FastCompressionHashTable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LZ4$FastCompressionHashTable_init_(t_LZ4$FastCompressionHashTable *self, PyObject *args, PyObject *kwds)
          {
            LZ4$FastCompressionHashTable object((jobject) NULL);

            INT_CALL(object = LZ4$FastCompressionHashTable());
            self->object = object;

            return 0;
          }

          static PyObject *t_LZ4$FastCompressionHashTable_previous(t_LZ4$FastCompressionHashTable *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.previous(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "previous", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader::class$ = NULL;
        jmethodID *ExitableDirectoryReader::mids$ = NULL;
        bool ExitableDirectoryReader::live$ = false;

        jclass ExitableDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e4facfc618ffa37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/QueryTimeout;)V");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_90dbc9f4c9894dd8] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/QueryTimeout;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doWrapDirectoryReader_bfd9949da06c4860] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader::ExitableDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::QueryTimeout & a1) : ::org::apache::lucene::index::FilterDirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_2e4facfc618ffa37, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexReader$CacheHelper ExitableDirectoryReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::java::lang::String ExitableDirectoryReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::DirectoryReader ExitableDirectoryReader::wrap(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::QueryTimeout & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_90dbc9f4c9894dd8], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableTermsEnum.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableTerms.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableFilterAtomicReader.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableSubReaderWrapper.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitingReaderException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader_of_(t_ExitableDirectoryReader *self, PyObject *args);
        static int t_ExitableDirectoryReader_init_(t_ExitableDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader_getReaderCacheHelper(t_ExitableDirectoryReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader_toString(t_ExitableDirectoryReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ExitableDirectoryReader_get__readerCacheHelper(t_ExitableDirectoryReader *self, void *data);
        static PyObject *t_ExitableDirectoryReader_get__parameters_(t_ExitableDirectoryReader *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_ExitableDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterDirectoryReader),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader, t_ExitableDirectoryReader, ExitableDirectoryReader);
        PyObject *t_ExitableDirectoryReader::wrap_Object(const ExitableDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader *self = (t_ExitableDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader *self = (t_ExitableDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader), &PY_TYPE_DEF(ExitableDirectoryReader), module, "ExitableDirectoryReader", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "ExitableTermsEnum", make_descriptor(&PY_TYPE_DEF(ExitableDirectoryReader$ExitableTermsEnum)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "ExitableTerms", make_descriptor(&PY_TYPE_DEF(ExitableDirectoryReader$ExitableTerms)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "ExitableFilterAtomicReader", make_descriptor(&PY_TYPE_DEF(ExitableDirectoryReader$ExitableFilterAtomicReader)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "ExitableSubReaderWrapper", make_descriptor(&PY_TYPE_DEF(ExitableDirectoryReader$ExitableSubReaderWrapper)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "ExitingReaderException", make_descriptor(&PY_TYPE_DEF(ExitableDirectoryReader$ExitingReaderException)));
        }

        void t_ExitableDirectoryReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "class_", make_descriptor(ExitableDirectoryReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "wrapfn_", make_descriptor(t_ExitableDirectoryReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader::wrap_Object(ExitableDirectoryReader(((t_ExitableDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader_of_(t_ExitableDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader_init_(t_ExitableDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::QueryTimeout a1((jobject) NULL);
          ExitableDirectoryReader object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1))
          {
            INT_CALL(object = ExitableDirectoryReader(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ExitableDirectoryReader_getReaderCacheHelper(t_ExitableDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader_toString(t_ExitableDirectoryReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::QueryTimeout a1((jobject) NULL);
          ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ExitableDirectoryReader::wrap(a0, a1));
            return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
        static PyObject *t_ExitableDirectoryReader_get__parameters_(t_ExitableDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ExitableDirectoryReader_get__readerCacheHelper(t_ExitableDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemmer::class$ = NULL;
          jmethodID *BulgarianStemmer::mids$ = NULL;
          bool BulgarianStemmer::live$ = false;

          jclass BulgarianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemmer::BulgarianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint BulgarianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args);

          static PyMethodDef t_BulgarianStemmer__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BulgarianStemmer)[] = {
            { Py_tp_methods, t_BulgarianStemmer__methods_ },
            { Py_tp_init, (void *) t_BulgarianStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BulgarianStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BulgarianStemmer, t_BulgarianStemmer, BulgarianStemmer);

          void t_BulgarianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemmer), &PY_TYPE_DEF(BulgarianStemmer), module, "BulgarianStemmer", 0);
          }

          void t_BulgarianStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemmer), "class_", make_descriptor(BulgarianStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemmer), "wrapfn_", make_descriptor(t_BulgarianStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemmer::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemmer::wrap_Object(BulgarianStemmer(((t_BulgarianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BulgarianStemmer object((jobject) NULL);

            INT_CALL(object = BulgarianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *Dictionary$Morpheme::class$ = NULL;
            jmethodID *Dictionary$Morpheme::mids$ = NULL;
            jfieldID *Dictionary$Morpheme::fids$ = NULL;
            bool Dictionary$Morpheme::live$ = false;

            jclass Dictionary$Morpheme::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cd4cdc10aa786145] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/POS$Tag;Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_posTag] = env->getFieldID(cls, "posTag", "Lorg/apache/lucene/analysis/ko/POS$Tag;");
                fids$[fid_surfaceForm] = env->getFieldID(cls, "surfaceForm", "Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Dictionary$Morpheme::Dictionary$Morpheme(const ::org::apache::lucene::analysis::ko::POS$Tag & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cd4cdc10aa786145, a0.this$, a1.this$)) {}

            ::org::apache::lucene::analysis::ko::POS$Tag Dictionary$Morpheme::_get_posTag() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->getObjectField(this$, fids$[fid_posTag]));
            }

            ::java::lang::String Dictionary$Morpheme::_get_surfaceForm() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_surfaceForm]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_Dictionary$Morpheme_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Dictionary$Morpheme_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Dictionary$Morpheme_init_(t_Dictionary$Morpheme *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Dictionary$Morpheme_get__posTag(t_Dictionary$Morpheme *self, void *data);
            static PyObject *t_Dictionary$Morpheme_get__surfaceForm(t_Dictionary$Morpheme *self, void *data);

            static PyGetSetDef t_Dictionary$Morpheme__fields_[] = {
              DECLARE_GET_FIELD(t_Dictionary$Morpheme, posTag),
              DECLARE_GET_FIELD(t_Dictionary$Morpheme, surfaceForm),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Dictionary$Morpheme__methods_[] = {
              DECLARE_METHOD(t_Dictionary$Morpheme, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Dictionary$Morpheme, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Dictionary$Morpheme)[] = {
              { Py_tp_methods, t_Dictionary$Morpheme__methods_ },
              { Py_tp_init, (void *) t_Dictionary$Morpheme_init_ },
              { Py_tp_getset, t_Dictionary$Morpheme__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Dictionary$Morpheme)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Dictionary$Morpheme, t_Dictionary$Morpheme, Dictionary$Morpheme);

            void t_Dictionary$Morpheme::install(PyObject *module)
            {
              installType(&PY_TYPE(Dictionary$Morpheme), &PY_TYPE_DEF(Dictionary$Morpheme), module, "Dictionary$Morpheme", 0);
            }

            void t_Dictionary$Morpheme::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary$Morpheme), "class_", make_descriptor(Dictionary$Morpheme::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary$Morpheme), "wrapfn_", make_descriptor(t_Dictionary$Morpheme::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Dictionary$Morpheme), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Dictionary$Morpheme_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Dictionary$Morpheme::initializeClass, 1)))
                return NULL;
              return t_Dictionary$Morpheme::wrap_Object(Dictionary$Morpheme(((t_Dictionary$Morpheme *) arg)->object.this$));
            }
            static PyObject *t_Dictionary$Morpheme_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Dictionary$Morpheme::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Dictionary$Morpheme_init_(t_Dictionary$Morpheme *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              Dictionary$Morpheme object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ko::POS$Tag::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::t_POS$Tag::parameters_, &a1))
              {
                INT_CALL(object = Dictionary$Morpheme(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Dictionary$Morpheme_get__posTag(t_Dictionary$Morpheme *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
              OBJ_CALL(value = self->object._get_posTag());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
            }

            static PyObject *t_Dictionary$Morpheme_get__surfaceForm(t_Dictionary$Morpheme *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_surfaceForm());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {

          ::java::lang::Class *Lucene60FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene60FieldInfosFormat::mids$ = NULL;
          bool Lucene60FieldInfosFormat::live$ = false;

          jclass Lucene60FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_1706310ddb242d67] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");
              mids$[mid_write_226745c1985cb50a] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene60FieldInfosFormat::Lucene60FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::FieldInfos Lucene60FieldInfosFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_1706310ddb242d67], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void Lucene60FieldInfosFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_write_226745c1985cb50a], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {
          static PyObject *t_Lucene60FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene60FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene60FieldInfosFormat_init_(t_Lucene60FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene60FieldInfosFormat_read(t_Lucene60FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene60FieldInfosFormat_write(t_Lucene60FieldInfosFormat *self, PyObject *args);

          static PyMethodDef t_Lucene60FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene60FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60FieldInfosFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene60FieldInfosFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene60FieldInfosFormat)[] = {
            { Py_tp_methods, t_Lucene60FieldInfosFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene60FieldInfosFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene60FieldInfosFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldInfosFormat),
            NULL
          };

          DEFINE_TYPE(Lucene60FieldInfosFormat, t_Lucene60FieldInfosFormat, Lucene60FieldInfosFormat);

          void t_Lucene60FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene60FieldInfosFormat), &PY_TYPE_DEF(Lucene60FieldInfosFormat), module, "Lucene60FieldInfosFormat", 0);
          }

          void t_Lucene60FieldInfosFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60FieldInfosFormat), "class_", make_descriptor(Lucene60FieldInfosFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60FieldInfosFormat), "wrapfn_", make_descriptor(t_Lucene60FieldInfosFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60FieldInfosFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene60FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene60FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene60FieldInfosFormat::wrap_Object(Lucene60FieldInfosFormat(((t_Lucene60FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene60FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene60FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene60FieldInfosFormat_init_(t_Lucene60FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene60FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene60FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene60FieldInfosFormat_read(t_Lucene60FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene60FieldInfosFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene60FieldInfosFormat_write(t_Lucene60FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene60FieldInfosFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery$Builder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery$Builder::class$ = NULL;
        jmethodID *PhraseQuery$Builder::mids$ = NULL;
        bool PhraseQuery$Builder::live$ = false;

        jclass PhraseQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_90080376616b1f3b] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/PhraseQuery$Builder;");
            mids$[mid_add_a19273644b5c8b1b] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;I)Lorg/apache/lucene/search/PhraseQuery$Builder;");
            mids$[mid_build_cf38b147fe4660e2] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/PhraseQuery;");
            mids$[mid_setSlop_efe9e72cc8675deb] = env->getMethodID(cls, "setSlop", "(I)Lorg/apache/lucene/search/PhraseQuery$Builder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery$Builder::PhraseQuery$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        PhraseQuery$Builder PhraseQuery$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          return PhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_90080376616b1f3b], a0.this$));
        }

        PhraseQuery$Builder PhraseQuery$Builder::add(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          return PhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_a19273644b5c8b1b], a0.this$, a1));
        }

        ::org::apache::lucene::search::PhraseQuery PhraseQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::PhraseQuery(env->callObjectMethod(this$, mids$[mid_build_cf38b147fe4660e2]));
        }

        PhraseQuery$Builder PhraseQuery$Builder::setSlop(jint a0) const
        {
          return PhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_setSlop_efe9e72cc8675deb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery$Builder_init_(t_PhraseQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery$Builder_add(t_PhraseQuery$Builder *self, PyObject *args);
        static PyObject *t_PhraseQuery$Builder_build(t_PhraseQuery$Builder *self);
        static PyObject *t_PhraseQuery$Builder_setSlop(t_PhraseQuery$Builder *self, PyObject *arg);
        static int t_PhraseQuery$Builder_set__slop(t_PhraseQuery$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PhraseQuery$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PhraseQuery$Builder, slop),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery$Builder, setSlop, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseQuery$Builder)[] = {
          { Py_tp_methods, t_PhraseQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_PhraseQuery$Builder_init_ },
          { Py_tp_getset, t_PhraseQuery$Builder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PhraseQuery$Builder, t_PhraseQuery$Builder, PhraseQuery$Builder);

        void t_PhraseQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery$Builder), &PY_TYPE_DEF(PhraseQuery$Builder), module, "PhraseQuery$Builder", 0);
        }

        void t_PhraseQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery$Builder), "class_", make_descriptor(PhraseQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery$Builder), "wrapfn_", make_descriptor(t_PhraseQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery$Builder::wrap_Object(PhraseQuery$Builder(((t_PhraseQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery$Builder_init_(t_PhraseQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          PhraseQuery$Builder object((jobject) NULL);

          INT_CALL(object = PhraseQuery$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PhraseQuery$Builder_add(t_PhraseQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              PhraseQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PhraseQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              PhraseQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                return t_PhraseQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PhraseQuery$Builder_build(t_PhraseQuery$Builder *self)
        {
          ::org::apache::lucene::search::PhraseQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_PhraseQuery::wrap_Object(result);
        }

        static PyObject *t_PhraseQuery$Builder_setSlop(t_PhraseQuery$Builder *self, PyObject *arg)
        {
          jint a0;
          PhraseQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setSlop(a0));
            return t_PhraseQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static int t_PhraseQuery$Builder_set__slop(t_PhraseQuery$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongRangeDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongRangeDocValuesField::class$ = NULL;
        jmethodID *LongRangeDocValuesField::mids$ = NULL;
        bool LongRangeDocValuesField::live$ = false;

        jclass LongRangeDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongRangeDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7579052ca1baafb1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[J[J)V");
            mids$[mid_getMax_0f1d64a641e8af53] = env->getMethodID(cls, "getMax", "(I)J");
            mids$[mid_getMin_0f1d64a641e8af53] = env->getMethodID(cls, "getMin", "(I)J");
            mids$[mid_newSlowIntersectsQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newSlowIntersectsQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongRangeDocValuesField::LongRangeDocValuesField(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2) : ::org::apache::lucene::document::BinaryRangeDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_7579052ca1baafb1, a0.this$, a1.this$, a2.this$)) {}

        jlong LongRangeDocValuesField::getMax(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getMax_0f1d64a641e8af53], a0);
        }

        jlong LongRangeDocValuesField::getMin(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getMin_0f1d64a641e8af53], a0);
        }

        ::org::apache::lucene::search::Query LongRangeDocValuesField::newSlowIntersectsQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowIntersectsQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongRangeDocValuesField_init_(t_LongRangeDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongRangeDocValuesField_getMax(t_LongRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_LongRangeDocValuesField_getMin(t_LongRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_LongRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_LongRangeDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LongRangeDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongRangeDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongRangeDocValuesField, getMax, METH_O),
          DECLARE_METHOD(t_LongRangeDocValuesField, getMin, METH_O),
          DECLARE_METHOD(t_LongRangeDocValuesField, newSlowIntersectsQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongRangeDocValuesField)[] = {
          { Py_tp_methods, t_LongRangeDocValuesField__methods_ },
          { Py_tp_init, (void *) t_LongRangeDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongRangeDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::BinaryRangeDocValuesField),
          NULL
        };

        DEFINE_TYPE(LongRangeDocValuesField, t_LongRangeDocValuesField, LongRangeDocValuesField);

        void t_LongRangeDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongRangeDocValuesField), &PY_TYPE_DEF(LongRangeDocValuesField), module, "LongRangeDocValuesField", 0);
        }

        void t_LongRangeDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeDocValuesField), "class_", make_descriptor(LongRangeDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeDocValuesField), "wrapfn_", make_descriptor(t_LongRangeDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongRangeDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LongRangeDocValuesField::wrap_Object(LongRangeDocValuesField(((t_LongRangeDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LongRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongRangeDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongRangeDocValuesField_init_(t_LongRangeDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          LongRangeDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            INT_CALL(object = LongRangeDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongRangeDocValuesField_getMax(t_LongRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_LongRangeDocValuesField_getMin(t_LongRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_LongRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongRangeDocValuesField::newSlowIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowIntersectsQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CodecUtil::class$ = NULL;
        jmethodID *CodecUtil::mids$ = NULL;
        bool CodecUtil::live$ = false;
        jint CodecUtil::CODEC_MAGIC = (jint) 0;
        jint CodecUtil::FOOTER_MAGIC = (jint) 0;

        jclass CodecUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CodecUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkFooter_c911576f239ebaf2] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;)J");
            mids$[mid_checkFooter_4f775016b80d28f0] = env->getStaticMethodID(cls, "checkFooter", "(Lorg/apache/lucene/store/ChecksumIndexInput;Ljava/lang/Throwable;)V");
            mids$[mid_checkHeader_bf49a7095d8bc856] = env->getStaticMethodID(cls, "checkHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkHeaderNoMagic_bf49a7095d8bc856] = env->getStaticMethodID(cls, "checkHeaderNoMagic", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II)I");
            mids$[mid_checkIndexHeader_7770713b5ab4ce2a] = env->getStaticMethodID(cls, "checkIndexHeader", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;II[BLjava/lang/String;)I");
            mids$[mid_checkIndexHeaderID_8ba8bbcdd022af1c] = env->getStaticMethodID(cls, "checkIndexHeaderID", "(Lorg/apache/lucene/store/DataInput;[B)[B");
            mids$[mid_checkIndexHeaderSuffix_11c3a6f5c5fa95f0] = env->getStaticMethodID(cls, "checkIndexHeaderSuffix", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_checksumEntireFile_3ae65187e601f00f] = env->getStaticMethodID(cls, "checksumEntireFile", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_footerLength_9972fcc56b44e79d] = env->getStaticMethodID(cls, "footerLength", "()I");
            mids$[mid_headerLength_a5a7d1128e9e2bb7] = env->getStaticMethodID(cls, "headerLength", "(Ljava/lang/String;)I");
            mids$[mid_indexHeaderLength_b842b27f8e76eceb] = env->getStaticMethodID(cls, "indexHeaderLength", "(Ljava/lang/String;Ljava/lang/String;)I");
            mids$[mid_readFooter_8f8462a668d2669e] = env->getStaticMethodID(cls, "readFooter", "(Lorg/apache/lucene/store/IndexInput;)[B");
            mids$[mid_readIndexHeader_8f8462a668d2669e] = env->getStaticMethodID(cls, "readIndexHeader", "(Lorg/apache/lucene/store/IndexInput;)[B");
            mids$[mid_retrieveChecksum_3ae65187e601f00f] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;)J");
            mids$[mid_retrieveChecksum_2f522ac45bddc028] = env->getStaticMethodID(cls, "retrieveChecksum", "(Lorg/apache/lucene/store/IndexInput;J)J");
            mids$[mid_verifyAndCopyIndexHeader_9fca6d299846d2b0] = env->getStaticMethodID(cls, "verifyAndCopyIndexHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/store/DataOutput;[B)V");
            mids$[mid_writeFooter_c832dc158b3caad3] = env->getStaticMethodID(cls, "writeFooter", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_writeHeader_a5ec96da49fac821] = env->getStaticMethodID(cls, "writeHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I)V");
            mids$[mid_writeIndexHeader_b6ba21127a8a4d23] = env->getStaticMethodID(cls, "writeIndexHeader", "(Lorg/apache/lucene/store/DataOutput;Ljava/lang/String;I[BLjava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CODEC_MAGIC = env->getStaticIntField(cls, "CODEC_MAGIC");
            FOOTER_MAGIC = env->getStaticIntField(cls, "FOOTER_MAGIC");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checkFooter_c911576f239ebaf2], a0.this$);
        }

        void CodecUtil::checkFooter(const ::org::apache::lucene::store::ChecksumIndexInput & a0, const ::java::lang::Throwable & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkFooter_4f775016b80d28f0], a0.this$, a1.this$);
        }

        jint CodecUtil::checkHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeader_bf49a7095d8bc856], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkHeaderNoMagic(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkHeaderNoMagic_bf49a7095d8bc856], a0.this$, a1.this$, a2, a3);
        }

        jint CodecUtil::checkIndexHeader(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1, jint a2, jint a3, const JArray< jbyte > & a4, const ::java::lang::String & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_checkIndexHeader_7770713b5ab4ce2a], a0.this$, a1.this$, a2, a3, a4.this$, a5.this$);
        }

        JArray< jbyte > CodecUtil::checkIndexHeaderID(const ::org::apache::lucene::store::DataInput & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_checkIndexHeaderID_8ba8bbcdd022af1c], a0.this$, a1.this$));
        }

        ::java::lang::String CodecUtil::checkIndexHeaderSuffix(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_checkIndexHeaderSuffix_11c3a6f5c5fa95f0], a0.this$, a1.this$));
        }

        jlong CodecUtil::checksumEntireFile(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_checksumEntireFile_3ae65187e601f00f], a0.this$);
        }

        jint CodecUtil::footerLength()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_footerLength_9972fcc56b44e79d]);
        }

        jint CodecUtil::headerLength(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_headerLength_a5a7d1128e9e2bb7], a0.this$);
        }

        jint CodecUtil::indexHeaderLength(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_indexHeaderLength_b842b27f8e76eceb], a0.this$, a1.this$);
        }

        JArray< jbyte > CodecUtil::readFooter(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_readFooter_8f8462a668d2669e], a0.this$));
        }

        JArray< jbyte > CodecUtil::readIndexHeader(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_readIndexHeader_8f8462a668d2669e], a0.this$));
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_3ae65187e601f00f], a0.this$);
        }

        jlong CodecUtil::retrieveChecksum(const ::org::apache::lucene::store::IndexInput & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_retrieveChecksum_2f522ac45bddc028], a0.this$, a1);
        }

        void CodecUtil::verifyAndCopyIndexHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::store::DataOutput & a1, const JArray< jbyte > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyAndCopyIndexHeader_9fca6d299846d2b0], a0.this$, a1.this$, a2.this$);
        }

        void CodecUtil::writeFooter(const ::org::apache::lucene::store::IndexOutput & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeFooter_c832dc158b3caad3], a0.this$);
        }

        void CodecUtil::writeHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeHeader_a5ec96da49fac821], a0.this$, a1.this$, a2);
        }

        void CodecUtil::writeIndexHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::java::lang::String & a1, jint a2, const JArray< jbyte > & a3, const ::java::lang::String & a4)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeIndexHeader_b6ba21127a8a4d23], a0.this$, a1.this$, a2, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkIndexHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkIndexHeaderID(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checkIndexHeaderSuffix(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type);
        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_indexHeaderLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_readFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_readIndexHeader(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_verifyAndCopyIndexHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args);
        static PyObject *t_CodecUtil_writeIndexHeader(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CodecUtil__methods_[] = {
          DECLARE_METHOD(t_CodecUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkFooter, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkHeaderNoMagic, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkIndexHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkIndexHeaderID, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checkIndexHeaderSuffix, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, checksumEntireFile, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, footerLength, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, headerLength, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, indexHeaderLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, readFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, readIndexHeader, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, retrieveChecksum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, verifyAndCopyIndexHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeFooter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeHeader, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CodecUtil, writeIndexHeader, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CodecUtil)[] = {
          { Py_tp_methods, t_CodecUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CodecUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CodecUtil, t_CodecUtil, CodecUtil);

        void t_CodecUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecUtil), &PY_TYPE_DEF(CodecUtil), module, "CodecUtil", 0);
        }

        void t_CodecUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecUtil), "class_", make_descriptor(CodecUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecUtil), "wrapfn_", make_descriptor(t_CodecUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecUtil), "boxfn_", make_descriptor(boxObject));
          env->getClass(CodecUtil::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecUtil), "CODEC_MAGIC", make_descriptor(CodecUtil::CODEC_MAGIC));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecUtil), "FOOTER_MAGIC", make_descriptor(CodecUtil::FOOTER_MAGIC));
        }

        static PyObject *t_CodecUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecUtil::initializeClass, 1)))
            return NULL;
          return t_CodecUtil::wrap_Object(CodecUtil(((t_CodecUtil *) arg)->object.this$));
        }
        static PyObject *t_CodecUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecUtil_checkFooter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkFooter(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::checkFooter(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "checkFooter", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeader(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkHeaderNoMagic(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "ksII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkHeaderNoMagic(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkHeaderNoMagic", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkIndexHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          jint a3;
          JArray< jbyte > a4((jobject) NULL);
          ::java::lang::String a5((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ksII[Bs", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkIndexHeader(a0, a1, a2, a3, a4, a5));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "checkIndexHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkIndexHeaderID(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkIndexHeaderID(a0, a1));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "checkIndexHeaderID", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checkIndexHeaderSuffix(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checkIndexHeaderSuffix(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "checkIndexHeaderSuffix", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_checksumEntireFile(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::checksumEntireFile(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "checksumEntireFile", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_footerLength(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::footerLength());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_CodecUtil_headerLength(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::headerLength(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "headerLength", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_indexHeaderLength(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::indexHeaderLength(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "indexHeaderLength", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_readFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::readFooter(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "readFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_readIndexHeader(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::readIndexHeader(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "readIndexHeader", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_retrieveChecksum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;
              jlong result;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::codecs::CodecUtil::retrieveChecksum(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "retrieveChecksum", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_verifyAndCopyIndexHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
          JArray< jbyte > a2((jobject) NULL);

          if (!parseArgs(args, "kk[B", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::verifyAndCopyIndexHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyAndCopyIndexHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeFooter(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeFooter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeFooter", arg);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "ksI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeHeader(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeHeader", args);
          return NULL;
        }

        static PyObject *t_CodecUtil_writeIndexHeader(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          ::java::lang::String a4((jobject) NULL);

          if (!parseArgs(args, "ksI[Bs", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(::org::apache::lucene::codecs::CodecUtil::writeIndexHeader(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeIndexHeader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntPoint.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntPoint::class$ = NULL;
        jmethodID *IntPoint::mids$ = NULL;
        bool IntPoint::live$ = false;

        jclass IntPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_89fa4a1bfff971b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[I)V");
            mids$[mid_decodeDimension_7cdc0fb0850d95a0] = env->getStaticMethodID(cls, "decodeDimension", "([BI)I");
            mids$[mid_encodeDimension_e2a2eb3c904536ac] = env->getStaticMethodID(cls, "encodeDimension", "(I[BI)V");
            mids$[mid_newExactQuery_711c301244722ef0] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_8499548c7684a46a] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;II)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_3dcc3ab3a728f7cf] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_263cb7d6a0b161ae] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Query;");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_pack_e3e31b1e78c32fe7] = env->getStaticMethodID(cls, "pack", "([I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setIntValue_040c4cd0390c5aff] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setIntValues_263e68476cd076a9] = env->getMethodID(cls, "setIntValues", "([I)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntPoint::IntPoint(const ::java::lang::String & a0, const JArray< jint > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_89fa4a1bfff971b9, a0.this$, a1.this$)) {}

        jint IntPoint::decodeDimension(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_decodeDimension_7cdc0fb0850d95a0], a0.this$, a1);
        }

        void IntPoint::encodeDimension(jint a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_e2a2eb3c904536ac], a0, a1.this$, a2);
        }

        ::org::apache::lucene::search::Query IntPoint::newExactQuery(const ::java::lang::String & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_711c301244722ef0], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query IntPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query IntPoint::newRangeQuery(const ::java::lang::String & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_8499548c7684a46a], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query IntPoint::newSetQuery(const ::java::lang::String & a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_3dcc3ab3a728f7cf], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query IntPoint::newSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_263cb7d6a0b161ae], a0.this$, a1.this$));
        }

        ::java::lang::Number IntPoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::org::apache::lucene::util::BytesRef IntPoint::pack(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_pack_e3e31b1e78c32fe7], a0.this$));
        }

        void IntPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void IntPoint::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_040c4cd0390c5aff], a0);
        }

        void IntPoint::setIntValues(const JArray< jint > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValues_263e68476cd076a9], a0.this$);
        }

        ::java::lang::String IntPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntPoint_init_(t_IntPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntPoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntPoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntPoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntPoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntPoint_newSetQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntPoint_numericValue(t_IntPoint *self, PyObject *args);
        static PyObject *t_IntPoint_pack(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntPoint_setBytesValue(t_IntPoint *self, PyObject *args);
        static PyObject *t_IntPoint_setIntValue(t_IntPoint *self, PyObject *args);
        static PyObject *t_IntPoint_setIntValues(t_IntPoint *self, PyObject *arg);
        static PyObject *t_IntPoint_toString(t_IntPoint *self, PyObject *args);
        static int t_IntPoint_set__bytesValue(t_IntPoint *self, PyObject *arg, void *data);
        static int t_IntPoint_set__intValue(t_IntPoint *self, PyObject *arg, void *data);
        static int t_IntPoint_set__intValues(t_IntPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_IntPoint__fields_[] = {
          DECLARE_SET_FIELD(t_IntPoint, bytesValue),
          DECLARE_SET_FIELD(t_IntPoint, intValue),
          DECLARE_SET_FIELD(t_IntPoint, intValues),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntPoint__methods_[] = {
          DECLARE_METHOD(t_IntPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, newSetQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_IntPoint, pack, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_IntPoint, setIntValue, METH_VARARGS),
          DECLARE_METHOD(t_IntPoint, setIntValues, METH_O),
          DECLARE_METHOD(t_IntPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntPoint)[] = {
          { Py_tp_methods, t_IntPoint__methods_ },
          { Py_tp_init, (void *) t_IntPoint_init_ },
          { Py_tp_getset, t_IntPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(IntPoint, t_IntPoint, IntPoint);

        void t_IntPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(IntPoint), &PY_TYPE_DEF(IntPoint), module, "IntPoint", 0);
        }

        void t_IntPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPoint), "class_", make_descriptor(IntPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPoint), "wrapfn_", make_descriptor(t_IntPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntPoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntPoint::initializeClass, 1)))
            return NULL;
          return t_IntPoint::wrap_Object(IntPoint(((t_IntPoint *) arg)->object.this$));
        }
        static PyObject *t_IntPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntPoint_init_(t_IntPoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          IntPoint object((jobject) NULL);

          if (!parseArgs(args, "s[I", &a0, &a1))
          {
            INT_CALL(object = IntPoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntPoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::decodeDimension(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_IntPoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::document::IntPoint::encodeDimension(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_IntPoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_IntPoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              JArray< jint > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_IntPoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }

        static PyObject *t_IntPoint_numericValue(t_IntPoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IntPoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_IntPoint_pack(PyTypeObject *type, PyObject *arg)
        {
          JArray< jint > a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "[I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntPoint::pack(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "pack", arg);
          return NULL;
        }

        static PyObject *t_IntPoint_setBytesValue(t_IntPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_IntPoint_setIntValue(t_IntPoint *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntPoint), (PyObject *) self, "setIntValue", args, 2);
        }

        static PyObject *t_IntPoint_setIntValues(t_IntPoint *self, PyObject *arg)
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArg(arg, "[I", &a0))
          {
            OBJ_CALL(self->object.setIntValues(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValues", arg);
          return NULL;
        }

        static PyObject *t_IntPoint_toString(t_IntPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IntPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_IntPoint_set__bytesValue(t_IntPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_IntPoint_set__intValue(t_IntPoint *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_IntPoint_set__intValues(t_IntPoint *self, PyObject *arg, void *data)
        {
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object.setIntValues(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValues", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/classification/document/DocumentClassifier.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {

          ::java::lang::Class *SimpleNaiveBayesDocumentClassifier::class$ = NULL;
          jmethodID *SimpleNaiveBayesDocumentClassifier::mids$ = NULL;
          bool SimpleNaiveBayesDocumentClassifier::live$ = false;

          jclass SimpleNaiveBayesDocumentClassifier::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1fa2d44d9299bda3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/util/Map;[Ljava/lang/String;)V");
              mids$[mid_assignClass_7ffc5762e9e5efc8] = env->getMethodID(cls, "assignClass", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/classification/ClassificationResult;");
              mids$[mid_getClasses_f88498c88ae02b70] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;)Ljava/util/List;");
              mids$[mid_getClasses_3c35cce6258f355e] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;I)Ljava/util/List;");
              mids$[mid_getTokenArray_5e50add6ee608329] = env->getMethodID(cls, "getTokenArray", "(Lorg/apache/lucene/analysis/TokenStream;)[Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleNaiveBayesDocumentClassifier::SimpleNaiveBayesDocumentClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::Query & a1, const ::java::lang::String & a2, const ::java::util::Map & a3, const JArray< ::java::lang::String > & a4) : ::org::apache::lucene::classification::SimpleNaiveBayesClassifier(env->newObject(initializeClass, &mids$, mid_init$_1fa2d44d9299bda3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::classification::ClassificationResult SimpleNaiveBayesDocumentClassifier::assignClass(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_7ffc5762e9e5efc8], a0.this$));
          }

          ::java::util::List SimpleNaiveBayesDocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_f88498c88ae02b70], a0.this$));
          }

          ::java::util::List SimpleNaiveBayesDocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_3c35cce6258f355e], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {
          static PyObject *t_SimpleNaiveBayesDocumentClassifier_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleNaiveBayesDocumentClassifier_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleNaiveBayesDocumentClassifier_init_(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleNaiveBayesDocumentClassifier_assignClass(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args);
          static PyObject *t_SimpleNaiveBayesDocumentClassifier_getClasses(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args);

          static PyMethodDef t_SimpleNaiveBayesDocumentClassifier__methods_[] = {
            DECLARE_METHOD(t_SimpleNaiveBayesDocumentClassifier, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleNaiveBayesDocumentClassifier, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleNaiveBayesDocumentClassifier, assignClass, METH_VARARGS),
            DECLARE_METHOD(t_SimpleNaiveBayesDocumentClassifier, getClasses, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleNaiveBayesDocumentClassifier)[] = {
            { Py_tp_methods, t_SimpleNaiveBayesDocumentClassifier__methods_ },
            { Py_tp_init, (void *) t_SimpleNaiveBayesDocumentClassifier_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleNaiveBayesDocumentClassifier)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::classification::SimpleNaiveBayesClassifier),
            NULL
          };

          DEFINE_TYPE(SimpleNaiveBayesDocumentClassifier, t_SimpleNaiveBayesDocumentClassifier, SimpleNaiveBayesDocumentClassifier);

          void t_SimpleNaiveBayesDocumentClassifier::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleNaiveBayesDocumentClassifier), &PY_TYPE_DEF(SimpleNaiveBayesDocumentClassifier), module, "SimpleNaiveBayesDocumentClassifier", 0);
          }

          void t_SimpleNaiveBayesDocumentClassifier::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesDocumentClassifier), "class_", make_descriptor(SimpleNaiveBayesDocumentClassifier::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesDocumentClassifier), "wrapfn_", make_descriptor(t_SimpleNaiveBayesDocumentClassifier::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesDocumentClassifier), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleNaiveBayesDocumentClassifier_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleNaiveBayesDocumentClassifier::initializeClass, 1)))
              return NULL;
            return t_SimpleNaiveBayesDocumentClassifier::wrap_Object(SimpleNaiveBayesDocumentClassifier(((t_SimpleNaiveBayesDocumentClassifier *) arg)->object.this$));
          }
          static PyObject *t_SimpleNaiveBayesDocumentClassifier_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleNaiveBayesDocumentClassifier::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleNaiveBayesDocumentClassifier_init_(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::java::lang::String > a4((jobject) NULL);
            SimpleNaiveBayesDocumentClassifier object((jobject) NULL);

            if (!parseArgs(args, "kksK[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
            {
              INT_CALL(object = SimpleNaiveBayesDocumentClassifier(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleNaiveBayesDocumentClassifier_assignClass(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args)
          {
            ::org::apache::lucene::document::Document a0((jobject) NULL);
            ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.assignClass(a0));
              return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(PY_TYPE(SimpleNaiveBayesDocumentClassifier), (PyObject *) self, "assignClass", args, 2);
          }

          static PyObject *t_SimpleNaiveBayesDocumentClassifier_getClasses(t_SimpleNaiveBayesDocumentClassifier *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getClasses(a0));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getClasses(a0, a1));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
            }

            return callSuper(PY_TYPE(SimpleNaiveBayesDocumentClassifier), (PyObject *) self, "getClasses", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/OrdinalMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedSetDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedSetDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedSetDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedSetDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ac188073451f44a] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/SortedSetDocValues;[ILorg/apache/lucene/index/OrdinalMap;J)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getValueCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9a5ffc0686333682] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextOrd_2e5ae9edcb9b072f] = env->getMethodID(cls, "nextOrd", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$MultiSortedSetDocValues::MultiDocValues$MultiSortedSetDocValues(const JArray< ::org::apache::lucene::index::SortedSetDocValues > & a0, const JArray< jint > & a1, const ::org::apache::lucene::index::OrdinalMap & a2, jlong a3) : ::org::apache::lucene::index::SortedSetDocValues(env->newObject(initializeClass, &mids$, mid_init$_4ac188073451f44a, a0.this$, a1.this$, a2.this$, a3)) {}

        jint MultiDocValues$MultiSortedSetDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean MultiDocValues$MultiSortedSetDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong MultiDocValues$MultiSortedSetDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint MultiDocValues$MultiSortedSetDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jlong MultiDocValues$MultiSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9a5ffc0686333682], a0));
        }

        jint MultiDocValues$MultiSortedSetDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jlong MultiDocValues$MultiSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_2e5ae9edcb9b072f]);
        }

        JArray< jint > MultiDocValues$MultiSortedSetDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::OrdinalMap MultiDocValues$MultiSortedSetDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedSetDocValues > MultiDocValues$MultiSortedSetDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedSetDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocValues$MultiSortedSetDocValues_init_(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_advance(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_advanceExact(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cost(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_docID(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextDoc(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextOrd, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiDocValues$MultiSortedSetDocValues)[] = {
          { Py_tp_methods, t_MultiDocValues$MultiSortedSetDocValues__methods_ },
          { Py_tp_init, (void *) t_MultiDocValues$MultiSortedSetDocValues_init_ },
          { Py_tp_getset, t_MultiDocValues$MultiSortedSetDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiDocValues$MultiSortedSetDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortedSetDocValues),
          NULL
        };

        DEFINE_TYPE(MultiDocValues$MultiSortedSetDocValues, t_MultiDocValues$MultiSortedSetDocValues, MultiDocValues$MultiSortedSetDocValues);

        void t_MultiDocValues$MultiSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), &PY_TYPE_DEF(MultiDocValues$MultiSortedSetDocValues), module, "MultiDocValues$MultiSortedSetDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedSetDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedSetDocValues), "class_", make_descriptor(MultiDocValues$MultiSortedSetDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedSetDocValues), "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedSetDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedSetDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedSetDocValues::wrap_Object(MultiDocValues$MultiSortedSetDocValues(((t_MultiDocValues$MultiSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocValues$MultiSortedSetDocValues_init_(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          ::org::apache::lucene::index::OrdinalMap a2((jobject) NULL);
          jlong a3;
          MultiDocValues$MultiSortedSetDocValues object((jobject) NULL);

          if (!parseArgs(args, "[k[IkJ", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, ::org::apache::lucene::index::OrdinalMap::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MultiDocValues$MultiSortedSetDocValues(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_advance(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_advanceExact(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cost(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_docID(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextDoc(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          ::org::apache::lucene::index::OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedSetDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedSetDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedSetDocValuesField::class$ = NULL;
        jmethodID *SortedSetDocValuesField::mids$ = NULL;
        bool SortedSetDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedSetDocValuesField::TYPE = NULL;

        jclass SortedSetDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedSetDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63a59e248b245c2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlowExactQuery_25fa5bedbb29bf17] = env->getStaticMethodID(cls, "newSlowExactQuery", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowRangeQuery_dcd0792dba0b1a5a] = env->getStaticMethodID(cls, "newSlowRangeQuery", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetDocValuesField::SortedSetDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_63a59e248b245c2c, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Query SortedSetDocValuesField::newSlowExactQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowExactQuery_25fa5bedbb29bf17], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query SortedSetDocValuesField::newSlowRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowRangeQuery_dcd0792dba0b1a5a], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedSetDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedSetDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedSetDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, newSlowExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, newSlowRangeQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValuesField)[] = {
          { Py_tp_methods, t_SortedSetDocValuesField__methods_ },
          { Py_tp_init, (void *) t_SortedSetDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(SortedSetDocValuesField, t_SortedSetDocValuesField, SortedSetDocValuesField);

        void t_SortedSetDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValuesField), &PY_TYPE_DEF(SortedSetDocValuesField), module, "SortedSetDocValuesField", 0);
        }

        void t_SortedSetDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesField), "class_", make_descriptor(SortedSetDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesField), "wrapfn_", make_descriptor(t_SortedSetDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesField::TYPE)));
        }

        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValuesField::wrap_Object(SortedSetDocValuesField(((t_SortedSetDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedSetDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedSetDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedSetDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedSetDocValuesField::newSlowExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowExactQuery", args);
          return NULL;
        }

        static PyObject *t_SortedSetDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedSetDocValuesField::newSlowRangeQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowRangeQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenatingTokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConcatenatingTokenStream::class$ = NULL;
          jmethodID *ConcatenatingTokenStream::mids$ = NULL;
          bool ConcatenatingTokenStream::live$ = false;

          jclass ConcatenatingTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConcatenatingTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c471e9c109835224] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ConcatenatingTokenStream::ConcatenatingTokenStream(const JArray< ::org::apache::lucene::analysis::TokenStream > & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_c471e9c109835224, a0.this$)) {}

          void ConcatenatingTokenStream::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void ConcatenatingTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean ConcatenatingTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ConcatenatingTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConcatenatingTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenatingTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ConcatenatingTokenStream_init_(t_ConcatenatingTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ConcatenatingTokenStream_close(t_ConcatenatingTokenStream *self, PyObject *args);
          static PyObject *t_ConcatenatingTokenStream_end(t_ConcatenatingTokenStream *self, PyObject *args);
          static PyObject *t_ConcatenatingTokenStream_incrementToken(t_ConcatenatingTokenStream *self, PyObject *args);
          static PyObject *t_ConcatenatingTokenStream_reset(t_ConcatenatingTokenStream *self, PyObject *args);

          static PyMethodDef t_ConcatenatingTokenStream__methods_[] = {
            DECLARE_METHOD(t_ConcatenatingTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenatingTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenatingTokenStream, close, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenatingTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenatingTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenatingTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcatenatingTokenStream)[] = {
            { Py_tp_methods, t_ConcatenatingTokenStream__methods_ },
            { Py_tp_init, (void *) t_ConcatenatingTokenStream_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcatenatingTokenStream)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
            NULL
          };

          DEFINE_TYPE(ConcatenatingTokenStream, t_ConcatenatingTokenStream, ConcatenatingTokenStream);

          void t_ConcatenatingTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcatenatingTokenStream), &PY_TYPE_DEF(ConcatenatingTokenStream), module, "ConcatenatingTokenStream", 0);
          }

          void t_ConcatenatingTokenStream::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenatingTokenStream), "class_", make_descriptor(ConcatenatingTokenStream::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenatingTokenStream), "wrapfn_", make_descriptor(t_ConcatenatingTokenStream::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenatingTokenStream), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConcatenatingTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcatenatingTokenStream::initializeClass, 1)))
              return NULL;
            return t_ConcatenatingTokenStream::wrap_Object(ConcatenatingTokenStream(((t_ConcatenatingTokenStream *) arg)->object.this$));
          }
          static PyObject *t_ConcatenatingTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcatenatingTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ConcatenatingTokenStream_init_(t_ConcatenatingTokenStream *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::analysis::TokenStream > a0((jobject) NULL);
            ConcatenatingTokenStream object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ConcatenatingTokenStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ConcatenatingTokenStream_close(t_ConcatenatingTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenatingTokenStream), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ConcatenatingTokenStream_end(t_ConcatenatingTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenatingTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ConcatenatingTokenStream_incrementToken(t_ConcatenatingTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ConcatenatingTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ConcatenatingTokenStream_reset(t_ConcatenatingTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenatingTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FrequencyTrackingRingBuffer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FrequencyTrackingRingBuffer::class$ = NULL;
        jmethodID *FrequencyTrackingRingBuffer::mids$ = NULL;
        bool FrequencyTrackingRingBuffer::live$ = false;

        jclass FrequencyTrackingRingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FrequencyTrackingRingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_add_040c4cd0390c5aff] = env->getMethodID(cls, "add", "(I)V");
            mids$[mid_frequency_1e143afe1894d213] = env->getMethodID(cls, "frequency", "(I)I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrequencyTrackingRingBuffer::FrequencyTrackingRingBuffer(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        void FrequencyTrackingRingBuffer::add(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_040c4cd0390c5aff], a0);
        }

        jint FrequencyTrackingRingBuffer::frequency(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_frequency_1e143afe1894d213], a0);
        }

        jlong FrequencyTrackingRingBuffer::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FrequencyTrackingRingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrequencyTrackingRingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrequencyTrackingRingBuffer_init_(t_FrequencyTrackingRingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrequencyTrackingRingBuffer_add(t_FrequencyTrackingRingBuffer *self, PyObject *arg);
        static PyObject *t_FrequencyTrackingRingBuffer_frequency(t_FrequencyTrackingRingBuffer *self, PyObject *arg);
        static PyObject *t_FrequencyTrackingRingBuffer_ramBytesUsed(t_FrequencyTrackingRingBuffer *self);

        static PyMethodDef t_FrequencyTrackingRingBuffer__methods_[] = {
          DECLARE_METHOD(t_FrequencyTrackingRingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrequencyTrackingRingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrequencyTrackingRingBuffer, add, METH_O),
          DECLARE_METHOD(t_FrequencyTrackingRingBuffer, frequency, METH_O),
          DECLARE_METHOD(t_FrequencyTrackingRingBuffer, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FrequencyTrackingRingBuffer)[] = {
          { Py_tp_methods, t_FrequencyTrackingRingBuffer__methods_ },
          { Py_tp_init, (void *) t_FrequencyTrackingRingBuffer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FrequencyTrackingRingBuffer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FrequencyTrackingRingBuffer, t_FrequencyTrackingRingBuffer, FrequencyTrackingRingBuffer);

        void t_FrequencyTrackingRingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrequencyTrackingRingBuffer), &PY_TYPE_DEF(FrequencyTrackingRingBuffer), module, "FrequencyTrackingRingBuffer", 0);
        }

        void t_FrequencyTrackingRingBuffer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrequencyTrackingRingBuffer), "class_", make_descriptor(FrequencyTrackingRingBuffer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrequencyTrackingRingBuffer), "wrapfn_", make_descriptor(t_FrequencyTrackingRingBuffer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FrequencyTrackingRingBuffer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrequencyTrackingRingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrequencyTrackingRingBuffer::initializeClass, 1)))
            return NULL;
          return t_FrequencyTrackingRingBuffer::wrap_Object(FrequencyTrackingRingBuffer(((t_FrequencyTrackingRingBuffer *) arg)->object.this$));
        }
        static PyObject *t_FrequencyTrackingRingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrequencyTrackingRingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrequencyTrackingRingBuffer_init_(t_FrequencyTrackingRingBuffer *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          FrequencyTrackingRingBuffer object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = FrequencyTrackingRingBuffer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FrequencyTrackingRingBuffer_add(t_FrequencyTrackingRingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_FrequencyTrackingRingBuffer_frequency(t_FrequencyTrackingRingBuffer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.frequency(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "frequency", arg);
          return NULL;
        }

        static PyObject *t_FrequencyTrackingRingBuffer_ramBytesUsed(t_FrequencyTrackingRingBuffer *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *AnalysisOffsetStrategy::class$ = NULL;
          jmethodID *AnalysisOffsetStrategy::mids$ = NULL;
          bool AnalysisOffsetStrategy::live$ = false;

          jclass AnalysisOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_969950458d02784c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_tokenStream_b515bf040ef8400a] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalysisOffsetStrategy::AnalysisOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_969950458d02784c, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource AnalysisOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_AnalysisOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalysisOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AnalysisOffsetStrategy_init_(t_AnalysisOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AnalysisOffsetStrategy_getOffsetSource(t_AnalysisOffsetStrategy *self, PyObject *args);
          static PyObject *t_AnalysisOffsetStrategy_get__offsetSource(t_AnalysisOffsetStrategy *self, void *data);
          static PyGetSetDef t_AnalysisOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_AnalysisOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AnalysisOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_AnalysisOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalysisOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalysisOffsetStrategy, getOffsetSource, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AnalysisOffsetStrategy)[] = {
            { Py_tp_methods, t_AnalysisOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_AnalysisOffsetStrategy_init_ },
            { Py_tp_getset, t_AnalysisOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AnalysisOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::FieldOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(AnalysisOffsetStrategy, t_AnalysisOffsetStrategy, AnalysisOffsetStrategy);

          void t_AnalysisOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalysisOffsetStrategy), &PY_TYPE_DEF(AnalysisOffsetStrategy), module, "AnalysisOffsetStrategy", 0);
          }

          void t_AnalysisOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisOffsetStrategy), "class_", make_descriptor(AnalysisOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisOffsetStrategy), "wrapfn_", make_descriptor(t_AnalysisOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalysisOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalysisOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_AnalysisOffsetStrategy::wrap_Object(AnalysisOffsetStrategy(((t_AnalysisOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_AnalysisOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalysisOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AnalysisOffsetStrategy_init_(t_AnalysisOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            AnalysisOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AnalysisOffsetStrategy(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AnalysisOffsetStrategy_getOffsetSource(t_AnalysisOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOffsetSource());
              return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(PY_TYPE(AnalysisOffsetStrategy), (PyObject *) self, "getOffsetSource", args, 2);
          }

          static PyObject *t_AnalysisOffsetStrategy_get__offsetSource(t_AnalysisOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *NoOutputs::class$ = NULL;
          jmethodID *NoOutputs::mids$ = NULL;
          bool NoOutputs::live$ = false;

          jclass NoOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/NoOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_128a89bbc17a8b69] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_128a89bbc17a8b69] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_aaca991e153677f6] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/NoOutputs;");
              mids$[mid_merge_128a89bbc17a8b69] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_8f886c83a83356f0] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_c602cc71de3e942a] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_bd77d49f2c2d164c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_128a89bbc17a8b69] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_9939db8d7cac4f68] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object NoOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_d6bcd06f3102c4d9]));
          }

          NoOutputs NoOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return NoOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_aaca991e153677f6]));
          }

          ::java::lang::Object NoOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_8f886c83a83356f0], a0.this$));
          }

          jlong NoOutputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_c602cc71de3e942a], a0.this$);
          }

          ::java::lang::Object NoOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_bd77d49f2c2d164c], a0.this$));
          }

          ::java::lang::Object NoOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void NoOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9939db8d7cac4f68], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_ramBytesUsed(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_toString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data);
          static PyGetSetDef t_NoOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_NoOutputs, noOutput),
            DECLARE_GET_FIELD(t_NoOutputs, singleton),
            DECLARE_GET_FIELD(t_NoOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOutputs__methods_[] = {
            DECLARE_METHOD(t_NoOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NoOutputs)[] = {
            { Py_tp_methods, t_NoOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_NoOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NoOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(NoOutputs, t_NoOutputs, NoOutputs);
          PyObject *t_NoOutputs::wrap_Object(const NoOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NoOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NoOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOutputs), &PY_TYPE_DEF(NoOutputs), module, "NoOutputs", 0);
          }

          void t_NoOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOutputs), "class_", make_descriptor(NoOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOutputs), "wrapfn_", make_descriptor(t_NoOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOutputs::initializeClass, 1)))
              return NULL;
            return t_NoOutputs::wrap_Object(NoOutputs(((t_NoOutputs *) arg)->object.this$));
          }
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type)
          {
            NoOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::NoOutputs::getSingleton());
            return t_NoOutputs::wrap_Object(result);
          }

          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_NoOutputs_ramBytesUsed(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_NoOutputs_toString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NoOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data)
          {
            NoOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_NoOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SingleFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SingleFunction::class$ = NULL;
            jmethodID *SingleFunction::mids$ = NULL;
            bool SingleFunction::live$ = false;

            jclass SingleFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SingleFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SingleFunction::SingleFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            void SingleFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String SingleFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean SingleFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint SingleFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args);

            static PyMethodDef t_SingleFunction__methods_[] = {
              DECLARE_METHOD(t_SingleFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SingleFunction)[] = {
              { Py_tp_methods, t_SingleFunction__methods_ },
              { Py_tp_init, (void *) t_SingleFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SingleFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(SingleFunction, t_SingleFunction, SingleFunction);

            void t_SingleFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SingleFunction), &PY_TYPE_DEF(SingleFunction), module, "SingleFunction", 0);
            }

            void t_SingleFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFunction), "class_", make_descriptor(SingleFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFunction), "wrapfn_", make_descriptor(t_SingleFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SingleFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SingleFunction::initializeClass, 1)))
                return NULL;
              return t_SingleFunction::wrap_Object(SingleFunction(((t_SingleFunction *) arg)->object.this$));
            }
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SingleFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SingleFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SingleFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SingleFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SingleFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SingleFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(SingleFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Type::class$ = NULL;
        jmethodID *SortField$Type::mids$ = NULL;
        bool SortField$Type::live$ = false;
        SortField$Type *SortField$Type::CUSTOM = NULL;
        SortField$Type *SortField$Type::DOC = NULL;
        SortField$Type *SortField$Type::DOUBLE = NULL;
        SortField$Type *SortField$Type::FLOAT = NULL;
        SortField$Type *SortField$Type::INT = NULL;
        SortField$Type *SortField$Type::LONG = NULL;
        SortField$Type *SortField$Type::REWRITEABLE = NULL;
        SortField$Type *SortField$Type::SCORE = NULL;
        SortField$Type *SortField$Type::STRING = NULL;
        SortField$Type *SortField$Type::STRING_VAL = NULL;

        jclass SortField$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_a8a375cd2d157f53] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_values_47a76f26310b92e5] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortField$Type;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CUSTOM = new SortField$Type(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/SortField$Type;"));
            DOC = new SortField$Type(env->getStaticObjectField(cls, "DOC", "Lorg/apache/lucene/search/SortField$Type;"));
            DOUBLE = new SortField$Type(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/search/SortField$Type;"));
            FLOAT = new SortField$Type(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/search/SortField$Type;"));
            INT = new SortField$Type(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/search/SortField$Type;"));
            LONG = new SortField$Type(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/search/SortField$Type;"));
            REWRITEABLE = new SortField$Type(env->getStaticObjectField(cls, "REWRITEABLE", "Lorg/apache/lucene/search/SortField$Type;"));
            SCORE = new SortField$Type(env->getStaticObjectField(cls, "SCORE", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING = new SortField$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING_VAL = new SortField$Type(env->getStaticObjectField(cls, "STRING_VAL", "Lorg/apache/lucene/search/SortField$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Type SortField$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortField$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a8a375cd2d157f53], a0.this$));
        }

        JArray< SortField$Type > SortField$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortField$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_47a76f26310b92e5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args);
        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortField$Type_values(PyTypeObject *type);
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data);
        static PyGetSetDef t_SortField$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortField$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField$Type__methods_[] = {
          DECLARE_METHOD(t_SortField$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortField$Type)[] = {
          { Py_tp_methods, t_SortField$Type__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortField$Type__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortField$Type)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(SortField$Type, t_SortField$Type, SortField$Type);
        PyObject *t_SortField$Type::wrap_Object(const SortField$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortField$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortField$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Type), &PY_TYPE_DEF(SortField$Type), module, "SortField$Type", 0);
        }

        void t_SortField$Type::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "class_", make_descriptor(SortField$Type::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "wrapfn_", make_descriptor(t_SortField$Type::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Type::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "CUSTOM", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::CUSTOM)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "DOC", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOC)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "DOUBLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOUBLE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "FLOAT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::FLOAT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "INT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::INT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "LONG", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::LONG)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "REWRITEABLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::REWRITEABLE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "SCORE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SCORE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "STRING", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField$Type), "STRING_VAL", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING_VAL)));
        }

        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Type::initializeClass, 1)))
            return NULL;
          return t_SortField$Type::wrap_Object(SortField$Type(((t_SortField$Type *) arg)->object.this$));
        }
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortField$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::valueOf(a0));
            return t_SortField$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortField$Type_values(PyTypeObject *type)
        {
          JArray< SortField$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortField$Type::wrap_jobject);
        }
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IndexOutOfBoundsException::class$ = NULL;
    jmethodID *IndexOutOfBoundsException::mids$ = NULL;
    bool IndexOutOfBoundsException::live$ = false;

    jclass IndexOutOfBoundsException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IndexOutOfBoundsException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IndexOutOfBoundsException::IndexOutOfBoundsException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    IndexOutOfBoundsException::IndexOutOfBoundsException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IndexOutOfBoundsException__methods_[] = {
      DECLARE_METHOD(t_IndexOutOfBoundsException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IndexOutOfBoundsException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(IndexOutOfBoundsException)[] = {
      { Py_tp_methods, t_IndexOutOfBoundsException__methods_ },
      { Py_tp_init, (void *) t_IndexOutOfBoundsException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(IndexOutOfBoundsException)[] = {
      &PY_TYPE_DEF(::java::lang::RuntimeException),
      NULL
    };

    DEFINE_TYPE(IndexOutOfBoundsException, t_IndexOutOfBoundsException, IndexOutOfBoundsException);

    void t_IndexOutOfBoundsException::install(PyObject *module)
    {
      installType(&PY_TYPE(IndexOutOfBoundsException), &PY_TYPE_DEF(IndexOutOfBoundsException), module, "IndexOutOfBoundsException", 0);
    }

    void t_IndexOutOfBoundsException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutOfBoundsException), "class_", make_descriptor(IndexOutOfBoundsException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutOfBoundsException), "wrapfn_", make_descriptor(t_IndexOutOfBoundsException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutOfBoundsException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IndexOutOfBoundsException::initializeClass, 1)))
        return NULL;
      return t_IndexOutOfBoundsException::wrap_Object(IndexOutOfBoundsException(((t_IndexOutOfBoundsException *) arg)->object.this$));
    }
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IndexOutOfBoundsException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IndexOutOfBoundsException object((jobject) NULL);

          INT_CALL(object = IndexOutOfBoundsException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOutOfBoundsException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexOutOfBoundsException(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/GermanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *GermanStemmer::class$ = NULL;
        jmethodID *GermanStemmer::mids$ = NULL;
        bool GermanStemmer::live$ = false;

        jclass GermanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/GermanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GermanStemmer::GermanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean GermanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint GermanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean GermanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args);

        static PyMethodDef t_GermanStemmer__methods_[] = {
          DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GermanStemmer)[] = {
          { Py_tp_methods, t_GermanStemmer__methods_ },
          { Py_tp_init, (void *) t_GermanStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GermanStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(GermanStemmer, t_GermanStemmer, GermanStemmer);

        void t_GermanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(GermanStemmer), &PY_TYPE_DEF(GermanStemmer), module, "GermanStemmer", 0);
        }

        void t_GermanStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "class_", make_descriptor(GermanStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
            return NULL;
          return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
        }
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GermanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
        {
          GermanStemmer object((jobject) NULL);

          INT_CALL(object = GermanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(GermanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(GermanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(GermanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishAnalyzer::class$ = NULL;
          jmethodID *FinnishAnalyzer::mids$ = NULL;
          bool FinnishAnalyzer::live$ = false;
          ::java::lang::String *FinnishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FinnishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishAnalyzer::FinnishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet FinnishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data);
          static PyGetSetDef t_FinnishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FinnishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FinnishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FinnishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FinnishAnalyzer)[] = {
            { Py_tp_methods, t_FinnishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_FinnishAnalyzer_init_ },
            { Py_tp_getset, t_FinnishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FinnishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(FinnishAnalyzer, t_FinnishAnalyzer, FinnishAnalyzer);

          void t_FinnishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishAnalyzer), &PY_TYPE_DEF(FinnishAnalyzer), module, "FinnishAnalyzer", 0);
          }

          void t_FinnishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishAnalyzer), "class_", make_descriptor(FinnishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishAnalyzer), "wrapfn_", make_descriptor(t_FinnishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FinnishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FinnishAnalyzer::wrap_Object(FinnishAnalyzer(((t_FinnishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FinnishAnalyzer object((jobject) NULL);

                INT_CALL(object = FinnishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fi::FinnishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocIDMerger$Sub.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocIDMerger$Sub::class$ = NULL;
        jmethodID *DocIDMerger$Sub::mids$ = NULL;
        jfieldID *DocIDMerger$Sub::fids$ = NULL;
        bool DocIDMerger$Sub::live$ = false;

        jclass DocIDMerger$Sub::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocIDMerger$Sub");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7fb6b32cb815acb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergeState$DocMap;)V");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_mappedDocID] = env->getFieldID(cls, "mappedDocID", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIDMerger$Sub::DocIDMerger$Sub(const ::org::apache::lucene::index::MergeState$DocMap & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7fb6b32cb815acb, a0.this$)) {}

        jint DocIDMerger$Sub::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint DocIDMerger$Sub::_get_mappedDocID() const
        {
          return env->getIntField(this$, fids$[fid_mappedDocID]);
        }

        void DocIDMerger$Sub::_set_mappedDocID(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mappedDocID], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocIDMerger$Sub_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIDMerger$Sub_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIDMerger$Sub_of_(t_DocIDMerger$Sub *self, PyObject *args);
        static int t_DocIDMerger$Sub_init_(t_DocIDMerger$Sub *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIDMerger$Sub_nextDoc(t_DocIDMerger$Sub *self);
        static PyObject *t_DocIDMerger$Sub_get__mappedDocID(t_DocIDMerger$Sub *self, void *data);
        static int t_DocIDMerger$Sub_set__mappedDocID(t_DocIDMerger$Sub *self, PyObject *arg, void *data);

        static PyObject *t_DocIDMerger$Sub_get__parameters_(t_DocIDMerger$Sub *self, void *data);
        static PyGetSetDef t_DocIDMerger$Sub__fields_[] = {
          DECLARE_GETSET_FIELD(t_DocIDMerger$Sub, mappedDocID),
          DECLARE_GET_FIELD(t_DocIDMerger$Sub, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIDMerger$Sub__methods_[] = {
          DECLARE_METHOD(t_DocIDMerger$Sub, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIDMerger$Sub, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIDMerger$Sub, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocIDMerger$Sub, nextDoc, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIDMerger$Sub)[] = {
          { Py_tp_methods, t_DocIDMerger$Sub__methods_ },
          { Py_tp_init, (void *) t_DocIDMerger$Sub_init_ },
          { Py_tp_getset, t_DocIDMerger$Sub__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIDMerger$Sub)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIDMerger$Sub, t_DocIDMerger$Sub, DocIDMerger$Sub);
        PyObject *t_DocIDMerger$Sub::wrap_Object(const DocIDMerger$Sub& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocIDMerger$Sub::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocIDMerger$Sub *self = (t_DocIDMerger$Sub *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocIDMerger$Sub::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocIDMerger$Sub::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocIDMerger$Sub *self = (t_DocIDMerger$Sub *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocIDMerger$Sub::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIDMerger$Sub), &PY_TYPE_DEF(DocIDMerger$Sub), module, "DocIDMerger$Sub", 0);
        }

        void t_DocIDMerger$Sub::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger$Sub), "class_", make_descriptor(DocIDMerger$Sub::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger$Sub), "wrapfn_", make_descriptor(t_DocIDMerger$Sub::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger$Sub), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIDMerger$Sub_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIDMerger$Sub::initializeClass, 1)))
            return NULL;
          return t_DocIDMerger$Sub::wrap_Object(DocIDMerger$Sub(((t_DocIDMerger$Sub *) arg)->object.this$));
        }
        static PyObject *t_DocIDMerger$Sub_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIDMerger$Sub::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocIDMerger$Sub_of_(t_DocIDMerger$Sub *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DocIDMerger$Sub_init_(t_DocIDMerger$Sub *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergeState$DocMap a0((jobject) NULL);
          DocIDMerger$Sub object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState$DocMap::initializeClass, &a0))
          {
            INT_CALL(object = DocIDMerger$Sub(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIDMerger$Sub_nextDoc(t_DocIDMerger$Sub *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyLong_FromLong((long) result);
        }
        static PyObject *t_DocIDMerger$Sub_get__parameters_(t_DocIDMerger$Sub *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DocIDMerger$Sub_get__mappedDocID(t_DocIDMerger$Sub *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mappedDocID());
          return PyLong_FromLong((long) value);
        }
        static int t_DocIDMerger$Sub_set__mappedDocID(t_DocIDMerger$Sub *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mappedDocID(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mappedDocID", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MathUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MathUtil::class$ = NULL;
        jmethodID *MathUtil::mids$ = NULL;
        bool MathUtil::live$ = false;

        jclass MathUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MathUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acosh_d089f34703408a66] = env->getStaticMethodID(cls, "acosh", "(D)D");
            mids$[mid_asinh_d089f34703408a66] = env->getStaticMethodID(cls, "asinh", "(D)D");
            mids$[mid_atanh_d089f34703408a66] = env->getStaticMethodID(cls, "atanh", "(D)D");
            mids$[mid_gcd_3f3333a84e3e6855] = env->getStaticMethodID(cls, "gcd", "(JJ)J");
            mids$[mid_log_990b512583b70d91] = env->getStaticMethodID(cls, "log", "(DD)D");
            mids$[mid_log_9a645e7bdf1af4c4] = env->getStaticMethodID(cls, "log", "(JI)I");
            mids$[mid_sumRelativeErrorBound_f3ddedc0b6f18620] = env->getStaticMethodID(cls, "sumRelativeErrorBound", "(I)D");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble MathUtil::acosh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_acosh_d089f34703408a66], a0);
        }

        jdouble MathUtil::asinh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asinh_d089f34703408a66], a0);
        }

        jdouble MathUtil::atanh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_atanh_d089f34703408a66], a0);
        }

        jlong MathUtil::gcd(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_gcd_3f3333a84e3e6855], a0, a1);
        }

        jdouble MathUtil::log(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_log_990b512583b70d91], a0, a1);
        }

        jint MathUtil::log(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_log_9a645e7bdf1af4c4], a0, a1);
        }

        jdouble MathUtil::sumRelativeErrorBound(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sumRelativeErrorBound_f3ddedc0b6f18620], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_sumRelativeErrorBound(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_MathUtil__methods_[] = {
          DECLARE_METHOD(t_MathUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, acosh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, asinh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, atanh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, gcd, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, log, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, sumRelativeErrorBound, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MathUtil)[] = {
          { Py_tp_methods, t_MathUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MathUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MathUtil, t_MathUtil, MathUtil);

        void t_MathUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(MathUtil), &PY_TYPE_DEF(MathUtil), module, "MathUtil", 0);
        }

        void t_MathUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MathUtil), "class_", make_descriptor(MathUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MathUtil), "wrapfn_", make_descriptor(t_MathUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MathUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MathUtil::initializeClass, 1)))
            return NULL;
          return t_MathUtil::wrap_Object(MathUtil(((t_MathUtil *) arg)->object.this$));
        }
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MathUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::acosh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "acosh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::asinh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asinh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::atanh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "atanh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::gcd(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "gcd", args);
          return NULL;
        }

        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jdouble a0;
              jdouble a1;
              jdouble result;

              if (!parseArgs(args, "DD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jlong a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "log", args);
          return NULL;
        }

        static PyObject *t_MathUtil_sumRelativeErrorBound(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::sumRelativeErrorBound(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sumRelativeErrorBound", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValues::class$ = NULL;
        jmethodID *DocValues::mids$ = NULL;
        bool DocValues::live$ = false;

        jclass DocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_emptyBinary_4d625ef45d023867] = env->getStaticMethodID(cls, "emptyBinary", "()Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_emptyNumeric_7b642e3feba120e8] = env->getStaticMethodID(cls, "emptyNumeric", "()Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_emptySorted_b7615dcd2222f4c9] = env->getStaticMethodID(cls, "emptySorted", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_emptySortedNumeric_dc390c4d68dba042] = env->getStaticMethodID(cls, "emptySortedNumeric", "()Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_emptySortedSet_cc5882347cd85c5c] = env->getStaticMethodID(cls, "emptySortedSet", "()Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getBinary_fac51ed8f4aae005] = env->getStaticMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getNumeric_92126434173e7173] = env->getStaticMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_b9985cedc3e7c45b] = env->getStaticMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_e2457ebf1ffe7b4d] = env->getStaticMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_5860040e18aadaea] = env->getStaticMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_isCacheable_38b06276cde489f7] = env->getStaticMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;[Ljava/lang/String;)Z");
            mids$[mid_singleton_1d51ab65d5dc10d1] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/SortedDocValues;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_17758b2013b63c29] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/NumericDocValues;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_unwrapSingleton_efdfd39d2a7986a0] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_unwrapSingleton_d3736f1e012a5b62] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedSetDocValues;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::emptyBinary()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyBinary_4d625ef45d023867]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::emptyNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyNumeric_7b642e3feba120e8]));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::emptySorted()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySorted_b7615dcd2222f4c9]));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::emptySortedNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedNumeric_dc390c4d68dba042]));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::emptySortedSet()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_cc5882347cd85c5c]));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::getBinary(const ::org::apache::lucene::index::LeafReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinary_fac51ed8f4aae005], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::getNumeric(const ::org::apache::lucene::index::LeafReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumeric_92126434173e7173], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::getSorted(const ::org::apache::lucene::index::LeafReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSorted_b9985cedc3e7c45b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::getSortedNumeric(const ::org::apache::lucene::index::LeafReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumeric_e2457ebf1ffe7b4d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::getSortedSet(const ::org::apache::lucene::index::LeafReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSet_5860040e18aadaea], a0.this$, a1.this$));
        }

        jboolean DocValues::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isCacheable_38b06276cde489f7], a0.this$, a1.this$);
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::singleton(const ::org::apache::lucene::index::SortedDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_1d51ab65d5dc10d1], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::singleton(const ::org::apache::lucene::index::NumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_17758b2013b63c29], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_efdfd39d2a7986a0], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedSetDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_d3736f1e012a5b62], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type);
        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySorted(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type);
        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_isCacheable(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValues__methods_[] = {
          DECLARE_METHOD(t_DocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyBinary, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySorted, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedSet, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getBinary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSorted, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, isCacheable, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, singleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingleton, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValues)[] = {
          { Py_tp_methods, t_DocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValues, t_DocValues, DocValues);

        void t_DocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValues), &PY_TYPE_DEF(DocValues), module, "DocValues", 0);
        }

        void t_DocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValues), "class_", make_descriptor(DocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValues), "wrapfn_", make_descriptor(t_DocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValues::initializeClass, 1)))
            return NULL;
          return t_DocValues::wrap_Object(DocValues(((t_DocValues *) arg)->object.this$));
        }
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type)
        {
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyBinary());
          return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyNumeric());
          return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySorted(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySorted());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedNumeric());
          return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedSet());
          return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getBinary(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinary", args);
          return NULL;
        }

        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getNumeric(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSorted(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSorted", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedNumeric(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedSet(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSet", args);
          return NULL;
        }

        static PyObject *t_DocValues_isCacheable(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k[s", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::isCacheable(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isCacheable", args);
          return NULL;
        }

        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::NumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "singleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "unwrapSingleton", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *DummyQueryNodeBuilder::class$ = NULL;
              jmethodID *DummyQueryNodeBuilder::mids$ = NULL;
              bool DummyQueryNodeBuilder::live$ = false;

              jclass DummyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_f6da5efc526c39e2] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DummyQueryNodeBuilder::DummyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::TermQuery DummyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_f6da5efc526c39e2], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_DummyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_DummyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(DummyQueryNodeBuilder)[] = {
                { Py_tp_methods, t_DummyQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_DummyQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(DummyQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(DummyQueryNodeBuilder, t_DummyQueryNodeBuilder, DummyQueryNodeBuilder);

              void t_DummyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(DummyQueryNodeBuilder), &PY_TYPE_DEF(DummyQueryNodeBuilder), module, "DummyQueryNodeBuilder", 0);
              }

              void t_DummyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(DummyQueryNodeBuilder), "class_", make_descriptor(DummyQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DummyQueryNodeBuilder), "wrapfn_", make_descriptor(t_DummyQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DummyQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DummyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_DummyQueryNodeBuilder::wrap_Object(DummyQueryNodeBuilder(((t_DummyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DummyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                DummyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = DummyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatRange::class$ = NULL;
        jmethodID *FloatRange::mids$ = NULL;
        bool FloatRange::live$ = false;
        jint FloatRange::BYTES = (jint) 0;

        jclass FloatRange::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatRange");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_591dcbe784ecff7c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[F[F)V");
            mids$[mid_getMax_384f078ef4b8f931] = env->getMethodID(cls, "getMax", "(I)F");
            mids$[mid_getMin_384f078ef4b8f931] = env->getMethodID(cls, "getMin", "(I)F");
            mids$[mid_newContainsQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newContainsQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newCrossesQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newCrossesQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newIntersectsQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newIntersectsQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newWithinQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newWithinQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRangeValues_890c72b2ae4788a0] = env->getMethodID(cls, "setRangeValues", "([F[F)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatRange::FloatRange(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_591dcbe784ecff7c, a0.this$, a1.this$, a2.this$)) {}

        jfloat FloatRange::getMax(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMax_384f078ef4b8f931], a0);
        }

        jfloat FloatRange::getMin(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMin_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::search::Query FloatRange::newContainsQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newContainsQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query FloatRange::newCrossesQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newCrossesQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query FloatRange::newIntersectsQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newIntersectsQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query FloatRange::newWithinQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newWithinQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        void FloatRange::setRangeValues(const JArray< jfloat > & a0, const JArray< jfloat > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRangeValues_890c72b2ae4788a0], a0.this$, a1.this$);
        }

        ::java::lang::String FloatRange::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatRange_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatRange_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatRange_init_(t_FloatRange *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatRange_getMax(t_FloatRange *self, PyObject *arg);
        static PyObject *t_FloatRange_getMin(t_FloatRange *self, PyObject *arg);
        static PyObject *t_FloatRange_newContainsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatRange_newCrossesQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatRange_newIntersectsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatRange_newWithinQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatRange_setRangeValues(t_FloatRange *self, PyObject *args);
        static PyObject *t_FloatRange_toString(t_FloatRange *self, PyObject *args);

        static PyMethodDef t_FloatRange__methods_[] = {
          DECLARE_METHOD(t_FloatRange, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, getMax, METH_O),
          DECLARE_METHOD(t_FloatRange, getMin, METH_O),
          DECLARE_METHOD(t_FloatRange, newContainsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, newCrossesQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, newIntersectsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, newWithinQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatRange, setRangeValues, METH_VARARGS),
          DECLARE_METHOD(t_FloatRange, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatRange)[] = {
          { Py_tp_methods, t_FloatRange__methods_ },
          { Py_tp_init, (void *) t_FloatRange_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatRange)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(FloatRange, t_FloatRange, FloatRange);

        void t_FloatRange::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatRange), &PY_TYPE_DEF(FloatRange), module, "FloatRange", 0);
        }

        void t_FloatRange::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRange), "class_", make_descriptor(FloatRange::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRange), "wrapfn_", make_descriptor(t_FloatRange::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRange), "boxfn_", make_descriptor(boxObject));
          env->getClass(FloatRange::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRange), "BYTES", make_descriptor(FloatRange::BYTES));
        }

        static PyObject *t_FloatRange_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatRange::initializeClass, 1)))
            return NULL;
          return t_FloatRange::wrap_Object(FloatRange(((t_FloatRange *) arg)->object.this$));
        }
        static PyObject *t_FloatRange_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatRange::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatRange_init_(t_FloatRange *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          FloatRange object((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            INT_CALL(object = FloatRange(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatRange_getMax(t_FloatRange *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_FloatRange_getMin(t_FloatRange *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_FloatRange_newContainsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatRange::newContainsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newContainsQuery", args);
          return NULL;
        }

        static PyObject *t_FloatRange_newCrossesQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatRange::newCrossesQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCrossesQuery", args);
          return NULL;
        }

        static PyObject *t_FloatRange_newIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatRange::newIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newIntersectsQuery", args);
          return NULL;
        }

        static PyObject *t_FloatRange_newWithinQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatRange::newWithinQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newWithinQuery", args);
          return NULL;
        }

        static PyObject *t_FloatRange_setRangeValues(t_FloatRange *self, PyObject *args)
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(self->object.setRangeValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRangeValues", args);
          return NULL;
        }

        static PyObject *t_FloatRange_toString(t_FloatRange *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FloatRange), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShapeField$DecodedTriangle$TYPE.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/ShapeField$DecodedTriangle$TYPE.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShapeField$DecodedTriangle$TYPE::class$ = NULL;
        jmethodID *ShapeField$DecodedTriangle$TYPE::mids$ = NULL;
        bool ShapeField$DecodedTriangle$TYPE::live$ = false;
        ShapeField$DecodedTriangle$TYPE *ShapeField$DecodedTriangle$TYPE::LINE = NULL;
        ShapeField$DecodedTriangle$TYPE *ShapeField$DecodedTriangle$TYPE::POINT = NULL;
        ShapeField$DecodedTriangle$TYPE *ShapeField$DecodedTriangle$TYPE::TRIANGLE = NULL;

        jclass ShapeField$DecodedTriangle$TYPE::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShapeField$DecodedTriangle$TYPE");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_5ba45278d333a3c6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;");
            mids$[mid_values_866f89441100cb9d] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            LINE = new ShapeField$DecodedTriangle$TYPE(env->getStaticObjectField(cls, "LINE", "Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;"));
            POINT = new ShapeField$DecodedTriangle$TYPE(env->getStaticObjectField(cls, "POINT", "Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;"));
            TRIANGLE = new ShapeField$DecodedTriangle$TYPE(env->getStaticObjectField(cls, "TRIANGLE", "Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShapeField$DecodedTriangle$TYPE ShapeField$DecodedTriangle$TYPE::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ShapeField$DecodedTriangle$TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ba45278d333a3c6], a0.this$));
        }

        JArray< ShapeField$DecodedTriangle$TYPE > ShapeField$DecodedTriangle$TYPE::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ShapeField$DecodedTriangle$TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_866f89441100cb9d]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_of_(t_ShapeField$DecodedTriangle$TYPE *self, PyObject *args);
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_values(PyTypeObject *type);
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_get__parameters_(t_ShapeField$DecodedTriangle$TYPE *self, void *data);
        static PyGetSetDef t_ShapeField$DecodedTriangle$TYPE__fields_[] = {
          DECLARE_GET_FIELD(t_ShapeField$DecodedTriangle$TYPE, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShapeField$DecodedTriangle$TYPE__methods_[] = {
          DECLARE_METHOD(t_ShapeField$DecodedTriangle$TYPE, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle$TYPE, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle$TYPE, of_, METH_VARARGS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle$TYPE, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle$TYPE, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ShapeField$DecodedTriangle$TYPE)[] = {
          { Py_tp_methods, t_ShapeField$DecodedTriangle$TYPE__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ShapeField$DecodedTriangle$TYPE__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ShapeField$DecodedTriangle$TYPE)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(ShapeField$DecodedTriangle$TYPE, t_ShapeField$DecodedTriangle$TYPE, ShapeField$DecodedTriangle$TYPE);
        PyObject *t_ShapeField$DecodedTriangle$TYPE::wrap_Object(const ShapeField$DecodedTriangle$TYPE& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ShapeField$DecodedTriangle$TYPE::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ShapeField$DecodedTriangle$TYPE *self = (t_ShapeField$DecodedTriangle$TYPE *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ShapeField$DecodedTriangle$TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ShapeField$DecodedTriangle$TYPE::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ShapeField$DecodedTriangle$TYPE *self = (t_ShapeField$DecodedTriangle$TYPE *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ShapeField$DecodedTriangle$TYPE::install(PyObject *module)
        {
          installType(&PY_TYPE(ShapeField$DecodedTriangle$TYPE), &PY_TYPE_DEF(ShapeField$DecodedTriangle$TYPE), module, "ShapeField$DecodedTriangle$TYPE", 0);
        }

        void t_ShapeField$DecodedTriangle$TYPE::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "class_", make_descriptor(ShapeField$DecodedTriangle$TYPE::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "wrapfn_", make_descriptor(t_ShapeField$DecodedTriangle$TYPE::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "boxfn_", make_descriptor(boxObject));
          env->getClass(ShapeField$DecodedTriangle$TYPE::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "LINE", make_descriptor(t_ShapeField$DecodedTriangle$TYPE::wrap_Object(*ShapeField$DecodedTriangle$TYPE::LINE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "POINT", make_descriptor(t_ShapeField$DecodedTriangle$TYPE::wrap_Object(*ShapeField$DecodedTriangle$TYPE::POINT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle$TYPE), "TRIANGLE", make_descriptor(t_ShapeField$DecodedTriangle$TYPE::wrap_Object(*ShapeField$DecodedTriangle$TYPE::TRIANGLE)));
        }

        static PyObject *t_ShapeField$DecodedTriangle$TYPE_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShapeField$DecodedTriangle$TYPE::initializeClass, 1)))
            return NULL;
          return t_ShapeField$DecodedTriangle$TYPE::wrap_Object(ShapeField$DecodedTriangle$TYPE(((t_ShapeField$DecodedTriangle$TYPE *) arg)->object.this$));
        }
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShapeField$DecodedTriangle$TYPE::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ShapeField$DecodedTriangle$TYPE_of_(t_ShapeField$DecodedTriangle$TYPE *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ShapeField$DecodedTriangle$TYPE_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ShapeField$DecodedTriangle$TYPE result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE::valueOf(a0));
            return t_ShapeField$DecodedTriangle$TYPE::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_ShapeField$DecodedTriangle$TYPE_values(PyTypeObject *type)
        {
          JArray< ShapeField$DecodedTriangle$TYPE > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE::values());
          return JArray<jobject>(result.this$).wrap(t_ShapeField$DecodedTriangle$TYPE::wrap_jobject);
        }
        static PyObject *t_ShapeField$DecodedTriangle$TYPE_get__parameters_(t_ShapeField$DecodedTriangle$TYPE *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester::class$ = NULL;
            jmethodID *BlendedInfixSuggester::mids$ = NULL;
            bool BlendedInfixSuggester::live$ = false;
            jint BlendedInfixSuggester::DEFAULT_NUM_FACTOR = (jint) 0;

            jclass BlendedInfixSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b06573e2fea5d93f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_177537284cd6b49f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;IZ)V");
                mids$[mid_init$_85c067f8afeb5369] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;ILorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;ILjava/lang/Double;ZZZ)V");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_lookup_46ccd4df2ff3d83e] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/BooleanQuery;IZZ)Ljava/util/List;");
                mids$[mid_lookup_e54afc1bb977fe8b] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Map;IZZ)Ljava/util/List;");
                mids$[mid_lookup_7723ef64fb9167ab] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;IZZ)Ljava/util/List;");
                mids$[mid_getTextFieldType_cc3ee11125b99c9b] = env->getMethodID(cls, "getTextFieldType", "()Lorg/apache/lucene/document/FieldType;");
                mids$[mid_createResults_8928817123803a4e] = env->getMethodID(cls, "createResults", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopFieldDocs;ILjava/lang/CharSequence;ZLjava/util/Set;Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_calculateCoefficient_f3ddedc0b6f18620] = env->getMethodID(cls, "calculateCoefficient", "(I)D");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_NUM_FACTOR = env->getStaticIntField(cls, "DEFAULT_NUM_FACTOR");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_b06573e2fea5d93f, a0.this$, a1.this$)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::analysis::Analyzer & a2, jint a3, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a4, jint a5, jboolean a6) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_177537284cd6b49f, a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6)) {}

            BlendedInfixSuggester::BlendedInfixSuggester(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::analysis::Analyzer & a2, jint a3, const ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType & a4, jint a5, const ::java::lang::Double & a6, jboolean a7, jboolean a8, jboolean a9) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester(env->newObject(initializeClass, &mids$, mid_init$_85c067f8afeb5369, a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6.this$, a7, a8, a9)) {}

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::search::BooleanQuery & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_46ccd4df2ff3d83e], a0.this$, a1.this$, a2, a3, a4));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Map & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_e54afc1bb977fe8b], a0.this$, a1.this$, a2, a3, a4));
            }

            ::java::util::List BlendedInfixSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2, jboolean a3, jboolean a4) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_7723ef64fb9167ab], a0.this$, a1.this$, a2, a3, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args);

            static PyMethodDef t_BlendedInfixSuggester__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BlendedInfixSuggester)[] = {
              { Py_tp_methods, t_BlendedInfixSuggester__methods_ },
              { Py_tp_init, (void *) t_BlendedInfixSuggester_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BlendedInfixSuggester)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::analyzing::AnalyzingInfixSuggester),
              NULL
            };

            DEFINE_TYPE(BlendedInfixSuggester, t_BlendedInfixSuggester, BlendedInfixSuggester);

            void t_BlendedInfixSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester), &PY_TYPE_DEF(BlendedInfixSuggester), module, "BlendedInfixSuggester", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester), "BlenderType", make_descriptor(&PY_TYPE_DEF(BlendedInfixSuggester$BlenderType)));
            }

            void t_BlendedInfixSuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester), "class_", make_descriptor(BlendedInfixSuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester), "wrapfn_", make_descriptor(t_BlendedInfixSuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester), "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester), "DEFAULT_NUM_FACTOR", make_descriptor(BlendedInfixSuggester::DEFAULT_NUM_FACTOR));
            }

            static PyObject *t_BlendedInfixSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester::wrap_Object(BlendedInfixSuggester(((t_BlendedInfixSuggester *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BlendedInfixSuggester_init_(t_BlendedInfixSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  jint a3;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a4((jobject) NULL);
                  PyTypeObject **p4;
                  jint a5;
                  jboolean a6;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkIKIZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a5, &a6))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 10:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  jint a3;
                  ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType a4((jobject) NULL);
                  PyTypeObject **p4;
                  jint a5;
                  ::java::lang::Double a6((jobject) NULL);
                  jboolean a7;
                  jboolean a8;
                  jboolean a9;
                  BlendedInfixSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkkIKIOZZZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::initializeClass, ::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::suggest::analyzing::t_BlendedInfixSuggester$BlenderType::parameters_, &a5, &a6, &a7, &a8, &a9))
                  {
                    INT_CALL(object = BlendedInfixSuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BlendedInfixSuggester_lookup(t_BlendedInfixSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 5:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::org::apache::lucene::search::BooleanQuery a1((jobject) NULL);
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OkIZZ", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::search::BooleanQuery::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Map a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", ::java::lang::PY_TYPE(CharSequence), ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  jboolean a3;
                  jboolean a4;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKIZZ", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3, a4));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(PY_TYPE(BlendedInfixSuggester), (PyObject *) self, "lookup", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TieredMergePolicy::class$ = NULL;
        jmethodID *TieredMergePolicy::mids$ = NULL;
        bool TieredMergePolicy::live$ = false;
        jdouble TieredMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;

        jclass TieredMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TieredMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getDeletesPctAllowed_8c74b787998ce4bc] = env->getMethodID(cls, "getDeletesPctAllowed", "()D");
            mids$[mid_getFloorSegmentMB_8c74b787998ce4bc] = env->getMethodID(cls, "getFloorSegmentMB", "()D");
            mids$[mid_getForceMergeDeletesPctAllowed_8c74b787998ce4bc] = env->getMethodID(cls, "getForceMergeDeletesPctAllowed", "()D");
            mids$[mid_getMaxMergeAtOnce_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxMergeAtOnce", "()I");
            mids$[mid_getMaxMergeAtOnceExplicit_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxMergeAtOnceExplicit", "()I");
            mids$[mid_getMaxMergedSegmentMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxMergedSegmentMB", "()D");
            mids$[mid_getSegmentsPerTier_8c74b787998ce4bc] = env->getMethodID(cls, "getSegmentsPerTier", "()D");
            mids$[mid_setDeletesPctAllowed_3c8aa5d95a1d3978] = env->getMethodID(cls, "setDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setFloorSegmentMB_3c8aa5d95a1d3978] = env->getMethodID(cls, "setFloorSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setForceMergeDeletesPctAllowed_3c8aa5d95a1d3978] = env->getMethodID(cls, "setForceMergeDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnce_ac8920cf4ab713fd] = env->getMethodID(cls, "setMaxMergeAtOnce", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnceExplicit_ac8920cf4ab713fd] = env->getMethodID(cls, "setMaxMergeAtOnceExplicit", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergedSegmentMB_3c8aa5d95a1d3978] = env->getMethodID(cls, "setMaxMergedSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setSegmentsPerTier_3c8aa5d95a1d3978] = env->getMethodID(cls, "setSegmentsPerTier", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_score_4a4a20051827e2de] = env->getMethodID(cls, "score", "(Ljava/util/List;ZLjava/util/Map;)Lorg/apache/lucene/index/TieredMergePolicy$MergeScore;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TieredMergePolicy::TieredMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        jdouble TieredMergePolicy::getDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getDeletesPctAllowed_8c74b787998ce4bc]);
        }

        jdouble TieredMergePolicy::getFloorSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getFloorSegmentMB_8c74b787998ce4bc]);
        }

        jdouble TieredMergePolicy::getForceMergeDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeDeletesPctAllowed_8c74b787998ce4bc]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnce() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnce_9972fcc56b44e79d]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnceExplicit() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnceExplicit_9972fcc56b44e79d]);
        }

        jdouble TieredMergePolicy::getMaxMergedSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergedSegmentMB_8c74b787998ce4bc]);
        }

        jdouble TieredMergePolicy::getSegmentsPerTier() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSegmentsPerTier_8c74b787998ce4bc]);
        }

        TieredMergePolicy TieredMergePolicy::setDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setDeletesPctAllowed_3c8aa5d95a1d3978], a0));
        }

        TieredMergePolicy TieredMergePolicy::setFloorSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setFloorSegmentMB_3c8aa5d95a1d3978], a0));
        }

        TieredMergePolicy TieredMergePolicy::setForceMergeDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setForceMergeDeletesPctAllowed_3c8aa5d95a1d3978], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnce(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnce_ac8920cf4ab713fd], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnceExplicit(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnceExplicit_ac8920cf4ab713fd], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergedSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergedSegmentMB_3c8aa5d95a1d3978], a0));
        }

        TieredMergePolicy TieredMergePolicy::setSegmentsPerTier(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setSegmentsPerTier_3c8aa5d95a1d3978], a0));
        }

        ::java::lang::String TieredMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_getDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_setDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_get__deletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__deletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_TieredMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, deletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, floorSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, forceMergeDeletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnce),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnceExplicit),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergedSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, segmentsPerTier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TieredMergePolicy__methods_[] = {
          DECLARE_METHOD(t_TieredMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getFloorSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getForceMergeDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnce, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnceExplicit, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergedSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getSegmentsPerTier, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, setDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setFloorSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setForceMergeDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnce, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnceExplicit, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergedSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setSegmentsPerTier, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TieredMergePolicy)[] = {
          { Py_tp_methods, t_TieredMergePolicy__methods_ },
          { Py_tp_init, (void *) t_TieredMergePolicy_init_ },
          { Py_tp_getset, t_TieredMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TieredMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergePolicy),
          NULL
        };

        DEFINE_TYPE(TieredMergePolicy, t_TieredMergePolicy, TieredMergePolicy);

        void t_TieredMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(TieredMergePolicy), &PY_TYPE_DEF(TieredMergePolicy), module, "TieredMergePolicy", 0);
        }

        void t_TieredMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TieredMergePolicy), "class_", make_descriptor(TieredMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TieredMergePolicy), "wrapfn_", make_descriptor(t_TieredMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TieredMergePolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(TieredMergePolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TieredMergePolicy), "DEFAULT_NO_CFS_RATIO", make_descriptor(TieredMergePolicy::DEFAULT_NO_CFS_RATIO));
        }

        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TieredMergePolicy::initializeClass, 1)))
            return NULL;
          return t_TieredMergePolicy::wrap_Object(TieredMergePolicy(((t_TieredMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TieredMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          TieredMergePolicy object((jobject) NULL);

          INT_CALL(object = TieredMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TieredMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_getDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnce());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnceExplicit());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_setDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setFloorSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloorSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setForceMergeDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnce(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnce", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnceExplicit(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnceExplicit", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergedSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergedSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setSegmentsPerTier(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSegmentsPerTier", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TieredMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TieredMergePolicy_get__deletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__deletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "deletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setFloorSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floorSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnce());
          return PyLong_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnce(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnce", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnceExplicit());
          return PyLong_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnceExplicit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnceExplicit", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergedSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergedSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setSegmentsPerTier(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsPerTier", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemmer::class$ = NULL;
          jmethodID *BrazilianStemmer::mids$ = NULL;
          bool BrazilianStemmer::live$ = false;

          jclass BrazilianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_log_db9b55ba01e03e4b] = env->getMethodID(cls, "log", "()Ljava/lang/String;");
              mids$[mid_stem_9bfa75c9f141b67f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemmer::BrazilianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::String BrazilianStemmer::log() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_log_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self);

          static PyMethodDef t_BrazilianStemmer__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, log, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BrazilianStemmer)[] = {
            { Py_tp_methods, t_BrazilianStemmer__methods_ },
            { Py_tp_init, (void *) t_BrazilianStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BrazilianStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BrazilianStemmer, t_BrazilianStemmer, BrazilianStemmer);

          void t_BrazilianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemmer), &PY_TYPE_DEF(BrazilianStemmer), module, "BrazilianStemmer", 0);
          }

          void t_BrazilianStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemmer), "class_", make_descriptor(BrazilianStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemmer), "wrapfn_", make_descriptor(t_BrazilianStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemmer::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemmer::wrap_Object(BrazilianStemmer(((t_BrazilianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BrazilianStemmer object((jobject) NULL);

            INT_CALL(object = BrazilianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.log());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {

          ::java::lang::Class *Lucene86SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene86SegmentInfoFormat::mids$ = NULL;
          bool Lucene86SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene86SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene86SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene86/Lucene86SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ca83998f161c8fae] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;[BLorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene86SegmentInfoFormat::Lucene86SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene86SegmentInfoFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const JArray< jbyte > & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ca83998f161c8fae], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void Lucene86SegmentInfoFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {
          static PyObject *t_Lucene86SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene86SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene86SegmentInfoFormat_init_(t_Lucene86SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene86SegmentInfoFormat_read(t_Lucene86SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene86SegmentInfoFormat_write(t_Lucene86SegmentInfoFormat *self, PyObject *args);

          static PyMethodDef t_Lucene86SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene86SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86SegmentInfoFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86SegmentInfoFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene86SegmentInfoFormat)[] = {
            { Py_tp_methods, t_Lucene86SegmentInfoFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene86SegmentInfoFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene86SegmentInfoFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::SegmentInfoFormat),
            NULL
          };

          DEFINE_TYPE(Lucene86SegmentInfoFormat, t_Lucene86SegmentInfoFormat, Lucene86SegmentInfoFormat);

          void t_Lucene86SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene86SegmentInfoFormat), &PY_TYPE_DEF(Lucene86SegmentInfoFormat), module, "Lucene86SegmentInfoFormat", 0);
          }

          void t_Lucene86SegmentInfoFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86SegmentInfoFormat), "class_", make_descriptor(Lucene86SegmentInfoFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86SegmentInfoFormat), "wrapfn_", make_descriptor(t_Lucene86SegmentInfoFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86SegmentInfoFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene86SegmentInfoFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86SegmentInfoFormat), "SI_EXTENSION", make_descriptor(j2p(*Lucene86SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene86SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene86SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene86SegmentInfoFormat::wrap_Object(Lucene86SegmentInfoFormat(((t_Lucene86SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene86SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene86SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene86SegmentInfoFormat_init_(t_Lucene86SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene86SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene86SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene86SegmentInfoFormat_read(t_Lucene86SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< jbyte > a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ks[Bk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86SegmentInfoFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene86SegmentInfoFormat_write(t_Lucene86SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.write(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86SegmentInfoFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Formatter::class$ = NULL;
          jmethodID *Formatter::mids$ = NULL;
          bool Formatter::live$ = false;

          jclass Formatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Formatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_highlightTerm_89cd75f77d741eb4] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Formatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_89cd75f77d741eb4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args);

          static PyMethodDef t_Formatter__methods_[] = {
            DECLARE_METHOD(t_Formatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Formatter)[] = {
            { Py_tp_methods, t_Formatter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Formatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Formatter, t_Formatter, Formatter);

          void t_Formatter::install(PyObject *module)
          {
            installType(&PY_TYPE(Formatter), &PY_TYPE_DEF(Formatter), module, "Formatter", 0);
          }

          void t_Formatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Formatter), "class_", make_descriptor(Formatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Formatter), "wrapfn_", make_descriptor(t_Formatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Formatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Formatter::initializeClass, 1)))
              return NULL;
            return t_Formatter::wrap_Object(Formatter(((t_Formatter *) arg)->object.this$));
          }
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Formatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType::class$ = NULL;
        jmethodID *FieldType::mids$ = NULL;
        bool FieldType::live$ = false;

        jclass FieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_69d0830063c969b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_docValuesType_c31c90cd64c32335] = env->getMethodID(cls, "docValuesType", "()Lorg/apache/lucene/index/DocValuesType;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_freeze_f2cc1bce94666404] = env->getMethodID(cls, "freeze", "()V");
            mids$[mid_getAttributes_1c3426541413a55d] = env->getMethodID(cls, "getAttributes", "()Ljava/util/Map;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_indexOptions_0d28536417711dd9] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/IndexOptions;");
            mids$[mid_omitNorms_8454bd5aa23fd11e] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_pointDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "pointDimensionCount", "()I");
            mids$[mid_pointIndexDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "pointIndexDimensionCount", "()I");
            mids$[mid_pointNumBytes_9972fcc56b44e79d] = env->getMethodID(cls, "pointNumBytes", "()I");
            mids$[mid_putAttribute_04b762e0ad33dcc5] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setDimensions_438c62480c481c65] = env->getMethodID(cls, "setDimensions", "(II)V");
            mids$[mid_setDimensions_db3e97653d3683f3] = env->getMethodID(cls, "setDimensions", "(III)V");
            mids$[mid_setDocValuesType_ed8de59f4ab7f4c5] = env->getMethodID(cls, "setDocValuesType", "(Lorg/apache/lucene/index/DocValuesType;)V");
            mids$[mid_setIndexOptions_851d3281d7acb151] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/IndexOptions;)V");
            mids$[mid_setOmitNorms_9d72768e8fdce2b7] = env->getMethodID(cls, "setOmitNorms", "(Z)V");
            mids$[mid_setStoreTermVectorOffsets_9d72768e8fdce2b7] = env->getMethodID(cls, "setStoreTermVectorOffsets", "(Z)V");
            mids$[mid_setStoreTermVectorPayloads_9d72768e8fdce2b7] = env->getMethodID(cls, "setStoreTermVectorPayloads", "(Z)V");
            mids$[mid_setStoreTermVectorPositions_9d72768e8fdce2b7] = env->getMethodID(cls, "setStoreTermVectorPositions", "(Z)V");
            mids$[mid_setStoreTermVectors_9d72768e8fdce2b7] = env->getMethodID(cls, "setStoreTermVectors", "(Z)V");
            mids$[mid_setStored_9d72768e8fdce2b7] = env->getMethodID(cls, "setStored", "(Z)V");
            mids$[mid_setTokenized_9d72768e8fdce2b7] = env->getMethodID(cls, "setTokenized", "(Z)V");
            mids$[mid_storeTermVectorOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_8454bd5aa23fd11e] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenized_8454bd5aa23fd11e] = env->getMethodID(cls, "tokenized", "()Z");
            mids$[mid_checkIfFrozen_f2cc1bce94666404] = env->getMethodID(cls, "checkIfFrozen", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType::FieldType() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        FieldType::FieldType(const ::org::apache::lucene::index::IndexableFieldType & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_69d0830063c969b4, a0.this$)) {}

        ::org::apache::lucene::index::DocValuesType FieldType::docValuesType() const
        {
          return ::org::apache::lucene::index::DocValuesType(env->callObjectMethod(this$, mids$[mid_docValuesType_c31c90cd64c32335]));
        }

        jboolean FieldType::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void FieldType::freeze() const
        {
          env->callVoidMethod(this$, mids$[mid_freeze_f2cc1bce94666404]);
        }

        ::java::util::Map FieldType::getAttributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getAttributes_1c3426541413a55d]));
        }

        jint FieldType::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::IndexOptions FieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_0d28536417711dd9]));
        }

        jboolean FieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_8454bd5aa23fd11e]);
        }

        jint FieldType::pointDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_pointDimensionCount_9972fcc56b44e79d]);
        }

        jint FieldType::pointIndexDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_pointIndexDimensionCount_9972fcc56b44e79d]);
        }

        jint FieldType::pointNumBytes() const
        {
          return env->callIntMethod(this$, mids$[mid_pointNumBytes_9972fcc56b44e79d]);
        }

        ::java::lang::String FieldType::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_04b762e0ad33dcc5], a0.this$, a1.this$));
        }

        void FieldType::setDimensions(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setDimensions_438c62480c481c65], a0, a1);
        }

        void FieldType::setDimensions(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setDimensions_db3e97653d3683f3], a0, a1, a2);
        }

        void FieldType::setDocValuesType(const ::org::apache::lucene::index::DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesType_ed8de59f4ab7f4c5], a0.this$);
        }

        void FieldType::setIndexOptions(const ::org::apache::lucene::index::IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_851d3281d7acb151], a0.this$);
        }

        void FieldType::setOmitNorms(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitNorms_9d72768e8fdce2b7], a0);
        }

        void FieldType::setStoreTermVectorOffsets(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorOffsets_9d72768e8fdce2b7], a0);
        }

        void FieldType::setStoreTermVectorPayloads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPayloads_9d72768e8fdce2b7], a0);
        }

        void FieldType::setStoreTermVectorPositions(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPositions_9d72768e8fdce2b7], a0);
        }

        void FieldType::setStoreTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectors_9d72768e8fdce2b7], a0);
        }

        void FieldType::setStored(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStored_9d72768e8fdce2b7], a0);
        }

        void FieldType::setTokenized(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenized_9d72768e8fdce2b7], a0);
        }

        jboolean FieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_8454bd5aa23fd11e]);
        }

        jboolean FieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_8454bd5aa23fd11e]);
        }

        jboolean FieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_8454bd5aa23fd11e]);
        }

        jboolean FieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_8454bd5aa23fd11e]);
        }

        jboolean FieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_8454bd5aa23fd11e]);
        }

        ::java::lang::String FieldType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jboolean FieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldType_docValuesType(t_FieldType *self);
        static PyObject *t_FieldType_equals(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_freeze(t_FieldType *self);
        static PyObject *t_FieldType_getAttributes(t_FieldType *self);
        static PyObject *t_FieldType_hashCode(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_indexOptions(t_FieldType *self);
        static PyObject *t_FieldType_omitNorms(t_FieldType *self);
        static PyObject *t_FieldType_pointDimensionCount(t_FieldType *self);
        static PyObject *t_FieldType_pointIndexDimensionCount(t_FieldType *self);
        static PyObject *t_FieldType_pointNumBytes(t_FieldType *self);
        static PyObject *t_FieldType_putAttribute(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_setDimensions(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_setDocValuesType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self);
        static PyObject *t_FieldType_stored(t_FieldType *self);
        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_tokenized(t_FieldType *self);
        static PyObject *t_FieldType_get__attributes(t_FieldType *self, void *data);
        static PyGetSetDef t_FieldType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldType, attributes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldType__methods_[] = {
          DECLARE_METHOD(t_FieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, docValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, freeze, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, getAttributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, pointDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, pointIndexDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, pointNumBytes, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, setDimensions, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, setDocValuesType, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldType, setOmitNorms, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorOffsets, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPayloads, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPositions, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectors, METH_O),
          DECLARE_METHOD(t_FieldType, setStored, METH_O),
          DECLARE_METHOD(t_FieldType, setTokenized, METH_O),
          DECLARE_METHOD(t_FieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, toString, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldType)[] = {
          { Py_tp_methods, t_FieldType__methods_ },
          { Py_tp_init, (void *) t_FieldType_init_ },
          { Py_tp_getset, t_FieldType__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldType)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldType, t_FieldType, FieldType);

        void t_FieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType), &PY_TYPE_DEF(FieldType), module, "FieldType", 0);
        }

        void t_FieldType::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldType), "class_", make_descriptor(FieldType::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldType), "wrapfn_", make_descriptor(t_FieldType::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldType), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType::initializeClass, 1)))
            return NULL;
          return t_FieldType::wrap_Object(FieldType(((t_FieldType *) arg)->object.this$));
        }
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FieldType object((jobject) NULL);

              INT_CALL(object = FieldType());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::index::IndexableFieldType a0((jobject) NULL);
              FieldType object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0))
              {
                INT_CALL(object = FieldType(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldType_docValuesType(t_FieldType *self)
        {
          ::org::apache::lucene::index::DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesType());
          return ::org::apache::lucene::index::t_DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldType_equals(t_FieldType *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FieldType), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldType_freeze(t_FieldType *self)
        {
          OBJ_CALL(self->object.freeze());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldType_getAttributes(t_FieldType *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldType_hashCode(t_FieldType *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldType), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldType_indexOptions(t_FieldType *self)
        {
          ::org::apache::lucene::index::IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldType_omitNorms(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_pointDimensionCount(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldType_pointIndexDimensionCount(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointIndexDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldType_pointNumBytes(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointNumBytes());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldType_putAttribute(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldType_setDimensions(t_FieldType *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.setDimensions(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.setDimensions(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setDimensions", args);
          return NULL;
        }

        static PyObject *t_FieldType_setDocValuesType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setOmitNorms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOmitNorms", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorOffsets(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorOffsets", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPayloads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPayloads", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPositions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPositions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectors", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStored(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStored", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setTokenized(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenized", arg);
          return NULL;
        }

        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_stored(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FieldType), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldType_tokenized(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_get__attributes(t_FieldType *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetField::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetField::mids$ = NULL;
          jfieldID *SortedSetDocValuesFacetField::fids$ = NULL;
          bool SortedSetDocValuesFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *SortedSetDocValuesFacetField::TYPE = NULL;

          jclass SortedSetDocValuesFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetField::SortedSetDocValuesFacetField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

          ::java::lang::String SortedSetDocValuesFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          ::java::lang::String SortedSetDocValuesFacetField::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data);
          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, dim),
            DECLARE_GET_FIELD(t_SortedSetDocValuesFacetField, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesFacetField__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValuesFacetField)[] = {
            { Py_tp_methods, t_SortedSetDocValuesFacetField__methods_ },
            { Py_tp_init, (void *) t_SortedSetDocValuesFacetField_init_ },
            { Py_tp_getset, t_SortedSetDocValuesFacetField__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedSetDocValuesFacetField)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::document::Field),
            NULL
          };

          DEFINE_TYPE(SortedSetDocValuesFacetField, t_SortedSetDocValuesFacetField, SortedSetDocValuesFacetField);

          void t_SortedSetDocValuesFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetField), &PY_TYPE_DEF(SortedSetDocValuesFacetField), module, "SortedSetDocValuesFacetField", 0);
          }

          void t_SortedSetDocValuesFacetField::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetField), "class_", make_descriptor(SortedSetDocValuesFacetField::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetField), "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetField::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetField), "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetDocValuesFacetField::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesFacetField::TYPE)));
          }

          static PyObject *t_SortedSetDocValuesFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetField::wrap_Object(SortedSetDocValuesFacetField(((t_SortedSetDocValuesFacetField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetField_init_(t_SortedSetDocValuesFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            SortedSetDocValuesFacetField object((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetField(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetField_toString(t_SortedSetDocValuesFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SortedSetDocValuesFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__dim(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesFacetField_get__label(t_SortedSetDocValuesFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader::class$ = NULL;
          jmethodID *CachedOrdinalsReader::mids$ = NULL;
          bool CachedOrdinalsReader::live$ = false;

          jclass CachedOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f7f1bfb29612a625] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;)V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getIndexFieldName_db9b55ba01e03e4b] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_ff225b04fcdc6f32] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader::CachedOrdinalsReader(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_f7f1bfb29612a625, a0.this$)) {}

          ::java::util::Collection CachedOrdinalsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::lang::String CachedOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader CachedOrdinalsReader::getReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_ff225b04fcdc6f32], a0.this$));
          }

          jlong CachedOrdinalsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader_getChildResources(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_get__childResources(t_CachedOrdinalsReader *self, void *data);
          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data);
          static PyGetSetDef t_CachedOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, childResources),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getChildResources, METH_NOARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getReader, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CachedOrdinalsReader)[] = {
            { Py_tp_methods, t_CachedOrdinalsReader__methods_ },
            { Py_tp_init, (void *) t_CachedOrdinalsReader_init_ },
            { Py_tp_getset, t_CachedOrdinalsReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CachedOrdinalsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::OrdinalsReader),
            NULL
          };

          DEFINE_TYPE(CachedOrdinalsReader, t_CachedOrdinalsReader, CachedOrdinalsReader);

          void t_CachedOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader), &PY_TYPE_DEF(CachedOrdinalsReader), module, "CachedOrdinalsReader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader), "CachedOrds", make_descriptor(&PY_TYPE_DEF(CachedOrdinalsReader$CachedOrds)));
          }

          void t_CachedOrdinalsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader), "class_", make_descriptor(CachedOrdinalsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader), "wrapfn_", make_descriptor(t_CachedOrdinalsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader::wrap_Object(CachedOrdinalsReader(((t_CachedOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            CachedOrdinalsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, &a0))
            {
              INT_CALL(object = CachedOrdinalsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader_getChildResources(t_CachedOrdinalsReader *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
          }

          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader_get__childResources(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConcatenateGraphFilterFactory::class$ = NULL;
          jmethodID *ConcatenateGraphFilterFactory::mids$ = NULL;
          bool ConcatenateGraphFilterFactory::live$ = false;
          ::java::lang::String *ConcatenateGraphFilterFactory::NAME = NULL;

          jclass ConcatenateGraphFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getCharacter_5330628b89b7399d] = env->getMethodID(cls, "getCharacter", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Character;)Ljava/lang/Character;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ConcatenateGraphFilterFactory::ConcatenateGraphFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ConcatenateGraphFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConcatenateGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenateGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ConcatenateGraphFilterFactory_init_(t_ConcatenateGraphFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ConcatenateGraphFilterFactory_create(t_ConcatenateGraphFilterFactory *self, PyObject *args);

          static PyMethodDef t_ConcatenateGraphFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ConcatenateGraphFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcatenateGraphFilterFactory)[] = {
            { Py_tp_methods, t_ConcatenateGraphFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ConcatenateGraphFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcatenateGraphFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ConcatenateGraphFilterFactory, t_ConcatenateGraphFilterFactory, ConcatenateGraphFilterFactory);

          void t_ConcatenateGraphFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcatenateGraphFilterFactory), &PY_TYPE_DEF(ConcatenateGraphFilterFactory), module, "ConcatenateGraphFilterFactory", 0);
          }

          void t_ConcatenateGraphFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilterFactory), "class_", make_descriptor(ConcatenateGraphFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilterFactory), "wrapfn_", make_descriptor(t_ConcatenateGraphFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ConcatenateGraphFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilterFactory), "NAME", make_descriptor(j2p(*ConcatenateGraphFilterFactory::NAME)));
          }

          static PyObject *t_ConcatenateGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcatenateGraphFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ConcatenateGraphFilterFactory::wrap_Object(ConcatenateGraphFilterFactory(((t_ConcatenateGraphFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ConcatenateGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcatenateGraphFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ConcatenateGraphFilterFactory_init_(t_ConcatenateGraphFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ConcatenateGraphFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ConcatenateGraphFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ConcatenateGraphFilterFactory_create(t_ConcatenateGraphFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/HalfFloatPoint.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *HalfFloatPoint::class$ = NULL;
        jmethodID *HalfFloatPoint::mids$ = NULL;
        bool HalfFloatPoint::live$ = false;
        jint HalfFloatPoint::BYTES = (jint) 0;

        jclass HalfFloatPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/HalfFloatPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6526db32d123c83c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[F)V");
            mids$[mid_decodeDimension_2431569bab1a7ba7] = env->getStaticMethodID(cls, "decodeDimension", "([BI)F");
            mids$[mid_encodeDimension_b1d07bb885aad1fe] = env->getStaticMethodID(cls, "encodeDimension", "(F[BI)V");
            mids$[mid_halfFloatToSortableShort_ed90335319c020d6] = env->getStaticMethodID(cls, "halfFloatToSortableShort", "(F)S");
            mids$[mid_newExactQuery_bb52d4f3f0fb1360] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_2072c8e0fc502353] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;FF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_9d0d4ab95d8653ee] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_263cb7d6a0b161ae] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Query;");
            mids$[mid_nextDown_8c8518d25218b9c5] = env->getStaticMethodID(cls, "nextDown", "(F)F");
            mids$[mid_nextUp_8c8518d25218b9c5] = env->getStaticMethodID(cls, "nextUp", "(F)F");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setFloatValue_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setFloatValues_86d8949a8a13e717] = env->getMethodID(cls, "setFloatValues", "([F)V");
            mids$[mid_sortableShortToHalfFloat_d390d786d4613247] = env->getStaticMethodID(cls, "sortableShortToHalfFloat", "(S)F");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HalfFloatPoint::HalfFloatPoint(const ::java::lang::String & a0, const JArray< jfloat > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6526db32d123c83c, a0.this$, a1.this$)) {}

        jfloat HalfFloatPoint::decodeDimension(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_decodeDimension_2431569bab1a7ba7], a0.this$, a1);
        }

        void HalfFloatPoint::encodeDimension(jfloat a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_b1d07bb885aad1fe], a0, a1.this$, a2);
        }

        jshort HalfFloatPoint::halfFloatToSortableShort(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticShortMethod(cls, mids$[mid_halfFloatToSortableShort_ed90335319c020d6], a0);
        }

        ::org::apache::lucene::search::Query HalfFloatPoint::newExactQuery(const ::java::lang::String & a0, jfloat a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_bb52d4f3f0fb1360], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query HalfFloatPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query HalfFloatPoint::newRangeQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_2072c8e0fc502353], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query HalfFloatPoint::newSetQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_9d0d4ab95d8653ee], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query HalfFloatPoint::newSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_263cb7d6a0b161ae], a0.this$, a1.this$));
        }

        jfloat HalfFloatPoint::nextDown(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_nextDown_8c8518d25218b9c5], a0);
        }

        jfloat HalfFloatPoint::nextUp(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_nextUp_8c8518d25218b9c5], a0);
        }

        ::java::lang::Number HalfFloatPoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        void HalfFloatPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void HalfFloatPoint::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_8e1d952dd65cdc3a], a0);
        }

        void HalfFloatPoint::setFloatValues(const JArray< jfloat > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValues_86d8949a8a13e717], a0.this$);
        }

        jfloat HalfFloatPoint::sortableShortToHalfFloat(jshort a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableShortToHalfFloat_d390d786d4613247], a0);
        }

        ::java::lang::String HalfFloatPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_HalfFloatPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HalfFloatPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HalfFloatPoint_init_(t_HalfFloatPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HalfFloatPoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_HalfFloatPoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_HalfFloatPoint_halfFloatToSortableShort(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HalfFloatPoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_HalfFloatPoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_HalfFloatPoint_newSetQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_HalfFloatPoint_nextDown(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HalfFloatPoint_nextUp(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HalfFloatPoint_numericValue(t_HalfFloatPoint *self, PyObject *args);
        static PyObject *t_HalfFloatPoint_setBytesValue(t_HalfFloatPoint *self, PyObject *args);
        static PyObject *t_HalfFloatPoint_setFloatValue(t_HalfFloatPoint *self, PyObject *args);
        static PyObject *t_HalfFloatPoint_setFloatValues(t_HalfFloatPoint *self, PyObject *arg);
        static PyObject *t_HalfFloatPoint_sortableShortToHalfFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HalfFloatPoint_toString(t_HalfFloatPoint *self, PyObject *args);
        static int t_HalfFloatPoint_set__bytesValue(t_HalfFloatPoint *self, PyObject *arg, void *data);
        static int t_HalfFloatPoint_set__floatValue(t_HalfFloatPoint *self, PyObject *arg, void *data);
        static int t_HalfFloatPoint_set__floatValues(t_HalfFloatPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_HalfFloatPoint__fields_[] = {
          DECLARE_SET_FIELD(t_HalfFloatPoint, bytesValue),
          DECLARE_SET_FIELD(t_HalfFloatPoint, floatValue),
          DECLARE_SET_FIELD(t_HalfFloatPoint, floatValues),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_HalfFloatPoint__methods_[] = {
          DECLARE_METHOD(t_HalfFloatPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, halfFloatToSortableShort, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, newSetQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, nextDown, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, nextUp, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_HalfFloatPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_HalfFloatPoint, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_HalfFloatPoint, setFloatValues, METH_O),
          DECLARE_METHOD(t_HalfFloatPoint, sortableShortToHalfFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HalfFloatPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HalfFloatPoint)[] = {
          { Py_tp_methods, t_HalfFloatPoint__methods_ },
          { Py_tp_init, (void *) t_HalfFloatPoint_init_ },
          { Py_tp_getset, t_HalfFloatPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HalfFloatPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(HalfFloatPoint, t_HalfFloatPoint, HalfFloatPoint);

        void t_HalfFloatPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(HalfFloatPoint), &PY_TYPE_DEF(HalfFloatPoint), module, "HalfFloatPoint", 0);
        }

        void t_HalfFloatPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HalfFloatPoint), "class_", make_descriptor(HalfFloatPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HalfFloatPoint), "wrapfn_", make_descriptor(t_HalfFloatPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HalfFloatPoint), "boxfn_", make_descriptor(boxObject));
          env->getClass(HalfFloatPoint::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(HalfFloatPoint), "BYTES", make_descriptor(HalfFloatPoint::BYTES));
        }

        static PyObject *t_HalfFloatPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HalfFloatPoint::initializeClass, 1)))
            return NULL;
          return t_HalfFloatPoint::wrap_Object(HalfFloatPoint(((t_HalfFloatPoint *) arg)->object.this$));
        }
        static PyObject *t_HalfFloatPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HalfFloatPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HalfFloatPoint_init_(t_HalfFloatPoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          HalfFloatPoint object((jobject) NULL);

          if (!parseArgs(args, "s[F", &a0, &a1))
          {
            INT_CALL(object = HalfFloatPoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_HalfFloatPoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jfloat result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::decodeDimension(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::document::HalfFloatPoint::encodeDimension(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_halfFloatToSortableShort(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jshort result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::halfFloatToSortableShort(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "halfFloatToSortableShort", arg);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jfloat > a1((jobject) NULL);
              JArray< jfloat > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jfloat > a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[F", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_nextDown(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::nextDown(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextDown", arg);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_nextUp(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::nextUp(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextUp", arg);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_numericValue(t_HalfFloatPoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(HalfFloatPoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_HalfFloatPoint_setBytesValue(t_HalfFloatPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(HalfFloatPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_HalfFloatPoint_setFloatValue(t_HalfFloatPoint *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(HalfFloatPoint), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_HalfFloatPoint_setFloatValues(t_HalfFloatPoint *self, PyObject *arg)
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArg(arg, "[F", &a0))
          {
            OBJ_CALL(self->object.setFloatValues(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValues", arg);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_sortableShortToHalfFloat(PyTypeObject *type, PyObject *arg)
        {
          jshort a0;
          jfloat result;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::HalfFloatPoint::sortableShortToHalfFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableShortToHalfFloat", arg);
          return NULL;
        }

        static PyObject *t_HalfFloatPoint_toString(t_HalfFloatPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(HalfFloatPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_HalfFloatPoint_set__bytesValue(t_HalfFloatPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_HalfFloatPoint_set__floatValue(t_HalfFloatPoint *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_HalfFloatPoint_set__floatValues(t_HalfFloatPoint *self, PyObject *arg, void *data)
        {
          {
            JArray< jfloat > value((jobject) NULL);
            if (!parseArg(arg, "[F", &value))
            {
              INT_CALL(self->object.setFloatValues(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValues", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueStr.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueStr::class$ = NULL;
          jmethodID *MutableValueStr::mids$ = NULL;
          jfieldID *MutableValueStr::fids$ = NULL;
          bool MutableValueStr::live$ = false;

          jclass MutableValueStr::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueStr");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Lorg/apache/lucene/util/BytesRefBuilder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueStr::MutableValueStr() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueStr::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueStr::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueStr::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueStr::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueStr::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueStr::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          ::org::apache::lucene::util::BytesRefBuilder MutableValueStr::_get_value() const
          {
            return ::org::apache::lucene::util::BytesRefBuilder(env->getObjectField(this$, fids$[fid_value]));
          }

          void MutableValueStr::_set_value(const ::org::apache::lucene::util::BytesRefBuilder & a0) const
          {
            env->setObjectField(this$, fids$[fid_value], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data);
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueStr__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueStr, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueStr__methods_[] = {
            DECLARE_METHOD(t_MutableValueStr, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueStr)[] = {
            { Py_tp_methods, t_MutableValueStr__methods_ },
            { Py_tp_init, (void *) t_MutableValueStr_init_ },
            { Py_tp_getset, t_MutableValueStr__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueStr)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueStr, t_MutableValueStr, MutableValueStr);

          void t_MutableValueStr::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueStr), &PY_TYPE_DEF(MutableValueStr), module, "MutableValueStr", 0);
          }

          void t_MutableValueStr::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueStr), "class_", make_descriptor(MutableValueStr::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueStr), "wrapfn_", make_descriptor(t_MutableValueStr::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueStr), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueStr::initializeClass, 1)))
              return NULL;
            return t_MutableValueStr::wrap_Object(MutableValueStr(((t_MutableValueStr *) arg)->object.this$));
          }
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueStr::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds)
          {
            MutableValueStr object((jobject) NULL);

            INT_CALL(object = MutableValueStr());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueStr), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefBuilder value((jobject) NULL);
            OBJ_CALL(value = self->object._get_value());
            return ::org::apache::lucene::util::t_BytesRefBuilder::wrap_Object(value);
          }
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRefBuilder value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *CharStream::class$ = NULL;
          jmethodID *CharStream::mids$ = NULL;
          bool CharStream::live$ = false;

          jclass CharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/CharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jchar CharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
          }

          void CharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
          }

          ::java::lang::String CharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
          }

          JArray< jchar > CharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
          }

          void CharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
          }

          jint CharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
          }

          jint CharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
          }

          jint CharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
          }

          jint CharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
          }

          jint CharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
          }

          jint CharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
          }

          jchar CharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_BeginToken(t_CharStream *self);
          static PyObject *t_CharStream_Done(t_CharStream *self);
          static PyObject *t_CharStream_GetImage(t_CharStream *self);
          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
          static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
          static PyObject *t_CharStream_getColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndLine(t_CharStream *self);
          static PyObject *t_CharStream_getLine(t_CharStream *self);
          static PyObject *t_CharStream_readChar(t_CharStream *self);
          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
          static PyGetSetDef t_CharStream__fields_[] = {
            DECLARE_GET_FIELD(t_CharStream, beginColumn),
            DECLARE_GET_FIELD(t_CharStream, beginLine),
            DECLARE_GET_FIELD(t_CharStream, column),
            DECLARE_GET_FIELD(t_CharStream, endColumn),
            DECLARE_GET_FIELD(t_CharStream, endLine),
            DECLARE_GET_FIELD(t_CharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharStream__methods_[] = {
            DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_CharStream, backup, METH_O),
            DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharStream)[] = {
            { Py_tp_methods, t_CharStream__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CharStream__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharStream)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CharStream, t_CharStream, CharStream);

          void t_CharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(CharStream), &PY_TYPE_DEF(CharStream), module, "CharStream", 0);
          }

          void t_CharStream::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "class_", make_descriptor(CharStream::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
              return NULL;
            return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
          }
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharStream_BeginToken(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return c2p(result);
          }

          static PyObject *t_CharStream_Done(t_CharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharStream_GetImage(t_CharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_getColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_getLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharStream_readChar(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return c2p(result);
          }

          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenOffsetFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenOffsetFilter::class$ = NULL;
          jmethodID *LimitTokenOffsetFilter::mids$ = NULL;
          bool LimitTokenOffsetFilter::live$ = false;

          jclass LimitTokenOffsetFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenOffsetFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_66cff404b0168626] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenOffsetFilter::LimitTokenOffsetFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          LimitTokenOffsetFilter::LimitTokenOffsetFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_66cff404b0168626, a0.this$, a1, a2)) {}

          jboolean LimitTokenOffsetFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenOffsetFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenOffsetFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenOffsetFilter_init_(t_LimitTokenOffsetFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenOffsetFilter_incrementToken(t_LimitTokenOffsetFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenOffsetFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenOffsetFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenOffsetFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenOffsetFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenOffsetFilter)[] = {
            { Py_tp_methods, t_LimitTokenOffsetFilter__methods_ },
            { Py_tp_init, (void *) t_LimitTokenOffsetFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenOffsetFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(LimitTokenOffsetFilter, t_LimitTokenOffsetFilter, LimitTokenOffsetFilter);

          void t_LimitTokenOffsetFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenOffsetFilter), &PY_TYPE_DEF(LimitTokenOffsetFilter), module, "LimitTokenOffsetFilter", 0);
          }

          void t_LimitTokenOffsetFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilter), "class_", make_descriptor(LimitTokenOffsetFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilter), "wrapfn_", make_descriptor(t_LimitTokenOffsetFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenOffsetFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenOffsetFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenOffsetFilter::wrap_Object(LimitTokenOffsetFilter(((t_LimitTokenOffsetFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenOffsetFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenOffsetFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenOffsetFilter_init_(t_LimitTokenOffsetFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenOffsetFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenOffsetFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenOffsetFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenOffsetFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenOffsetFilter_incrementToken(t_LimitTokenOffsetFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LimitTokenOffsetFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/SimilarityBase.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *SimilarityBase::class$ = NULL;
          jmethodID *SimilarityBase::mids$ = NULL;
          bool SimilarityBase::live$ = false;

          jclass SimilarityBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/SimilarityBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_log2_d089f34703408a66] = env->getStaticMethodID(cls, "log2", "(D)D");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_newStats_0b411ec39c954c9c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;D)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_4a86bd7ff3b2c1a5] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimilarityBase::SimilarityBase() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong SimilarityBase::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          jboolean SimilarityBase::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e]);
          }

          jdouble SimilarityBase::log2(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_log2_d089f34703408a66], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer SimilarityBase::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }

          void SimilarityBase::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7], a0);
          }

          ::java::lang::String SimilarityBase::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self);
          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_scorer(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg);
          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data);
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimilarityBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimilarityBase, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimilarityBase__methods_[] = {
            DECLARE_METHOD(t_SimilarityBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_SimilarityBase, log2, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, scorer, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_SimilarityBase, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimilarityBase)[] = {
            { Py_tp_methods, t_SimilarityBase__methods_ },
            { Py_tp_init, (void *) t_SimilarityBase_init_ },
            { Py_tp_getset, t_SimilarityBase__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimilarityBase)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(SimilarityBase, t_SimilarityBase, SimilarityBase);

          void t_SimilarityBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SimilarityBase), &PY_TYPE_DEF(SimilarityBase), module, "SimilarityBase", 0);
          }

          void t_SimilarityBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimilarityBase), "class_", make_descriptor(SimilarityBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimilarityBase), "wrapfn_", make_descriptor(t_SimilarityBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimilarityBase), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimilarityBase::initializeClass, 1)))
              return NULL;
            return t_SimilarityBase::wrap_Object(SimilarityBase(((t_SimilarityBase *) arg)->object.this$));
          }
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimilarityBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds)
          {
            SimilarityBase object((jobject) NULL);

            INT_CALL(object = SimilarityBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimilarityBase), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::similarities::SimilarityBase::log2(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "log2", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_scorer(t_SimilarityBase *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimilarityBase), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SimilarityBase), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet$ContainsResult.h"
#include "org/apache/lucene/codecs/bloom/HashFunction.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *FuzzySet::class$ = NULL;
          jmethodID *FuzzySet::mids$ = NULL;
          bool FuzzySet::live$ = false;
          jint FuzzySet::VERSION_CURRENT = (jint) 0;
          jint FuzzySet::VERSION_SPI = (jint) 0;
          jint FuzzySet::VERSION_START = (jint) 0;

          jclass FuzzySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/FuzzySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addValue_0bdfd2603b7490a8] = env->getMethodID(cls, "addValue", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_contains_4e2fe2873f8410bf] = env->getMethodID(cls, "contains", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/bloom/FuzzySet$ContainsResult;");
              mids$[mid_createSetBasedOnMaxMemory_ede0ea046600091a] = env->getStaticMethodID(cls, "createSetBasedOnMaxMemory", "(I)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_createSetBasedOnQuality_e0e4cc37715c92e9] = env->getStaticMethodID(cls, "createSetBasedOnQuality", "(IF)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_deserialize_bab304101d405e57] = env->getStaticMethodID(cls, "deserialize", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_downsize_935529a4a50ffa90] = env->getMethodID(cls, "downsize", "(F)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_getEstimatedNumberUniqueValuesAllowingForCollisions_57a58545eba514db] = env->getStaticMethodID(cls, "getEstimatedNumberUniqueValuesAllowingForCollisions", "(II)I");
              mids$[mid_getEstimatedUniqueValues_9972fcc56b44e79d] = env->getMethodID(cls, "getEstimatedUniqueValues", "()I");
              mids$[mid_getNearestSetSize_1e143afe1894d213] = env->getStaticMethodID(cls, "getNearestSetSize", "(I)I");
              mids$[mid_getNearestSetSize_9bbd64b479047242] = env->getStaticMethodID(cls, "getNearestSetSize", "(IF)I");
              mids$[mid_getSaturation_58aec2b64dff50c8] = env->getMethodID(cls, "getSaturation", "()F");
              mids$[mid_hashFunctionForVersion_535b78b5dd6cc7d8] = env->getStaticMethodID(cls, "hashFunctionForVersion", "(I)Lorg/apache/lucene/codecs/bloom/HashFunction;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_serialize_ead2c38342037c59] = env->getMethodID(cls, "serialize", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_SPI = env->getStaticIntField(cls, "VERSION_SPI");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void FuzzySet::addValue(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addValue_0bdfd2603b7490a8], a0.this$);
          }

          ::org::apache::lucene::codecs::bloom::FuzzySet$ContainsResult FuzzySet::contains(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::codecs::bloom::FuzzySet$ContainsResult(env->callObjectMethod(this$, mids$[mid_contains_4e2fe2873f8410bf], a0.this$));
          }

          FuzzySet FuzzySet::createSetBasedOnMaxMemory(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FuzzySet(env->callStaticObjectMethod(cls, mids$[mid_createSetBasedOnMaxMemory_ede0ea046600091a], a0));
          }

          FuzzySet FuzzySet::createSetBasedOnQuality(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FuzzySet(env->callStaticObjectMethod(cls, mids$[mid_createSetBasedOnQuality_e0e4cc37715c92e9], a0, a1));
          }

          FuzzySet FuzzySet::deserialize(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FuzzySet(env->callStaticObjectMethod(cls, mids$[mid_deserialize_bab304101d405e57], a0.this$));
          }

          FuzzySet FuzzySet::downsize(jfloat a0) const
          {
            return FuzzySet(env->callObjectMethod(this$, mids$[mid_downsize_935529a4a50ffa90], a0));
          }

          jint FuzzySet::getEstimatedNumberUniqueValuesAllowingForCollisions(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getEstimatedNumberUniqueValuesAllowingForCollisions_57a58545eba514db], a0, a1);
          }

          jint FuzzySet::getEstimatedUniqueValues() const
          {
            return env->callIntMethod(this$, mids$[mid_getEstimatedUniqueValues_9972fcc56b44e79d]);
          }

          jint FuzzySet::getNearestSetSize(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getNearestSetSize_1e143afe1894d213], a0);
          }

          jint FuzzySet::getNearestSetSize(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getNearestSetSize_9bbd64b479047242], a0, a1);
          }

          jfloat FuzzySet::getSaturation() const
          {
            return env->callFloatMethod(this$, mids$[mid_getSaturation_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::codecs::bloom::HashFunction FuzzySet::hashFunctionForVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::codecs::bloom::HashFunction(env->callStaticObjectMethod(cls, mids$[mid_hashFunctionForVersion_535b78b5dd6cc7d8], a0));
          }

          jlong FuzzySet::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void FuzzySet::serialize(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_serialize_ead2c38342037c59], a0.this$);
          }

          ::java::lang::String FuzzySet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_FuzzySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet_addValue(t_FuzzySet *self, PyObject *arg);
          static PyObject *t_FuzzySet_contains(t_FuzzySet *self, PyObject *arg);
          static PyObject *t_FuzzySet_createSetBasedOnMaxMemory(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet_createSetBasedOnQuality(PyTypeObject *type, PyObject *args);
          static PyObject *t_FuzzySet_deserialize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet_downsize(t_FuzzySet *self, PyObject *arg);
          static PyObject *t_FuzzySet_getEstimatedNumberUniqueValuesAllowingForCollisions(PyTypeObject *type, PyObject *args);
          static PyObject *t_FuzzySet_getEstimatedUniqueValues(t_FuzzySet *self);
          static PyObject *t_FuzzySet_getNearestSetSize(PyTypeObject *type, PyObject *args);
          static PyObject *t_FuzzySet_getSaturation(t_FuzzySet *self);
          static PyObject *t_FuzzySet_hashFunctionForVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet_ramBytesUsed(t_FuzzySet *self);
          static PyObject *t_FuzzySet_serialize(t_FuzzySet *self, PyObject *arg);
          static PyObject *t_FuzzySet_toString(t_FuzzySet *self, PyObject *args);
          static PyObject *t_FuzzySet_get__estimatedUniqueValues(t_FuzzySet *self, void *data);
          static PyObject *t_FuzzySet_get__saturation(t_FuzzySet *self, void *data);
          static PyGetSetDef t_FuzzySet__fields_[] = {
            DECLARE_GET_FIELD(t_FuzzySet, estimatedUniqueValues),
            DECLARE_GET_FIELD(t_FuzzySet, saturation),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzySet__methods_[] = {
            DECLARE_METHOD(t_FuzzySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, addValue, METH_O),
            DECLARE_METHOD(t_FuzzySet, contains, METH_O),
            DECLARE_METHOD(t_FuzzySet, createSetBasedOnMaxMemory, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, createSetBasedOnQuality, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, deserialize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, downsize, METH_O),
            DECLARE_METHOD(t_FuzzySet, getEstimatedNumberUniqueValuesAllowingForCollisions, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, getEstimatedUniqueValues, METH_NOARGS),
            DECLARE_METHOD(t_FuzzySet, getNearestSetSize, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, getSaturation, METH_NOARGS),
            DECLARE_METHOD(t_FuzzySet, hashFunctionForVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FuzzySet, serialize, METH_O),
            DECLARE_METHOD(t_FuzzySet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FuzzySet)[] = {
            { Py_tp_methods, t_FuzzySet__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FuzzySet__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FuzzySet)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FuzzySet, t_FuzzySet, FuzzySet);

          void t_FuzzySet::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzySet), &PY_TYPE_DEF(FuzzySet), module, "FuzzySet", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "ContainsResult", make_descriptor(&PY_TYPE_DEF(FuzzySet$ContainsResult)));
          }

          void t_FuzzySet::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "class_", make_descriptor(FuzzySet::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "wrapfn_", make_descriptor(t_FuzzySet::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "boxfn_", make_descriptor(boxObject));
            env->getClass(FuzzySet::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "VERSION_CURRENT", make_descriptor(FuzzySet::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "VERSION_SPI", make_descriptor(FuzzySet::VERSION_SPI));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet), "VERSION_START", make_descriptor(FuzzySet::VERSION_START));
          }

          static PyObject *t_FuzzySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzySet::initializeClass, 1)))
              return NULL;
            return t_FuzzySet::wrap_Object(FuzzySet(((t_FuzzySet *) arg)->object.this$));
          }
          static PyObject *t_FuzzySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FuzzySet_addValue(t_FuzzySet *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addValue", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_contains(t_FuzzySet *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::bloom::FuzzySet$ContainsResult result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.contains(a0));
              return ::org::apache::lucene::codecs::bloom::t_FuzzySet$ContainsResult::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "contains", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_createSetBasedOnMaxMemory(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            FuzzySet result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::createSetBasedOnMaxMemory(a0));
              return t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createSetBasedOnMaxMemory", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_createSetBasedOnQuality(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jfloat a1;
            FuzzySet result((jobject) NULL);

            if (!parseArgs(args, "IF", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::createSetBasedOnQuality(a0, a1));
              return t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createSetBasedOnQuality", args);
            return NULL;
          }

          static PyObject *t_FuzzySet_deserialize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            FuzzySet result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::deserialize(a0));
              return t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "deserialize", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_downsize(t_FuzzySet *self, PyObject *arg)
          {
            jfloat a0;
            FuzzySet result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.downsize(a0));
              return t_FuzzySet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "downsize", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_getEstimatedNumberUniqueValuesAllowingForCollisions(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::getEstimatedNumberUniqueValuesAllowingForCollisions(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getEstimatedNumberUniqueValuesAllowingForCollisions", args);
            return NULL;
          }

          static PyObject *t_FuzzySet_getEstimatedUniqueValues(t_FuzzySet *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEstimatedUniqueValues());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FuzzySet_getNearestSetSize(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::getNearestSetSize(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                jint result;

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::getNearestSetSize(a0, a1));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError(type, "getNearestSetSize", args);
            return NULL;
          }

          static PyObject *t_FuzzySet_getSaturation(t_FuzzySet *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getSaturation());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FuzzySet_hashFunctionForVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::codecs::bloom::HashFunction result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet::hashFunctionForVersion(a0));
              return ::org::apache::lucene::codecs::bloom::t_HashFunction::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "hashFunctionForVersion", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_ramBytesUsed(t_FuzzySet *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FuzzySet_serialize(t_FuzzySet *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.serialize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "serialize", arg);
            return NULL;
          }

          static PyObject *t_FuzzySet_toString(t_FuzzySet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FuzzySet), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzySet_get__estimatedUniqueValues(t_FuzzySet *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEstimatedUniqueValues());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FuzzySet_get__saturation(t_FuzzySet *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getSaturation());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *PointReader::class$ = NULL;
          jmethodID *PointReader::mids$ = NULL;
          bool PointReader::live$ = false;

          jclass PointReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/PointReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_8454bd5aa23fd11e] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pointValue_0a50bb6f782eac99] = env->getMethodID(cls, "pointValue", "()Lorg/apache/lucene/util/bkd/PointValue;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PointReader::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::bkd::PointValue PointReader::pointValue() const
          {
            return ::org::apache::lucene::util::bkd::PointValue(env->callObjectMethod(this$, mids$[mid_pointValue_0a50bb6f782eac99]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_PointReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointReader_next(t_PointReader *self);
          static PyObject *t_PointReader_pointValue(t_PointReader *self);

          static PyMethodDef t_PointReader__methods_[] = {
            DECLARE_METHOD(t_PointReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointReader, next, METH_NOARGS),
            DECLARE_METHOD(t_PointReader, pointValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PointReader)[] = {
            { Py_tp_methods, t_PointReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PointReader)[] = {
            &PY_TYPE_DEF(::java::io::Closeable),
            NULL
          };

          DEFINE_TYPE(PointReader, t_PointReader, PointReader);

          void t_PointReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PointReader), &PY_TYPE_DEF(PointReader), module, "PointReader", 0);
          }

          void t_PointReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointReader), "class_", make_descriptor(PointReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointReader), "wrapfn_", make_descriptor(t_PointReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PointReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PointReader::initializeClass, 1)))
              return NULL;
            return t_PointReader::wrap_Object(PointReader(((t_PointReader *) arg)->object.this$));
          }
          static PyObject *t_PointReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PointReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PointReader_next(t_PointReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PointReader_pointValue(t_PointReader *self)
          {
            ::org::apache::lucene::util::bkd::PointValue result((jobject) NULL);
            OBJ_CALL(result = self->object.pointValue());
            return ::org::apache::lucene::util::bkd::t_PointValue::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTEnum::class$ = NULL;
          jmethodID *FSTEnum::mids$ = NULL;
          bool FSTEnum::live$ = false;

          jclass FSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_doNext_f2cc1bce94666404] = env->getMethodID(cls, "doNext", "()V");
              mids$[mid_doSeekCeil_f2cc1bce94666404] = env->getMethodID(cls, "doSeekCeil", "()V");
              mids$[mid_setCurrentLabel_040c4cd0390c5aff] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_getTargetLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_grow_f2cc1bce94666404] = env->getMethodID(cls, "grow", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args);
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data);
          static PyGetSetDef t_FSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_FSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTEnum__methods_[] = {
            DECLARE_METHOD(t_FSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTEnum)[] = {
            { Py_tp_methods, t_FSTEnum__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FSTEnum__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTEnum)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FSTEnum, t_FSTEnum, FSTEnum);
          PyObject *t_FSTEnum::wrap_Object(const FSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTEnum), &PY_TYPE_DEF(FSTEnum), module, "FSTEnum", 0);
          }

          void t_FSTEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTEnum), "class_", make_descriptor(FSTEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTEnum), "wrapfn_", make_descriptor(t_FSTEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTEnum::initializeClass, 1)))
              return NULL;
            return t_FSTEnum::wrap_Object(FSTEnum(((t_FSTEnum *) arg)->object.this$));
          }
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *RemoveEmptyNonLeafQueryNodeProcessor::class$ = NULL;
              jmethodID *RemoveEmptyNonLeafQueryNodeProcessor::mids$ = NULL;
              bool RemoveEmptyNonLeafQueryNodeProcessor::live$ = false;

              jclass RemoveEmptyNonLeafQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/RemoveEmptyNonLeafQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveEmptyNonLeafQueryNodeProcessor::RemoveEmptyNonLeafQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveEmptyNonLeafQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveEmptyNonLeafQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveEmptyNonLeafQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RemoveEmptyNonLeafQueryNodeProcessor)[] = {
                { Py_tp_methods, t_RemoveEmptyNonLeafQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_RemoveEmptyNonLeafQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RemoveEmptyNonLeafQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(RemoveEmptyNonLeafQueryNodeProcessor, t_RemoveEmptyNonLeafQueryNodeProcessor, RemoveEmptyNonLeafQueryNodeProcessor);

              void t_RemoveEmptyNonLeafQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), &PY_TYPE_DEF(RemoveEmptyNonLeafQueryNodeProcessor), module, "RemoveEmptyNonLeafQueryNodeProcessor", 0);
              }

              void t_RemoveEmptyNonLeafQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), "class_", make_descriptor(RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), "wrapfn_", make_descriptor(t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveEmptyNonLeafQueryNodeProcessor::wrap_Object(RemoveEmptyNonLeafQueryNodeProcessor(((t_RemoveEmptyNonLeafQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveEmptyNonLeafQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveEmptyNonLeafQueryNodeProcessor_init_(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveEmptyNonLeafQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = RemoveEmptyNonLeafQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveEmptyNonLeafQueryNodeProcessor_process(t_RemoveEmptyNonLeafQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(RemoveEmptyNonLeafQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InfoStream::class$ = NULL;
        jmethodID *InfoStream::mids$ = NULL;
        bool InfoStream::live$ = false;
        InfoStream *InfoStream::NO_OUTPUT = NULL;

        jclass InfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDefault_05a6766ae71db614] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_isEnabled_145b2d0af0c06b93] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_message_15b72f6a44ff93f2] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setDefault_5c75041b743adb53] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/util/InfoStream;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO_OUTPUT = new InfoStream(env->getStaticObjectField(cls, "NO_OUTPUT", "Lorg/apache/lucene/util/InfoStream;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InfoStream::InfoStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        InfoStream InfoStream::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return InfoStream(env->callStaticObjectMethod(cls, mids$[mid_getDefault_05a6766ae71db614]));
        }

        jboolean InfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_145b2d0af0c06b93], a0.this$);
        }

        void InfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void InfoStream::setDefault(const InfoStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_5c75041b743adb53], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InfoStream_getDefault(PyTypeObject *type);
        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg);
        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args);
        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data);
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data);
        static PyGetSetDef t_InfoStream__fields_[] = {
          DECLARE_GETSET_FIELD(t_InfoStream, default),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_InfoStream__methods_[] = {
          DECLARE_METHOD(t_InfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_InfoStream, isEnabled, METH_O),
          DECLARE_METHOD(t_InfoStream, message, METH_VARARGS),
          DECLARE_METHOD(t_InfoStream, setDefault, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(InfoStream)[] = {
          { Py_tp_methods, t_InfoStream__methods_ },
          { Py_tp_init, (void *) t_InfoStream_init_ },
          { Py_tp_getset, t_InfoStream__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(InfoStream)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(InfoStream, t_InfoStream, InfoStream);

        void t_InfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(InfoStream), &PY_TYPE_DEF(InfoStream), module, "InfoStream", 0);
        }

        void t_InfoStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(InfoStream), "class_", make_descriptor(InfoStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InfoStream), "wrapfn_", make_descriptor(t_InfoStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InfoStream), "boxfn_", make_descriptor(boxObject));
          env->getClass(InfoStream::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(InfoStream), "NO_OUTPUT", make_descriptor(t_InfoStream::wrap_Object(*InfoStream::NO_OUTPUT)));
        }

        static PyObject *t_InfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InfoStream::initializeClass, 1)))
            return NULL;
          return t_InfoStream::wrap_Object(InfoStream(((t_InfoStream *) arg)->object.this$));
        }
        static PyObject *t_InfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InfoStream_init_(t_InfoStream *self, PyObject *args, PyObject *kwds)
        {
          InfoStream object((jobject) NULL);

          INT_CALL(object = InfoStream());
          self->object = object;

          return 0;
        }

        static PyObject *t_InfoStream_getDefault(PyTypeObject *type)
        {
          InfoStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::InfoStream::getDefault());
          return t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_InfoStream_isEnabled(t_InfoStream *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isEnabled", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_message(t_InfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "message", args);
          return NULL;
        }

        static PyObject *t_InfoStream_setDefault(PyTypeObject *type, PyObject *arg)
        {
          InfoStream a0((jobject) NULL);

          if (!parseArg(arg, "k", InfoStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::InfoStream::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_InfoStream_get__default(t_InfoStream *self, void *data)
        {
          InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_InfoStream::wrap_Object(value);
        }
        static int t_InfoStream_set__default(t_InfoStream *self, PyObject *arg, void *data)
        {
          {
            InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/XYZSolidFactory.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/XYZBounds.h"
#include "org/apache/lucene/spatial3d/geom/XYZSolid.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *XYZSolidFactory::class$ = NULL;
          jmethodID *XYZSolidFactory::mids$ = NULL;
          bool XYZSolidFactory::live$ = false;

          jclass XYZSolidFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/XYZSolidFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeXYZSolid_532a6e45be7206e9] = env->getStaticMethodID(cls, "makeXYZSolid", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/XYZBounds;)Lorg/apache/lucene/spatial3d/geom/XYZSolid;");
              mids$[mid_makeXYZSolid_0941b3ec2a9b8456] = env->getStaticMethodID(cls, "makeXYZSolid", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDDDD)Lorg/apache/lucene/spatial3d/geom/XYZSolid;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::XYZSolid XYZSolidFactory::makeXYZSolid(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::XYZBounds & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::XYZSolid(env->callStaticObjectMethod(cls, mids$[mid_makeXYZSolid_532a6e45be7206e9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::XYZSolid XYZSolidFactory::makeXYZSolid(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::XYZSolid(env->callStaticObjectMethod(cls, mids$[mid_makeXYZSolid_0941b3ec2a9b8456], a0.this$, a1, a2, a3, a4, a5, a6));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_XYZSolidFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_XYZSolidFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_XYZSolidFactory_makeXYZSolid(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_XYZSolidFactory__methods_[] = {
            DECLARE_METHOD(t_XYZSolidFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_XYZSolidFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_XYZSolidFactory, makeXYZSolid, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(XYZSolidFactory)[] = {
            { Py_tp_methods, t_XYZSolidFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(XYZSolidFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(XYZSolidFactory, t_XYZSolidFactory, XYZSolidFactory);

          void t_XYZSolidFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(XYZSolidFactory), &PY_TYPE_DEF(XYZSolidFactory), module, "XYZSolidFactory", 0);
          }

          void t_XYZSolidFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolidFactory), "class_", make_descriptor(XYZSolidFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolidFactory), "wrapfn_", make_descriptor(t_XYZSolidFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolidFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_XYZSolidFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, XYZSolidFactory::initializeClass, 1)))
              return NULL;
            return t_XYZSolidFactory::wrap_Object(XYZSolidFactory(((t_XYZSolidFactory *) arg)->object.this$));
          }
          static PyObject *t_XYZSolidFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, XYZSolidFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_XYZSolidFactory_makeXYZSolid(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::XYZBounds a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::XYZSolid result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::XYZBounds::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::XYZSolidFactory::makeXYZSolid(a0, a1));
                  return ::org::apache::lucene::spatial3d::geom::t_XYZSolid::wrap_Object(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                jdouble a5;
                jdouble a6;
                ::org::apache::lucene::spatial3d::geom::XYZSolid result((jobject) NULL);

                if (!parseArgs(args, "kDDDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::XYZSolidFactory::makeXYZSolid(a0, a1, a2, a3, a4, a5, a6));
                  return ::org::apache::lucene::spatial3d::geom::t_XYZSolid::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeXYZSolid", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/DecimalDigitFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *DecimalDigitFilterFactory::class$ = NULL;
          jmethodID *DecimalDigitFilterFactory::mids$ = NULL;
          bool DecimalDigitFilterFactory::live$ = false;
          ::java::lang::String *DecimalDigitFilterFactory::NAME = NULL;

          jclass DecimalDigitFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/DecimalDigitFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DecimalDigitFilterFactory::DecimalDigitFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DecimalDigitFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream DecimalDigitFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_DecimalDigitFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DecimalDigitFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DecimalDigitFilterFactory_init_(t_DecimalDigitFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DecimalDigitFilterFactory_create(t_DecimalDigitFilterFactory *self, PyObject *args);
          static PyObject *t_DecimalDigitFilterFactory_normalize(t_DecimalDigitFilterFactory *self, PyObject *args);

          static PyMethodDef t_DecimalDigitFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DecimalDigitFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecimalDigitFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DecimalDigitFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DecimalDigitFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DecimalDigitFilterFactory)[] = {
            { Py_tp_methods, t_DecimalDigitFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DecimalDigitFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DecimalDigitFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DecimalDigitFilterFactory, t_DecimalDigitFilterFactory, DecimalDigitFilterFactory);

          void t_DecimalDigitFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DecimalDigitFilterFactory), &PY_TYPE_DEF(DecimalDigitFilterFactory), module, "DecimalDigitFilterFactory", 0);
          }

          void t_DecimalDigitFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilterFactory), "class_", make_descriptor(DecimalDigitFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilterFactory), "wrapfn_", make_descriptor(t_DecimalDigitFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DecimalDigitFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalDigitFilterFactory), "NAME", make_descriptor(j2p(*DecimalDigitFilterFactory::NAME)));
          }

          static PyObject *t_DecimalDigitFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DecimalDigitFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DecimalDigitFilterFactory::wrap_Object(DecimalDigitFilterFactory(((t_DecimalDigitFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DecimalDigitFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DecimalDigitFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DecimalDigitFilterFactory_init_(t_DecimalDigitFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DecimalDigitFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DecimalDigitFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DecimalDigitFilterFactory_create(t_DecimalDigitFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DecimalDigitFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DecimalDigitFilterFactory_normalize(t_DecimalDigitFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DecimalDigitFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizer::class$ = NULL;
          jmethodID *IndicNormalizer::mids$ = NULL;
          bool IndicNormalizer::live$ = false;

          jclass IndicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizer::IndicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint IndicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args);

          static PyMethodDef t_IndicNormalizer__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndicNormalizer)[] = {
            { Py_tp_methods, t_IndicNormalizer__methods_ },
            { Py_tp_init, (void *) t_IndicNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndicNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndicNormalizer, t_IndicNormalizer, IndicNormalizer);

          void t_IndicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizer), &PY_TYPE_DEF(IndicNormalizer), module, "IndicNormalizer", 0);
          }

          void t_IndicNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizer), "class_", make_descriptor(IndicNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizer), "wrapfn_", make_descriptor(t_IndicNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizer::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizer::wrap_Object(IndicNormalizer(((t_IndicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            IndicNormalizer object((jobject) NULL);

            INT_CALL(object = IndicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDReader.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/bkd/BKDReader$IntersectState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/bkd/BKDReader$IndexTree.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDReader::class$ = NULL;
          jmethodID *BKDReader::mids$ = NULL;
          bool BKDReader::live$ = false;

          jclass BKDReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1a5d98264aabb7b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_estimatePointCount_c36ecfcc70f1a802] = env->getMethodID(cls, "estimatePointCount", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)J");
              mids$[mid_getBytesPerDimension_9972fcc56b44e79d] = env->getMethodID(cls, "getBytesPerDimension", "()I");
              mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getIntersectState_f2834e2ca4654669] = env->getMethodID(cls, "getIntersectState", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)Lorg/apache/lucene/util/bkd/BKDReader$IntersectState;");
              mids$[mid_getMaxPackedValue_cf386cdb1bbd339f] = env->getMethodID(cls, "getMaxPackedValue", "()[B");
              mids$[mid_getMinPackedValue_cf386cdb1bbd339f] = env->getMethodID(cls, "getMinPackedValue", "()[B");
              mids$[mid_getNumDimensions_9972fcc56b44e79d] = env->getMethodID(cls, "getNumDimensions", "()I");
              mids$[mid_getNumIndexDimensions_9972fcc56b44e79d] = env->getMethodID(cls, "getNumIndexDimensions", "()I");
              mids$[mid_intersect_9cdd639f530ebf3c] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)V");
              mids$[mid_isLeafNode_a1d30e1ee40c89a2] = env->getMethodID(cls, "isLeafNode", "(I)Z");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_visitLeafBlockValues_ab735c107bcea1e1] = env->getMethodID(cls, "visitLeafBlockValues", "(Lorg/apache/lucene/util/bkd/BKDReader$IndexTree;Lorg/apache/lucene/util/bkd/BKDReader$IntersectState;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDReader::BKDReader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::store::IndexInput & a1, const ::org::apache::lucene::store::IndexInput & a2) : ::org::apache::lucene::index::PointValues(env->newObject(initializeClass, &mids$, mid_init$_1a5d98264aabb7b4, a0.this$, a1.this$, a2.this$)) {}

          jlong BKDReader::estimatePointCount(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_estimatePointCount_c36ecfcc70f1a802], a0.this$);
          }

          jint BKDReader::getBytesPerDimension() const
          {
            return env->callIntMethod(this$, mids$[mid_getBytesPerDimension_9972fcc56b44e79d]);
          }

          jint BKDReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::bkd::BKDReader$IntersectState BKDReader::getIntersectState(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
          {
            return ::org::apache::lucene::util::bkd::BKDReader$IntersectState(env->callObjectMethod(this$, mids$[mid_getIntersectState_f2834e2ca4654669], a0.this$));
          }

          JArray< jbyte > BKDReader::getMaxPackedValue() const
          {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getMaxPackedValue_cf386cdb1bbd339f]));
          }

          JArray< jbyte > BKDReader::getMinPackedValue() const
          {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getMinPackedValue_cf386cdb1bbd339f]));
          }

          jint BKDReader::getNumDimensions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumDimensions_9972fcc56b44e79d]);
          }

          jint BKDReader::getNumIndexDimensions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumIndexDimensions_9972fcc56b44e79d]);
          }

          void BKDReader::intersect(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_intersect_9cdd639f530ebf3c], a0.this$);
          }

          jboolean BKDReader::isLeafNode(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLeafNode_a1d30e1ee40c89a2], a0);
          }

          jlong BKDReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          void BKDReader::visitLeafBlockValues(const ::org::apache::lucene::util::bkd::BKDReader$IndexTree & a0, const ::org::apache::lucene::util::bkd::BKDReader$IntersectState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitLeafBlockValues_ab735c107bcea1e1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDReader_init_(t_BKDReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDReader_estimatePointCount(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getBytesPerDimension(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getDocCount(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getIntersectState(t_BKDReader *self, PyObject *arg);
          static PyObject *t_BKDReader_getMaxPackedValue(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getMinPackedValue(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getNumDimensions(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_getNumIndexDimensions(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_intersect(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_isLeafNode(t_BKDReader *self, PyObject *arg);
          static PyObject *t_BKDReader_size(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_visitLeafBlockValues(t_BKDReader *self, PyObject *args);
          static PyObject *t_BKDReader_get__bytesPerDimension(t_BKDReader *self, void *data);
          static PyObject *t_BKDReader_get__docCount(t_BKDReader *self, void *data);
          static PyObject *t_BKDReader_get__maxPackedValue(t_BKDReader *self, void *data);
          static PyObject *t_BKDReader_get__minPackedValue(t_BKDReader *self, void *data);
          static PyObject *t_BKDReader_get__numDimensions(t_BKDReader *self, void *data);
          static PyObject *t_BKDReader_get__numIndexDimensions(t_BKDReader *self, void *data);
          static PyGetSetDef t_BKDReader__fields_[] = {
            DECLARE_GET_FIELD(t_BKDReader, bytesPerDimension),
            DECLARE_GET_FIELD(t_BKDReader, docCount),
            DECLARE_GET_FIELD(t_BKDReader, maxPackedValue),
            DECLARE_GET_FIELD(t_BKDReader, minPackedValue),
            DECLARE_GET_FIELD(t_BKDReader, numDimensions),
            DECLARE_GET_FIELD(t_BKDReader, numIndexDimensions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BKDReader__methods_[] = {
            DECLARE_METHOD(t_BKDReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDReader, estimatePointCount, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getBytesPerDimension, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getIntersectState, METH_O),
            DECLARE_METHOD(t_BKDReader, getMaxPackedValue, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getMinPackedValue, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getNumDimensions, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, getNumIndexDimensions, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, isLeafNode, METH_O),
            DECLARE_METHOD(t_BKDReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BKDReader, visitLeafBlockValues, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDReader)[] = {
            { Py_tp_methods, t_BKDReader__methods_ },
            { Py_tp_init, (void *) t_BKDReader_init_ },
            { Py_tp_getset, t_BKDReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::PointValues),
            NULL
          };

          DEFINE_TYPE(BKDReader, t_BKDReader, BKDReader);

          void t_BKDReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDReader), &PY_TYPE_DEF(BKDReader), module, "BKDReader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader), "IntersectState", make_descriptor(&PY_TYPE_DEF(BKDReader$IntersectState)));
          }

          void t_BKDReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader), "class_", make_descriptor(BKDReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader), "wrapfn_", make_descriptor(t_BKDReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BKDReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDReader::initializeClass, 1)))
              return NULL;
            return t_BKDReader::wrap_Object(BKDReader(((t_BKDReader *) arg)->object.this$));
          }
          static PyObject *t_BKDReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDReader_init_(t_BKDReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a2((jobject) NULL);
            BKDReader object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = BKDReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDReader_estimatePointCount(t_BKDReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.estimatePointCount(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "estimatePointCount", args, 2);
          }

          static PyObject *t_BKDReader_getBytesPerDimension(t_BKDReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBytesPerDimension());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getBytesPerDimension", args, 2);
          }

          static PyObject *t_BKDReader_getDocCount(t_BKDReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_BKDReader_getIntersectState(t_BKDReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);
            ::org::apache::lucene::util::bkd::BKDReader$IntersectState result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getIntersectState(a0));
              return ::org::apache::lucene::util::bkd::t_BKDReader$IntersectState::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getIntersectState", arg);
            return NULL;
          }

          static PyObject *t_BKDReader_getMaxPackedValue(t_BKDReader *self, PyObject *args)
          {
            JArray< jbyte > result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMaxPackedValue());
              return result.wrap();
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getMaxPackedValue", args, 2);
          }

          static PyObject *t_BKDReader_getMinPackedValue(t_BKDReader *self, PyObject *args)
          {
            JArray< jbyte > result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMinPackedValue());
              return result.wrap();
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getMinPackedValue", args, 2);
          }

          static PyObject *t_BKDReader_getNumDimensions(t_BKDReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNumDimensions());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getNumDimensions", args, 2);
          }

          static PyObject *t_BKDReader_getNumIndexDimensions(t_BKDReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNumIndexDimensions());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "getNumIndexDimensions", args, 2);
          }

          static PyObject *t_BKDReader_intersect(t_BKDReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.intersect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_BKDReader_isLeafNode(t_BKDReader *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isLeafNode(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isLeafNode", arg);
            return NULL;
          }

          static PyObject *t_BKDReader_size(t_BKDReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BKDReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BKDReader_visitLeafBlockValues(t_BKDReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::BKDReader$IndexTree a0((jobject) NULL);
            ::org::apache::lucene::util::bkd::BKDReader$IntersectState a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::bkd::BKDReader$IndexTree::initializeClass, ::org::apache::lucene::util::bkd::BKDReader$IntersectState::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitLeafBlockValues(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "visitLeafBlockValues", args);
            return NULL;
          }

          static PyObject *t_BKDReader_get__bytesPerDimension(t_BKDReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBytesPerDimension());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader_get__docCount(t_BKDReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader_get__maxPackedValue(t_BKDReader *self, void *data)
          {
            JArray< jbyte > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaxPackedValue());
            return value.wrap();
          }

          static PyObject *t_BKDReader_get__minPackedValue(t_BKDReader *self, void *data)
          {
            JArray< jbyte > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMinPackedValue());
            return value.wrap();
          }

          static PyObject *t_BKDReader_get__numDimensions(t_BKDReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumDimensions());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader_get__numIndexDimensions(t_BKDReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumIndexDimensions());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "java/util/function/BiFunction.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersDirectory::class$ = NULL;
        jmethodID *ByteBuffersDirectory::mids$ = NULL;
        bool ByteBuffersDirectory::live$ = false;
        ::java::util::function::BiFunction *ByteBuffersDirectory::OUTPUT_AS_BYTE_ARRAY = NULL;
        ::java::util::function::BiFunction *ByteBuffersDirectory::OUTPUT_AS_MANY_BUFFERS = NULL;
        ::java::util::function::BiFunction *ByteBuffersDirectory::OUTPUT_AS_MANY_BUFFERS_LUCENE = NULL;
        ::java::util::function::BiFunction *ByteBuffersDirectory::OUTPUT_AS_ONE_BUFFER = NULL;

        jclass ByteBuffersDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_267cdd0916f1154a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_e84951d521ec4d68] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            OUTPUT_AS_BYTE_ARRAY = new ::java::util::function::BiFunction(env->getStaticObjectField(cls, "OUTPUT_AS_BYTE_ARRAY", "Ljava/util/function/BiFunction;"));
            OUTPUT_AS_MANY_BUFFERS = new ::java::util::function::BiFunction(env->getStaticObjectField(cls, "OUTPUT_AS_MANY_BUFFERS", "Ljava/util/function/BiFunction;"));
            OUTPUT_AS_MANY_BUFFERS_LUCENE = new ::java::util::function::BiFunction(env->getStaticObjectField(cls, "OUTPUT_AS_MANY_BUFFERS_LUCENE", "Ljava/util/function/BiFunction;"));
            OUTPUT_AS_ONE_BUFFER = new ::java::util::function::BiFunction(env->getStaticObjectField(cls, "OUTPUT_AS_ONE_BUFFER", "Ljava/util/function/BiFunction;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBuffersDirectory::ByteBuffersDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ByteBuffersDirectory::ByteBuffersDirectory(const ::org::apache::lucene::store::LockFactory & a0) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_267cdd0916f1154a, a0.this$)) {}

        ByteBuffersDirectory::ByteBuffersDirectory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::util::function::Supplier & a1, const ::java::util::function::BiFunction & a2) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_e84951d521ec4d68, a0.this$, a1.this$, a2.this$)) {}

        void ByteBuffersDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput ByteBuffersDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput ByteBuffersDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void ByteBuffersDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong ByteBuffersDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::java::util::Set ByteBuffersDirectory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        JArray< ::java::lang::String > ByteBuffersDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::IndexInput ByteBuffersDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        void ByteBuffersDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void ByteBuffersDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void ByteBuffersDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBuffersDirectory_init_(t_ByteBuffersDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBuffersDirectory_close(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_createOutput(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_createTempOutput(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_deleteFile(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_fileLength(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_getPendingDeletions(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_listAll(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_openInput(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_rename(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_sync(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_syncMetaData(t_ByteBuffersDirectory *self, PyObject *args);
        static PyObject *t_ByteBuffersDirectory_get__pendingDeletions(t_ByteBuffersDirectory *self, void *data);
        static PyGetSetDef t_ByteBuffersDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBuffersDirectory, pendingDeletions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBuffersDirectory__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, getPendingDeletions, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDirectory, syncMetaData, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersDirectory)[] = {
          { Py_tp_methods, t_ByteBuffersDirectory__methods_ },
          { Py_tp_init, (void *) t_ByteBuffersDirectory_init_ },
          { Py_tp_getset, t_ByteBuffersDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::BaseDirectory),
          NULL
        };

        DEFINE_TYPE(ByteBuffersDirectory, t_ByteBuffersDirectory, ByteBuffersDirectory);

        void t_ByteBuffersDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersDirectory), &PY_TYPE_DEF(ByteBuffersDirectory), module, "ByteBuffersDirectory", 0);
        }

        void t_ByteBuffersDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "class_", make_descriptor(ByteBuffersDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "wrapfn_", make_descriptor(t_ByteBuffersDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBuffersDirectory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "OUTPUT_AS_BYTE_ARRAY", make_descriptor(::java::util::function::t_BiFunction::wrap_Object(*ByteBuffersDirectory::OUTPUT_AS_BYTE_ARRAY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "OUTPUT_AS_MANY_BUFFERS", make_descriptor(::java::util::function::t_BiFunction::wrap_Object(*ByteBuffersDirectory::OUTPUT_AS_MANY_BUFFERS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "OUTPUT_AS_MANY_BUFFERS_LUCENE", make_descriptor(::java::util::function::t_BiFunction::wrap_Object(*ByteBuffersDirectory::OUTPUT_AS_MANY_BUFFERS_LUCENE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDirectory), "OUTPUT_AS_ONE_BUFFER", make_descriptor(::java::util::function::t_BiFunction::wrap_Object(*ByteBuffersDirectory::OUTPUT_AS_ONE_BUFFER)));
        }

        static PyObject *t_ByteBuffersDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersDirectory::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersDirectory::wrap_Object(ByteBuffersDirectory(((t_ByteBuffersDirectory *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBuffersDirectory_init_(t_ByteBuffersDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBuffersDirectory object((jobject) NULL);

              INT_CALL(object = ByteBuffersDirectory());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
              ByteBuffersDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
              {
                INT_CALL(object = ByteBuffersDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
              ::java::util::function::Supplier a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::function::BiFunction a2((jobject) NULL);
              PyTypeObject **p2;
              ByteBuffersDirectory object((jobject) NULL);

              if (!parseArgs(args, "kKK", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::util::function::Supplier::initializeClass, ::java::util::function::BiFunction::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Supplier::parameters_, &a2, &p2, ::java::util::function::t_BiFunction::parameters_))
              {
                INT_CALL(object = ByteBuffersDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBuffersDirectory_close(t_ByteBuffersDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_createOutput(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_createTempOutput(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_deleteFile(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_fileLength(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_getPendingDeletions(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPendingDeletions());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "getPendingDeletions", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_listAll(t_ByteBuffersDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_openInput(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_rename(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_sync(t_ByteBuffersDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_syncMetaData(t_ByteBuffersDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }

        static PyObject *t_ByteBuffersDirectory_get__pendingDeletions(t_ByteBuffersDirectory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/OffHeapFSTStore.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FSTStore.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *OffHeapFSTStore::class$ = NULL;
          jmethodID *OffHeapFSTStore::mids$ = NULL;
          bool OffHeapFSTStore::live$ = false;

          jclass OffHeapFSTStore::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/OffHeapFSTStore");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getReverseBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getReverseBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_init_4833aa1d1f4cf120] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_writeTo_ead2c38342037c59] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffHeapFSTStore::OffHeapFSTStore() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::fst::FST$BytesReader OffHeapFSTStore::getReverseBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getReverseBytesReader_79a0688c6e123a32]));
          }

          void OffHeapFSTStore::init(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_4833aa1d1f4cf120], a0.this$, a1);
          }

          jlong OffHeapFSTStore::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong OffHeapFSTStore::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          void OffHeapFSTStore::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_writeTo_ead2c38342037c59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_OffHeapFSTStore_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffHeapFSTStore_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffHeapFSTStore_init_(t_OffHeapFSTStore *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffHeapFSTStore_getReverseBytesReader(t_OffHeapFSTStore *self);
          static PyObject *t_OffHeapFSTStore_init(t_OffHeapFSTStore *self, PyObject *args);
          static PyObject *t_OffHeapFSTStore_ramBytesUsed(t_OffHeapFSTStore *self);
          static PyObject *t_OffHeapFSTStore_size(t_OffHeapFSTStore *self);
          static PyObject *t_OffHeapFSTStore_writeTo(t_OffHeapFSTStore *self, PyObject *arg);
          static PyObject *t_OffHeapFSTStore_get__reverseBytesReader(t_OffHeapFSTStore *self, void *data);
          static PyGetSetDef t_OffHeapFSTStore__fields_[] = {
            DECLARE_GET_FIELD(t_OffHeapFSTStore, reverseBytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffHeapFSTStore__methods_[] = {
            DECLARE_METHOD(t_OffHeapFSTStore, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffHeapFSTStore, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffHeapFSTStore, getReverseBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_OffHeapFSTStore, init, METH_VARARGS),
            DECLARE_METHOD(t_OffHeapFSTStore, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_OffHeapFSTStore, size, METH_NOARGS),
            DECLARE_METHOD(t_OffHeapFSTStore, writeTo, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffHeapFSTStore)[] = {
            { Py_tp_methods, t_OffHeapFSTStore__methods_ },
            { Py_tp_init, (void *) t_OffHeapFSTStore_init_ },
            { Py_tp_getset, t_OffHeapFSTStore__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffHeapFSTStore)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OffHeapFSTStore, t_OffHeapFSTStore, OffHeapFSTStore);

          void t_OffHeapFSTStore::install(PyObject *module)
          {
            installType(&PY_TYPE(OffHeapFSTStore), &PY_TYPE_DEF(OffHeapFSTStore), module, "OffHeapFSTStore", 0);
          }

          void t_OffHeapFSTStore::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffHeapFSTStore), "class_", make_descriptor(OffHeapFSTStore::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffHeapFSTStore), "wrapfn_", make_descriptor(t_OffHeapFSTStore::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffHeapFSTStore), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffHeapFSTStore_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffHeapFSTStore::initializeClass, 1)))
              return NULL;
            return t_OffHeapFSTStore::wrap_Object(OffHeapFSTStore(((t_OffHeapFSTStore *) arg)->object.this$));
          }
          static PyObject *t_OffHeapFSTStore_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffHeapFSTStore::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffHeapFSTStore_init_(t_OffHeapFSTStore *self, PyObject *args, PyObject *kwds)
          {
            OffHeapFSTStore object((jobject) NULL);

            INT_CALL(object = OffHeapFSTStore());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffHeapFSTStore_getReverseBytesReader(t_OffHeapFSTStore *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_OffHeapFSTStore_init(t_OffHeapFSTStore *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_OffHeapFSTStore_ramBytesUsed(t_OffHeapFSTStore *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_OffHeapFSTStore_size(t_OffHeapFSTStore *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_OffHeapFSTStore_writeTo(t_OffHeapFSTStore *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.writeTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeTo", arg);
            return NULL;
          }

          static PyObject *t_OffHeapFSTStore_get__reverseBytesReader(t_OffHeapFSTStore *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/InflectionAttribute.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *InflectionAttribute::class$ = NULL;
            jmethodID *InflectionAttribute::mids$ = NULL;
            bool InflectionAttribute::live$ = false;

            jclass InflectionAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/InflectionAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getInflectionForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionForm", "()Ljava/lang/String;");
                mids$[mid_getInflectionType_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionType", "()Ljava/lang/String;");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String InflectionAttribute::getInflectionForm() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_db9b55ba01e03e4b]));
            }

            ::java::lang::String InflectionAttribute::getInflectionType() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_db9b55ba01e03e4b]));
            }

            void InflectionAttribute::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_InflectionAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_InflectionAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_InflectionAttribute_getInflectionForm(t_InflectionAttribute *self);
            static PyObject *t_InflectionAttribute_getInflectionType(t_InflectionAttribute *self);
            static PyObject *t_InflectionAttribute_setToken(t_InflectionAttribute *self, PyObject *arg);
            static PyObject *t_InflectionAttribute_get__inflectionForm(t_InflectionAttribute *self, void *data);
            static PyObject *t_InflectionAttribute_get__inflectionType(t_InflectionAttribute *self, void *data);
            static int t_InflectionAttribute_set__token(t_InflectionAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_InflectionAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_InflectionAttribute, inflectionForm),
              DECLARE_GET_FIELD(t_InflectionAttribute, inflectionType),
              DECLARE_SET_FIELD(t_InflectionAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_InflectionAttribute__methods_[] = {
              DECLARE_METHOD(t_InflectionAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_InflectionAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_InflectionAttribute, getInflectionForm, METH_NOARGS),
              DECLARE_METHOD(t_InflectionAttribute, getInflectionType, METH_NOARGS),
              DECLARE_METHOD(t_InflectionAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(InflectionAttribute)[] = {
              { Py_tp_methods, t_InflectionAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_InflectionAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(InflectionAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(InflectionAttribute, t_InflectionAttribute, InflectionAttribute);

            void t_InflectionAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(InflectionAttribute), &PY_TYPE_DEF(InflectionAttribute), module, "InflectionAttribute", 0);
            }

            void t_InflectionAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttribute), "class_", make_descriptor(InflectionAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttribute), "wrapfn_", make_descriptor(t_InflectionAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_InflectionAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, InflectionAttribute::initializeClass, 1)))
                return NULL;
              return t_InflectionAttribute::wrap_Object(InflectionAttribute(((t_InflectionAttribute *) arg)->object.this$));
            }
            static PyObject *t_InflectionAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, InflectionAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_InflectionAttribute_getInflectionForm(t_InflectionAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getInflectionForm());
              return j2p(result);
            }

            static PyObject *t_InflectionAttribute_getInflectionType(t_InflectionAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getInflectionType());
              return j2p(result);
            }

            static PyObject *t_InflectionAttribute_setToken(t_InflectionAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_InflectionAttribute_get__inflectionForm(t_InflectionAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getInflectionForm());
              return j2p(value);
            }

            static PyObject *t_InflectionAttribute_get__inflectionType(t_InflectionAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getInflectionType());
              return j2p(value);
            }

            static int t_InflectionAttribute_set__token(t_InflectionAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Operations::class$ = NULL;
          jmethodID *Operations::mids$ = NULL;
          bool Operations::live$ = false;
          jint Operations::DEFAULT_MAX_DETERMINIZED_STATES = (jint) 0;
          jint Operations::MAX_RECURSION_LEVEL = (jint) 0;

          jclass Operations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Operations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_complement_a82baeed01cff8c3] = env->getStaticMethodID(cls, "complement", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_6df08bc8b8bf5592] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_c0071d75a98f29b0] = env->getStaticMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_a82baeed01cff8c3] = env->getStaticMethodID(cls, "determinize", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_getCommonPrefix_dc64cad5e3ec1fd5] = env->getStaticMethodID(cls, "getCommonPrefix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonPrefixBytesRef_998b4242d5342f61] = env->getStaticMethodID(cls, "getCommonPrefixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getCommonSuffixBytesRef_1371ea10d1341c75] = env->getStaticMethodID(cls, "getCommonSuffixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_329d4fa0808c72a6] = env->getStaticMethodID(cls, "getSingleton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_hasDeadStates_01864601f82e008f] = env->getStaticMethodID(cls, "hasDeadStates", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_hasDeadStatesFromInitial_01864601f82e008f] = env->getStaticMethodID(cls, "hasDeadStatesFromInitial", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_hasDeadStatesToAccept_01864601f82e008f] = env->getStaticMethodID(cls, "hasDeadStatesToAccept", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_intersection_c0071d75a98f29b0] = env->getStaticMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isEmpty_01864601f82e008f] = env->getStaticMethodID(cls, "isEmpty", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isFinite_01864601f82e008f] = env->getStaticMethodID(cls, "isFinite", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_01864601f82e008f] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_d6533b4c0ef48ed4] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;II)Z");
              mids$[mid_minus_153bc82cd9e9006c] = env->getStaticMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_cb3855ae955106b8] = env->getStaticMethodID(cls, "optional", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_removeDeadStates_cb3855ae955106b8] = env->getStaticMethodID(cls, "removeDeadStates", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_cb3855ae955106b8] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_a82baeed01cff8c3] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_5364e99d71d281d7] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_reverse_cb3855ae955106b8] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_run_d635451a20a4c132] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Z");
              mids$[mid_run_ee3c214514cf817f] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/IntsRef;)Z");
              mids$[mid_sameLanguage_1d1713e2417736ce] = env->getStaticMethodID(cls, "sameLanguage", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_subsetOf_1d1713e2417736ce] = env->getStaticMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_topoSortStates_3f0bac6f4f0a57c3] = env->getStaticMethodID(cls, "topoSortStates", "(Lorg/apache/lucene/util/automaton/Automaton;)[I");
              mids$[mid_union_1673d25b84e453fc] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_c0071d75a98f29b0] = env->getStaticMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_DETERMINIZED_STATES = env->getStaticIntField(cls, "DEFAULT_MAX_DETERMINIZED_STATES");
              MAX_RECURSION_LEVEL = env->getStaticIntField(cls, "MAX_RECURSION_LEVEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::complement(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_complement_a82baeed01cff8c3], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_6df08bc8b8bf5592], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::concatenate(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_c0071d75a98f29b0], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::determinize(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_determinize_a82baeed01cff8c3], a0.this$, a1));
          }

          ::java::lang::String Operations::getCommonPrefix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefix_dc64cad5e3ec1fd5], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef Operations::getCommonPrefixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefixBytesRef_998b4242d5342f61], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef Operations::getCommonSuffixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffixBytesRef_1371ea10d1341c75], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Operations::getSingleton(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_329d4fa0808c72a6], a0.this$));
          }

          jboolean Operations::hasDeadStates(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStates_01864601f82e008f], a0.this$);
          }

          jboolean Operations::hasDeadStatesFromInitial(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStatesFromInitial_01864601f82e008f], a0.this$);
          }

          jboolean Operations::hasDeadStatesToAccept(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_hasDeadStatesToAccept_01864601f82e008f], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::intersection(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_intersection_c0071d75a98f29b0], a0.this$, a1.this$));
          }

          jboolean Operations::isEmpty(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmpty_01864601f82e008f], a0.this$);
          }

          jboolean Operations::isFinite(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_01864601f82e008f], a0.this$);
          }

          jboolean Operations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_01864601f82e008f], a0.this$);
          }

          jboolean Operations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_d6533b4c0ef48ed4], a0.this$, a1, a2);
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::minus(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minus_153bc82cd9e9006c], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::optional(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_optional_cb3855ae955106b8], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::removeDeadStates(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_removeDeadStates_cb3855ae955106b8], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_cb3855ae955106b8], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_a82baeed01cff8c3], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_5364e99d71d281d7], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::reverse(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_reverse_cb3855ae955106b8], a0.this$));
          }

          jboolean Operations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_d635451a20a4c132], a0.this$, a1.this$);
          }

          jboolean Operations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_ee3c214514cf817f], a0.this$, a1.this$);
          }

          jboolean Operations::sameLanguage(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sameLanguage_1d1713e2417736ce], a0.this$, a1.this$);
          }

          jboolean Operations::subsetOf(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_subsetOf_1d1713e2417736ce], a0.this$, a1.this$);
          }

          JArray< jint > Operations::topoSortStates(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_topoSortStates_3f0bac6f4f0a57c3], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_1673d25b84e453fc], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton Operations::union$(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_c0071d75a98f29b0], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Operations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_complement(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_concatenate(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_determinize(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_getCommonPrefix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_getSingleton(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_hasDeadStates(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_hasDeadStatesFromInitial(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_hasDeadStatesToAccept(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_intersection(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_isEmpty(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_isFinite(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_isTotal(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_minus(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_optional(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_removeDeadStates(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_repeat(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_reverse(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_run(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_sameLanguage(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_subsetOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Operations_topoSortStates(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Operations_union(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Operations__methods_[] = {
            DECLARE_METHOD(t_Operations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, complement, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, concatenate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, determinize, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonPrefix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonPrefixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, getCommonSuffixBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, getSingleton, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStates, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStatesFromInitial, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, hasDeadStatesToAccept, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, intersection, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, isEmpty, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, isFinite, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, isTotal, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, minus, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, optional, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, removeDeadStates, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, repeat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, reverse, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, run, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, sameLanguage, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, subsetOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Operations, topoSortStates, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Operations, union, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Operations)[] = {
            { Py_tp_methods, t_Operations__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Operations)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Operations, t_Operations, Operations);

          void t_Operations::install(PyObject *module)
          {
            installType(&PY_TYPE(Operations), &PY_TYPE_DEF(Operations), module, "Operations", 0);
          }

          void t_Operations::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Operations), "class_", make_descriptor(Operations::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Operations), "wrapfn_", make_descriptor(t_Operations::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Operations), "boxfn_", make_descriptor(boxObject));
            env->getClass(Operations::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Operations), "DEFAULT_MAX_DETERMINIZED_STATES", make_descriptor(Operations::DEFAULT_MAX_DETERMINIZED_STATES));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Operations), "MAX_RECURSION_LEVEL", make_descriptor(Operations::MAX_RECURSION_LEVEL));
          }

          static PyObject *t_Operations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Operations::initializeClass, 1)))
              return NULL;
            return t_Operations::wrap_Object(Operations(((t_Operations *) arg)->object.this$));
          }
          static PyObject *t_Operations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Operations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Operations_complement(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::complement(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "complement", args);
            return NULL;
          }

          static PyObject *t_Operations_concatenate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::concatenate(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::concatenate(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "concatenate", args);
            return NULL;
          }

          static PyObject *t_Operations_determinize(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::determinize(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "determinize", args);
            return NULL;
          }

          static PyObject *t_Operations_getCommonPrefix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonPrefix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefix", arg);
            return NULL;
          }

          static PyObject *t_Operations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonPrefixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_Operations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getCommonSuffixBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffixBytesRef", args);
            return NULL;
          }

          static PyObject *t_Operations_getSingleton(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::getSingleton(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSingleton", arg);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStates(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStates(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStates", arg);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStatesFromInitial(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStatesFromInitial(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStatesFromInitial", arg);
            return NULL;
          }

          static PyObject *t_Operations_hasDeadStatesToAccept(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::hasDeadStatesToAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "hasDeadStatesToAccept", arg);
            return NULL;
          }

          static PyObject *t_Operations_intersection(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::intersection(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intersection", args);
            return NULL;
          }

          static PyObject *t_Operations_isEmpty(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isEmpty(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmpty", arg);
            return NULL;
          }

          static PyObject *t_Operations_isFinite(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isFinite(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isFinite", arg);
            return NULL;
          }

          static PyObject *t_Operations_isTotal(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isTotal(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::isTotal(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "isTotal", args);
            return NULL;
          }

          static PyObject *t_Operations_minus(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::minus(a0, a1, a2));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minus", args);
            return NULL;
          }

          static PyObject *t_Operations_optional(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::optional(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "optional", arg);
            return NULL;
          }

          static PyObject *t_Operations_removeDeadStates(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::removeDeadStates(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "removeDeadStates", arg);
            return NULL;
          }

          static PyObject *t_Operations_repeat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::repeat(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "repeat", args);
            return NULL;
          }

          static PyObject *t_Operations_reverse(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::reverse(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
          }

          static PyObject *t_Operations_run(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::run(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::run(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "run", args);
            return NULL;
          }

          static PyObject *t_Operations_sameLanguage(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::sameLanguage(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sameLanguage", args);
            return NULL;
          }

          static PyObject *t_Operations_subsetOf(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::subsetOf(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "subsetOf", args);
            return NULL;
          }

          static PyObject *t_Operations_topoSortStates(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            JArray< jint > result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::topoSortStates(a0));
              return result.wrap();
            }

            PyErr_SetArgsError(type, "topoSortStates", arg);
            return NULL;
          }

          static PyObject *t_Operations_union(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::union$(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::Operations::union$(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "union", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTStore.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTStore::class$ = NULL;
          jmethodID *FSTStore::mids$ = NULL;
          bool FSTStore::live$ = false;

          jclass FSTStore::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTStore");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getReverseBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getReverseBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_init_4833aa1d1f4cf120] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_writeTo_ead2c38342037c59] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FSTStore::getReverseBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getReverseBytesReader_79a0688c6e123a32]));
          }

          void FSTStore::init(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_4833aa1d1f4cf120], a0.this$, a1);
          }

          jlong FSTStore::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          void FSTStore::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_writeTo_ead2c38342037c59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTStore_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTStore_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTStore_getReverseBytesReader(t_FSTStore *self);
          static PyObject *t_FSTStore_init(t_FSTStore *self, PyObject *args);
          static PyObject *t_FSTStore_size(t_FSTStore *self);
          static PyObject *t_FSTStore_writeTo(t_FSTStore *self, PyObject *arg);
          static PyObject *t_FSTStore_get__reverseBytesReader(t_FSTStore *self, void *data);
          static PyGetSetDef t_FSTStore__fields_[] = {
            DECLARE_GET_FIELD(t_FSTStore, reverseBytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTStore__methods_[] = {
            DECLARE_METHOD(t_FSTStore, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTStore, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTStore, getReverseBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FSTStore, init, METH_VARARGS),
            DECLARE_METHOD(t_FSTStore, size, METH_NOARGS),
            DECLARE_METHOD(t_FSTStore, writeTo, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTStore)[] = {
            { Py_tp_methods, t_FSTStore__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FSTStore__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTStore)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Accountable),
            NULL
          };

          DEFINE_TYPE(FSTStore, t_FSTStore, FSTStore);

          void t_FSTStore::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTStore), &PY_TYPE_DEF(FSTStore), module, "FSTStore", 0);
          }

          void t_FSTStore::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTStore), "class_", make_descriptor(FSTStore::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTStore), "wrapfn_", make_descriptor(t_FSTStore::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTStore), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTStore_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTStore::initializeClass, 1)))
              return NULL;
            return t_FSTStore::wrap_Object(FSTStore(((t_FSTStore *) arg)->object.this$));
          }
          static PyObject *t_FSTStore_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTStore::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTStore_getReverseBytesReader(t_FSTStore *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FSTStore_init(t_FSTStore *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_FSTStore_size(t_FSTStore *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FSTStore_writeTo(t_FSTStore *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.writeTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeTo", arg);
            return NULL;
          }

          static PyObject *t_FSTStore_get__reverseBytesReader(t_FSTStore *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReverseBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseDistanceShape.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/GeoDistanceShape.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseDistanceShape::class$ = NULL;
          jmethodID *GeoBaseDistanceShape::mids$ = NULL;
          bool GeoBaseDistanceShape::live$ = false;

          jclass GeoBaseDistanceShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseDistanceShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_computeDeltaDistance_d330d2576549fa67] = env->getMethodID(cls, "computeDeltaDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDeltaDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeDeltaDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_computeDistance_d330d2576549fa67] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_getDistanceBounds_24291086d3fa4f8c] = env->getMethodID(cls, "getDistanceBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;Lorg/apache/lucene/spatial3d/geom/DistanceStyle;D)V");
              mids$[mid_isWithin_ac70289ee56608c0] = env->getMethodID(cls, "isWithin", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_distance_2b407c8141eb9589] = env->getMethodID(cls, "distance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_deltaDistance_2b407c8141eb9589] = env->getMethodID(cls, "deltaDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_distanceBounds_24291086d3fa4f8c] = env->getMethodID(cls, "distanceBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;Lorg/apache/lucene/spatial3d/geom/DistanceStyle;D)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseDistanceShape::GeoBaseDistanceShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          jdouble GeoBaseDistanceShape::computeDeltaDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDeltaDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoBaseDistanceShape::computeDeltaDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDeltaDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }

          jdouble GeoBaseDistanceShape::computeDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoBaseDistanceShape::computeDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }

          void GeoBaseDistanceShape::getDistanceBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0, const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a1, jdouble a2) const
          {
            env->callVoidMethod(this$, mids$[mid_getDistanceBounds_24291086d3fa4f8c], a0.this$, a1.this$, a2);
          }

          jboolean GeoBaseDistanceShape::isWithin(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_ac70289ee56608c0], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseDistanceShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseDistanceShape_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoBaseDistanceShape_init_(t_GeoBaseDistanceShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseDistanceShape_computeDeltaDistance(t_GeoBaseDistanceShape *self, PyObject *args);
          static PyObject *t_GeoBaseDistanceShape_computeDistance(t_GeoBaseDistanceShape *self, PyObject *args);
          static PyObject *t_GeoBaseDistanceShape_getDistanceBounds(t_GeoBaseDistanceShape *self, PyObject *args);
          static PyObject *t_GeoBaseDistanceShape_isWithin(t_GeoBaseDistanceShape *self, PyObject *args);

          static PyMethodDef t_GeoBaseDistanceShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseDistanceShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseDistanceShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseDistanceShape, computeDeltaDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseDistanceShape, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseDistanceShape, getDistanceBounds, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseDistanceShape, isWithin, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseDistanceShape)[] = {
            { Py_tp_methods, t_GeoBaseDistanceShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseDistanceShape_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseDistanceShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseDistanceShape, t_GeoBaseDistanceShape, GeoBaseDistanceShape);

          void t_GeoBaseDistanceShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseDistanceShape), &PY_TYPE_DEF(GeoBaseDistanceShape), module, "GeoBaseDistanceShape", 0);
          }

          void t_GeoBaseDistanceShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseDistanceShape), "class_", make_descriptor(GeoBaseDistanceShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseDistanceShape), "wrapfn_", make_descriptor(t_GeoBaseDistanceShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseDistanceShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseDistanceShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseDistanceShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseDistanceShape::wrap_Object(GeoBaseDistanceShape(((t_GeoBaseDistanceShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseDistanceShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseDistanceShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoBaseDistanceShape_init_(t_GeoBaseDistanceShape *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            GeoBaseDistanceShape object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = GeoBaseDistanceShape(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseDistanceShape_computeDeltaDistance(t_GeoBaseDistanceShape *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDeltaDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDeltaDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDeltaDistance", args);
            return NULL;
          }

          static PyObject *t_GeoBaseDistanceShape_computeDistance(t_GeoBaseDistanceShape *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_GeoBaseDistanceShape_getDistanceBounds(t_GeoBaseDistanceShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::DistanceStyle a1((jobject) NULL);
            jdouble a2;

            if (!parseArgs(args, "kkD", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.getDistanceBounds(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getDistanceBounds", args);
            return NULL;
          }

          static PyObject *t_GeoBaseDistanceShape_isWithin(t_GeoBaseDistanceShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isWithin(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoBaseDistanceShape), (PyObject *) self, "isWithin", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsFormat::class$ = NULL;
        jmethodID *TermVectorsFormat::mids$ = NULL;
        bool TermVectorsFormat::live$ = false;

        jclass TermVectorsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_vectorsReader_e8da19a02e97f6f0] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_vectorsWriter_0dc3e01ac1525114] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermVectorsReader TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_e8da19a02e97f6f0], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::TermVectorsWriter TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0dc3e01ac1525114], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args);
        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args);

        static PyMethodDef t_TermVectorsFormat__methods_[] = {
          DECLARE_METHOD(t_TermVectorsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermVectorsFormat)[] = {
          { Py_tp_methods, t_TermVectorsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermVectorsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermVectorsFormat, t_TermVectorsFormat, TermVectorsFormat);

        void t_TermVectorsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsFormat), &PY_TYPE_DEF(TermVectorsFormat), module, "TermVectorsFormat", 0);
        }

        void t_TermVectorsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsFormat), "class_", make_descriptor(TermVectorsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsFormat), "wrapfn_", make_descriptor(t_TermVectorsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsFormat::initializeClass, 1)))
            return NULL;
          return t_TermVectorsFormat::wrap_Object(TermVectorsFormat(((t_TermVectorsFormat *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsReader", args);
          return NULL;
        }

        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryTreeBuilder::class$ = NULL;
              jmethodID *QueryTreeBuilder::mids$ = NULL;
              bool QueryTreeBuilder::live$ = false;
              ::java::lang::String *QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID = NULL;

              jclass QueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_c3c85cfa8727a936] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");
                  mids$[mid_setBuilder_9750f5ee54cb823e] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/Class;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                  mids$[mid_setBuilder_632ffe435a5760c7] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  QUERY_TREE_BUILDER_TAGID = new ::java::lang::String(env->getStaticObjectField(cls, "QUERY_TREE_BUILDER_TAGID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryTreeBuilder::QueryTreeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::java::lang::Object QueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_c3c85cfa8727a936], a0.this$));
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::Class & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_9750f5ee54cb823e], a0.this$, a1.this$);
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_632ffe435a5760c7], a0.this$, a1.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_QueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, build, METH_O),
                DECLARE_METHOD(t_QueryTreeBuilder, setBuilder, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryTreeBuilder)[] = {
                { Py_tp_methods, t_QueryTreeBuilder__methods_ },
                { Py_tp_init, (void *) t_QueryTreeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryTreeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryTreeBuilder, t_QueryTreeBuilder, QueryTreeBuilder);

              void t_QueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryTreeBuilder), &PY_TYPE_DEF(QueryTreeBuilder), module, "QueryTreeBuilder", 0);
              }

              void t_QueryTreeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTreeBuilder), "class_", make_descriptor(QueryTreeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTreeBuilder), "wrapfn_", make_descriptor(t_QueryTreeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTreeBuilder), "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryTreeBuilder::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTreeBuilder), "QUERY_TREE_BUILDER_TAGID", make_descriptor(j2p(*QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID)));
              }

              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryTreeBuilder::wrap_Object(QueryTreeBuilder(((t_QueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                QueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = QueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }

              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 2:
                  {
                    ::java::lang::Class a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Ok", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "setBuilder", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseStemFilterFactory::mids$ = NULL;
          bool PortugueseStemFilterFactory::live$ = false;
          ::java::lang::String *PortugueseStemFilterFactory::NAME = NULL;

          jclass PortugueseStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilterFactory::PortugueseStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseStemFilterFactory)[] = {
            { Py_tp_methods, t_PortugueseStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PortugueseStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PortugueseStemFilterFactory, t_PortugueseStemFilterFactory, PortugueseStemFilterFactory);

          void t_PortugueseStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilterFactory), &PY_TYPE_DEF(PortugueseStemFilterFactory), module, "PortugueseStemFilterFactory", 0);
          }

          void t_PortugueseStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilterFactory), "class_", make_descriptor(PortugueseStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilterFactory), "wrapfn_", make_descriptor(t_PortugueseStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilterFactory), "NAME", make_descriptor(j2p(*PortugueseStemFilterFactory::NAME)));
          }

          static PyObject *t_PortugueseStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilterFactory::wrap_Object(PortugueseStemFilterFactory(((t_PortugueseStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilterFactory_init_(t_PortugueseStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilterFactory_create(t_PortugueseStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PortugueseStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
